!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=339)}([function(e,t,n){"use strict";e.exports=n(245)},function(e,t,n){(function(e){e.exports=function(){"use strict";var t,r;function a(){return t.apply(null,arguments)}function o(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function i(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function s(e){return void 0===e}function u(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function l(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function d(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function c(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function f(e,t){for(var n in t)c(t,n)&&(e[n]=t[n]);return c(t,"toString")&&(e.toString=t.toString),c(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,n,r){return Ot(e,t,n,r,!0).utc()}function _(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function m(e){if(null==e._isValid){var t=_(e),n=r.call(t.parsedDateParts,function(e){return null!=e}),a=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return a;e._isValid=a}return e._isValid}function p(e){var t=h(NaN);return null!=e?f(_(t),e):_(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,r=0;r<n;r++)if(r in t&&e.call(this,t[r],r,t))return!0;return!1};var y=a.momentProperties=[];function v(e,t){var n,r,a;if(s(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),s(t._i)||(e._i=t._i),s(t._f)||(e._f=t._f),s(t._l)||(e._l=t._l),s(t._strict)||(e._strict=t._strict),s(t._tzm)||(e._tzm=t._tzm),s(t._isUTC)||(e._isUTC=t._isUTC),s(t._offset)||(e._offset=t._offset),s(t._pf)||(e._pf=_(t)),s(t._locale)||(e._locale=t._locale),y.length>0)for(n=0;n<y.length;n++)s(a=t[r=y[n]])||(e[r]=a);return e}var b=!1;function g(e){v(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===b&&(b=!0,a.updateOffset(this),b=!1)}function M(e){return e instanceof g||null!=e&&null!=e._isAMomentObject}function k(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function D(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=k(t)),n}function L(e,t,n){var r,a=Math.min(e.length,t.length),o=Math.abs(e.length-t.length),i=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&D(e[r])!==D(t[r]))&&i++;return i+o}function w(e){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function T(e,t){var n=!0;return f(function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,e),n){for(var r,o=[],i=0;i<arguments.length;i++){if(r="","object"==typeof arguments[i]){for(var s in r+="\n["+i+"] ",arguments[0])r+=s+": "+arguments[0][s]+", ";r=r.slice(0,-2)}else r=arguments[i];o.push(r)}w(e+"\nArguments: "+Array.prototype.slice.call(o).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)},t)}var S,Y={};function P(e,t){null!=a.deprecationHandler&&a.deprecationHandler(e,t),Y[e]||(w(t),Y[e]=!0)}function O(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function E(e,t){var n,r=f({},e);for(n in t)c(t,n)&&(i(e[n])&&i(t[n])?(r[n]={},f(r[n],e[n]),f(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)c(e,n)&&!c(t,n)&&i(e[n])&&(r[n]=f({},r[n]));return r}function x(e){null!=e&&this.set(e)}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,S=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)c(e,t)&&n.push(t);return n};var C={};function j(e,t){var n=e.toLowerCase();C[n]=C[n+"s"]=C[t]=e}function H(e){return"string"==typeof e?C[e]||C[e.toLowerCase()]:void 0}function I(e){var t,n,r={};for(n in e)c(e,n)&&(t=H(n))&&(r[t]=e[n]);return r}var A={};function F(e,t){A[e]=t}function R(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var N=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,W=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,z={},B={};function U(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(B[e]=a),t&&(B[t[0]]=function(){return R(a.apply(this,arguments),t[1],t[2])}),n&&(B[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function K(e,t){return e.isValid()?(t=V(t,e.localeData()),z[t]=z[t]||function(e){var t,n,r,a=e.match(N);for(t=0,n=a.length;t<n;t++)B[a[t]]?a[t]=B[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,o="";for(r=0;r<n;r++)o+=O(a[r])?a[r].call(t,e):a[r];return o}}(t),z[t](e)):e.localeData().invalidDate()}function V(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(W.lastIndex=0;n>=0&&W.test(e);)e=e.replace(W,r),W.lastIndex=0,n-=1;return e}var $=/\d/,G=/\d\d/,J=/\d{3}/,q=/\d{4}/,Q=/[+-]?\d{6}/,Z=/\d\d?/,X=/\d\d\d\d?/,ee=/\d\d\d\d\d\d?/,te=/\d{1,3}/,ne=/\d{1,4}/,re=/[+-]?\d{1,6}/,ae=/\d+/,oe=/[+-]?\d+/,ie=/Z|[+-]\d\d:?\d\d/gi,se=/Z|[+-]\d\d(?::?\d\d)?/gi,ue=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,le={};function de(e,t,n){le[e]=O(t)?t:function(e,r){return e&&n?n:t}}function ce(e,t){return c(le,e)?le[e](t._strict,t._locale):new RegExp(fe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,r,a){return t||n||r||a})))}function fe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var he={};function _e(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),u(t)&&(r=function(e,n){n[t]=D(e)}),n=0;n<e.length;n++)he[e[n]]=r}function me(e,t){_e(e,function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)})}function pe(e,t,n){null!=t&&c(he,e)&&he[e](t,n._a,n,e)}var ye=0,ve=1,be=2,ge=3,Me=4,ke=5,De=6,Le=7,we=8;function Te(e){return Se(e)?366:365}function Se(e){return e%4==0&&e%100!=0||e%400==0}U("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),U(0,["YY",2],0,function(){return this.year()%100}),U(0,["YYYY",4],0,"year"),U(0,["YYYYY",5],0,"year"),U(0,["YYYYYY",6,!0],0,"year"),j("year","y"),F("year",1),de("Y",oe),de("YY",Z,G),de("YYYY",ne,q),de("YYYYY",re,Q),de("YYYYYY",re,Q),_e(["YYYYY","YYYYYY"],ye),_e("YYYY",function(e,t){t[ye]=2===e.length?a.parseTwoDigitYear(e):D(e)}),_e("YY",function(e,t){t[ye]=a.parseTwoDigitYear(e)}),_e("Y",function(e,t){t[ye]=parseInt(e,10)}),a.parseTwoDigitYear=function(e){return D(e)+(D(e)>68?1900:2e3)};var Ye,Pe=Oe("FullYear",!0);function Oe(e,t){return function(n){return null!=n?(xe(this,e,n),a.updateOffset(this,t),this):Ee(this,e)}}function Ee(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function xe(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&Se(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Ce(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function Ce(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?Se(e)?29:28:31-r%7%2}Ye=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},U("M",["MM",2],"Mo",function(){return this.month()+1}),U("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),U("MMMM",0,0,function(e){return this.localeData().months(this,e)}),j("month","M"),F("month",8),de("M",Z),de("MM",Z,G),de("MMM",function(e,t){return t.monthsShortRegex(e)}),de("MMMM",function(e,t){return t.monthsRegex(e)}),_e(["M","MM"],function(e,t){t[ve]=D(e)-1}),_e(["MMM","MMMM"],function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[ve]=a:_(n).invalidMonth=e});var je=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,He="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Ie="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Ae(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=D(t);else if(!u(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),Ce(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Fe(e){return null!=e?(Ae(this,e),a.updateOffset(this,!0),this):Ee(this,"Month")}var Re=ue,Ne=ue;function We(){function e(e,t){return t.length-e.length}var t,n,r=[],a=[],o=[];for(t=0;t<12;t++)n=h([2e3,t]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),o.push(this.months(n,"")),o.push(this.monthsShort(n,""));for(r.sort(e),a.sort(e),o.sort(e),t=0;t<12;t++)r[t]=fe(r[t]),a[t]=fe(a[t]);for(t=0;t<24;t++)o[t]=fe(o[t]);this._monthsRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function ze(e){var t;if(e<100&&e>=0){var n=Array.prototype.slice.call(arguments);n[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)}else t=new Date(Date.UTC.apply(null,arguments));return t}function Be(e,t,n){var r=7+t-n;return-(7+ze(e,0,r).getUTCDay()-t)%7+r-1}function Ue(e,t,n,r,a){var o,i,s=1+7*(t-1)+(7+n-r)%7+Be(e,r,a);return s<=0?i=Te(o=e-1)+s:s>Te(e)?(o=e+1,i=s-Te(e)):(o=e,i=s),{year:o,dayOfYear:i}}function Ke(e,t,n){var r,a,o=Be(e.year(),t,n),i=Math.floor((e.dayOfYear()-o-1)/7)+1;return i<1?r=i+Ve(a=e.year()-1,t,n):i>Ve(e.year(),t,n)?(r=i-Ve(e.year(),t,n),a=e.year()+1):(a=e.year(),r=i),{week:r,year:a}}function Ve(e,t,n){var r=Be(e,t,n),a=Be(e+1,t,n);return(Te(e)-r+a)/7}function $e(e,t){return e.slice(t,7).concat(e.slice(0,t))}U("w",["ww",2],"wo","week"),U("W",["WW",2],"Wo","isoWeek"),j("week","w"),j("isoWeek","W"),F("week",5),F("isoWeek",5),de("w",Z),de("ww",Z,G),de("W",Z),de("WW",Z,G),me(["w","ww","W","WW"],function(e,t,n,r){t[r.substr(0,1)]=D(e)}),U("d",0,"do","day"),U("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),U("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),U("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),U("e",0,0,"weekday"),U("E",0,0,"isoWeekday"),j("day","d"),j("weekday","e"),j("isoWeekday","E"),F("day",11),F("weekday",11),F("isoWeekday",11),de("d",Z),de("e",Z),de("E",Z),de("dd",function(e,t){return t.weekdaysMinRegex(e)}),de("ddd",function(e,t){return t.weekdaysShortRegex(e)}),de("dddd",function(e,t){return t.weekdaysRegex(e)}),me(["dd","ddd","dddd"],function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:_(n).invalidWeekday=e}),me(["d","e","E"],function(e,t,n,r){t[r]=D(e)});var Ge="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Je="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),qe="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Qe=ue,Ze=ue,Xe=ue;function et(){function e(e,t){return t.length-e.length}var t,n,r,a,o,i=[],s=[],u=[],l=[];for(t=0;t<7;t++)n=h([2e3,1]).day(t),r=this.weekdaysMin(n,""),a=this.weekdaysShort(n,""),o=this.weekdays(n,""),i.push(r),s.push(a),u.push(o),l.push(r),l.push(a),l.push(o);for(i.sort(e),s.sort(e),u.sort(e),l.sort(e),t=0;t<7;t++)s[t]=fe(s[t]),u[t]=fe(u[t]),l[t]=fe(l[t]);this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+i.join("|")+")","i")}function tt(){return this.hours()%12||12}function nt(e,t){U(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function rt(e,t){return t._meridiemParse}U("H",["HH",2],0,"hour"),U("h",["hh",2],0,tt),U("k",["kk",2],0,function(){return this.hours()||24}),U("hmm",0,0,function(){return""+tt.apply(this)+R(this.minutes(),2)}),U("hmmss",0,0,function(){return""+tt.apply(this)+R(this.minutes(),2)+R(this.seconds(),2)}),U("Hmm",0,0,function(){return""+this.hours()+R(this.minutes(),2)}),U("Hmmss",0,0,function(){return""+this.hours()+R(this.minutes(),2)+R(this.seconds(),2)}),nt("a",!0),nt("A",!1),j("hour","h"),F("hour",13),de("a",rt),de("A",rt),de("H",Z),de("h",Z),de("k",Z),de("HH",Z,G),de("hh",Z,G),de("kk",Z,G),de("hmm",X),de("hmmss",ee),de("Hmm",X),de("Hmmss",ee),_e(["H","HH"],ge),_e(["k","kk"],function(e,t,n){var r=D(e);t[ge]=24===r?0:r}),_e(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),_e(["h","hh"],function(e,t,n){t[ge]=D(e),_(n).bigHour=!0}),_e("hmm",function(e,t,n){var r=e.length-2;t[ge]=D(e.substr(0,r)),t[Me]=D(e.substr(r)),_(n).bigHour=!0}),_e("hmmss",function(e,t,n){var r=e.length-4,a=e.length-2;t[ge]=D(e.substr(0,r)),t[Me]=D(e.substr(r,2)),t[ke]=D(e.substr(a)),_(n).bigHour=!0}),_e("Hmm",function(e,t,n){var r=e.length-2;t[ge]=D(e.substr(0,r)),t[Me]=D(e.substr(r))}),_e("Hmmss",function(e,t,n){var r=e.length-4,a=e.length-2;t[ge]=D(e.substr(0,r)),t[Me]=D(e.substr(r,2)),t[ke]=D(e.substr(a))});var at,ot=Oe("Hours",!0),it={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:He,monthsShort:Ie,week:{dow:0,doy:6},weekdays:Ge,weekdaysMin:qe,weekdaysShort:Je,meridiemParse:/[ap]\.?m?\.?/i},st={},ut={};function lt(e){return e?e.toLowerCase().replace("_","-"):e}function dt(t){var r=null;if(!st[t]&&void 0!==e&&e&&e.exports)try{r=at._abbr,n(255)("./"+t),ct(r)}catch(e){}return st[t]}function ct(e,t){var n;return e&&((n=s(t)?ht(e):ft(e,t))?at=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),at._abbr}function ft(e,t){if(null!==t){var n,r=it;if(t.abbr=e,null!=st[e])P("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=st[e]._config;else if(null!=t.parentLocale)if(null!=st[t.parentLocale])r=st[t.parentLocale]._config;else{if(null==(n=dt(t.parentLocale)))return ut[t.parentLocale]||(ut[t.parentLocale]=[]),ut[t.parentLocale].push({name:e,config:t}),null;r=n._config}return st[e]=new x(E(r,t)),ut[e]&&ut[e].forEach(function(e){ft(e.name,e.config)}),ct(e),st[e]}return delete st[e],null}function ht(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return at;if(!o(e)){if(t=dt(e))return t;e=[e]}return function(e){for(var t,n,r,a,o=0;o<e.length;){for(t=(a=lt(e[o]).split("-")).length,n=(n=lt(e[o+1]))?n.split("-"):null;t>0;){if(r=dt(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&L(a,n,!0)>=t-1)break;t--}o++}return at}(e)}function _t(e){var t,n=e._a;return n&&-2===_(e).overflow&&(t=n[ve]<0||n[ve]>11?ve:n[be]<1||n[be]>Ce(n[ye],n[ve])?be:n[ge]<0||n[ge]>24||24===n[ge]&&(0!==n[Me]||0!==n[ke]||0!==n[De])?ge:n[Me]<0||n[Me]>59?Me:n[ke]<0||n[ke]>59?ke:n[De]<0||n[De]>999?De:-1,_(e)._overflowDayOfYear&&(t<ye||t>be)&&(t=be),_(e)._overflowWeeks&&-1===t&&(t=Le),_(e)._overflowWeekday&&-1===t&&(t=we),_(e).overflow=t),e}function mt(e,t,n){return null!=e?e:null!=t?t:n}function pt(e){var t,n,r,o,i,s=[];if(!e._d){for(r=function(e){var t=new Date(a.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[be]&&null==e._a[ve]&&function(e){var t,n,r,a,o,i,s,u;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)o=1,i=4,n=mt(t.GG,e._a[ye],Ke(Et(),1,4).year),r=mt(t.W,1),((a=mt(t.E,1))<1||a>7)&&(u=!0);else{o=e._locale._week.dow,i=e._locale._week.doy;var l=Ke(Et(),o,i);n=mt(t.gg,e._a[ye],l.year),r=mt(t.w,l.week),null!=t.d?((a=t.d)<0||a>6)&&(u=!0):null!=t.e?(a=t.e+o,(t.e<0||t.e>6)&&(u=!0)):a=o}r<1||r>Ve(n,o,i)?_(e)._overflowWeeks=!0:null!=u?_(e)._overflowWeekday=!0:(s=Ue(n,r,a,o,i),e._a[ye]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(i=mt(e._a[ye],r[ye]),(e._dayOfYear>Te(i)||0===e._dayOfYear)&&(_(e)._overflowDayOfYear=!0),n=ze(i,0,e._dayOfYear),e._a[ve]=n.getUTCMonth(),e._a[be]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=r[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[ge]&&0===e._a[Me]&&0===e._a[ke]&&0===e._a[De]&&(e._nextDay=!0,e._a[ge]=0),e._d=(e._useUTC?ze:function(e,t,n,r,a,o,i){var s;return e<100&&e>=0?(s=new Date(e+400,t,n,r,a,o,i),isFinite(s.getFullYear())&&s.setFullYear(e)):s=new Date(e,t,n,r,a,o,i),s}).apply(null,s),o=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[ge]=24),e._w&&void 0!==e._w.d&&e._w.d!==o&&(_(e).weekdayMismatch=!0)}}var yt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,vt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,bt=/Z|[+-]\d\d(?::?\d\d)?/,gt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Mt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],kt=/^\/?Date\((\-?\d+)/i;function Dt(e){var t,n,r,a,o,i,s=e._i,u=yt.exec(s)||vt.exec(s);if(u){for(_(e).iso=!0,t=0,n=gt.length;t<n;t++)if(gt[t][1].exec(u[1])){a=gt[t][0],r=!1!==gt[t][2];break}if(null==a)return void(e._isValid=!1);if(u[3]){for(t=0,n=Mt.length;t<n;t++)if(Mt[t][1].exec(u[3])){o=(u[2]||" ")+Mt[t][0];break}if(null==o)return void(e._isValid=!1)}if(!r&&null!=o)return void(e._isValid=!1);if(u[4]){if(!bt.exec(u[4]))return void(e._isValid=!1);i="Z"}e._f=a+(o||"")+(i||""),Yt(e)}else e._isValid=!1}var Lt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function wt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}var Tt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function St(e){var t,n,r,a,o,i,s,u=Lt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(u){var l=(t=u[4],n=u[3],r=u[2],a=u[5],o=u[6],i=u[7],s=[wt(t),Ie.indexOf(n),parseInt(r,10),parseInt(a,10),parseInt(o,10)],i&&s.push(parseInt(i,10)),s);if(!function(e,t,n){return!e||Je.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(_(n).weekdayMismatch=!0,n._isValid=!1,!1)}(u[1],l,e))return;e._a=l,e._tzm=function(e,t,n){if(e)return Tt[e];if(t)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(u[8],u[9],u[10]),e._d=ze.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),_(e).rfc2822=!0}else e._isValid=!1}function Yt(e){if(e._f!==a.ISO_8601)if(e._f!==a.RFC_2822){e._a=[],_(e).empty=!0;var t,n,r,o,i,s=""+e._i,u=s.length,l=0;for(r=V(e._f,e._locale).match(N)||[],t=0;t<r.length;t++)o=r[t],(n=(s.match(ce(o,e))||[])[0])&&((i=s.substr(0,s.indexOf(n))).length>0&&_(e).unusedInput.push(i),s=s.slice(s.indexOf(n)+n.length),l+=n.length),B[o]?(n?_(e).empty=!1:_(e).unusedTokens.push(o),pe(o,n,e)):e._strict&&!n&&_(e).unusedTokens.push(o);_(e).charsLeftOver=u-l,s.length>0&&_(e).unusedInput.push(s),e._a[ge]<=12&&!0===_(e).bigHour&&e._a[ge]>0&&(_(e).bigHour=void 0),_(e).parsedDateParts=e._a.slice(0),_(e).meridiem=e._meridiem,e._a[ge]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[ge],e._meridiem),pt(e),_t(e)}else St(e);else Dt(e)}function Pt(e){var t=e._i,n=e._f;return e._locale=e._locale||ht(e._l),null===t||void 0===n&&""===t?p({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),M(t)?new g(_t(t)):(l(t)?e._d=t:o(n)?function(e){var t,n,r,a,o;if(0===e._f.length)return _(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<e._f.length;a++)o=0,t=v({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],Yt(t),m(t)&&(o+=_(t).charsLeftOver,o+=10*_(t).unusedTokens.length,_(t).score=o,(null==r||o<r)&&(r=o,n=t));f(e,n||t)}(e):n?Yt(e):function(e){var t=e._i;s(t)?e._d=new Date(a.now()):l(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=kt.exec(e._i);null===t?(Dt(e),!1===e._isValid&&(delete e._isValid,St(e),!1===e._isValid&&(delete e._isValid,a.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):o(t)?(e._a=d(t.slice(0),function(e){return parseInt(e,10)}),pt(e)):i(t)?function(e){if(!e._d){var t=I(e._i);e._a=d([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),pt(e)}}(e):u(t)?e._d=new Date(t):a.createFromInputFallback(e)}(e),m(e)||(e._d=null),e))}function Ot(e,t,n,r,a){var s,u={};return!0!==n&&!1!==n||(r=n,n=void 0),(i(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||o(e)&&0===e.length)&&(e=void 0),u._isAMomentObject=!0,u._useUTC=u._isUTC=a,u._l=n,u._i=e,u._f=t,u._strict=r,(s=new g(_t(Pt(u))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Et(e,t,n,r){return Ot(e,t,n,r,!1)}a.createFromInputFallback=T("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),a.ISO_8601=function(){},a.RFC_2822=function(){};var xt=T("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Et.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:p()}),Ct=T("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Et.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:p()});function jt(e,t){var n,r;if(1===t.length&&o(t[0])&&(t=t[0]),!t.length)return Et();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Ht=["year","quarter","month","week","day","hour","minute","second","millisecond"];function It(e){var t=I(e),n=t.year||0,r=t.quarter||0,a=t.month||0,o=t.week||t.isoWeek||0,i=t.day||0,s=t.hour||0,u=t.minute||0,l=t.second||0,d=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Ye.call(Ht,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,r=0;r<Ht.length;++r)if(e[Ht[r]]){if(n)return!1;parseFloat(e[Ht[r]])!==D(e[Ht[r]])&&(n=!0)}return!0}(t),this._milliseconds=+d+1e3*l+6e4*u+1e3*s*60*60,this._days=+i+7*o,this._months=+a+3*r+12*n,this._data={},this._locale=ht(),this._bubble()}function At(e){return e instanceof It}function Ft(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Rt(e,t){U(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+R(~~(e/60),2)+t+R(~~e%60,2)})}Rt("Z",":"),Rt("ZZ",""),de("Z",se),de("ZZ",se),_e(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Wt(se,e)});var Nt=/([\+\-]|\d\d)/gi;function Wt(e,t){var n=(t||"").match(e);if(null===n)return null;var r=((n[n.length-1]||[])+"").match(Nt)||["-",0,0],a=60*r[1]+D(r[2]);return 0===a?0:"+"===r[0]?a:-a}function zt(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(M(e)||l(e)?e.valueOf():Et(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):Et(e).local()}function Bt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Ut(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var Kt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Vt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function $t(e,t){var n,r,a,o,i,s,l=e,d=null;return At(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:u(e)?(l={},t?l[t]=e:l.milliseconds=e):(d=Kt.exec(e))?(n="-"===d[1]?-1:1,l={y:0,d:D(d[be])*n,h:D(d[ge])*n,m:D(d[Me])*n,s:D(d[ke])*n,ms:D(Ft(1e3*d[De]))*n}):(d=Vt.exec(e))?(n="-"===d[1]?-1:1,l={y:Gt(d[2],n),M:Gt(d[3],n),w:Gt(d[4],n),d:Gt(d[5],n),h:Gt(d[6],n),m:Gt(d[7],n),s:Gt(d[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(o=Et(l.from),i=Et(l.to),a=o.isValid()&&i.isValid()?(i=zt(i,o),o.isBefore(i)?s=Jt(o,i):((s=Jt(i,o)).milliseconds=-s.milliseconds,s.months=-s.months),s):{milliseconds:0,months:0},(l={}).ms=a.milliseconds,l.M=a.months),r=new It(l),At(e)&&c(e,"_locale")&&(r._locale=e._locale),r}function Gt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Jt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function qt(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(P(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),Qt(this,$t(n="string"==typeof n?+n:n,r),e),this}}function Qt(e,t,n,r){var o=t._milliseconds,i=Ft(t._days),s=Ft(t._months);e.isValid()&&(r=null==r||r,s&&Ae(e,Ee(e,"Month")+s*n),i&&xe(e,"Date",Ee(e,"Date")+i*n),o&&e._d.setTime(e._d.valueOf()+o*n),r&&a.updateOffset(e,i||s))}$t.fn=It.prototype,$t.invalid=function(){return $t(NaN)};var Zt=qt(1,"add"),Xt=qt(-1,"subtract");function en(e,t){var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function tn(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ht(e))&&(this._locale=t),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var nn=T("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function rn(){return this._locale}var an=1e3,on=60*an,sn=60*on,un=3506328*sn;function ln(e,t){return(e%t+t)%t}function dn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-un:new Date(e,t,n).valueOf()}function cn(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-un:Date.UTC(e,t,n)}function fn(e,t){U(0,[e,e.length],0,t)}function hn(e,t,n,r,a){var o;return null==e?Ke(this,r,a).year:(t>(o=Ve(e,r,a))&&(t=o),function(e,t,n,r,a){var o=Ue(e,t,n,r,a),i=ze(o.year,0,o.dayOfYear);return this.year(i.getUTCFullYear()),this.month(i.getUTCMonth()),this.date(i.getUTCDate()),this}.call(this,e,t,n,r,a))}U(0,["gg",2],0,function(){return this.weekYear()%100}),U(0,["GG",2],0,function(){return this.isoWeekYear()%100}),fn("gggg","weekYear"),fn("ggggg","weekYear"),fn("GGGG","isoWeekYear"),fn("GGGGG","isoWeekYear"),j("weekYear","gg"),j("isoWeekYear","GG"),F("weekYear",1),F("isoWeekYear",1),de("G",oe),de("g",oe),de("GG",Z,G),de("gg",Z,G),de("GGGG",ne,q),de("gggg",ne,q),de("GGGGG",re,Q),de("ggggg",re,Q),me(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,r){t[r.substr(0,2)]=D(e)}),me(["gg","GG"],function(e,t,n,r){t[r]=a.parseTwoDigitYear(e)}),U("Q",0,"Qo","quarter"),j("quarter","Q"),F("quarter",7),de("Q",$),_e("Q",function(e,t){t[ve]=3*(D(e)-1)}),U("D",["DD",2],"Do","date"),j("date","D"),F("date",9),de("D",Z),de("DD",Z,G),de("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),_e(["D","DD"],be),_e("Do",function(e,t){t[be]=D(e.match(Z)[0])});var _n=Oe("Date",!0);U("DDD",["DDDD",3],"DDDo","dayOfYear"),j("dayOfYear","DDD"),F("dayOfYear",4),de("DDD",te),de("DDDD",J),_e(["DDD","DDDD"],function(e,t,n){n._dayOfYear=D(e)}),U("m",["mm",2],0,"minute"),j("minute","m"),F("minute",14),de("m",Z),de("mm",Z,G),_e(["m","mm"],Me);var mn=Oe("Minutes",!1);U("s",["ss",2],0,"second"),j("second","s"),F("second",15),de("s",Z),de("ss",Z,G),_e(["s","ss"],ke);var pn,yn=Oe("Seconds",!1);for(U("S",0,0,function(){return~~(this.millisecond()/100)}),U(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),U(0,["SSS",3],0,"millisecond"),U(0,["SSSS",4],0,function(){return 10*this.millisecond()}),U(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),U(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),U(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),U(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),U(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),j("millisecond","ms"),F("millisecond",16),de("S",te,$),de("SS",te,G),de("SSS",te,J),pn="SSSS";pn.length<=9;pn+="S")de(pn,ae);function vn(e,t){t[De]=D(1e3*("0."+e))}for(pn="S";pn.length<=9;pn+="S")_e(pn,vn);var bn=Oe("Milliseconds",!1);U("z",0,0,"zoneAbbr"),U("zz",0,0,"zoneName");var gn=g.prototype;function Mn(e){return e}gn.add=Zt,gn.calendar=function(e,t){var n=e||Et(),r=zt(n,this).startOf("day"),o=a.calendarFormat(this,r)||"sameElse",i=t&&(O(t[o])?t[o].call(this,n):t[o]);return this.format(i||this.localeData().calendar(o,this,Et(n)))},gn.clone=function(){return new g(this)},gn.diff=function(e,t,n){var r,a,o;if(!this.isValid())return NaN;if(!(r=zt(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=H(t)){case"year":o=en(this,r)/12;break;case"month":o=en(this,r);break;case"quarter":o=en(this,r)/3;break;case"second":o=(this-r)/1e3;break;case"minute":o=(this-r)/6e4;break;case"hour":o=(this-r)/36e5;break;case"day":o=(this-r-a)/864e5;break;case"week":o=(this-r-a)/6048e5;break;default:o=this-r}return n?o:k(o)},gn.endOf=function(e){var t;if(void 0===(e=H(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?cn:dn;switch(e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=sn-ln(t+(this._isUTC?0:this.utcOffset()*on),sn)-1;break;case"minute":t=this._d.valueOf(),t+=on-ln(t,on)-1;break;case"second":t=this._d.valueOf(),t+=an-ln(t,an)-1}return this._d.setTime(t),a.updateOffset(this,!0),this},gn.format=function(e){e||(e=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var t=K(this,e);return this.localeData().postformat(t)},gn.from=function(e,t){return this.isValid()&&(M(e)&&e.isValid()||Et(e).isValid())?$t({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},gn.fromNow=function(e){return this.from(Et(),e)},gn.to=function(e,t){return this.isValid()&&(M(e)&&e.isValid()||Et(e).isValid())?$t({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},gn.toNow=function(e){return this.to(Et(),e)},gn.get=function(e){return O(this[e=H(e)])?this[e]():this},gn.invalidAt=function(){return _(this).overflow},gn.isAfter=function(e,t){var n=M(e)?e:Et(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=H(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},gn.isBefore=function(e,t){var n=M(e)?e:Et(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=H(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},gn.isBetween=function(e,t,n,r){var a=M(e)?e:Et(e),o=M(t)?t:Et(t);return!!(this.isValid()&&a.isValid()&&o.isValid())&&("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(o,n):!this.isAfter(o,n))},gn.isSame=function(e,t){var n,r=M(e)?e:Et(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=H(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},gn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},gn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},gn.isValid=function(){return m(this)},gn.lang=nn,gn.locale=tn,gn.localeData=rn,gn.max=Ct,gn.min=xt,gn.parsingFlags=function(){return f({},_(this))},gn.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:A[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}(e=I(e)),r=0;r<n.length;r++)this[n[r].unit](e[n[r].unit]);else if(O(this[e=H(e)]))return this[e](t);return this},gn.startOf=function(e){var t;if(void 0===(e=H(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?cn:dn;switch(e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=ln(t+(this._isUTC?0:this.utcOffset()*on),sn);break;case"minute":t=this._d.valueOf(),t-=ln(t,on);break;case"second":t=this._d.valueOf(),t-=ln(t,an)}return this._d.setTime(t),a.updateOffset(this,!0),this},gn.subtract=Xt,gn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},gn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},gn.toDate=function(){return new Date(this.valueOf())},gn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?K(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):O(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",K(n,"Z")):K(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},gn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",a=t+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+a)},gn.toJSON=function(){return this.isValid()?this.toISOString():null},gn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},gn.unix=function(){return Math.floor(this.valueOf()/1e3)},gn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},gn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},gn.year=Pe,gn.isLeapYear=function(){return Se(this.year())},gn.weekYear=function(e){return hn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},gn.isoWeekYear=function(e){return hn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},gn.quarter=gn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},gn.month=Fe,gn.daysInMonth=function(){return Ce(this.year(),this.month())},gn.week=gn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},gn.isoWeek=gn.isoWeeks=function(e){var t=Ke(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},gn.weeksInYear=function(){var e=this.localeData()._week;return Ve(this.year(),e.dow,e.doy)},gn.isoWeeksInYear=function(){return Ve(this.year(),1,4)},gn.date=_n,gn.day=gn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},gn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},gn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},gn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},gn.hour=gn.hours=ot,gn.minute=gn.minutes=mn,gn.second=gn.seconds=yn,gn.millisecond=gn.milliseconds=bn,gn.utcOffset=function(e,t,n){var r,o=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Wt(se,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Bt(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),o!==e&&(!t||this._changeInProgress?Qt(this,$t(e-o,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?o:Bt(this)},gn.utc=function(e){return this.utcOffset(0,e)},gn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Bt(this),"m")),this},gn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Wt(ie,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},gn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Et(e).utcOffset():0,(this.utcOffset()-e)%60==0)},gn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},gn.isLocal=function(){return!!this.isValid()&&!this._isUTC},gn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},gn.isUtc=Ut,gn.isUTC=Ut,gn.zoneAbbr=function(){return this._isUTC?"UTC":""},gn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},gn.dates=T("dates accessor is deprecated. Use date instead.",_n),gn.months=T("months accessor is deprecated. Use month instead",Fe),gn.years=T("years accessor is deprecated. Use year instead",Pe),gn.zone=T("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),gn.isDSTShifted=T("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!s(this._isDSTShifted))return this._isDSTShifted;var e={};if(v(e,this),(e=Pt(e))._a){var t=e._isUTC?h(e._a):Et(e._a);this._isDSTShifted=this.isValid()&&L(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var kn=x.prototype;function Dn(e,t,n,r){var a=ht(),o=h().set(r,t);return a[n](o,e)}function Ln(e,t,n){if(u(e)&&(t=e,e=void 0),e=e||"",null!=t)return Dn(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=Dn(e,r,n,"month");return a}function wn(e,t,n,r){"boolean"==typeof e?(u(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,u(t)&&(n=t,t=void 0),t=t||"");var a,o=ht(),i=e?o._week.dow:0;if(null!=n)return Dn(t,(n+i)%7,r,"day");var s=[];for(a=0;a<7;a++)s[a]=Dn(t,(a+i)%7,r,"day");return s}kn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return O(r)?r.call(t,n):r},kn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])},kn.invalidDate=function(){return this._invalidDate},kn.ordinal=function(e){return this._ordinal.replace("%d",e)},kn.preparse=Mn,kn.postformat=Mn,kn.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return O(a)?a(e,t,n,r):a.replace(/%d/i,e)},kn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return O(n)?n(t):n.replace(/%s/i,t)},kn.set=function(e){var t,n;for(n in e)O(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},kn.months=function(e,t){return e?o(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||je).test(t)?"format":"standalone"][e.month()]:o(this._months)?this._months:this._months.standalone},kn.monthsShort=function(e,t){return e?o(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[je.test(t)?"format":"standalone"][e.month()]:o(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},kn.monthsParse=function(e,t,n){var r,a,o;if(this._monthsParseExact)return function(e,t,n){var r,a,o,i=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)o=h([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(o,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(o,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=Ye.call(this._shortMonthsParse,i))?a:null:-1!==(a=Ye.call(this._longMonthsParse,i))?a:null:"MMM"===t?-1!==(a=Ye.call(this._shortMonthsParse,i))?a:-1!==(a=Ye.call(this._longMonthsParse,i))?a:null:-1!==(a=Ye.call(this._longMonthsParse,i))?a:-1!==(a=Ye.call(this._shortMonthsParse,i))?a:null}.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=h([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(o="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(o.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},kn.monthsRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||We.call(this),e?this._monthsStrictRegex:this._monthsRegex):(c(this,"_monthsRegex")||(this._monthsRegex=Ne),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},kn.monthsShortRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||We.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(c(this,"_monthsShortRegex")||(this._monthsShortRegex=Re),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},kn.week=function(e){return Ke(e,this._week.dow,this._week.doy).week},kn.firstDayOfYear=function(){return this._week.doy},kn.firstDayOfWeek=function(){return this._week.dow},kn.weekdays=function(e,t){var n=o(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?$e(n,this._week.dow):e?n[e.day()]:n},kn.weekdaysMin=function(e){return!0===e?$e(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},kn.weekdaysShort=function(e){return!0===e?$e(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},kn.weekdaysParse=function(e,t,n){var r,a,o;if(this._weekdaysParseExact)return function(e,t,n){var r,a,o,i=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)o=h([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(o,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(o,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(o,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=Ye.call(this._weekdaysParse,i))?a:null:"ddd"===t?-1!==(a=Ye.call(this._shortWeekdaysParse,i))?a:null:-1!==(a=Ye.call(this._minWeekdaysParse,i))?a:null:"dddd"===t?-1!==(a=Ye.call(this._weekdaysParse,i))?a:-1!==(a=Ye.call(this._shortWeekdaysParse,i))?a:-1!==(a=Ye.call(this._minWeekdaysParse,i))?a:null:"ddd"===t?-1!==(a=Ye.call(this._shortWeekdaysParse,i))?a:-1!==(a=Ye.call(this._weekdaysParse,i))?a:-1!==(a=Ye.call(this._minWeekdaysParse,i))?a:null:-1!==(a=Ye.call(this._minWeekdaysParse,i))?a:-1!==(a=Ye.call(this._weekdaysParse,i))?a:-1!==(a=Ye.call(this._shortWeekdaysParse,i))?a:null}.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=h([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(o="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(o.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},kn.weekdaysRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||et.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(c(this,"_weekdaysRegex")||(this._weekdaysRegex=Qe),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},kn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||et.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(c(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ze),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},kn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||et.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(c(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Xe),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},kn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},kn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},ct("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===D(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),a.lang=T("moment.lang is deprecated. Use moment.locale instead.",ct),a.langData=T("moment.langData is deprecated. Use moment.localeData instead.",ht);var Tn=Math.abs;function Sn(e,t,n,r){var a=$t(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function Yn(e){return e<0?Math.floor(e):Math.ceil(e)}function Pn(e){return 4800*e/146097}function On(e){return 146097*e/4800}function En(e){return function(){return this.as(e)}}var xn=En("ms"),Cn=En("s"),jn=En("m"),Hn=En("h"),In=En("d"),An=En("w"),Fn=En("M"),Rn=En("Q"),Nn=En("y");function Wn(e){return function(){return this.isValid()?this._data[e]:NaN}}var zn=Wn("milliseconds"),Bn=Wn("seconds"),Un=Wn("minutes"),Kn=Wn("hours"),Vn=Wn("days"),$n=Wn("months"),Gn=Wn("years"),Jn=Math.round,qn={ss:44,s:45,m:45,h:22,d:26,M:11},Qn=Math.abs;function Zn(e){return(e>0)-(e<0)||+e}function Xn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=Qn(this._milliseconds)/1e3,r=Qn(this._days),a=Qn(this._months);e=k(n/60),t=k(e/60),n%=60,e%=60;var o=k(a/12),i=a%=12,s=r,u=t,l=e,d=n?n.toFixed(3).replace(/\.?0+$/,""):"",c=this.asSeconds();if(!c)return"P0D";var f=c<0?"-":"",h=Zn(this._months)!==Zn(c)?"-":"",_=Zn(this._days)!==Zn(c)?"-":"",m=Zn(this._milliseconds)!==Zn(c)?"-":"";return f+"P"+(o?h+o+"Y":"")+(i?h+i+"M":"")+(s?_+s+"D":"")+(u||l||d?"T":"")+(u?m+u+"H":"")+(l?m+l+"M":"")+(d?m+d+"S":"")}var er=It.prototype;return er.isValid=function(){return this._isValid},er.abs=function(){var e=this._data;return this._milliseconds=Tn(this._milliseconds),this._days=Tn(this._days),this._months=Tn(this._months),e.milliseconds=Tn(e.milliseconds),e.seconds=Tn(e.seconds),e.minutes=Tn(e.minutes),e.hours=Tn(e.hours),e.months=Tn(e.months),e.years=Tn(e.years),this},er.add=function(e,t){return Sn(this,e,t,1)},er.subtract=function(e,t){return Sn(this,e,t,-1)},er.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=H(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+Pn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(On(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},er.asMilliseconds=xn,er.asSeconds=Cn,er.asMinutes=jn,er.asHours=Hn,er.asDays=In,er.asWeeks=An,er.asMonths=Fn,er.asQuarters=Rn,er.asYears=Nn,er.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*D(this._months/12):NaN},er._bubble=function(){var e,t,n,r,a,o=this._milliseconds,i=this._days,s=this._months,u=this._data;return o>=0&&i>=0&&s>=0||o<=0&&i<=0&&s<=0||(o+=864e5*Yn(On(s)+i),i=0,s=0),u.milliseconds=o%1e3,e=k(o/1e3),u.seconds=e%60,t=k(e/60),u.minutes=t%60,n=k(t/60),u.hours=n%24,i+=k(n/24),a=k(Pn(i)),s+=a,i-=Yn(On(a)),r=k(s/12),s%=12,u.days=i,u.months=s,u.years=r,this},er.clone=function(){return $t(this)},er.get=function(e){return e=H(e),this.isValid()?this[e+"s"]():NaN},er.milliseconds=zn,er.seconds=Bn,er.minutes=Un,er.hours=Kn,er.days=Vn,er.weeks=function(){return k(this.days()/7)},er.months=$n,er.years=Gn,er.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=function(e,t,n){var r=$t(e).abs(),a=Jn(r.as("s")),o=Jn(r.as("m")),i=Jn(r.as("h")),s=Jn(r.as("d")),u=Jn(r.as("M")),l=Jn(r.as("y")),d=a<=qn.ss&&["s",a]||a<qn.s&&["ss",a]||o<=1&&["m"]||o<qn.m&&["mm",o]||i<=1&&["h"]||i<qn.h&&["hh",i]||s<=1&&["d"]||s<qn.d&&["dd",s]||u<=1&&["M"]||u<qn.M&&["MM",u]||l<=1&&["y"]||["yy",l];return d[2]=t,d[3]=+e>0,d[4]=n,function(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}.apply(null,d)}(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)},er.toISOString=Xn,er.toString=Xn,er.toJSON=Xn,er.locale=tn,er.localeData=rn,er.toIsoString=T("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Xn),er.lang=nn,U("X",0,0,"unix"),U("x",0,0,"valueOf"),de("x",oe),de("X",/[+-]?\d+(\.\d{1,3})?/),_e("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),_e("x",function(e,t,n){n._d=new Date(D(e))}),a.version="2.24.0",t=Et,a.fn=gn,a.min=function(){return jt("isBefore",[].slice.call(arguments,0))},a.max=function(){return jt("isAfter",[].slice.call(arguments,0))},a.now=function(){return Date.now?Date.now():+new Date},a.utc=h,a.unix=function(e){return Et(1e3*e)},a.months=function(e,t){return Ln(e,t,"months")},a.isDate=l,a.locale=ct,a.invalid=p,a.duration=$t,a.isMoment=M,a.weekdays=function(e,t,n){return wn(e,t,n,"weekdays")},a.parseZone=function(){return Et.apply(null,arguments).parseZone()},a.localeData=ht,a.isDuration=At,a.monthsShort=function(e,t){return Ln(e,t,"monthsShort")},a.weekdaysMin=function(e,t,n){return wn(e,t,n,"weekdaysMin")},a.defineLocale=ft,a.updateLocale=function(e,t){if(null!=t){var n,r,a=it;null!=(r=dt(e))&&(a=r._config),t=E(a,t),(n=new x(t)).parentLocale=st[e],st[e]=n,ct(e)}else null!=st[e]&&(null!=st[e].parentLocale?st[e]=st[e].parentLocale:null!=st[e]&&delete st[e]);return st[e]},a.locales=function(){return S(st)},a.weekdaysShort=function(e,t,n){return wn(e,t,n,"weekdaysShort")},a.normalizeUnits=H,a.relativeTimeRounding=function(e){return void 0===e?Jn:"function"==typeof e&&(Jn=e,!0)},a.relativeTimeThreshold=function(e,t){return void 0!==qn[e]&&(void 0===t?qn[e]:(qn[e]=t,"s"===e&&(qn.ss=t-1),!0))},a.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=gn,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()}).call(this,n(254)(e))},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){e.exports=n(249)()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MODIFIER_KEY_NAMES=t.DEFAULT_VERTICAL_SPACING=t.FANG_HEIGHT_PX=t.FANG_WIDTH_PX=t.WEEKDAYS=t.BLOCKED_MODIFIER=t.DAY_SIZE=t.OPEN_UP=t.OPEN_DOWN=t.ANCHOR_RIGHT=t.ANCHOR_LEFT=t.INFO_POSITION_AFTER=t.INFO_POSITION_BEFORE=t.INFO_POSITION_BOTTOM=t.INFO_POSITION_TOP=t.ICON_AFTER_POSITION=t.ICON_BEFORE_POSITION=t.VERTICAL_SCROLLABLE=t.VERTICAL_ORIENTATION=t.HORIZONTAL_ORIENTATION=t.END_DATE=t.START_DATE=t.ISO_MONTH_FORMAT=t.ISO_FORMAT=t.DISPLAY_FORMAT=void 0;t.DISPLAY_FORMAT="L";t.ISO_FORMAT="YYYY-MM-DD";t.ISO_MONTH_FORMAT="YYYY-MM";t.START_DATE="startDate";t.END_DATE="endDate";t.HORIZONTAL_ORIENTATION="horizontal";t.VERTICAL_ORIENTATION="vertical";t.VERTICAL_SCROLLABLE="verticalScrollable";t.ICON_BEFORE_POSITION="before";t.ICON_AFTER_POSITION="after";t.INFO_POSITION_TOP="top";t.INFO_POSITION_BOTTOM="bottom";t.INFO_POSITION_BEFORE="before";t.INFO_POSITION_AFTER="after";t.ANCHOR_LEFT="left";t.ANCHOR_RIGHT="right";t.OPEN_DOWN="down";t.OPEN_UP="up";t.DAY_SIZE=39;t.BLOCKED_MODIFIER="blocked";t.WEEKDAYS=[0,1,2,3,4,5,6];t.FANG_WIDTH_PX=20;t.FANG_HEIGHT_PX=10;t.DEFAULT_VERTICAL_SPACING=22;var r=new Set(["Shift","Control","Alt","Meta"]);t.MODIFIER_KEY_NAMES=r},function(e,t,n){e.exports=n(261)},function(e,t,n){var r=n(31);e.exports=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.forEach(function(t){r(e,t,n[t])})}return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarDayPhrases=t.DayPickerNavigationPhrases=t.DayPickerKeyboardShortcutsPhrases=t.DayPickerPhrases=t.SingleDatePickerInputPhrases=t.SingleDatePickerPhrases=t.DateRangePickerInputPhrases=t.DateRangePickerPhrases=t.default=void 0;var r="Interact with the calendar and add the check-in date for your trip.",a="Move backward to switch to the previous month.",o="Move forward to switch to the next month.",i="page up and page down keys",s="Home and end keys",u="Escape key",l="Select the date in focus.",d="Move backward (left) and forward (right) by one day.",c="Move backward (up) and forward (down) by one week.",f="Return to the date input field.",h="Navigate forward to interact with the calendar and select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",_="Navigate backward to interact with the calendar and select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",m=function(e){var t=e.date;return"Choose ".concat(t," as your check-in date. It’s available.")},p=function(e){var t=e.date;return"Choose ".concat(t," as your check-out date. It’s available.")},y=function(e){return e.date},v=function(e){var t=e.date;return"Not available. ".concat(t)},b=function(e){var t=e.date;return"Selected. ".concat(t)},g=function(e){var t=e.date;return"Selected as start date. ".concat(t)},M=function(e){var t=e.date;return"Selected as end date. ".concat(t)},k={calendarLabel:"Calendar",roleDescription:"datepicker",closeDatePicker:"Close",focusStartDate:r,clearDate:"Clear Date",clearDates:"Clear Dates",jumpToPrevMonth:a,jumpToNextMonth:o,keyboardShortcuts:"Keyboard Shortcuts",showKeyboardShortcutsPanel:"Open the keyboard shortcuts panel.",hideKeyboardShortcutsPanel:"Close the shortcuts panel.",openThisPanel:"Open this panel.",enterKey:"Enter key",leftArrowRightArrow:"Right and left arrow keys",upArrowDownArrow:"up and down arrow keys",pageUpPageDown:i,homeEnd:s,escape:u,questionMark:"Question mark",selectFocusedDate:l,moveFocusByOneDay:d,moveFocusByOneWeek:c,moveFocusByOneMonth:"Switch months.",moveFocustoStartAndEndOfWeek:"Go to the first or last day of a week.",returnFocusToInput:f,keyboardForwardNavigationInstructions:h,keyboardBackwardNavigationInstructions:_,chooseAvailableStartDate:m,chooseAvailableEndDate:p,dateIsUnavailable:v,dateIsSelected:b,dateIsSelectedAsStartDate:g,dateIsSelectedAsEndDate:M};t.default=k;var D={calendarLabel:"Calendar",roleDescription:"datepicker",closeDatePicker:"Close",clearDates:"Clear Dates",focusStartDate:r,jumpToPrevMonth:a,jumpToNextMonth:o,keyboardShortcuts:"Keyboard Shortcuts",showKeyboardShortcutsPanel:"Open the keyboard shortcuts panel.",hideKeyboardShortcutsPanel:"Close the shortcuts panel.",openThisPanel:"Open this panel.",enterKey:"Enter key",leftArrowRightArrow:"Right and left arrow keys",upArrowDownArrow:"up and down arrow keys",pageUpPageDown:i,homeEnd:s,escape:u,questionMark:"Question mark",selectFocusedDate:l,moveFocusByOneDay:d,moveFocusByOneWeek:c,moveFocusByOneMonth:"Switch months.",moveFocustoStartAndEndOfWeek:"Go to the first or last day of a week.",returnFocusToInput:f,keyboardForwardNavigationInstructions:h,keyboardBackwardNavigationInstructions:_,chooseAvailableStartDate:m,chooseAvailableEndDate:p,dateIsUnavailable:v,dateIsSelected:b,dateIsSelectedAsStartDate:g,dateIsSelectedAsEndDate:M};t.DateRangePickerPhrases=D;var L={focusStartDate:r,clearDates:"Clear Dates",keyboardForwardNavigationInstructions:h,keyboardBackwardNavigationInstructions:_};t.DateRangePickerInputPhrases=L;var w={calendarLabel:"Calendar",roleDescription:"datepicker",closeDatePicker:"Close",clearDate:"Clear Date",jumpToPrevMonth:a,jumpToNextMonth:o,keyboardShortcuts:"Keyboard Shortcuts",showKeyboardShortcutsPanel:"Open the keyboard shortcuts panel.",hideKeyboardShortcutsPanel:"Close the shortcuts panel.",openThisPanel:"Open this panel.",enterKey:"Enter key",leftArrowRightArrow:"Right and left arrow keys",upArrowDownArrow:"up and down arrow keys",pageUpPageDown:i,homeEnd:s,escape:u,questionMark:"Question mark",selectFocusedDate:l,moveFocusByOneDay:d,moveFocusByOneWeek:c,moveFocusByOneMonth:"Switch months.",moveFocustoStartAndEndOfWeek:"Go to the first or last day of a week.",returnFocusToInput:f,keyboardForwardNavigationInstructions:h,keyboardBackwardNavigationInstructions:_,chooseAvailableDate:y,dateIsUnavailable:v,dateIsSelected:b};t.SingleDatePickerPhrases=w;var T={clearDate:"Clear Date",keyboardForwardNavigationInstructions:h,keyboardBackwardNavigationInstructions:_};t.SingleDatePickerInputPhrases=T;var S={calendarLabel:"Calendar",roleDescription:"datepicker",jumpToPrevMonth:a,jumpToNextMonth:o,keyboardShortcuts:"Keyboard Shortcuts",showKeyboardShortcutsPanel:"Open the keyboard shortcuts panel.",hideKeyboardShortcutsPanel:"Close the shortcuts panel.",openThisPanel:"Open this panel.",enterKey:"Enter key",leftArrowRightArrow:"Right and left arrow keys",upArrowDownArrow:"up and down arrow keys",pageUpPageDown:i,homeEnd:s,escape:u,questionMark:"Question mark",selectFocusedDate:l,moveFocusByOneDay:d,moveFocusByOneWeek:c,moveFocusByOneMonth:"Switch months.",moveFocustoStartAndEndOfWeek:"Go to the first or last day of a week.",returnFocusToInput:f,chooseAvailableStartDate:m,chooseAvailableEndDate:p,chooseAvailableDate:y,dateIsUnavailable:v,dateIsSelected:b,dateIsSelectedAsStartDate:g,dateIsSelectedAsEndDate:M};t.DayPickerPhrases=S;var Y={keyboardShortcuts:"Keyboard Shortcuts",showKeyboardShortcutsPanel:"Open the keyboard shortcuts panel.",hideKeyboardShortcutsPanel:"Close the shortcuts panel.",openThisPanel:"Open this panel.",enterKey:"Enter key",leftArrowRightArrow:"Right and left arrow keys",upArrowDownArrow:"up and down arrow keys",pageUpPageDown:i,homeEnd:s,escape:u,questionMark:"Question mark",selectFocusedDate:l,moveFocusByOneDay:d,moveFocusByOneWeek:c,moveFocusByOneMonth:"Switch months.",moveFocustoStartAndEndOfWeek:"Go to the first or last day of a week.",returnFocusToInput:f};t.DayPickerKeyboardShortcutsPhrases=Y;var P={jumpToPrevMonth:a,jumpToNextMonth:o};t.DayPickerNavigationPhrases=P;var O={chooseAvailableDate:y,dateIsUnavailable:v,dateIsSelected:b,dateIsSelectedAsStartDate:g,dateIsSelectedAsEndDate:M};t.CalendarDayPhrases=O},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return Object.keys(e).reduce(function(e,t){return(0,o.default)({},e,(0,a.default)({},t,i.default.oneOfType([i.default.string,i.default.func,i.default.node])))},{})};var a=r(n(31)),o=r(n(6)),i=r(n(3))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function(e,t){if((0,a.default)(e,t))return!0;if(!e||!t||"object"!==(void 0===e?"undefined":r(e))||"object"!==(void 0===t?"undefined":r(t)))return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;n.sort(),i.sort();for(var s=0;s<n.length;s+=1)if(!(0,o.default)(t,n[s])||!(0,a.default)(e[n[s]],t[n[s]]))return!1;return!0};var a=i(n(257)),o=i(n(23));function i(e){return e&&e.__esModule?e:{default:e}}},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.withStylesPropTypes=t.css=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.withStyles=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.stylesPropName,s=void 0===n?"styles":n,d=t.themePropName,f=void 0===d?"theme":d,_=t.cssPropName,v=void 0===_?"css":_,b=t.flushBefore,g=void 0!==b&&b,M=t.pureComponent,k=void 0!==M&&M,D=void 0,L=void 0,w=void 0,T=void 0,S=function(e){if(e){if(!i.default.PureComponent)throw new ReferenceError("withStyles() pureComponent option requires React 15.3.0 or later");return i.default.PureComponent}return i.default.Component}(k);function Y(e){return e===l.DIRECTIONS.LTR?c.default.resolveLTR:c.default.resolveRTL}function P(t,n){var r=function(e){return e===l.DIRECTIONS.LTR?w:T}(t),a=t===l.DIRECTIONS.LTR?D:L,o=c.default.get();return a&&r===o?a:(t===l.DIRECTIONS.RTL?(L=e?c.default.createRTL(e):m,T=o,a=L):(D=e?c.default.createLTR(e):m,w=o,a=D),a)}function O(e,t){return{resolveMethod:Y(e),styleDef:P(e)}}return function(e){var t=e.displayName||e.name||"Component",n=function(t){function n(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e,t)),a=r.context[l.CHANNEL]?r.context[l.CHANNEL].getState():y;return r.state=O(a),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(n,S),a(n,[{key:"componentDidMount",value:function(){var e=this;this.context[l.CHANNEL]&&(this.channelUnsubscribe=this.context[l.CHANNEL].subscribe(function(t){e.setState(O(t))}))}},{key:"componentWillUnmount",value:function(){this.channelUnsubscribe&&this.channelUnsubscribe()}},{key:"render",value:function(){var t;g&&c.default.flush();var n=this.state,a=n.resolveMethod,o=n.styleDef;return i.default.createElement(e,r({},this.props,(h(t={},f,c.default.get()),h(t,s,o()),h(t,v,a),t)))}}]),n}();return n.WrappedComponent=e,n.displayName="withStyles("+String(t)+")",n.contextTypes=p,e.propTypes&&(n.propTypes=(0,o.default)({},e.propTypes),delete n.propTypes[s],delete n.propTypes[f],delete n.propTypes[v]),e.defaultProps&&(n.defaultProps=(0,o.default)({},e.defaultProps)),(0,u.default)(n,e)}};var o=f(n(262)),i=f(n(0)),s=f(n(3)),u=f(n(30)),l=n(265),d=f(n(266)),c=f(n(191));function f(e){return e&&e.__esModule?e:{default:e}}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}t.css=c.default.resolveLTR,t.withStylesPropTypes={styles:s.default.object.isRequired,theme:s.default.object.isRequired,css:s.default.func.isRequired};var _={},m=function(){return _};var p=h({},l.CHANNEL,d.default),y=l.DIRECTIONS.LTR},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(246)},function(e,t,n){var r=n(1),a=n(259),o=n(260);e.exports={momentObj:o.createMomentChecker("object",function(e){return"object"==typeof e},function(e){return a.isValidMoment(e)},"Moment"),momentString:o.createMomentChecker("string",function(e){return"string"==typeof e},function(e){return a.isValidMoment(r(e))},"Moment"),momentDurationObj:o.createMomentChecker("object",function(e){return"object"==typeof e},function(e){return r.isDuration(e)},"Duration")}},function(e,t,n){"use strict";var r=n(46),a="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),o=Object.prototype.toString,i=Array.prototype.concat,s=Object.defineProperty,u=s&&function(){var e={};try{for(var t in s(e,"x",{enumerable:!1,value:e}),e)return!1;return e.x===e}catch(e){return!1}}(),l=function(e,t,n,r){var a;t in e&&("function"!=typeof(a=r)||"[object Function]"!==o.call(a)||!r())||(u?s(e,t,{configurable:!0,enumerable:!1,value:n,writable:!0}):e[t]=n)},d=function(e,t){var n=arguments.length>2?arguments[2]:{},o=r(t);a&&(o=i.call(o,Object.getOwnPropertySymbols(t)));for(var s=0;s<o.length;s+=1)l(e,o[s],t[o[s]],n[o[s]])};d.supportsDescriptors=!!u,e.exports=d},function(e,t,n){"use strict";e.exports=function(e,t,n,r,a,o,i,s){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,a,o,i,s],d=0;(u=new Error(t.replace(/%s/g,function(){return l[d++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if("number"==typeof e)return"".concat(e,"px ").concat(r);if("string"==typeof e)return"".concat(e," ").concat(r);throw new TypeError("noflip expects a string or a number")};var r="/* @noflip */"},function(e,t,n){"use strict";var r=n(258);e.exports=Function.prototype.bind||r},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf(o.WEEKDAYS);t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf([o.OPEN_DOWN,o.OPEN_UP]);t.default=i},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(19);e.exports=r.call(Function.call,Object.prototype.hasOwnProperty)},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!a.default.isMoment(e)||!a.default.isMoment(t))&&(e.date()===t.date()&&e.month()===t.month()&&e.year()===t.year())};var a=r(n(1))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=t?[t,o.DISPLAY_FORMAT,o.ISO_FORMAT]:[o.DISPLAY_FORMAT,o.ISO_FORMAT],r=(0,a.default)(e,n,!0);return r.isValid()?r.hour(12):null};var a=r(n(1)),o=n(4)},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf([o.HORIZONTAL_ORIENTATION,o.VERTICAL_ORIENTATION,o.VERTICAL_SCROLLABLE]);t.default=i},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return!("undefined"==typeof window||!("ontouchstart"in window||window.DocumentTouch&&"undefined"!=typeof document&&document instanceof window.DocumentTouch))||!("undefined"==typeof navigator||!navigator.maxTouchPoints&&!navigator.msMaxTouchPoints)},e.exports=t.default},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf([o.ICON_BEFORE_POSITION,o.ICON_AFTER_POSITION]);t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!a.default.isMoment(e)||!a.default.isMoment(t))&&!(0,o.default)(e,t)};var a=r(n(1)),o=r(n(35))},function(e,t,n){"use strict";var r=n(42),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function u(e){return r.isMemo(e)?i:s[e.$$typeof]||a}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var l=Object.defineProperty,d=Object.getOwnPropertyNames,c=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,h=Object.getPrototypeOf,_=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(_){var a=h(n);a&&a!==_&&e(t,a,r)}var i=d(n);c&&(i=i.concat(c(n)));for(var s=u(t),m=u(n),p=0;p<i.length;++p){var y=i[p];if(!(o[y]||r&&r[y]||m&&m[y]||s&&s[y])){var v=f(n,y);try{l(t,y,v)}catch(e){}}}return t}return t}},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=a.default.isMoment(e)?e:(0,o.default)(e,t);return n?n.year()+"-"+String(n.month()+1).padStart(2,"0")+"-"+String(n.date()).padStart(2,"0"):null};var a=r(n(1)),o=r(n(25))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOfType([a.default.bool,a.default.oneOf([o.START_DATE,o.END_DATE])]);t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf([o.INFO_POSITION_TOP,o.INFO_POSITION_BOTTOM,o.INFO_POSITION_BEFORE,o.INFO_POSITION_AFTER]);t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!a.default.isMoment(e)||!a.default.isMoment(t))return!1;var n=e.year(),r=e.month(),o=t.year(),i=t.month(),s=n===o,u=r===i;return s&&u?e.date()<t.date():s?r<i:n<o};var a=r(n(1))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=function(e){return a.default.createElement("svg",e,a.default.createElement("path",{fillRule:"evenodd",d:"M11.53.47a.75.75 0 0 0-1.061 0l-4.47 4.47L1.529.47A.75.75 0 1 0 .468 1.531l4.47 4.47-4.47 4.47a.75.75 0 1 0 1.061 1.061l4.47-4.47 4.47 4.47a.75.75 0 1 0 1.061-1.061l-4.47-4.47 4.47-4.47a.75.75 0 0 0 0-1.061z"}))};o.defaultProps={focusable:"false",viewBox:"0 0 12 12"};var i=o;t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(31)),o=r(n(47)),i=r(n(3)),s=(0,n(5).and)([i.default.instanceOf(Set),function(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),s=2;s<n;s++)r[s-2]=arguments[s];var u,l=e[t];return(0,o.default)(l).some(function(e,n){var o,s="".concat(t,": index ").concat(n);return null!=(u=(o=i.default.string).isRequired.apply(o,[(0,a.default)({},s,e),s].concat(r)))}),null==u?null:u}],"Modifiers (Set of Strings)");t.default=s},function(e,t,n){"use strict";n.r(t),n.d(t,"addEventListener",function(){return l});var r=!("undefined"==typeof window||!window.document||!window.document.createElement);var a=void 0;function o(){return void 0===a&&(a=function(){if(!r)return!1;if(!window.addEventListener||!window.removeEventListener||!Object.defineProperty)return!1;var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}}),n=function(){};window.addEventListener("testPassiveEventSupport",n,t),window.removeEventListener("testPassiveEventSupport",n,t)}catch(e){}return e}()),a}function i(e){e.handlers===e.nextHandlers&&(e.nextHandlers=e.handlers.slice())}function s(e){this.target=e,this.events={}}s.prototype.getEventHandlers=function(e,t){var n,r=String(e)+" "+String((n=t)?!0===n?100:(n.capture<<0)+(n.passive<<1)+(n.once<<2):0);return this.events[r]||(this.events[r]={handlers:[],handleEvent:void 0},this.events[r].nextHandlers=this.events[r].handlers),this.events[r]},s.prototype.handleEvent=function(e,t,n){var r=this.getEventHandlers(e,t);r.handlers=r.nextHandlers,r.handlers.forEach(function(e){e&&e(n)})},s.prototype.add=function(e,t,n){var r=this,a=this.getEventHandlers(e,n);i(a),0===a.nextHandlers.length&&(a.handleEvent=this.handleEvent.bind(this,e,n),this.target.addEventListener(e,a.handleEvent,n)),a.nextHandlers.push(t);var o=!0;return function(){if(o){o=!1,i(a);var s=a.nextHandlers.indexOf(t);a.nextHandlers.splice(s,1),0===a.nextHandlers.length&&(r.target&&r.target.removeEventListener(e,a.handleEvent,n),a.handleEvent=void 0)}}};var u="__consolidated_events_handlers__";function l(e,t,n,r){e[u]||(e[u]=new s(e));var a=function(e){if(e)return o()?e:!!e.capture}(r);return e[u].add(t,n,a)}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=a.default.isMoment(e)?e:(0,o.default)(e,t);return n?n.year()+"-"+String(n.month()+1).padStart(2,"0"):null};var a=r(n(1)),o=r(n(25))},function(e,t,n){"use strict";var r=Object.getOwnPropertyDescriptor?function(){return Object.getOwnPropertyDescriptor(arguments,"callee").get}():function(){throw new TypeError},a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,o=Object.getPrototypeOf||function(e){return e.__proto__},i=void 0,s="undefined"==typeof Uint8Array?void 0:o(Uint8Array),u={"$ %Array%":Array,"$ %ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"$ %ArrayBufferPrototype%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer.prototype,"$ %ArrayIteratorPrototype%":a?o([][Symbol.iterator]()):void 0,"$ %ArrayPrototype%":Array.prototype,"$ %ArrayProto_entries%":Array.prototype.entries,"$ %ArrayProto_forEach%":Array.prototype.forEach,"$ %ArrayProto_keys%":Array.prototype.keys,"$ %ArrayProto_values%":Array.prototype.values,"$ %AsyncFromSyncIteratorPrototype%":void 0,"$ %AsyncFunction%":void 0,"$ %AsyncFunctionPrototype%":void 0,"$ %AsyncGenerator%":void 0,"$ %AsyncGeneratorFunction%":void 0,"$ %AsyncGeneratorPrototype%":void 0,"$ %AsyncIteratorPrototype%":i&&a&&Symbol.asyncIterator?i[Symbol.asyncIterator]():void 0,"$ %Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"$ %Boolean%":Boolean,"$ %BooleanPrototype%":Boolean.prototype,"$ %DataView%":"undefined"==typeof DataView?void 0:DataView,"$ %DataViewPrototype%":"undefined"==typeof DataView?void 0:DataView.prototype,"$ %Date%":Date,"$ %DatePrototype%":Date.prototype,"$ %decodeURI%":decodeURI,"$ %decodeURIComponent%":decodeURIComponent,"$ %encodeURI%":encodeURI,"$ %encodeURIComponent%":encodeURIComponent,"$ %Error%":Error,"$ %ErrorPrototype%":Error.prototype,"$ %eval%":eval,"$ %EvalError%":EvalError,"$ %EvalErrorPrototype%":EvalError.prototype,"$ %Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"$ %Float32ArrayPrototype%":"undefined"==typeof Float32Array?void 0:Float32Array.prototype,"$ %Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"$ %Float64ArrayPrototype%":"undefined"==typeof Float64Array?void 0:Float64Array.prototype,"$ %Function%":Function,"$ %FunctionPrototype%":Function.prototype,"$ %Generator%":void 0,"$ %GeneratorFunction%":void 0,"$ %GeneratorPrototype%":void 0,"$ %Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"$ %Int8ArrayPrototype%":"undefined"==typeof Int8Array?void 0:Int8Array.prototype,"$ %Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"$ %Int16ArrayPrototype%":"undefined"==typeof Int16Array?void 0:Int8Array.prototype,"$ %Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"$ %Int32ArrayPrototype%":"undefined"==typeof Int32Array?void 0:Int32Array.prototype,"$ %isFinite%":isFinite,"$ %isNaN%":isNaN,"$ %IteratorPrototype%":a?o(o([][Symbol.iterator]())):void 0,"$ %JSON%":JSON,"$ %JSONParse%":JSON.parse,"$ %Map%":"undefined"==typeof Map?void 0:Map,"$ %MapIteratorPrototype%":"undefined"!=typeof Map&&a?o((new Map)[Symbol.iterator]()):void 0,"$ %MapPrototype%":"undefined"==typeof Map?void 0:Map.prototype,"$ %Math%":Math,"$ %Number%":Number,"$ %NumberPrototype%":Number.prototype,"$ %Object%":Object,"$ %ObjectPrototype%":Object.prototype,"$ %ObjProto_toString%":Object.prototype.toString,"$ %ObjProto_valueOf%":Object.prototype.valueOf,"$ %parseFloat%":parseFloat,"$ %parseInt%":parseInt,"$ %Promise%":"undefined"==typeof Promise?void 0:Promise,"$ %PromisePrototype%":"undefined"==typeof Promise?void 0:Promise.prototype,"$ %PromiseProto_then%":"undefined"==typeof Promise?void 0:Promise.prototype.then,"$ %Promise_all%":"undefined"==typeof Promise?void 0:Promise.all,"$ %Promise_reject%":"undefined"==typeof Promise?void 0:Promise.reject,"$ %Promise_resolve%":"undefined"==typeof Promise?void 0:Promise.resolve,"$ %Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"$ %RangeError%":RangeError,"$ %RangeErrorPrototype%":RangeError.prototype,"$ %ReferenceError%":ReferenceError,"$ %ReferenceErrorPrototype%":ReferenceError.prototype,"$ %Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"$ %RegExp%":RegExp,"$ %RegExpPrototype%":RegExp.prototype,"$ %Set%":"undefined"==typeof Set?void 0:Set,"$ %SetIteratorPrototype%":"undefined"!=typeof Set&&a?o((new Set)[Symbol.iterator]()):void 0,"$ %SetPrototype%":"undefined"==typeof Set?void 0:Set.prototype,"$ %SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"$ %SharedArrayBufferPrototype%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer.prototype,"$ %String%":String,"$ %StringIteratorPrototype%":a?o(""[Symbol.iterator]()):void 0,"$ %StringPrototype%":String.prototype,"$ %Symbol%":a?Symbol:void 0,"$ %SymbolPrototype%":a?Symbol.prototype:void 0,"$ %SyntaxError%":SyntaxError,"$ %SyntaxErrorPrototype%":SyntaxError.prototype,"$ %ThrowTypeError%":r,"$ %TypedArray%":s,"$ %TypedArrayPrototype%":s?s.prototype:void 0,"$ %TypeError%":TypeError,"$ %TypeErrorPrototype%":TypeError.prototype,"$ %Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"$ %Uint8ArrayPrototype%":"undefined"==typeof Uint8Array?void 0:Uint8Array.prototype,"$ %Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"$ %Uint8ClampedArrayPrototype%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray.prototype,"$ %Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"$ %Uint16ArrayPrototype%":"undefined"==typeof Uint16Array?void 0:Uint16Array.prototype,"$ %Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"$ %Uint32ArrayPrototype%":"undefined"==typeof Uint32Array?void 0:Uint32Array.prototype,"$ %URIError%":URIError,"$ %URIErrorPrototype%":URIError.prototype,"$ %WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"$ %WeakMapPrototype%":"undefined"==typeof WeakMap?void 0:WeakMap.prototype,"$ %WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet,"$ %WeakSetPrototype%":"undefined"==typeof WeakSet?void 0:WeakSet.prototype};e.exports=function(e,t){if(arguments.length>1&&"boolean"!=typeof t)throw new TypeError('"allowMissing" argument must be a boolean');var n="$ "+e;if(!(n in u))throw new SyntaxError("intrinsic "+e+" does not exist!");if(void 0===u[n]&&!t)throw new TypeError("intrinsic "+e+" exists, but is not available. Please file an issue!");return u[n]}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!a.default.isMoment(e)||!a.default.isMoment(t))&&(!(0,o.default)(e,t)&&!(0,i.default)(e,t))};var a=r(n(1)),o=r(n(35)),i=r(n(24))},function(e,t,n){"use strict";e.exports=n(251)},function(e,t,n){e.exports=n(256)},,function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.PureCalendarDay=void 0;var a=r(n(10)),o=r(n(11)),i=r(n(12)),s=r(n(8)),u=(r(n(6)),r(n(0))),l=(r(n(3)),r(n(15)),n(5),n(13)),d=r(n(1)),c=r(n(192)),f=n(7),h=(r(n(9)),r(n(193))),_=(r(n(37)),n(4)),m={day:(0,d.default)(),daySize:_.DAY_SIZE,isOutsideDay:!1,modifiers:new Set,isFocused:!1,tabIndex:-1,onDayClick:function(){},onDayMouseEnter:function(){},onDayMouseLeave:function(){},renderDayContents:null,ariaLabelFormat:"dddd, LL",phrases:f.CalendarDayPhrases},p=function(e){(0,s.default)(n,e);var t=n.prototype;function n(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return(t=e.call.apply(e,[this].concat(r))||this).setButtonRef=t.setButtonRef.bind((0,i.default)(t)),t}return t[!u.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentDidUpdate=function(e){var t=this,n=this.props,r=n.isFocused,a=n.tabIndex;0===a&&(r||a!==e.tabIndex)&&(0,c.default)(function(){t.buttonRef&&t.buttonRef.focus()})},t.onDayClick=function(e,t){var n=this.props.onDayClick;n(e,t)},t.onDayMouseEnter=function(e,t){var n=this.props.onDayMouseEnter;n(e,t)},t.onDayMouseLeave=function(e,t){var n=this.props.onDayMouseLeave;n(e,t)},t.onKeyDown=function(e,t){var n=this.props.onDayClick,r=t.key;"Enter"!==r&&" "!==r||n(e,t)},t.setButtonRef=function(e){this.buttonRef=e},t.render=function(){var e=this,t=this.props,n=t.day,r=t.ariaLabelFormat,a=t.daySize,i=t.isOutsideDay,s=t.modifiers,d=t.renderDayContents,c=t.tabIndex,f=t.styles,_=t.phrases;if(!n)return u.default.createElement("td",null);var m=(0,h.default)(n,r,a,s,_),p=m.daySizeStyles,y=m.useDefaultCursor,v=m.selected,b=m.hoveredSpan,g=m.isOutsideRange,M=m.ariaLabel;return u.default.createElement("td",(0,o.default)({},(0,l.css)(f.CalendarDay,y&&f.CalendarDay__defaultCursor,f.CalendarDay__default,i&&f.CalendarDay__outside,s.has("today")&&f.CalendarDay__today,s.has("first-day-of-week")&&f.CalendarDay__firstDayOfWeek,s.has("last-day-of-week")&&f.CalendarDay__lastDayOfWeek,s.has("hovered-offset")&&f.CalendarDay__hovered_offset,s.has("hovered-start-first-possible-end")&&f.CalendarDay__hovered_start_first_possible_end,s.has("hovered-start-blocked-minimum-nights")&&f.CalendarDay__hovered_start_blocked_min_nights,s.has("highlighted-calendar")&&f.CalendarDay__highlighted_calendar,s.has("blocked-minimum-nights")&&f.CalendarDay__blocked_minimum_nights,s.has("blocked-calendar")&&f.CalendarDay__blocked_calendar,b&&f.CalendarDay__hovered_span,s.has("selected-span")&&f.CalendarDay__selected_span,s.has("selected-start")&&f.CalendarDay__selected_start,s.has("selected-end")&&f.CalendarDay__selected_end,v&&!s.has("selected-span")&&f.CalendarDay__selected,g&&f.CalendarDay__blocked_out_of_range,p),{role:"button",ref:this.setButtonRef,"aria-disabled":s.has("blocked"),"aria-label":M,onMouseEnter:function(t){e.onDayMouseEnter(n,t)},onMouseLeave:function(t){e.onDayMouseLeave(n,t)},onMouseUp:function(e){e.currentTarget.blur()},onClick:function(t){e.onDayClick(n,t)},onKeyDown:function(t){e.onKeyDown(n,t)},tabIndex:c}),d?d(n,s):n.format("D"))},n}(u.default.PureComponent||u.default.Component);t.PureCalendarDay=p,p.propTypes={},p.defaultProps=m;var y=(0,l.withStyles)(function(e){var t=e.reactDates,n=t.color;return{CalendarDay:{boxSizing:"border-box",cursor:"pointer",fontSize:t.font.size,textAlign:"center",":active":{outline:0}},CalendarDay__defaultCursor:{cursor:"default"},CalendarDay__default:{border:"1px solid ".concat(n.core.borderLight),color:n.text,background:n.background,":hover":{background:n.core.borderLight,border:"1px solid ".concat(n.core.borderLight),color:"inherit"}},CalendarDay__hovered_offset:{background:n.core.borderBright,border:"1px double ".concat(n.core.borderLight),color:"inherit"},CalendarDay__outside:{border:0,background:n.outside.backgroundColor,color:n.outside.color,":hover":{border:0}},CalendarDay__blocked_minimum_nights:{background:n.minimumNights.backgroundColor,border:"1px solid ".concat(n.minimumNights.borderColor),color:n.minimumNights.color,":hover":{background:n.minimumNights.backgroundColor_hover,color:n.minimumNights.color_active},":active":{background:n.minimumNights.backgroundColor_active,color:n.minimumNights.color_active}},CalendarDay__highlighted_calendar:{background:n.highlighted.backgroundColor,color:n.highlighted.color,":hover":{background:n.highlighted.backgroundColor_hover,color:n.highlighted.color_active},":active":{background:n.highlighted.backgroundColor_active,color:n.highlighted.color_active}},CalendarDay__selected_span:{background:n.selectedSpan.backgroundColor,border:"1px double ".concat(n.selectedSpan.borderColor),color:n.selectedSpan.color,":hover":{background:n.selectedSpan.backgroundColor_hover,border:"1px double ".concat(n.selectedSpan.borderColor),color:n.selectedSpan.color_active},":active":{background:n.selectedSpan.backgroundColor_active,border:"1px double ".concat(n.selectedSpan.borderColor),color:n.selectedSpan.color_active}},CalendarDay__selected:{background:n.selected.backgroundColor,border:"1px double ".concat(n.selected.borderColor),color:n.selected.color,":hover":{background:n.selected.backgroundColor_hover,border:"1px double ".concat(n.selected.borderColor),color:n.selected.color_active},":active":{background:n.selected.backgroundColor_active,border:"1px double ".concat(n.selected.borderColor),color:n.selected.color_active}},CalendarDay__hovered_span:{background:n.hoveredSpan.backgroundColor,border:"1px double ".concat(n.hoveredSpan.borderColor),color:n.hoveredSpan.color,":hover":{background:n.hoveredSpan.backgroundColor_hover,border:"1px double ".concat(n.hoveredSpan.borderColor),color:n.hoveredSpan.color_active},":active":{background:n.hoveredSpan.backgroundColor_active,border:"1px double ".concat(n.hoveredSpan.borderColor),color:n.hoveredSpan.color_active}},CalendarDay__blocked_calendar:{background:n.blocked_calendar.backgroundColor,border:"1px solid ".concat(n.blocked_calendar.borderColor),color:n.blocked_calendar.color,":hover":{background:n.blocked_calendar.backgroundColor_hover,border:"1px solid ".concat(n.blocked_calendar.borderColor),color:n.blocked_calendar.color_active},":active":{background:n.blocked_calendar.backgroundColor_active,border:"1px solid ".concat(n.blocked_calendar.borderColor),color:n.blocked_calendar.color_active}},CalendarDay__blocked_out_of_range:{background:n.blocked_out_of_range.backgroundColor,border:"1px solid ".concat(n.blocked_out_of_range.borderColor),color:n.blocked_out_of_range.color,":hover":{background:n.blocked_out_of_range.backgroundColor_hover,border:"1px solid ".concat(n.blocked_out_of_range.borderColor),color:n.blocked_out_of_range.color_active},":active":{background:n.blocked_out_of_range.backgroundColor_active,border:"1px solid ".concat(n.blocked_out_of_range.borderColor),color:n.blocked_out_of_range.color_active}},CalendarDay__hovered_start_first_possible_end:{background:n.core.borderLighter,border:"1px double ".concat(n.core.borderLighter)},CalendarDay__hovered_start_blocked_min_nights:{background:n.core.borderLighter,border:"1px double ".concat(n.core.borderLight)},CalendarDay__selected_start:{},CalendarDay__selected_end:{},CalendarDay__today:{},CalendarDay__firstDayOfWeek:{},CalendarDay__lastDayOfWeek:{}}},{pureComponent:void 0!==u.default.PureComponent})(p);t.default=y},function(e,t,n){"use strict";var r=Array.prototype.slice,a=n(187),o=Object.keys,i=o?function(e){return o(e)}:n(263),s=Object.keys;i.shim=function(){Object.keys?function(){var e=Object.keys(arguments);return e&&e.length===arguments.length}(1,2)||(Object.keys=function(e){return a(e)?s(r.call(e)):s(e)}):Object.keys=i;return Object.keys||i},e.exports=i},function(e,t,n){var r=n(270),a=n(271),o=n(272);e.exports=function(e){return r(e)||a(e)||o()}},function(e,t,n){e.exports=n(281)},function(e,t,n){"use strict";var r=n(16),a=n(200),o=n(209),i=n(292),s=o();r(s,{getPolyfill:o,implementation:a,shim:i}),e.exports=s},function(e,t,n){"use strict";var r=Function.prototype.toString,a=/^\s*class\b/,o=function(e){try{var t=r.call(e);return a.test(t)}catch(e){return!1}},i=Object.prototype.toString,s="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;e.exports=function(e){if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;if("function"==typeof e&&!e.prototype)return!0;if(s)return function(e){try{return!o(e)&&(r.call(e),!0)}catch(e){return!1}}(e);if(o(e))return!1;var t=i.call(e);return"[object Function]"===t||"[object GeneratorFunction]"===t}},function(e,t,n){var r=n(19).call(Function.call,Object.prototype.hasOwnProperty),a=Object.assign;e.exports=function(e,t){if(a)return a(e,t);for(var n in t)r(t,n)&&(e[n]=t[n]);return e}},function(e,t,n){"use strict";function r(e,t,n){var r="number"==typeof t,a="number"==typeof n,o="number"==typeof e;return r&&a?t+n:r&&o?t+e:r?t:a&&o?n+e:a?n:o?2*e:0}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=e.font.input,a=n.lineHeight,o=n.lineHeight_small,i=e.spacing,s=i.inputPadding,u=i.displayTextPaddingVertical,l=i.displayTextPaddingTop,d=i.displayTextPaddingBottom,c=i.displayTextPaddingVertical_small,f=i.displayTextPaddingTop_small,h=i.displayTextPaddingBottom_small,_=t?o:a,m=t?r(c,f,h):r(u,l,d);return parseInt(_,10)+2*s+m}},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=a.default.isMoment(e)?e:(0,o.default)(e,t);return n?n.format(i.DISPLAY_FORMAT):null};var a=r(n(1)),o=r(n(25)),i=n(4)},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){if(!a.default.isMoment(e))return!1;var f=(0,s.default)(t),h=f+"+"+n;if(r)return u.has(f)||u.set(f,t.clone().startOf("month").startOf("week")),!(0,o.default)(e,u.get(f))&&(l.has(h)||l.set(h,t.clone().endOf("week").add(n-1,"months").endOf("month").endOf("week")),!(0,i.default)(e,l.get(h)));d.has(f)||d.set(f,t.clone().startOf("month"));if((0,o.default)(e,d.get(f)))return!1;c.has(h)||c.set(h,t.clone().add(n-1,"months").endOf("month"));return!(0,i.default)(e,c.get(h))};var a=r(n(1)),o=r(n(35)),i=r(n(41)),s=r(n(39)),u=new Map,l=new Map,d=new Map,c=new Map},function(e,t,n){"use strict";var r=n(309),a=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.PureDayPicker=t.defaultProps=void 0;var o=a(n(10)),i=a(n(11)),s=a(n(47)),u=a(n(12)),l=a(n(8)),d=a(n(6)),c=a(n(0)),f=(a(n(3)),n(5),n(13)),h=a(n(1)),_=a(n(222)),m=a(n(27)),p=a(n(48)),y=n(7),v=(a(n(9)),a(n(18))),b=a(n(197)),g=a(n(310)),M=r(n(313)),k=a(n(315)),D=a(n(198)),L=a(n(196)),w=a(n(316)),T=a(n(55)),S=(a(n(37)),a(n(26)),a(n(20)),a(n(34)),n(4)),Y={enableOutsideDays:!1,numberOfMonths:2,orientation:S.HORIZONTAL_ORIENTATION,withPortal:!1,onOutsideClick:function(){},hidden:!1,initialVisibleMonth:function(){return(0,h.default)()},firstDayOfWeek:null,renderCalendarInfo:null,calendarInfoPosition:S.INFO_POSITION_BOTTOM,hideKeyboardShortcutsPanel:!1,daySize:S.DAY_SIZE,isRTL:!1,verticalHeight:null,noBorder:!1,transitionDuration:void 0,verticalBorderSpacing:void 0,horizontalMonthPadding:13,renderKeyboardShortcutsButton:void 0,disablePrev:!1,disableNext:!1,navPrev:null,navNext:null,noNavButtons:!1,onPrevMonthClick:function(){},onNextMonthClick:function(){},onMonthChange:function(){},onYearChange:function(){},onMultiplyScrollableMonths:function(){},renderMonthText:null,renderMonthElement:null,modifiers:{},renderCalendarDay:void 0,renderDayContents:null,onDayClick:function(){},onDayMouseEnter:function(){},onDayMouseLeave:function(){},isFocused:!1,getFirstFocusableDay:null,onBlur:function(){},showKeyboardShortcuts:!1,onTab:function(){},onShiftTab:function(){},monthFormat:"MMMM YYYY",weekDayFormat:"dd",phrases:y.DayPickerPhrases,dayAriaLabelFormat:void 0};t.defaultProps=Y;var P=function(e){(0,l.default)(n,e);var t=n.prototype;function n(t){var n;n=e.call(this,t)||this;var r=t.hidden?(0,h.default)():t.initialVisibleMonth(),a=r.clone().startOf("month");t.getFirstFocusableDay&&(a=t.getFirstFocusableDay(r));var o=t.horizontalMonthPadding,i=t.isRTL&&n.isHorizontal()?-(0,D.default)(t.daySize,o):0;return n.hasSetInitialVisibleMonth=!t.hidden,n.state={currentMonth:r,monthTransition:null,translationValue:i,scrollableMonthMultiple:1,calendarMonthWidth:(0,D.default)(t.daySize,o),focusedDate:!t.hidden||t.isFocused?a:null,nextFocusedDate:null,showKeyboardShortcuts:t.showKeyboardShortcuts,onKeyboardShortcutsPanelClose:function(){},isTouchDevice:(0,m.default)(),withMouseInteractions:!0,calendarInfoWidth:0,monthTitleHeight:null,hasSetHeight:!1},n.setCalendarMonthWeeks(r),n.calendarMonthGridHeight=0,n.setCalendarInfoWidthTimeout=null,n.setCalendarMonthGridHeightTimeout=null,n.onKeyDown=n.onKeyDown.bind((0,u.default)(n)),n.throttledKeyDown=(0,_.default)(n.onFinalKeyDown,200,{trailing:!1}),n.onPrevMonthClick=n.onPrevMonthClick.bind((0,u.default)(n)),n.onPrevMonthTransition=n.onPrevMonthTransition.bind((0,u.default)(n)),n.onNextMonthClick=n.onNextMonthClick.bind((0,u.default)(n)),n.onNextMonthTransition=n.onNextMonthTransition.bind((0,u.default)(n)),n.onMonthChange=n.onMonthChange.bind((0,u.default)(n)),n.onYearChange=n.onYearChange.bind((0,u.default)(n)),n.multiplyScrollableMonths=n.multiplyScrollableMonths.bind((0,u.default)(n)),n.updateStateAfterMonthTransition=n.updateStateAfterMonthTransition.bind((0,u.default)(n)),n.openKeyboardShortcutsPanel=n.openKeyboardShortcutsPanel.bind((0,u.default)(n)),n.closeKeyboardShortcutsPanel=n.closeKeyboardShortcutsPanel.bind((0,u.default)(n)),n.setCalendarInfoRef=n.setCalendarInfoRef.bind((0,u.default)(n)),n.setContainerRef=n.setContainerRef.bind((0,u.default)(n)),n.setTransitionContainerRef=n.setTransitionContainerRef.bind((0,u.default)(n)),n.setMonthTitleHeight=n.setMonthTitleHeight.bind((0,u.default)(n)),n}return t[!c.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,o.default)(this.props,e)||!(0,o.default)(this.state,t)},t.componentDidMount=function(){var e=this.state.currentMonth;this.calendarInfo?this.setState({isTouchDevice:(0,m.default)(),calendarInfoWidth:(0,L.default)(this.calendarInfo,"width",!0,!0)}):this.setState({isTouchDevice:(0,m.default)()}),this.setCalendarMonthWeeks(e)},t.componentWillReceiveProps=function(e){var t=e.hidden,n=e.isFocused,r=e.showKeyboardShortcuts,a=e.onBlur,o=e.renderMonthText,i=e.horizontalMonthPadding,s=this.state.currentMonth;t||this.hasSetInitialVisibleMonth||(this.hasSetInitialVisibleMonth=!0,this.setState({currentMonth:e.initialVisibleMonth()}));var u=this.props,l=u.daySize,d=u.isFocused,c=u.renderMonthText;if(e.daySize!==l&&this.setState({calendarMonthWidth:(0,D.default)(e.daySize,i)}),n!==d)if(n){var f=this.getFocusedDay(s),h=this.state.onKeyboardShortcutsPanelClose;e.showKeyboardShortcuts&&(h=a),this.setState({showKeyboardShortcuts:r,onKeyboardShortcutsPanelClose:h,focusedDate:f,withMouseInteractions:!1})}else this.setState({focusedDate:null});o!==c&&this.setState({monthTitleHeight:null})},t.componentWillUpdate=function(){var e=this,t=this.props.transitionDuration;this.calendarInfo&&(this.setCalendarInfoWidthTimeout=setTimeout(function(){var t=e.state.calendarInfoWidth,n=(0,L.default)(e.calendarInfo,"width",!0,!0);t!==n&&e.setState({calendarInfoWidth:n})},t))},t.componentDidUpdate=function(e){var t=this.props,n=t.orientation,r=t.daySize,a=t.isFocused,o=t.numberOfMonths,i=this.state,u=i.focusedDate,l=i.monthTitleHeight;if(this.isHorizontal()&&(n!==e.orientation||r!==e.daySize)){var d=this.calendarMonthWeeks.slice(1,o+1),c=l+Math.max.apply(Math,[0].concat((0,s.default)(d)))*(r-1)+1;this.adjustDayPickerHeight(c)}e.isFocused||!a||u||this.container.focus()},t.componentWillUnmount=function(){clearTimeout(this.setCalendarInfoWidthTimeout),clearTimeout(this.setCalendarMonthGridHeightTimeout)},t.onKeyDown=function(e){e.stopPropagation(),S.MODIFIER_KEY_NAMES.has(e.key)||this.throttledKeyDown(e)},t.onFinalKeyDown=function(e){this.setState({withMouseInteractions:!1});var t=this.props,n=t.onBlur,r=t.onTab,a=t.onShiftTab,o=t.isRTL,i=this.state,s=i.focusedDate,u=i.showKeyboardShortcuts;if(s){var l=s.clone(),d=!1,c=(0,w.default)();switch(e.key){case"ArrowUp":e.preventDefault(),l.subtract(1,"week"),d=this.maybeTransitionPrevMonth(l);break;case"ArrowLeft":e.preventDefault(),o?l.add(1,"day"):l.subtract(1,"day"),d=this.maybeTransitionPrevMonth(l);break;case"Home":e.preventDefault(),l.startOf("week"),d=this.maybeTransitionPrevMonth(l);break;case"PageUp":e.preventDefault(),l.subtract(1,"month"),d=this.maybeTransitionPrevMonth(l);break;case"ArrowDown":e.preventDefault(),l.add(1,"week"),d=this.maybeTransitionNextMonth(l);break;case"ArrowRight":e.preventDefault(),o?l.subtract(1,"day"):l.add(1,"day"),d=this.maybeTransitionNextMonth(l);break;case"End":e.preventDefault(),l.endOf("week"),d=this.maybeTransitionNextMonth(l);break;case"PageDown":e.preventDefault(),l.add(1,"month"),d=this.maybeTransitionNextMonth(l);break;case"?":this.openKeyboardShortcutsPanel(function(){c&&c.focus()});break;case"Escape":u?this.closeKeyboardShortcutsPanel():n(e);break;case"Tab":e.shiftKey?a():r(e)}d||this.setState({focusedDate:l})}},t.onPrevMonthClick=function(e){e&&e.preventDefault(),this.onPrevMonthTransition()},t.onPrevMonthTransition=function(e){var t,n=this.props,r=n.daySize,a=n.isRTL,o=n.numberOfMonths,i=this.state,u=i.calendarMonthWidth,l=i.monthTitleHeight;if(this.isVertical())t=l+this.calendarMonthWeeks[0]*(r-1)+1;else if(this.isHorizontal()){t=u,a&&(t=-2*u);var d=this.calendarMonthWeeks.slice(0,o),c=l+Math.max.apply(Math,[0].concat((0,s.default)(d)))*(r-1)+1;this.adjustDayPickerHeight(c)}this.setState({monthTransition:"prev",translationValue:t,focusedDate:null,nextFocusedDate:e})},t.onMonthChange=function(e){this.setCalendarMonthWeeks(e),this.calculateAndSetDayPickerHeight(),this.setState({monthTransition:"month_selection",translationValue:1e-5,focusedDate:null,nextFocusedDate:e,currentMonth:e})},t.onYearChange=function(e){this.setCalendarMonthWeeks(e),this.calculateAndSetDayPickerHeight(),this.setState({monthTransition:"year_selection",translationValue:1e-4,focusedDate:null,nextFocusedDate:e,currentMonth:e})},t.onNextMonthClick=function(e){e&&e.preventDefault(),this.onNextMonthTransition()},t.onNextMonthTransition=function(e){var t,n=this.props,r=n.isRTL,a=n.numberOfMonths,o=n.daySize,i=this.state,u=i.calendarMonthWidth,l=i.monthTitleHeight;this.isVertical()&&(t=-(l+this.calendarMonthWeeks[1]*(o-1)+1));if(this.isHorizontal()){t=-u,r&&(t=0);var d=this.calendarMonthWeeks.slice(2,a+2),c=l+Math.max.apply(Math,[0].concat((0,s.default)(d)))*(o-1)+1;this.adjustDayPickerHeight(c)}this.setState({monthTransition:"next",translationValue:t,focusedDate:null,nextFocusedDate:e})},t.getFirstDayOfWeek=function(){var e=this.props.firstDayOfWeek;return null==e?h.default.localeData().firstDayOfWeek():e},t.getFirstVisibleIndex=function(){var e=this.props.orientation,t=this.state.monthTransition;if(e===S.VERTICAL_SCROLLABLE)return 0;var n=1;return"prev"===t?n-=1:"next"===t&&(n+=1),n},t.getFocusedDay=function(e){var t,n=this.props,r=n.getFirstFocusableDay,a=n.numberOfMonths;return r&&(t=r(e)),!e||t&&(0,T.default)(t,e,a)||(t=e.clone().startOf("month")),t},t.setMonthTitleHeight=function(e){var t=this;this.setState({monthTitleHeight:e},function(){t.calculateAndSetDayPickerHeight()})},t.setCalendarMonthWeeks=function(e){var t=this.props.numberOfMonths;this.calendarMonthWeeks=[];for(var n=e.clone().subtract(1,"months"),r=this.getFirstDayOfWeek(),a=0;a<t+2;a+=1){var o=(0,k.default)(n,r);this.calendarMonthWeeks.push(o),n=n.add(1,"months")}},t.setContainerRef=function(e){this.container=e},t.setCalendarInfoRef=function(e){this.calendarInfo=e},t.setTransitionContainerRef=function(e){this.transitionContainer=e},t.maybeTransitionNextMonth=function(e){var t=this.props.numberOfMonths,n=this.state,r=n.currentMonth,a=n.focusedDate,o=e.month(),i=a.month(),s=(0,T.default)(e,r,t);return o!==i&&!s&&(this.onNextMonthTransition(e),!0)},t.maybeTransitionPrevMonth=function(e){var t=this.props.numberOfMonths,n=this.state,r=n.currentMonth,a=n.focusedDate,o=e.month(),i=a.month(),s=(0,T.default)(e,r,t);return o!==i&&!s&&(this.onPrevMonthTransition(e),!0)},t.multiplyScrollableMonths=function(e){var t=this.props.onMultiplyScrollableMonths;e&&e.preventDefault(),t&&t(e),this.setState(function(e){return{scrollableMonthMultiple:e.scrollableMonthMultiple+1}})},t.isHorizontal=function(){return this.props.orientation===S.HORIZONTAL_ORIENTATION},t.isVertical=function(){var e=this.props.orientation;return e===S.VERTICAL_ORIENTATION||e===S.VERTICAL_SCROLLABLE},t.updateStateAfterMonthTransition=function(){var e=this,t=this.props,n=t.onPrevMonthClick,r=t.onNextMonthClick,a=t.numberOfMonths,o=t.onMonthChange,i=t.onYearChange,u=t.isRTL,l=this.state,d=l.currentMonth,c=l.monthTransition,f=l.focusedDate,h=l.nextFocusedDate,_=l.withMouseInteractions,m=l.calendarMonthWidth;if(c){var p=d.clone(),y=this.getFirstDayOfWeek();if("prev"===c){p.subtract(1,"month"),n&&n(p);var v=p.clone().subtract(1,"month"),b=(0,k.default)(v,y);this.calendarMonthWeeks=[b].concat((0,s.default)(this.calendarMonthWeeks.slice(0,-1)))}else if("next"===c){p.add(1,"month"),r&&r(p);var g=p.clone().add(a,"month"),M=(0,k.default)(g,y);this.calendarMonthWeeks=[].concat((0,s.default)(this.calendarMonthWeeks.slice(1)),[M])}else"month_selection"===c?o&&o(p):"year_selection"===c&&i&&i(p);var D=null;h?D=h:f||_||(D=this.getFocusedDay(p)),this.setState({currentMonth:p,monthTransition:null,translationValue:u&&this.isHorizontal()?-m:0,nextFocusedDate:null,focusedDate:D},function(){if(_){var t=(0,w.default)();t&&t!==document.body&&e.container.contains(t)&&t.blur&&t.blur()}})}},t.adjustDayPickerHeight=function(e){var t=this,n=e+23;n!==this.calendarMonthGridHeight&&(this.transitionContainer.style.height="".concat(n,"px"),this.calendarMonthGridHeight||(this.setCalendarMonthGridHeightTimeout=setTimeout(function(){t.setState({hasSetHeight:!0})},0)),this.calendarMonthGridHeight=n)},t.calculateAndSetDayPickerHeight=function(){var e=this.props,t=e.daySize,n=e.numberOfMonths,r=this.state.monthTitleHeight,a=this.calendarMonthWeeks.slice(1,n+1),o=r+Math.max.apply(Math,[0].concat((0,s.default)(a)))*(t-1)+1;this.isHorizontal()&&this.adjustDayPickerHeight(o)},t.openKeyboardShortcutsPanel=function(e){this.setState({showKeyboardShortcuts:!0,onKeyboardShortcutsPanelClose:e})},t.closeKeyboardShortcutsPanel=function(){var e=this.state.onKeyboardShortcutsPanelClose;e&&e(),this.setState({onKeyboardShortcutsPanelClose:null,showKeyboardShortcuts:!1})},t.renderNavigation=function(){var e=this.props,t=e.disablePrev,n=e.disableNext,r=e.navPrev,a=e.navNext,o=e.noNavButtons,i=e.orientation,s=e.phrases,u=e.isRTL;if(o)return null;var l=i===S.VERTICAL_SCROLLABLE?this.multiplyScrollableMonths:this.onNextMonthClick;return c.default.createElement(g.default,{disablePrev:t,disableNext:n,onPrevMonthClick:this.onPrevMonthClick,onNextMonthClick:l,navPrev:r,navNext:a,orientation:i,phrases:s,isRTL:u})},t.renderWeekHeader=function(e){var t=this.props,n=t.daySize,r=t.horizontalMonthPadding,a=t.orientation,o=t.weekDayFormat,s=t.styles,u=this.state.calendarMonthWidth,l=a===S.VERTICAL_SCROLLABLE,d={left:e*u},_={marginLeft:-u/2},m={};this.isHorizontal()?m=d:this.isVertical()&&!l&&(m=_);for(var p=this.getFirstDayOfWeek(),y=[],v=0;v<7;v+=1)y.push(c.default.createElement("li",(0,i.default)({key:v},(0,f.css)(s.DayPicker_weekHeader_li,{width:n})),c.default.createElement("small",null,(0,h.default)().day((v+p)%7).format(o))));return c.default.createElement("div",(0,i.default)({},(0,f.css)(s.DayPicker_weekHeader,this.isVertical()&&s.DayPicker_weekHeader__vertical,l&&s.DayPicker_weekHeader__verticalScrollable,m,{padding:"0 ".concat(r,"px")}),{key:"week-".concat(e)}),c.default.createElement("ul",(0,f.css)(s.DayPicker_weekHeader_ul),y))},t.render=function(){for(var e=this,t=this.state,n=t.calendarMonthWidth,r=t.currentMonth,a=t.monthTransition,o=t.translationValue,s=t.scrollableMonthMultiple,u=t.focusedDate,l=t.showKeyboardShortcuts,d=t.isTouchDevice,h=t.hasSetHeight,_=t.calendarInfoWidth,m=t.monthTitleHeight,y=this.props,v=y.enableOutsideDays,g=y.numberOfMonths,k=y.orientation,D=y.modifiers,L=y.withPortal,w=y.onDayClick,T=y.onDayMouseEnter,Y=y.onDayMouseLeave,P=y.firstDayOfWeek,O=y.renderMonthText,E=y.renderCalendarDay,x=y.renderDayContents,C=y.renderCalendarInfo,j=y.renderMonthElement,H=y.renderKeyboardShortcutsButton,I=y.calendarInfoPosition,A=y.hideKeyboardShortcutsPanel,F=y.onOutsideClick,R=y.monthFormat,N=y.daySize,W=y.isFocused,z=y.isRTL,B=y.styles,U=y.theme,K=y.phrases,V=y.verticalHeight,$=y.dayAriaLabelFormat,G=y.noBorder,J=y.transitionDuration,q=y.verticalBorderSpacing,Q=y.horizontalMonthPadding,Z=U.reactDates.spacing.dayPickerHorizontalPadding,X=this.isHorizontal(),ee=this.isVertical()?1:g,te=[],ne=0;ne<ee;ne+=1)te.push(this.renderWeekHeader(ne));var re,ae=k===S.VERTICAL_SCROLLABLE;X?re=this.calendarMonthGridHeight:!this.isVertical()||ae||L||(re=V||1.75*n);var oe=null!==a,ie=!oe&&W,se=M.BOTTOM_RIGHT;this.isVertical()&&(se=L?M.TOP_LEFT:M.TOP_RIGHT);var ue=X&&h,le=I===S.INFO_POSITION_TOP,de=I===S.INFO_POSITION_BOTTOM,ce=I===S.INFO_POSITION_BEFORE,fe=I===S.INFO_POSITION_AFTER,he=ce||fe,_e=C&&c.default.createElement("div",(0,i.default)({ref:this.setCalendarInfoRef},(0,f.css)(he&&B.DayPicker_calendarInfo__horizontal)),C()),me=C&&he?_:0,pe=this.getFirstVisibleIndex(),ye=n*g+2*Z,ve=ye+me+1,be={width:X&&ye,height:re},ge={width:X&&ye},Me={width:X&&ve,marginLeft:X&&L?-ve/2:null,marginTop:X&&L?-n/2:null};return c.default.createElement("div",(0,i.default)({role:"application","aria-roledescription":K.roleDescription,"aria-label":K.calendarLabel},(0,f.css)(B.DayPicker,X&&B.DayPicker__horizontal,ae&&B.DayPicker__verticalScrollable,X&&L&&B.DayPicker_portal__horizontal,this.isVertical()&&L&&B.DayPicker_portal__vertical,Me,!m&&B.DayPicker__hidden,!G&&B.DayPicker__withBorder)),c.default.createElement(p.default,{onOutsideClick:F},(le||ce)&&_e,c.default.createElement("div",(0,f.css)(ge,he&&X&&B.DayPicker_wrapper__horizontal),c.default.createElement("div",(0,i.default)({},(0,f.css)(B.DayPicker_weekHeaders,X&&B.DayPicker_weekHeaders__horizontal),{"aria-hidden":"true",role:"presentation"}),te),c.default.createElement("div",(0,i.default)({},(0,f.css)(B.DayPicker_focusRegion),{ref:this.setContainerRef,onClick:function(e){e.stopPropagation()},onKeyDown:this.onKeyDown,onMouseUp:function(){e.setState({withMouseInteractions:!0})},role:"region",tabIndex:-1}),!ae&&this.renderNavigation(),c.default.createElement("div",(0,i.default)({},(0,f.css)(B.DayPicker_transitionContainer,ue&&B.DayPicker_transitionContainer__horizontal,this.isVertical()&&B.DayPicker_transitionContainer__vertical,ae&&B.DayPicker_transitionContainer__verticalScrollable,be),{ref:this.setTransitionContainerRef}),c.default.createElement(b.default,{setMonthTitleHeight:m?void 0:this.setMonthTitleHeight,translationValue:o,enableOutsideDays:v,firstVisibleMonthIndex:pe,initialMonth:r,isAnimating:oe,modifiers:D,orientation:k,numberOfMonths:g*s,onDayClick:w,onDayMouseEnter:T,onDayMouseLeave:Y,onMonthChange:this.onMonthChange,onYearChange:this.onYearChange,renderMonthText:O,renderCalendarDay:E,renderDayContents:x,renderMonthElement:j,onMonthTransitionEnd:this.updateStateAfterMonthTransition,monthFormat:R,daySize:N,firstDayOfWeek:P,isFocused:ie,focusedDate:u,phrases:K,isRTL:z,dayAriaLabelFormat:$,transitionDuration:J,verticalBorderSpacing:q,horizontalMonthPadding:Q}),ae&&this.renderNavigation()),!d&&!A&&c.default.createElement(M.default,{block:this.isVertical()&&!L,buttonLocation:se,showKeyboardShortcutsPanel:l,openKeyboardShortcutsPanel:this.openKeyboardShortcutsPanel,closeKeyboardShortcutsPanel:this.closeKeyboardShortcutsPanel,phrases:K,renderKeyboardShortcutsButton:H}))),(de||fe)&&_e))},n}(c.default.PureComponent||c.default.Component);t.PureDayPicker=P,P.propTypes={},P.defaultProps=Y;var O=(0,f.withStyles)(function(e){var t=e.reactDates,n=t.color,r=t.font,a=t.noScrollBarOnVerticalScrollable,o=t.spacing,i=t.zIndex;return{DayPicker:{background:n.background,position:"relative",textAlign:(0,v.default)("left")},DayPicker__horizontal:{background:n.background},DayPicker__verticalScrollable:{height:"100%"},DayPicker__hidden:{visibility:"hidden"},DayPicker__withBorder:{boxShadow:(0,v.default)("0 2px 6px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(0, 0, 0, 0.07)"),borderRadius:3},DayPicker_portal__horizontal:{boxShadow:"none",position:"absolute",left:(0,v.default)("50%"),top:"50%"},DayPicker_portal__vertical:{position:"initial"},DayPicker_focusRegion:{outline:"none"},DayPicker_calendarInfo__horizontal:{display:"inline-block",verticalAlign:"top"},DayPicker_wrapper__horizontal:{display:"inline-block",verticalAlign:"top"},DayPicker_weekHeaders:{position:"relative"},DayPicker_weekHeaders__horizontal:{marginLeft:(0,v.default)(o.dayPickerHorizontalPadding)},DayPicker_weekHeader:{color:n.placeholderText,position:"absolute",top:62,zIndex:i+2,textAlign:(0,v.default)("left")},DayPicker_weekHeader__vertical:{left:(0,v.default)("50%")},DayPicker_weekHeader__verticalScrollable:{top:0,display:"table-row",borderBottom:"1px solid ".concat(n.core.border),background:n.background,marginLeft:(0,v.default)(0),left:(0,v.default)(0),width:"100%",textAlign:"center"},DayPicker_weekHeader_ul:{listStyle:"none",margin:"1px 0",paddingLeft:(0,v.default)(0),paddingRight:(0,v.default)(0),fontSize:r.size},DayPicker_weekHeader_li:{display:"inline-block",textAlign:"center"},DayPicker_transitionContainer:{position:"relative",overflow:"hidden",borderRadius:3},DayPicker_transitionContainer__horizontal:{transition:"height 0.2s ease-in-out"},DayPicker_transitionContainer__vertical:{width:"100%"},DayPicker_transitionContainer__verticalScrollable:(0,d.default)({paddingTop:20,height:"100%",position:"absolute",top:0,bottom:0,right:(0,v.default)(0),left:(0,v.default)(0),overflowY:"scroll"},a&&{"-webkitOverflowScrolling":"touch","::-webkit-scrollbar":{"-webkit-appearance":"none",display:"none"}})}},{pureComponent:void 0!==c.default.PureComponent})(P);t.default=O},function(e,t,n){"use strict";(function(e,r){var a,o=n(242);a="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(o.a)(a);t.a=i}).call(this,n(22),n(252)(e))},function(e,t,n){var r=n(253);e.exports=h,e.exports.parse=o,e.exports.compile=function(e,t){return s(o(e,t))},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=f;var a=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,t){for(var n,r=[],o=0,i=0,s="",d=t&&t.delimiter||"/";null!=(n=a.exec(e));){var c=n[0],f=n[1],h=n.index;if(s+=e.slice(i,h),i=h+c.length,f)s+=f[1];else{var _=e[i],m=n[2],p=n[3],y=n[4],v=n[5],b=n[6],g=n[7];s&&(r.push(s),s="");var M=null!=m&&null!=_&&_!==m,k="+"===b||"*"===b,D="?"===b||"*"===b,L=n[2]||d,w=y||v;r.push({name:p||o++,prefix:m||"",delimiter:L,optional:D,repeat:k,partial:M,asterisk:!!g,pattern:w?l(w):g?".*":"[^"+u(L)+"]+?"})}}return i<e.length&&(s+=e.substr(i)),s&&r.push(s),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function s(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,a){for(var o="",s=n||{},u=(a||{}).pretty?i:encodeURIComponent,l=0;l<e.length;l++){var d=e[l];if("string"!=typeof d){var c,f=s[d.name];if(null==f){if(d.optional){d.partial&&(o+=d.prefix);continue}throw new TypeError('Expected "'+d.name+'" to be defined')}if(r(f)){if(!d.repeat)throw new TypeError('Expected "'+d.name+'" to not repeat, but received `'+JSON.stringify(f)+"`");if(0===f.length){if(d.optional)continue;throw new TypeError('Expected "'+d.name+'" to not be empty')}for(var h=0;h<f.length;h++){if(c=u(f[h]),!t[l].test(c))throw new TypeError('Expected all "'+d.name+'" to match "'+d.pattern+'", but received `'+JSON.stringify(c)+"`");o+=(0===h?d.prefix:d.delimiter)+c}}else{if(c=d.asterisk?encodeURI(f).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):u(f),!t[l].test(c))throw new TypeError('Expected "'+d.name+'" to match "'+d.pattern+'", but received "'+c+'"');o+=d.prefix+c}}else o+=d}return o}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function l(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function d(e,t){return e.keys=t,e}function c(e){return e.sensitive?"":"i"}function f(e,t,n){r(t)||(n=t||n,t=[]);for(var a=(n=n||{}).strict,o=!1!==n.end,i="",s=0;s<e.length;s++){var l=e[s];if("string"==typeof l)i+=u(l);else{var f=u(l.prefix),h="(?:"+l.pattern+")";t.push(l),l.repeat&&(h+="(?:"+f+h+")*"),i+=h=l.optional?l.partial?f+"("+h+")?":"(?:"+f+"("+h+"))?":f+"("+h+")"}}var _=u(n.delimiter||"/"),m=i.slice(-_.length)===_;return a||(i=(m?i.slice(0,-_.length):i)+"(?:"+_+"(?=$))?"),i+=o?"$":a&&m?"":"(?="+_+"|$)",d(new RegExp("^"+i,c(n)),t)}function h(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return d(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],a=0;a<e.length;a++)r.push(h(e[a],t,n).source);return d(new RegExp("(?:"+r.join("|")+")",c(n)),t)}(e,t,n):function(e,t,n){return f(o(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,u=i(e),l=1;l<arguments.length;l++){for(var d in n=Object(arguments[l]))a.call(n,d)&&(u[d]=n[d]);if(r){s=r(n);for(var c=0;c<s.length;c++)o.call(n,s[c])&&(u[s[c]]=n[s[c]])}}return u}},function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},o=function(e){return function(t,n,o,i){var s=r(t),u=a[e][r(t)];return 2===s&&(u=u[n?0:1]),u.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:o("s"),ss:o("s"),m:o("m"),mm:o("m"),h:o("h"),hh:o("h"),d:o("d"),dd:o("d"),M:o("M"),MM:o("M"),y:o("y"),yy:o("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-dz",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"أح_إث_ثلا_أر_خم_جم_سب".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,a,o,i){var s=n(t),u=r[e][n(t)];return 2===s&&(u=u[a?0:1]),u.replace(/%d/i,t)}},o=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:o,monthsShort:o,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a;return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}e.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),r=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function o(e){return e>1&&e<5&&1!=~~(e/10)}function i(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"pár sekund":"pár sekundami";case"ss":return t||r?a+(o(e)?"sekundy":"sekund"):a+"sekundami";case"m":return t?"minuta":r?"minutu":"minutou";case"mm":return t||r?a+(o(e)?"minuty":"minut"):a+"minutami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?a+(o(e)?"hodiny":"hodin"):a+"hodinami";case"d":return t||r?"den":"dnem";case"dd":return t||r?a+(o(e)?"dny":"dní"):a+"dny";case"M":return t||r?"měsíc":"měsícem";case"MM":return t||r?a+(o(e)?"měsíce":"měsíců"):a+"měsíci";case"y":return t||r?"rok":"rokem";case"yy":return t||r?a+(o(e)?"roky":"let"):a+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:i,ss:i,m:i,mm:i,h:i,hh:i,d:i,dd:i,M:i,MM:i,y:i,yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,r=this._calendarEl[e],a=t&&t.hours();return((n=r)instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(t)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-SG",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-a de] MMMM, YYYY",LLL:"D[-a de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-a de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"sekundoj",ss:"%d sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"ثانیه d%",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,a,o){var i="";switch(a){case"s":return o?"muutaman sekunnin":"muutama sekunti";case"ss":return o?"sekunnin":"sekuntia";case"m":return o?"minuutin":"minuutti";case"mm":i=o?"minuutin":"minuuttia";break;case"h":return o?"tunnin":"tunti";case"hh":i=o?"tunnin":"tuntia";break;case"d":return o?"päivän":"päivä";case"dd":i=o?"päivän":"päivää";break;case"M":return o?"kuukauden":"kuukausi";case"MM":i=o?"kuukauden":"kuukautta";break;case"y":return o?"vuoden":"vuosi";case"yy":i=o?"vuoden":"vuotta"}return i=function(e,r){return e<10?r?n[e]:t[e]:e}(e,o)+" "+i}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Méitheamh","Iúil","Lúnasa","Meán Fómhair","Deaireadh Fómhair","Samhain","Nollaig"],monthsShort:["Eaná","Feab","Márt","Aibr","Beal","Méit","Iúil","Lúna","Meán","Deai","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Satharn"],weekdaysShort:["Dom","Lua","Mái","Céa","Déa","hAo","Sat"],weekdaysMin:["Do","Lu","Má","Ce","Dé","hA","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné aig] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d mí",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["thodde secondanim","thodde second"],ss:[e+" secondanim",e+" second"],m:["eka mintan","ek minute"],mm:[e+" mintanim",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voranim",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disanim",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineanim",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsanim",e+" vorsam"]};return t?a[n][0]:a[n][1]}e.defineLocale("gom-latn",{months:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Ieta to] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fatlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:1,doy:4},meridiemParse:/rati|sokalli|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokalli"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokalli":e<16?"donparam":e<20?"sanje":"rati"}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પેહલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var a=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return a+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return a+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return a+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return a+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return a+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,r,a){var o=e+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?o+(n||a?"sekúndur":"sekúndum"):o+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?o+(n||a?"mínútur":"mínútum"):n?o+"mínúta":o+"mínútu";case"hh":return t(e)?o+(n||a?"klukkustundir":"klukkustundum"):o+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return t(e)?n?o+"dagar":o+(a?"daga":"dögum"):n?o+"dagur":o+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return t(e)?n?o+"mánuðir":o+(a?"mánuði":"mánuðum"):n?o+"mánuður":o+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return t(e)?o+(n||a?"ár":"árum"):o+(n||a?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()<this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()<e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return/(წამი|წუთი|საათი|წელი)/.test(e)?e.replace(/ი$/,"ში"):e+"ში"},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:r,monthsShort:r,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?a[n][0]:a[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(e){return e%10==0||e>10&&e<20}function a(e){return t[e].split("_")}function o(e,t,o,i){var s=e+" ";return 1===e?s+n(0,t,o[0],i):t?s+(r(e)?a(o)[1]:a(o)[0]):i?s+a(o)[1]:s+(r(e)?a(o)[1]:a(o)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:o,m:n,mm:o,h:n,hh:o,d:n,dd:o,M:n,MM:o,y:n,yy:o},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,a){return e+" "+n(t[a],e,r)}function a(e,r,a){return n(t[a],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var a="";if(t)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात्री"===t?e<4?e:e+12:"सकाळी"===t?e:"दुपारी"===t?e>=10?e:e+12:"सायंकाळी"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात्री":e<10?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");function r(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function a(e,t,n){var a=e+" ";switch(n){case"ss":return a+(r(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return a+(r(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return a+(r(e)?"godziny":"godzin");case"MM":return a+(r(e)?"miesiące":"miesięcy");case"yy":return a+(r(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?""===r?"("+n[e.month()]+"|"+t[e.month()]+")":/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:a,m:a,mm:a,h:a,hh:a,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:a,y:"rok",yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº"})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a;return"m"===n?t?"минута":"минуту":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function a(e,t,n,a){var o=e+" ";switch(n){case"s":return t||a?"pár sekúnd":"pár sekundami";case"ss":return t||a?o+(r(e)?"sekundy":"sekúnd"):o+"sekundami";case"m":return t?"minúta":a?"minútu":"minútou";case"mm":return t||a?o+(r(e)?"minúty":"minút"):o+"minútami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?o+(r(e)?"hodiny":"hodín"):o+"hodinami";case"d":return t||a?"deň":"dňom";case"dd":return t||a?o+(r(e)?"dni":"dní"):o+"dňami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?o+(r(e)?"mesiace":"mesiacov"):o+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?o+(r(e)?"roky":"rokov"):o+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+=1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return a+=1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return a+=1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami";case"d":return t||r?"en dan":"enim dnem";case"dd":return a+=1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi";case"M":return t||r?"en mesec":"enim mesecem";case"MM":return a+=1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci";case"y":return t||r?"eno leto":"enim letom";case"yy":return a+=1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t?e:"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",ss:"minutu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Пагоҳ соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,a){var o=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),a=e%10,o="";return n>0&&(o+=t[n]+"vatlh"),r>0&&(o+=(""!==o?" ":"")+t[r]+"maH"),a>0&&(o+=(""!==o?" ":"")+t[a]),""===o?"pagh":o}(e);switch(r){case"ss":return o+" lup";case"mm":return o+" tup";case"hh":return o+" rep";case"dd":return o+" jaj";case"MM":return o+" jar";case"yy":return o+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r?a[n][0]:t?a[n][0]:a[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a;return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(r=+e,a={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(1))},function(e,t,n){"use strict";var r=Object.prototype.toString;e.exports=function(e){var t=r.call(e),n="[object Arguments]"===t;return n||(n="[object Array]"!==t&&null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Function]"===r.call(e.callee)),n}},function(e,t,n){"use strict";var r=n(46),a=n(19),o=function(e){return null!=e},i=n(189)(),s=Object,u=a.call(Function.call,Array.prototype.push),l=a.call(Function.call,Object.prototype.propertyIsEnumerable),d=i?Object.getOwnPropertySymbols:null;e.exports=function(e,t){if(!o(e))throw new TypeError("target must be an object");var n,a,c,f,h,_,m,p=s(e);for(n=1;n<arguments.length;++n){a=s(arguments[n]),f=r(a);var y=i&&(Object.getOwnPropertySymbols||d);if(y)for(h=y(a),c=0;c<h.length;++c)m=h[c],l(a,m)&&u(f,m);for(c=0;c<f.length;++c)_=a[m=f[c]],l(a,m)&&(p[m]=_)}return p}},function(e,t,n){"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var r=Object.getOwnPropertySymbols(e);if(1!==r.length||r[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var a=Object.getOwnPropertyDescriptor(e,t);if(42!==a.value||!0!==a.enumerable)return!1}return!0}},function(e,t,n){"use strict";var r=n(188);e.exports=function(){return Object.assign?function(){if(!Object.assign)return!1;for(var e="abcdefghijklmnopqrst",t=e.split(""),n={},r=0;r<t.length;++r)n[t[r]]=t[r];var a=Object.assign({},n),o="";for(var i in a)o+=i;return e!==o}()?r:function(){if(!Object.assign||!Object.preventExtensions)return!1;var e=Object.preventExtensions({1:2});try{Object.assign(e,"xy")}catch(t){return"y"===e[1]}return!1}()?r:Object.assign:r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=void 0,a=void 0;function o(e,t){var n=t(e(a));return function(){return n}}function i(e){return o(e,r.createLTR||r.create)}function s(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return r.resolve(t)}function u(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return r.resolveLTR?r.resolveLTR(t):s(t)}t.default={registerTheme:function(e){a=e},registerInterface:function(e){r=e},create:i,createLTR:i,createRTL:function(e){return o(e,r.createRTL||r.create)},get:function(){return a},resolve:u,resolveLTR:u,resolveRTL:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return r.resolveRTL?r.resolveRTL(t):s(t)},flush:function(){r.flush&&r.flush()}}},function(e,t,n){(function(t){for(var r=n(267),a="undefined"==typeof window?t:window,o=["moz","webkit"],i="AnimationFrame",s=a["request"+i],u=a["cancel"+i]||a["cancelRequest"+i],l=0;!s&&l<o.length;l++)s=a[o[l]+"Request"+i],u=a[o[l]+"Cancel"+i]||a[o[l]+"CancelRequest"+i];if(!s||!u){var d=0,c=0,f=[];s=function(e){if(0===f.length){var t=r(),n=Math.max(0,1e3/60-(t-d));d=n+t,setTimeout(function(){var e=f.slice(0);f.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(d)}catch(e){setTimeout(function(){throw e},0)}},Math.round(n))}return f.push({handle:++c,callback:e,cancelled:!1}),c},u=function(e){for(var t=0;t<f.length;t++)f[t].handle===e&&(f[t].cancelled=!0)}}e.exports=function(e){return s.call(a,e)},e.exports.cancel=function(){u.apply(a,arguments)},e.exports.polyfill=function(e){e||(e=a),e.requestAnimationFrame=s,e.cancelAnimationFrame=u}}).call(this,n(22))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r,a){return{ariaLabel:l(a,r,e,t),hoveredSpan:u(r),isOutsideRange:r.has("blocked-out-of-range"),selected:i(r),useDefaultCursor:s(r),daySizeStyles:{width:n,height:n-1}}};var a=r(n(269)),o=n(4);function i(e){return e.has("selected")||e.has("selected-span")||e.has("selected-start")||e.has("selected-end")}function s(e){return e.has("blocked-minimum-nights")||e.has("blocked-calendar")||e.has("blocked-out-of-range")}function u(e){return!i(e)&&(e.has("hovered-span")||e.has("after-hovered-start"))}function l(e,t,n,r){var s=e.chooseAvailableDate,u=e.dateIsUnavailable,l=e.dateIsSelected,d=e.dateIsSelectedAsStartDate,c=e.dateIsSelectedAsEndDate,f={date:n.format(r)};return t.has("selected-start")&&d?(0,a.default)(d,f):t.has("selected-end")&&c?(0,a.default)(c,f):i(t)&&l?(0,a.default)(l,f):t.has(o.BLOCKED_MODIFIER)?(0,a.default)(u,f):(0,a.default)(s,f)}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(10)),o=r(n(11)),i=r(n(12)),s=r(n(8)),u=(r(n(6)),r(n(0))),l=(r(n(3)),r(n(15)),n(5),n(13)),d=r(n(1)),c=n(7),f=(r(n(9)),r(n(273))),h=r(n(45)),_=r(n(196)),m=r(n(275)),p=r(n(24)),y=r(n(32)),v=(r(n(37)),r(n(26)),r(n(20)),n(4)),b={month:(0,d.default)(),horizontalMonthPadding:13,isVisible:!0,enableOutsideDays:!1,modifiers:{},orientation:v.HORIZONTAL_ORIENTATION,daySize:v.DAY_SIZE,onDayClick:function(){},onDayMouseEnter:function(){},onDayMouseLeave:function(){},onMonthSelect:function(){},onYearSelect:function(){},renderMonthText:null,renderCalendarDay:function(e){return u.default.createElement(h.default,e)},renderDayContents:null,renderMonthElement:null,firstDayOfWeek:null,setMonthTitleHeight:null,focusedDate:null,isFocused:!1,monthFormat:"MMMM YYYY",phrases:c.CalendarDayPhrases,dayAriaLabelFormat:void 0,verticalBorderSpacing:void 0},g=function(e){(0,s.default)(n,e);var t=n.prototype;function n(t){var n;return(n=e.call(this,t)||this).state={weeks:(0,m.default)(t.month,t.enableOutsideDays,null==t.firstDayOfWeek?d.default.localeData().firstDayOfWeek():t.firstDayOfWeek)},n.setCaptionRef=n.setCaptionRef.bind((0,i.default)(n)),n.setMonthTitleHeight=n.setMonthTitleHeight.bind((0,i.default)(n)),n}return t[!u.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentDidMount=function(){this.setMonthTitleHeightTimeout=setTimeout(this.setMonthTitleHeight,0)},t.componentWillReceiveProps=function(e){var t=e.month,n=e.enableOutsideDays,r=e.firstDayOfWeek,a=this.props,o=a.month,i=a.enableOutsideDays,s=a.firstDayOfWeek;t.isSame(o)&&n===i&&r===s||this.setState({weeks:(0,m.default)(t,n,null==r?d.default.localeData().firstDayOfWeek():r)})},t.componentWillUnmount=function(){this.setMonthTitleHeightTimeout&&clearTimeout(this.setMonthTitleHeightTimeout)},t.setMonthTitleHeight=function(){var e=this.props.setMonthTitleHeight;e&&e((0,_.default)(this.captionRef,"height",!0,!0))},t.setCaptionRef=function(e){this.captionRef=e},t.render=function(){var e=this.props,t=e.dayAriaLabelFormat,n=e.daySize,r=e.focusedDate,a=e.horizontalMonthPadding,i=e.isFocused,s=e.isVisible,d=e.modifiers,c=e.month,h=e.monthFormat,_=e.onDayClick,m=e.onDayMouseEnter,b=e.onDayMouseLeave,g=e.onMonthSelect,M=e.onYearSelect,k=e.orientation,D=e.phrases,L=e.renderCalendarDay,w=e.renderDayContents,T=e.renderMonthElement,S=e.renderMonthText,Y=e.styles,P=e.verticalBorderSpacing,O=this.state.weeks,E=S?S(c):c.format(h),x=k===v.VERTICAL_SCROLLABLE;return u.default.createElement("div",(0,o.default)({},(0,l.css)(Y.CalendarMonth,{padding:"0 ".concat(a,"px")}),{"data-visible":s}),u.default.createElement("div",(0,o.default)({ref:this.setCaptionRef},(0,l.css)(Y.CalendarMonth_caption,x&&Y.CalendarMonth_caption__verticalScrollable)),T?T({month:c,onMonthSelect:g,onYearSelect:M,isVisible:s}):u.default.createElement("strong",null,E)),u.default.createElement("table",(0,o.default)({},(0,l.css)(!P&&Y.CalendarMonth_table,P&&Y.CalendarMonth_verticalSpacing,P&&{borderSpacing:"0px ".concat(P,"px")}),{role:"presentation"}),u.default.createElement("tbody",null,O.map(function(e,a){return u.default.createElement(f.default,{key:a},e.map(function(e,a){return L({key:a,day:e,daySize:n,isOutsideDay:!e||e.month()!==c.month(),tabIndex:s&&(0,p.default)(e,r)?0:-1,isFocused:i,onDayMouseEnter:m,onDayMouseLeave:b,onDayClick:_,renderDayContents:w,phrases:D,modifiers:d[(0,y.default)(e)],ariaLabelFormat:t})}))}))))},n}(u.default.PureComponent||u.default.Component);g.propTypes={},g.defaultProps=b;var M=(0,l.withStyles)(function(e){var t=e.reactDates,n=t.color,r=t.font,a=t.spacing;return{CalendarMonth:{background:n.background,textAlign:"center",verticalAlign:"top",userSelect:"none"},CalendarMonth_table:{borderCollapse:"collapse",borderSpacing:0},CalendarMonth_verticalSpacing:{borderCollapse:"separate"},CalendarMonth_caption:{color:n.text,fontSize:r.captionSize,textAlign:"center",paddingTop:a.captionPaddingTop,paddingBottom:a.captionPaddingBottom,captionSide:"initial"},CalendarMonth_caption__verticalScrollable:{paddingTop:12,paddingBottom:7}}},{pureComponent:void 0!==u.default.PureComponent})(g);t.default=M},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={white:"#fff",gray:"#484848",grayLight:"#82888a",grayLighter:"#cacccd",grayLightest:"#f2f2f2",borderMedium:"#c4c4c4",border:"#dbdbdb",borderLight:"#e4e7e7",borderLighter:"#eceeee",borderBright:"#f4f5f5",primary:"#00a699",primaryShade_1:"#33dacd",primaryShade_2:"#66e2da",primaryShade_3:"#80e8e0",primaryShade_4:"#b2f1ec",primary_dark:"#008489",secondary:"#007a87",yellow:"#ffe8bc",yellow_dark:"#ffce71"},a={reactDates:{zIndex:0,border:{input:{border:0,borderTop:0,borderRight:0,borderBottom:"2px solid transparent",borderLeft:0,outlineFocused:0,borderFocused:0,borderTopFocused:0,borderLeftFocused:0,borderBottomFocused:"2px solid ".concat(r.primary_dark),borderRightFocused:0,borderRadius:0},pickerInput:{borderWidth:1,borderStyle:"solid",borderRadius:2}},color:{core:r,disabled:r.grayLightest,background:r.white,backgroundDark:"#f2f2f2",backgroundFocused:r.white,border:"rgb(219, 219, 219)",text:r.gray,textDisabled:r.border,textFocused:"#007a87",placeholderText:"#757575",outside:{backgroundColor:r.white,backgroundColor_active:r.white,backgroundColor_hover:r.white,color:r.gray,color_active:r.gray,color_hover:r.gray},highlighted:{backgroundColor:r.yellow,backgroundColor_active:r.yellow_dark,backgroundColor_hover:r.yellow_dark,color:r.gray,color_active:r.gray,color_hover:r.gray},minimumNights:{backgroundColor:r.white,backgroundColor_active:r.white,backgroundColor_hover:r.white,borderColor:r.borderLighter,color:r.grayLighter,color_active:r.grayLighter,color_hover:r.grayLighter},hoveredSpan:{backgroundColor:r.primaryShade_4,backgroundColor_active:r.primaryShade_3,backgroundColor_hover:r.primaryShade_4,borderColor:r.primaryShade_3,borderColor_active:r.primaryShade_3,borderColor_hover:r.primaryShade_3,color:r.secondary,color_active:r.secondary,color_hover:r.secondary},selectedSpan:{backgroundColor:r.primaryShade_2,backgroundColor_active:r.primaryShade_1,backgroundColor_hover:r.primaryShade_1,borderColor:r.primaryShade_1,borderColor_active:r.primary,borderColor_hover:r.primary,color:r.white,color_active:r.white,color_hover:r.white},selected:{backgroundColor:r.primary,backgroundColor_active:r.primary,backgroundColor_hover:r.primary,borderColor:r.primary,borderColor_active:r.primary,borderColor_hover:r.primary,color:r.white,color_active:r.white,color_hover:r.white},blocked_calendar:{backgroundColor:r.grayLighter,backgroundColor_active:r.grayLighter,backgroundColor_hover:r.grayLighter,borderColor:r.grayLighter,borderColor_active:r.grayLighter,borderColor_hover:r.grayLighter,color:r.grayLight,color_active:r.grayLight,color_hover:r.grayLight},blocked_out_of_range:{backgroundColor:r.white,backgroundColor_active:r.white,backgroundColor_hover:r.white,borderColor:r.borderLight,borderColor_active:r.borderLight,borderColor_hover:r.borderLight,color:r.grayLighter,color_active:r.grayLighter,color_hover:r.grayLighter}},spacing:{dayPickerHorizontalPadding:9,captionPaddingTop:22,captionPaddingBottom:37,inputPadding:0,displayTextPaddingVertical:void 0,displayTextPaddingTop:11,displayTextPaddingBottom:9,displayTextPaddingHorizontal:void 0,displayTextPaddingLeft:11,displayTextPaddingRight:11,displayTextPaddingVertical_small:void 0,displayTextPaddingTop_small:7,displayTextPaddingBottom_small:5,displayTextPaddingHorizontal_small:void 0,displayTextPaddingLeft_small:7,displayTextPaddingRight_small:7},sizing:{inputWidth:130,inputWidth_small:97,arrowWidth:24},noScrollBarOnVerticalScrollable:!1,font:{size:14,captionSize:18,input:{size:19,lineHeight:"24px",size_small:15,lineHeight_small:"18px",letterSpacing_small:"0.2px",styleDisabled:"italic"}}}};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(!e)return 0;var a="width"===t?"Left":"Top",o="width"===t?"Right":"Bottom",i=!n||r?window.getComputedStyle(e):null,s=e.offsetWidth,u=e.offsetHeight,l="width"===t?s:u;n||(l-=parseFloat(i["padding".concat(a)])+parseFloat(i["padding".concat(o)])+parseFloat(i["border".concat(a,"Width")])+parseFloat(i["border".concat(o,"Width")]));r&&(l+=parseFloat(i["margin".concat(a)])+parseFloat(i["margin".concat(o)]));return l}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(10)),o=r(n(11)),i=r(n(12)),s=r(n(8)),u=r(n(6)),l=r(n(0)),d=(r(n(3)),r(n(15)),n(5),n(13)),c=r(n(1)),f=n(38),h=n(7),_=(r(n(9)),r(n(18))),m=r(n(194)),p=r(n(276)),y=r(n(277)),v=r(n(198)),b=r(n(39)),g=r(n(278)),M=r(n(279)),k=(r(n(37)),r(n(26)),r(n(20)),n(4)),D={enableOutsideDays:!1,firstVisibleMonthIndex:0,horizontalMonthPadding:13,initialMonth:(0,c.default)(),isAnimating:!1,numberOfMonths:1,modifiers:{},orientation:k.HORIZONTAL_ORIENTATION,onDayClick:function(){},onDayMouseEnter:function(){},onDayMouseLeave:function(){},onMonthChange:function(){},onYearChange:function(){},onMonthTransitionEnd:function(){},renderMonthText:null,renderCalendarDay:void 0,renderDayContents:null,translationValue:null,renderMonthElement:null,daySize:k.DAY_SIZE,focusedDate:null,isFocused:!1,firstDayOfWeek:null,setMonthTitleHeight:null,isRTL:!1,transitionDuration:200,verticalBorderSpacing:void 0,monthFormat:"MMMM YYYY",phrases:h.CalendarDayPhrases,dayAriaLabelFormat:void 0};function L(e,t,n){var r=e.clone();n||(r=r.subtract(1,"month"));for(var a=[],o=0;o<(n?t:t+2);o+=1)a.push(r),r=r.clone().add(1,"month");return a}var w=function(e){(0,s.default)(n,e);var t=n.prototype;function n(t){var n;n=e.call(this,t)||this;var r=t.orientation===k.VERTICAL_SCROLLABLE;return n.state={months:L(t.initialMonth,t.numberOfMonths,r)},n.isTransitionEndSupported=(0,p.default)(),n.onTransitionEnd=n.onTransitionEnd.bind((0,i.default)(n)),n.setContainerRef=n.setContainerRef.bind((0,i.default)(n)),n.locale=c.default.locale(),n.onMonthSelect=n.onMonthSelect.bind((0,i.default)(n)),n.onYearSelect=n.onYearSelect.bind((0,i.default)(n)),n}return t[!l.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentDidMount=function(){this.removeEventListener=(0,f.addEventListener)(this.container,"transitionend",this.onTransitionEnd)},t.componentWillReceiveProps=function(e){var t=this,n=e.initialMonth,r=e.numberOfMonths,a=e.orientation,o=this.state.months,i=this.props,s=i.initialMonth,u=i.numberOfMonths!==r,l=o;if(!s.isSame(n,"month")&&!u)if((0,M.default)(s,n))(l=o.slice(1)).push(o[o.length-1].clone().add(1,"month"));else if((0,g.default)(s,n))(l=o.slice(0,o.length-1)).unshift(o[0].clone().subtract(1,"month"));else{l=L(n,r,a===k.VERTICAL_SCROLLABLE)}u&&(l=L(n,r,a===k.VERTICAL_SCROLLABLE));var d=c.default.locale();this.locale!==d&&(this.locale=d,l=l.map(function(e){return e.locale(t.locale)})),this.setState({months:l})},t.componentDidUpdate=function(){var e=this.props,t=e.isAnimating,n=e.transitionDuration,r=e.onMonthTransitionEnd;this.isTransitionEndSupported&&n||!t||r()},t.componentWillUnmount=function(){this.removeEventListener&&this.removeEventListener()},t.onTransitionEnd=function(){(0,this.props.onMonthTransitionEnd)()},t.onMonthSelect=function(e,t){var n=e.clone(),r=this.props,a=r.onMonthChange,o=r.orientation,i=this.state.months,s=o===k.VERTICAL_SCROLLABLE,u=i.indexOf(e);s||(u-=1),n.set("month",t).subtract(u,"months"),a(n)},t.onYearSelect=function(e,t){var n=e.clone(),r=this.props,a=r.onYearChange,o=r.orientation,i=this.state.months,s=o===k.VERTICAL_SCROLLABLE,u=i.indexOf(e);s||(u-=1),n.set("year",t).subtract(u,"months"),a(n)},t.setContainerRef=function(e){this.container=e},t.render=function(){var e=this,t=this.props,n=t.enableOutsideDays,r=t.firstVisibleMonthIndex,a=t.horizontalMonthPadding,i=t.isAnimating,s=t.modifiers,c=t.numberOfMonths,f=t.monthFormat,h=t.orientation,_=t.translationValue,p=t.daySize,g=t.onDayMouseEnter,M=t.onDayMouseLeave,D=t.onDayClick,L=t.renderMonthText,w=t.renderCalendarDay,T=t.renderDayContents,S=t.renderMonthElement,Y=t.onMonthTransitionEnd,P=t.firstDayOfWeek,O=t.focusedDate,E=t.isFocused,x=t.isRTL,C=t.styles,j=t.phrases,H=t.dayAriaLabelFormat,I=t.transitionDuration,A=t.verticalBorderSpacing,F=t.setMonthTitleHeight,R=this.state.months,N=h===k.VERTICAL_ORIENTATION,W=h===k.VERTICAL_SCROLLABLE,z=h===k.HORIZONTAL_ORIENTATION,B=(0,v.default)(p,a),U=N||W?B:(c+2)*B,K="".concat(N||W?"translateY":"translateX","(").concat(_,"px)");return l.default.createElement("div",(0,o.default)({},(0,d.css)(C.CalendarMonthGrid,z&&C.CalendarMonthGrid__horizontal,N&&C.CalendarMonthGrid__vertical,W&&C.CalendarMonthGrid__vertical_scrollable,i&&C.CalendarMonthGrid__animating,i&&I&&{transition:"transform ".concat(I,"ms ease-in-out")},(0,u.default)({},(0,y.default)(K),{width:U})),{ref:this.setContainerRef,onTransitionEnd:Y}),R.map(function(t,u){var y=u>=r&&u<r+c,v=0===u&&!y,k=0===u&&i&&y,Y=(0,b.default)(t);return l.default.createElement("div",(0,o.default)({key:Y},(0,d.css)(z&&C.CalendarMonthGrid_month__horizontal,v&&C.CalendarMonthGrid_month__hideForAnimation,k&&!N&&!x&&{position:"absolute",left:-B},k&&!N&&x&&{position:"absolute",right:0},k&&N&&{position:"absolute",top:-_},!y&&!i&&C.CalendarMonthGrid_month__hidden)),l.default.createElement(m.default,{month:t,isVisible:y,enableOutsideDays:n,modifiers:s[Y],monthFormat:f,orientation:h,onDayMouseEnter:g,onDayMouseLeave:M,onDayClick:D,onMonthSelect:e.onMonthSelect,onYearSelect:e.onYearSelect,renderMonthText:L,renderCalendarDay:w,renderDayContents:T,renderMonthElement:S,firstDayOfWeek:P,daySize:p,focusedDate:y?O:null,isFocused:E,phrases:j,setMonthTitleHeight:F,dayAriaLabelFormat:H,verticalBorderSpacing:A,horizontalMonthPadding:a}))}))},n}(l.default.PureComponent||l.default.Component);w.propTypes={},w.defaultProps=D;var T=(0,d.withStyles)(function(e){var t=e.reactDates,n=t.color,r=t.noScrollBarOnVerticalScrollable,a=t.spacing,o=t.zIndex;return{CalendarMonthGrid:{background:n.background,textAlign:(0,_.default)("left"),zIndex:o},CalendarMonthGrid__animating:{zIndex:o+1},CalendarMonthGrid__horizontal:{position:"absolute",left:(0,_.default)(a.dayPickerHorizontalPadding)},CalendarMonthGrid__vertical:{margin:"0 auto"},CalendarMonthGrid__vertical_scrollable:(0,u.default)({margin:"0 auto",overflowY:"scroll"},r&&{"-webkitOverflowScrolling":"touch","::-webkit-scrollbar":{"-webkit-appearance":"none",display:"none"}}),CalendarMonthGrid_month__horizontal:{display:"inline-block",verticalAlign:"top",minHeight:"100%"},CalendarMonthGrid_month__hideForAnimation:{position:"absolute",zIndex:o-1,opacity:0,pointerEvents:"none"},CalendarMonthGrid_month__hidden:{visibility:"hidden"}}},{pureComponent:void 0!==l.default.PureComponent})(w);t.default=T},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return 7*e+2*t+1}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!a.default.isMoment(e)||!a.default.isMoment(t))&&(e.month()===t.month()&&e.year()===t.year())};var a=r(n(1))},function(e,t,n){"use strict";var r=n(282),a=n(23),o=n(19).call(Function.call,Object.prototype.propertyIsEnumerable);e.exports=function(e){var t=r.RequireObjectCoercible(e),n=[];for(var i in t)a(t,i)&&o(t,i)&&n.push(t[i]);return n}},function(e,t,n){"use strict";var r=n(283),a=n(51),o=a(a({},r),{SameValueNonNumber:function(e,t){if("number"==typeof e||typeof e!=typeof t)throw new TypeError("SameValueNonNumber requires two non-number values of the same type.");return this.SameValue(e,t)}});e.exports=o},function(e,t){e.exports=function(e){return null===e||"function"!=typeof e&&"object"!=typeof e}},function(e,t,n){"use strict";var r=Object.prototype.toString;if(n(287)()){var a=Symbol.prototype.toString,o=/^Symbol\(.*\)$/;e.exports=function(e){if("symbol"==typeof e)return!0;if("[object Symbol]"!==r.call(e))return!1;try{return function(e){return"symbol"==typeof e.valueOf()&&o.test(a.call(e))}(e)}catch(e){return!1}}}else e.exports=function(e){return!1}},function(e,t,n){"use strict";var r=n(40),a=r("%TypeError%"),o=r("%SyntaxError%"),i=n(23),s={"Property Descriptor":function(e,t){if("Object"!==e.Type(t))return!1;var n={"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Get]]":!0,"[[Set]]":!0,"[[Value]]":!0,"[[Writable]]":!0};for(var r in t)if(i(t,r)&&!n[r])return!1;var o=i(t,"[[Value]]"),s=i(t,"[[Get]]")||i(t,"[[Set]]");if(o&&s)throw new a("Property Descriptors may not be both accessor and data descriptors");return!0}};e.exports=function(e,t,n,r){var i=s[t];if("function"!=typeof i)throw new o("unknown record type: "+t);if(!i(e,r))throw new a(n+" must be a "+t);console.log(i(e,r),r)}},function(e,t){e.exports=Number.isNaN||function(e){return e!=e}},function(e,t){var n=Number.isNaN||function(e){return e!=e};e.exports=Number.isFinite||function(e){return"number"==typeof e&&!n(e)&&e!==1/0&&e!==-1/0}},function(e,t){e.exports=function(e){return e>=0?1:-1}},function(e,t){e.exports=function(e,t){var n=e%t;return Math.floor(n>=0?n:n+t)}},function(e,t,n){"use strict";var r=n(200);e.exports=function(){return"function"==typeof Object.values?Object.values:r}},function(e,t,n){"use strict";e.exports=function(e){if(arguments.length<1)throw new TypeError("1 argument is required");if("object"!=typeof e)throw new TypeError("Argument 1 (”other“) to Node.contains must be an instance of Node");var t=e;do{if(this===t)return!0;t&&(t=t.parentNode)}while(t);return!1}},function(e,t,n){"use strict";var r=n(210);e.exports=function(){if("undefined"!=typeof document){if(document.contains)return document.contains;if(document.body&&document.body.contains)return document.body.contains}return r}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=r(n(15)),i=n(5),s=n(7),u=r(n(9)),l=r(n(213)),d=r(n(28)),c=r(n(214)),f=r(n(33)),h=r(n(215)),_=r(n(21)),m=r(n(20)),p=r(n(34)),y={startDate:o.default.momentObj,endDate:o.default.momentObj,onDatesChange:a.default.func.isRequired,focusedInput:l.default,onFocusChange:a.default.func.isRequired,onClose:a.default.func,startDateId:a.default.string.isRequired,startDatePlaceholderText:a.default.string,startDateOffset:a.default.func,endDateOffset:a.default.func,endDateId:a.default.string.isRequired,endDatePlaceholderText:a.default.string,startDateAriaLabel:a.default.string,endDateAriaLabel:a.default.string,disabled:f.default,required:a.default.bool,readOnly:a.default.bool,screenReaderInputMessage:a.default.string,showClearDates:a.default.bool,showDefaultInputIcon:a.default.bool,inputIconPosition:d.default,customInputIcon:a.default.node,customArrowIcon:a.default.node,customCloseIcon:a.default.node,noBorder:a.default.bool,block:a.default.bool,small:a.default.bool,regular:a.default.bool,keepFocusOnInput:a.default.bool,renderMonthText:(0,i.mutuallyExclusiveProps)(a.default.func,"renderMonthText","renderMonthElement"),renderMonthElement:(0,i.mutuallyExclusiveProps)(a.default.func,"renderMonthText","renderMonthElement"),orientation:c.default,anchorDirection:h.default,openDirection:_.default,horizontalMargin:a.default.number,withPortal:a.default.bool,withFullScreenPortal:a.default.bool,appendToBody:a.default.bool,disableScroll:a.default.bool,daySize:i.nonNegativeInteger,isRTL:a.default.bool,firstDayOfWeek:m.default,initialVisibleMonth:a.default.func,numberOfMonths:a.default.number,keepOpenOnDateSelect:a.default.bool,reopenPickerOnClearDates:a.default.bool,renderCalendarInfo:a.default.func,calendarInfoPosition:p.default,hideKeyboardShortcutsPanel:a.default.bool,verticalHeight:i.nonNegativeInteger,transitionDuration:i.nonNegativeInteger,verticalSpacing:i.nonNegativeInteger,horizontalMonthPadding:i.nonNegativeInteger,navPrev:a.default.node,navNext:a.default.node,onPrevMonthClick:a.default.func,onNextMonthClick:a.default.func,renderCalendarDay:a.default.func,renderDayContents:a.default.func,minimumNights:a.default.number,enableOutsideDays:a.default.bool,isDayBlocked:a.default.func,isOutsideRange:a.default.func,isDayHighlighted:a.default.func,displayFormat:a.default.oneOfType([a.default.string,a.default.func]),monthFormat:a.default.string,weekDayFormat:a.default.string,phrases:a.default.shape((0,u.default)(s.DateRangePickerPhrases)),dayAriaLabelFormat:a.default.string};t.default=y},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf([o.START_DATE,o.END_DATE]);t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf([o.HORIZONTAL_ORIENTATION,o.VERTICAL_ORIENTATION]);t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf([o.ANCHOR_LEFT,o.ANCHOR_RIGHT]);t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){var i="undefined"!=typeof window?window.innerWidth:0,s=e===o.ANCHOR_LEFT?i-n:n,u=r||0;return(0,a.default)({},e,Math.min(t+s-u,0))};var a=r(n(31)),o=n(4)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var a=n.getBoundingClientRect(),o=a.left,i=a.top;e===r.OPEN_UP&&(i=-(window.innerHeight-a.bottom));t===r.ANCHOR_RIGHT&&(o=-(window.innerWidth-a.right));return{transform:"translate3d(".concat(Math.round(o),"px, ").concat(Math.round(i),"px, 0)")}};var r=n(4)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getScrollParent=a,t.getScrollAncestorsOverflowY=o,t.default=function(e){var t=o(e),n=function(e){return t.forEach(function(t,n){n.style.setProperty("overflow-y",e?"hidden":t)})};return n(!0),function(){return n(!1)}};var r=function(){return document.scrollingElement||document.documentElement};function a(e){var t=e.parentElement;if(null==t)return r();var n=window.getComputedStyle(t).overflowY;return"visible"!==n&&"hidden"!==n&&t.scrollHeight>t.clientHeight?t:a(t)}function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new Map,n=r(),i=a(e);return t.set(i,i.style.overflowY),i===n?t:o(i,t)}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(10)),o=r(n(12)),i=r(n(8)),s=r(n(0)),u=(r(n(3)),r(n(1))),l=(r(n(15)),n(5),r(n(21)),n(7)),d=(r(n(9)),r(n(220))),c=(r(n(28)),r(n(33)),r(n(25))),f=r(n(54)),h=r(n(29)),_=r(n(35)),m=n(4),p={children:null,startDate:null,startDateId:m.START_DATE,startDatePlaceholderText:"Start Date",isStartDateFocused:!1,startDateAriaLabel:void 0,endDate:null,endDateId:m.END_DATE,endDatePlaceholderText:"End Date",isEndDateFocused:!1,endDateAriaLabel:void 0,screenReaderMessage:"",showClearDates:!1,showCaret:!1,showDefaultInputIcon:!1,inputIconPosition:m.ICON_BEFORE_POSITION,disabled:!1,required:!1,readOnly:!1,openDirection:m.OPEN_DOWN,noBorder:!1,block:!1,small:!1,regular:!1,verticalSpacing:void 0,keepOpenOnDateSelect:!1,reopenPickerOnClearDates:!1,withFullScreenPortal:!1,minimumNights:1,isOutsideRange:function(e){return!(0,h.default)(e,(0,u.default)())},displayFormat:function(){return u.default.localeData().longDateFormat("L")},onFocusChange:function(){},onClose:function(){},onDatesChange:function(){},onKeyDownArrowDown:function(){},onKeyDownQuestionMark:function(){},customInputIcon:null,customArrowIcon:null,customCloseIcon:null,isFocused:!1,phrases:l.DateRangePickerInputPhrases,isRTL:!1},y=function(e){(0,i.default)(n,e);var t=n.prototype;function n(t){var n;return(n=e.call(this,t)||this).onClearFocus=n.onClearFocus.bind((0,o.default)(n)),n.onStartDateChange=n.onStartDateChange.bind((0,o.default)(n)),n.onStartDateFocus=n.onStartDateFocus.bind((0,o.default)(n)),n.onEndDateChange=n.onEndDateChange.bind((0,o.default)(n)),n.onEndDateFocus=n.onEndDateFocus.bind((0,o.default)(n)),n.clearDates=n.clearDates.bind((0,o.default)(n)),n}return t[!s.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.onClearFocus=function(){var e=this.props,t=e.onFocusChange,n=e.onClose,r=e.startDate,a=e.endDate;t(null),n({startDate:r,endDate:a})},t.onEndDateChange=function(e){var t=this.props,n=t.startDate,r=t.isOutsideRange,a=t.minimumNights,o=t.keepOpenOnDateSelect,i=t.onDatesChange,s=(0,c.default)(e,this.getDisplayFormat());s&&!r(s)&&!(n&&(0,_.default)(s,n.clone().add(a,"days")))?(i({startDate:n,endDate:s}),o||this.onClearFocus()):i({startDate:n,endDate:null})},t.onEndDateFocus=function(){var e=this.props,t=e.startDate,n=e.onFocusChange,r=e.withFullScreenPortal,a=e.disabled;t||!r||a&&a!==m.END_DATE?a&&a!==m.START_DATE||n(m.END_DATE):n(m.START_DATE)},t.onStartDateChange=function(e){var t=this.props.endDate,n=this.props,r=n.isOutsideRange,a=n.minimumNights,o=n.onDatesChange,i=n.onFocusChange,s=n.disabled,u=(0,c.default)(e,this.getDisplayFormat()),l=u&&(0,_.default)(t,u.clone().add(a,"days"));u&&!r(u)&&!(s===m.END_DATE&&l)?(l&&(t=null),o({startDate:u,endDate:t}),i(m.END_DATE)):o({startDate:null,endDate:t})},t.onStartDateFocus=function(){var e=this.props,t=e.disabled,n=e.onFocusChange;t&&t!==m.END_DATE||n(m.START_DATE)},t.getDisplayFormat=function(){var e=this.props.displayFormat;return"string"==typeof e?e:e()},t.getDateString=function(e){var t=this.getDisplayFormat();return e&&t?e&&e.format(t):(0,f.default)(e)},t.clearDates=function(){var e=this.props,t=e.onDatesChange,n=e.reopenPickerOnClearDates,r=e.onFocusChange;t({startDate:null,endDate:null}),n&&r(m.START_DATE)},t.render=function(){var e=this.props,t=e.children,n=e.startDate,r=e.startDateId,a=e.startDatePlaceholderText,o=e.isStartDateFocused,i=e.startDateAriaLabel,u=e.endDate,l=e.endDateId,c=e.endDatePlaceholderText,f=e.endDateAriaLabel,h=e.isEndDateFocused,_=e.screenReaderMessage,m=e.showClearDates,p=e.showCaret,y=e.showDefaultInputIcon,v=e.inputIconPosition,b=e.customInputIcon,g=e.customArrowIcon,M=e.customCloseIcon,k=e.disabled,D=e.required,L=e.readOnly,w=e.openDirection,T=e.isFocused,S=e.phrases,Y=e.onKeyDownArrowDown,P=e.onKeyDownQuestionMark,O=e.isRTL,E=e.noBorder,x=e.block,C=e.small,j=e.regular,H=e.verticalSpacing,I=this.getDateString(n),A=this.getDateString(u);return s.default.createElement(d.default,{startDate:I,startDateId:r,startDatePlaceholderText:a,isStartDateFocused:o,startDateAriaLabel:i,endDate:A,endDateId:l,endDatePlaceholderText:c,isEndDateFocused:h,endDateAriaLabel:f,isFocused:T,disabled:k,required:D,readOnly:L,openDirection:w,showCaret:p,showDefaultInputIcon:y,inputIconPosition:v,customInputIcon:b,customArrowIcon:g,customCloseIcon:M,phrases:S,onStartDateChange:this.onStartDateChange,onStartDateFocus:this.onStartDateFocus,onStartDateShiftTab:this.onClearFocus,onEndDateChange:this.onEndDateChange,onEndDateFocus:this.onEndDateFocus,showClearDates:m,onClearDates:this.clearDates,screenReaderMessage:_,onKeyDownArrowDown:Y,onKeyDownQuestionMark:P,isRTL:O,noBorder:E,block:x,small:C,regular:j,verticalSpacing:H},t)},n}(s.default.PureComponent||s.default.Component);t.default=y,y.propTypes={},y.defaultProps=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(11)),o=(r(n(6)),r(n(0))),i=(r(n(3)),n(5),n(13)),s=n(7),u=(r(n(9)),r(n(18))),l=(r(n(21)),r(n(221))),d=(r(n(28)),r(n(33)),r(n(225))),c=r(n(226)),f=r(n(36)),h=r(n(227)),_=n(4),m={children:null,startDateId:_.START_DATE,endDateId:_.END_DATE,startDatePlaceholderText:"Start Date",endDatePlaceholderText:"End Date",startDateAriaLabel:void 0,endDateAriaLabel:void 0,screenReaderMessage:"",onStartDateFocus:function(){},onEndDateFocus:function(){},onStartDateChange:function(){},onEndDateChange:function(){},onStartDateShiftTab:function(){},onEndDateTab:function(){},onClearDates:function(){},onKeyDownArrowDown:function(){},onKeyDownQuestionMark:function(){},startDate:"",endDate:"",isStartDateFocused:!1,isEndDateFocused:!1,showClearDates:!1,disabled:!1,required:!1,readOnly:!1,openDirection:_.OPEN_DOWN,showCaret:!1,showDefaultInputIcon:!1,inputIconPosition:_.ICON_BEFORE_POSITION,customInputIcon:null,customArrowIcon:null,customCloseIcon:null,noBorder:!1,block:!1,small:!1,regular:!1,verticalSpacing:void 0,isFocused:!1,phrases:s.DateRangePickerInputPhrases,isRTL:!1};function p(e){var t=e.children,n=e.startDate,r=e.startDateId,s=e.startDatePlaceholderText,u=e.screenReaderMessage,m=e.isStartDateFocused,p=e.onStartDateChange,y=e.onStartDateFocus,v=e.onStartDateShiftTab,b=e.startDateAriaLabel,g=e.endDate,M=e.endDateId,k=e.endDatePlaceholderText,D=e.isEndDateFocused,L=e.onEndDateChange,w=e.onEndDateFocus,T=e.onEndDateTab,S=e.endDateAriaLabel,Y=e.onKeyDownArrowDown,P=e.onKeyDownQuestionMark,O=e.onClearDates,E=e.showClearDates,x=e.disabled,C=e.required,j=e.readOnly,H=e.showCaret,I=e.openDirection,A=e.showDefaultInputIcon,F=e.inputIconPosition,R=e.customInputIcon,N=e.customArrowIcon,W=e.customCloseIcon,z=e.isFocused,B=e.phrases,U=e.isRTL,K=e.noBorder,V=e.block,$=e.verticalSpacing,G=e.small,J=e.regular,q=e.styles,Q=R||o.default.createElement(h.default,(0,i.css)(q.DateRangePickerInput_calendarIcon_svg)),Z=N||o.default.createElement(d.default,(0,i.css)(q.DateRangePickerInput_arrow_svg));U&&(Z=o.default.createElement(c.default,(0,i.css)(q.DateRangePickerInput_arrow_svg))),G&&(Z="-");var X=W||o.default.createElement(f.default,(0,i.css)(q.DateRangePickerInput_clearDates_svg,G&&q.DateRangePickerInput_clearDates_svg__small)),ee=u||B.keyboardForwardNavigationInstructions,te=u||B.keyboardBackwardNavigationInstructions,ne=(A||null!==R)&&o.default.createElement("button",(0,a.default)({},(0,i.css)(q.DateRangePickerInput_calendarIcon),{type:"button",disabled:x,"aria-label":B.focusStartDate,onClick:Y}),Q),re=x===_.START_DATE||!0===x,ae=x===_.END_DATE||!0===x;return o.default.createElement("div",(0,i.css)(q.DateRangePickerInput,x&&q.DateRangePickerInput__disabled,U&&q.DateRangePickerInput__rtl,!K&&q.DateRangePickerInput__withBorder,V&&q.DateRangePickerInput__block,E&&q.DateRangePickerInput__showClearDates),F===_.ICON_BEFORE_POSITION&&ne,o.default.createElement(l.default,{id:r,placeholder:s,ariaLabel:b,displayValue:n,screenReaderMessage:ee,focused:m,isFocused:z,disabled:re,required:C,readOnly:j,showCaret:H,openDirection:I,onChange:p,onFocus:y,onKeyDownShiftTab:v,onKeyDownArrowDown:Y,onKeyDownQuestionMark:P,verticalSpacing:$,small:G,regular:J}),t,o.default.createElement("div",(0,a.default)({},(0,i.css)(q.DateRangePickerInput_arrow),{"aria-hidden":"true",role:"presentation"}),Z),o.default.createElement(l.default,{id:M,placeholder:k,ariaLabel:S,displayValue:g,screenReaderMessage:te,focused:D,isFocused:z,disabled:ae,required:C,readOnly:j,showCaret:H,openDirection:I,onChange:L,onFocus:w,onKeyDownArrowDown:Y,onKeyDownQuestionMark:P,onKeyDownTab:T,verticalSpacing:$,small:G,regular:J}),E&&o.default.createElement("button",(0,a.default)({type:"button","aria-label":B.clearDates},(0,i.css)(q.DateRangePickerInput_clearDates,G&&q.DateRangePickerInput_clearDates__small,!W&&q.DateRangePickerInput_clearDates_default,!(n||g)&&q.DateRangePickerInput_clearDates__hide),{onClick:O,disabled:x}),X),F===_.ICON_AFTER_POSITION&&ne)}p.propTypes={},p.defaultProps=m;var y=(0,i.withStyles)(function(e){var t=e.reactDates,n=t.border,r=t.color,a=t.sizing;return{DateRangePickerInput:{backgroundColor:r.background,display:"inline-block"},DateRangePickerInput__disabled:{background:r.disabled},DateRangePickerInput__withBorder:{borderColor:r.border,borderWidth:n.pickerInput.borderWidth,borderStyle:n.pickerInput.borderStyle,borderRadius:n.pickerInput.borderRadius},DateRangePickerInput__rtl:{direction:(0,u.default)("rtl")},DateRangePickerInput__block:{display:"block"},DateRangePickerInput__showClearDates:{paddingRight:30},DateRangePickerInput_arrow:{display:"inline-block",verticalAlign:"middle",color:r.text},DateRangePickerInput_arrow_svg:{verticalAlign:"middle",fill:r.text,height:a.arrowWidth,width:a.arrowWidth},DateRangePickerInput_clearDates:{background:"none",border:0,color:"inherit",font:"inherit",lineHeight:"normal",overflow:"visible",cursor:"pointer",padding:10,margin:"0 10px 0 5px",position:"absolute",right:0,top:"50%",transform:"translateY(-50%)"},DateRangePickerInput_clearDates__small:{padding:6},DateRangePickerInput_clearDates_default:{":focus":{background:r.core.border,borderRadius:"50%"},":hover":{background:r.core.border,borderRadius:"50%"}},DateRangePickerInput_clearDates__hide:{visibility:"hidden"},DateRangePickerInput_clearDates_svg:{fill:r.core.grayLight,height:12,width:15,verticalAlign:"middle"},DateRangePickerInput_clearDates_svg__small:{height:9},DateRangePickerInput_calendarIcon:{background:"none",border:0,color:"inherit",font:"inherit",lineHeight:"normal",overflow:"visible",cursor:"pointer",display:"inline-block",verticalAlign:"middle",padding:10,margin:"0 5px 0 10px"},DateRangePickerInput_calendarIcon_svg:{fill:r.core.grayLight,height:15,width:14,verticalAlign:"middle"}}},{pureComponent:void 0!==o.default.PureComponent})(p);t.default=y},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(10)),o=r(n(11)),i=r(n(12)),s=r(n(8)),u=(r(n(6)),r(n(0))),l=(r(n(3)),n(5),n(13)),d=r(n(222)),c=r(n(27)),f=r(n(18)),h=r(n(52)),_=(r(n(21)),n(4)),m="M0,".concat(_.FANG_HEIGHT_PX," ").concat(_.FANG_WIDTH_PX,",").concat(_.FANG_HEIGHT_PX," ").concat(_.FANG_WIDTH_PX/2,",0z"),p="M0,".concat(_.FANG_HEIGHT_PX," ").concat(_.FANG_WIDTH_PX/2,",0 ").concat(_.FANG_WIDTH_PX,",").concat(_.FANG_HEIGHT_PX),y="M0,0 ".concat(_.FANG_WIDTH_PX,",0 ").concat(_.FANG_WIDTH_PX/2,",").concat(_.FANG_HEIGHT_PX,"z"),v="M0,0 ".concat(_.FANG_WIDTH_PX/2,",").concat(_.FANG_HEIGHT_PX," ").concat(_.FANG_WIDTH_PX,",0"),b={placeholder:"Select Date",displayValue:"",ariaLabel:void 0,screenReaderMessage:"",focused:!1,disabled:!1,required:!1,readOnly:null,openDirection:_.OPEN_DOWN,showCaret:!1,verticalSpacing:_.DEFAULT_VERTICAL_SPACING,small:!1,block:!1,regular:!1,onChange:function(){},onFocus:function(){},onKeyDownShiftTab:function(){},onKeyDownTab:function(){},onKeyDownArrowDown:function(){},onKeyDownQuestionMark:function(){},isFocused:!1},g=function(e){(0,s.default)(n,e);var t=n.prototype;function n(t){var n;return(n=e.call(this,t)||this).state={dateString:"",isTouchDevice:!1},n.onChange=n.onChange.bind((0,i.default)(n)),n.onKeyDown=n.onKeyDown.bind((0,i.default)(n)),n.setInputRef=n.setInputRef.bind((0,i.default)(n)),n.throttledKeyDown=(0,d.default)(n.onFinalKeyDown,300,{trailing:!1}),n}return t[!u.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentDidMount=function(){this.setState({isTouchDevice:(0,c.default)()})},t.componentWillReceiveProps=function(e){this.state.dateString&&e.displayValue&&this.setState({dateString:""})},t.componentDidUpdate=function(e){var t=this.props,n=t.focused,r=t.isFocused;e.focused===n&&e.isFocused===r||n&&r&&this.inputRef.focus()},t.onChange=function(e){var t=this.props,n=t.onChange,r=t.onKeyDownQuestionMark,a=e.target.value;"?"===a[a.length-1]?r(e):this.setState({dateString:a},function(){return n(a)})},t.onKeyDown=function(e){e.stopPropagation(),_.MODIFIER_KEY_NAMES.has(e.key)||this.throttledKeyDown(e)},t.onFinalKeyDown=function(e){var t=this.props,n=t.onKeyDownShiftTab,r=t.onKeyDownTab,a=t.onKeyDownArrowDown,o=t.onKeyDownQuestionMark,i=e.key;"Tab"===i?e.shiftKey?n(e):r(e):"ArrowDown"===i?a(e):"?"===i&&(e.preventDefault(),o(e))},t.setInputRef=function(e){this.inputRef=e},t.render=function(){var e=this.state,t=e.dateString,n=e.isTouchDevice,r=this.props,a=r.id,i=r.placeholder,s=r.ariaLabel,d=r.displayValue,c=r.screenReaderMessage,f=r.focused,b=r.showCaret,g=r.onFocus,M=r.disabled,k=r.required,D=r.readOnly,L=r.openDirection,w=r.verticalSpacing,T=r.small,S=r.regular,Y=r.block,P=r.styles,O=r.theme.reactDates,E=t||d||"",x="DateInput__screen-reader-message-".concat(a),C=b&&f,j=(0,h.default)(O,T);return u.default.createElement("div",(0,l.css)(P.DateInput,T&&P.DateInput__small,Y&&P.DateInput__block,C&&P.DateInput__withFang,M&&P.DateInput__disabled,C&&L===_.OPEN_DOWN&&P.DateInput__openDown,C&&L===_.OPEN_UP&&P.DateInput__openUp),u.default.createElement("input",(0,o.default)({},(0,l.css)(P.DateInput_input,T&&P.DateInput_input__small,S&&P.DateInput_input__regular,D&&P.DateInput_input__readOnly,f&&P.DateInput_input__focused,M&&P.DateInput_input__disabled),{"aria-label":void 0===s?i:s,type:"text",id:a,name:a,ref:this.setInputRef,value:E,onChange:this.onChange,onKeyDown:this.onKeyDown,onFocus:g,placeholder:i,autoComplete:"off",disabled:M,readOnly:"boolean"==typeof D?D:n,required:k,"aria-describedby":c&&x})),C&&u.default.createElement("svg",(0,o.default)({role:"presentation",focusable:"false"},(0,l.css)(P.DateInput_fang,L===_.OPEN_DOWN&&{top:j+w-_.FANG_HEIGHT_PX-1},L===_.OPEN_UP&&{bottom:j+w-_.FANG_HEIGHT_PX-1})),u.default.createElement("path",(0,o.default)({},(0,l.css)(P.DateInput_fangShape),{d:L===_.OPEN_DOWN?m:y})),u.default.createElement("path",(0,o.default)({},(0,l.css)(P.DateInput_fangStroke),{d:L===_.OPEN_DOWN?p:v}))),c&&u.default.createElement("p",(0,o.default)({},(0,l.css)(P.DateInput_screenReaderMessage),{id:x}),c))},n}(u.default.PureComponent||u.default.Component);g.propTypes={},g.defaultProps=b;var M=(0,l.withStyles)(function(e){var t=e.reactDates,n=t.border,r=t.color,a=t.sizing,o=t.spacing,i=t.font,s=t.zIndex;return{DateInput:{margin:0,padding:o.inputPadding,background:r.background,position:"relative",display:"inline-block",width:a.inputWidth,verticalAlign:"middle"},DateInput__small:{width:a.inputWidth_small},DateInput__block:{width:"100%"},DateInput__disabled:{background:r.disabled,color:r.textDisabled},DateInput_input:{fontWeight:200,fontSize:i.input.size,lineHeight:i.input.lineHeight,color:r.text,backgroundColor:r.background,width:"100%",padding:"".concat(o.displayTextPaddingVertical,"px ").concat(o.displayTextPaddingHorizontal,"px"),paddingTop:o.displayTextPaddingTop,paddingBottom:o.displayTextPaddingBottom,paddingLeft:(0,f.default)(o.displayTextPaddingLeft),paddingRight:(0,f.default)(o.displayTextPaddingRight),border:n.input.border,borderTop:n.input.borderTop,borderRight:(0,f.default)(n.input.borderRight),borderBottom:n.input.borderBottom,borderLeft:(0,f.default)(n.input.borderLeft),borderRadius:n.input.borderRadius},DateInput_input__small:{fontSize:i.input.size_small,lineHeight:i.input.lineHeight_small,letterSpacing:i.input.letterSpacing_small,padding:"".concat(o.displayTextPaddingVertical_small,"px ").concat(o.displayTextPaddingHorizontal_small,"px"),paddingTop:o.displayTextPaddingTop_small,paddingBottom:o.displayTextPaddingBottom_small,paddingLeft:(0,f.default)(o.displayTextPaddingLeft_small),paddingRight:(0,f.default)(o.displayTextPaddingRight_small)},DateInput_input__regular:{fontWeight:"auto"},DateInput_input__readOnly:{userSelect:"none"},DateInput_input__focused:{outline:n.input.outlineFocused,background:r.backgroundFocused,border:n.input.borderFocused,borderTop:n.input.borderTopFocused,borderRight:(0,f.default)(n.input.borderRightFocused),borderBottom:n.input.borderBottomFocused,borderLeft:(0,f.default)(n.input.borderLeftFocused)},DateInput_input__disabled:{background:r.disabled,fontStyle:i.input.styleDisabled},DateInput_screenReaderMessage:{border:0,clip:"rect(0, 0, 0, 0)",height:1,margin:-1,overflow:"hidden",padding:0,position:"absolute",width:1},DateInput_fang:{position:"absolute",width:_.FANG_WIDTH_PX,height:_.FANG_HEIGHT_PX,left:22,zIndex:s+2},DateInput_fangShape:{fill:r.background},DateInput_fangStroke:{stroke:r.core.border,fill:"transparent"}}},{pureComponent:void 0!==u.default.PureComponent})(g);t.default=M},function(e,t,n){var r=n(295),a=n(53),o="Expected a function";e.exports=function(e,t,n){var i=!0,s=!0;if("function"!=typeof e)throw new TypeError(o);return a(n)&&(i="leading"in n?!!n.leading:i,s="trailing"in n?!!n.trailing:s),r(e,t,{leading:i,maxWait:t,trailing:s})}},function(e,t,n){var r=n(297),a="object"==typeof self&&self&&self.Object===Object&&self,o=r||a||Function("return this")();e.exports=o},function(e,t,n){var r=n(223).Symbol;e.exports=r},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=function(e){return a.default.createElement("svg",e,a.default.createElement("path",{d:"M694 242l249 250c12 11 12 21 1 32L694 773c-5 5-10 7-16 7s-11-2-16-7c-11-11-11-21 0-32l210-210H68c-13 0-23-10-23-23s10-23 23-23h806L662 275c-21-22 11-54 32-33z"}))};o.defaultProps={focusable:"false",viewBox:"0 0 1000 1000"};var i=o;t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=function(e){return a.default.createElement("svg",e,a.default.createElement("path",{d:"M336 275L126 485h806c13 0 23 10 23 23s-10 23-23 23H126l210 210c11 11 11 21 0 32-5 5-10 7-16 7s-11-2-16-7L55 524c-11-11-11-21 0-32l249-249c21-22 53 10 32 32z"}))};o.defaultProps={focusable:"false",viewBox:"0 0 1000 1000"};var i=o;t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=function(e){return a.default.createElement("svg",e,a.default.createElement("path",{d:"m107 1393h241v-241h-241zm295 0h268v-241h-268zm-295-295h241v-268h-241zm295 0h268v-268h-268zm-295-321h241v-241h-241zm616 616h268v-241h-268zm-321-616h268v-241h-268zm643 616h241v-241h-241zm-322-295h268v-268h-268zm-294-723v-241c0-7-3-14-8-19-6-5-12-8-19-8h-54c-7 0-13 3-19 8-5 5-8 12-8 19v241c0 7 3 14 8 19 6 5 12 8 19 8h54c7 0 13-3 19-8 5-5 8-12 8-19zm616 723h241v-268h-241zm-322-321h268v-241h-268zm322 0h241v-241h-241zm27-402v-241c0-7-3-14-8-19-6-5-12-8-19-8h-54c-7 0-13 3-19 8-5 5-8 12-8 19v241c0 7 3 14 8 19 6 5 12 8 19 8h54c7 0 13-3 19-8 5-5 8-12 8-19zm321-54v1072c0 29-11 54-32 75s-46 32-75 32h-1179c-29 0-54-11-75-32s-32-46-32-75v-1072c0-29 11-54 32-75s46-32 75-32h107v-80c0-37 13-68 40-95s57-39 94-39h54c37 0 68 13 95 39 26 26 39 58 39 95v80h321v-80c0-37 13-69 40-95 26-26 57-39 94-39h54c37 0 68 13 94 39s40 58 40 95v80h107c29 0 54 11 75 32s32 46 32 75z"}))};o.defaultProps={focusable:"false",viewBox:"0 0 1393.1 1500"};var i=o;t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(10)),o=r(n(229)),i=r(n(6)),s=r(n(12)),u=r(n(8)),l=r(n(0)),d=(r(n(3)),r(n(15)),n(5),r(n(1))),c=r(n(49)),f=r(n(27)),h=n(7),_=(r(n(9)),r(n(29))),m=r(n(230)),p=r(n(24)),y=r(n(41)),v=r(n(35)),b=r(n(231)),g=r(n(55)),M=r(n(307)),k=r(n(32)),D=n(232),L=(r(n(33)),r(n(213)),r(n(26)),r(n(20)),r(n(34)),n(4)),w=r(n(56)),T=r(n(233)),S={startDate:void 0,endDate:void 0,minDate:null,maxDate:null,onDatesChange:function(){},startDateOffset:void 0,endDateOffset:void 0,focusedInput:null,onFocusChange:function(){},onClose:function(){},keepOpenOnDateSelect:!1,minimumNights:1,disabled:!1,isOutsideRange:function(){},isDayBlocked:function(){},isDayHighlighted:function(){},getMinNightsForHoverDate:function(){},renderMonthText:null,enableOutsideDays:!1,numberOfMonths:1,orientation:L.HORIZONTAL_ORIENTATION,withPortal:!1,hideKeyboardShortcutsPanel:!1,initialVisibleMonth:null,daySize:L.DAY_SIZE,navPrev:null,navNext:null,noNavButtons:!1,onPrevMonthClick:function(){},onNextMonthClick:function(){},onOutsideClick:function(){},renderCalendarDay:void 0,renderDayContents:null,renderCalendarInfo:null,renderMonthElement:null,renderKeyboardShortcutsButton:void 0,calendarInfoPosition:L.INFO_POSITION_BOTTOM,firstDayOfWeek:null,verticalHeight:null,noBorder:!1,transitionDuration:void 0,verticalBorderSpacing:void 0,horizontalMonthPadding:13,onBlur:function(){},isFocused:!1,showKeyboardShortcuts:!1,onTab:function(){},onShiftTab:function(){},monthFormat:"MMMM YYYY",weekDayFormat:"dd",phrases:h.DayPickerPhrases,dayAriaLabelFormat:void 0,isRTL:!1},Y=function(e,t){return t===L.START_DATE?e.chooseAvailableStartDate:t===L.END_DATE?e.chooseAvailableEndDate:e.chooseAvailableDate},P=function(e){(0,u.default)(n,e);var t=n.prototype;function n(t){var n;(n=e.call(this,t)||this).isTouchDevice=(0,f.default)(),n.today=(0,d.default)(),n.modifiers={today:function(e){return n.isToday(e)},blocked:function(e){return n.isBlocked(e)},"blocked-calendar":function(e){return t.isDayBlocked(e)},"blocked-out-of-range":function(e){return t.isOutsideRange(e)},"highlighted-calendar":function(e){return t.isDayHighlighted(e)},valid:function(e){return!n.isBlocked(e)},"selected-start":function(e){return n.isStartDate(e)},"selected-end":function(e){return n.isEndDate(e)},"blocked-minimum-nights":function(e){return n.doesNotMeetMinimumNights(e)},"selected-span":function(e){return n.isInSelectedSpan(e)},"last-in-range":function(e){return n.isLastInRange(e)},hovered:function(e){return n.isHovered(e)},"hovered-span":function(e){return n.isInHoveredSpan(e)},"hovered-offset":function(e){return n.isInHoveredSpan(e)},"after-hovered-start":function(e){return n.isDayAfterHoveredStartDate(e)},"first-day-of-week":function(e){return n.isFirstDayOfWeek(e)},"last-day-of-week":function(e){return n.isLastDayOfWeek(e)},"hovered-start-first-possible-end":function(e,t){return n.isFirstPossibleEndDateForHoveredStartDate(e,t)},"hovered-start-blocked-minimum-nights":function(e,t){return n.doesNotMeetMinNightsForHoveredStartDate(e,t)}};var r=n.getStateForNewMonth(t),a=r.currentMonth,o=r.visibleDays,u=Y(t.phrases,t.focusedInput);return n.state={hoverDate:null,currentMonth:a,phrases:(0,i.default)({},t.phrases,{chooseAvailableDate:u}),visibleDays:o,disablePrev:n.shouldDisableMonthNavigation(t.minDate,a),disableNext:n.shouldDisableMonthNavigation(t.maxDate,a)},n.onDayClick=n.onDayClick.bind((0,s.default)(n)),n.onDayMouseEnter=n.onDayMouseEnter.bind((0,s.default)(n)),n.onDayMouseLeave=n.onDayMouseLeave.bind((0,s.default)(n)),n.onPrevMonthClick=n.onPrevMonthClick.bind((0,s.default)(n)),n.onNextMonthClick=n.onNextMonthClick.bind((0,s.default)(n)),n.onMonthChange=n.onMonthChange.bind((0,s.default)(n)),n.onYearChange=n.onYearChange.bind((0,s.default)(n)),n.onMultiplyScrollableMonths=n.onMultiplyScrollableMonths.bind((0,s.default)(n)),n.getFirstFocusableDay=n.getFirstFocusableDay.bind((0,s.default)(n)),n}return t[!l.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentWillReceiveProps=function(e){var t=this,n=e.startDate,r=e.endDate,a=e.focusedInput,o=e.getMinNightsForHoverDate,s=e.minimumNights,u=e.isOutsideRange,l=e.isDayBlocked,f=e.isDayHighlighted,h=e.phrases,_=e.initialVisibleMonth,m=e.numberOfMonths,y=e.enableOutsideDays,v=this.props,b=v.startDate,g=v.endDate,M=v.focusedInput,k=v.minimumNights,D=v.isOutsideRange,w=v.isDayBlocked,S=v.isDayHighlighted,P=v.phrases,O=v.initialVisibleMonth,E=v.numberOfMonths,x=v.enableOutsideDays,C=this.state.hoverDate,j=this.state.visibleDays,H=!1,I=!1,A=!1;u!==D&&(this.modifiers["blocked-out-of-range"]=function(e){return u(e)},H=!0),l!==w&&(this.modifiers["blocked-calendar"]=function(e){return l(e)},I=!0),f!==S&&(this.modifiers["highlighted-calendar"]=function(e){return f(e)},A=!0);var F=H||I||A,R=n!==b,N=r!==g,W=a!==M;if(m!==E||y!==x||_!==O&&!M&&W){var z=this.getStateForNewMonth(e),B=z.currentMonth;j=z.visibleDays,this.setState({currentMonth:B,visibleDays:j})}var U={};if(R&&(U=this.deleteModifier(U,b,"selected-start"),U=this.addModifier(U,n,"selected-start"),b)){var K=b.clone().add(1,"day"),V=b.clone().add(k+1,"days");U=this.deleteModifierFromRange(U,K,V,"after-hovered-start")}if(N&&(U=this.deleteModifier(U,g,"selected-end"),U=this.addModifier(U,r,"selected-end")),(R||N)&&(b&&g&&(U=this.deleteModifierFromRange(U,b,g.clone().add(1,"day"),"selected-span")),n&&r&&(U=this.deleteModifierFromRange(U,n,r.clone().add(1,"day"),"hovered-span"),U=this.addModifierToRange(U,n.clone().add(1,"day"),r,"selected-span"))),!this.isTouchDevice&&R&&n&&!r){var $=n.clone().add(1,"day"),G=n.clone().add(s+1,"days");U=this.addModifierToRange(U,$,G,"after-hovered-start")}if(k>0&&(W||R||s!==k)){var J=b||this.today;U=this.deleteModifierFromRange(U,J,J.clone().add(k,"days"),"blocked-minimum-nights"),U=this.deleteModifierFromRange(U,J,J.clone().add(k,"days"),"blocked")}if((W||F)&&(0,c.default)(j).forEach(function(e){Object.keys(e).forEach(function(e){var n=(0,T.default)(e),r=!1;(W||H)&&(u(n)?(U=t.addModifier(U,n,"blocked-out-of-range"),r=!0):U=t.deleteModifier(U,n,"blocked-out-of-range")),(W||I)&&(l(n)?(U=t.addModifier(U,n,"blocked-calendar"),r=!0):U=t.deleteModifier(U,n,"blocked-calendar")),U=r?t.addModifier(U,n,"blocked"):t.deleteModifier(U,n,"blocked"),(W||A)&&(U=f(n)?t.addModifier(U,n,"highlighted-calendar"):t.deleteModifier(U,n,"highlighted-calendar"))})}),!this.isTouchDevice&&W&&C&&!this.isBlocked(C)){var q=o(C);q>0&&a===L.END_DATE&&(U=this.deleteModifierFromRange(U,C.clone().add(1,"days"),C.clone().add(q,"days"),"hovered-start-blocked-minimum-nights"),U=this.deleteModifier(U,C.clone().add(q,"days"),"hovered-start-first-possible-end")),q>0&&a===L.START_DATE&&(U=this.addModifierToRange(U,C.clone().add(1,"days"),C.clone().add(q,"days"),"hovered-start-blocked-minimum-nights"),U=this.addModifier(U,C.clone().add(q,"days"),"hovered-start-first-possible-end"))}s>0&&n&&a===L.END_DATE&&(U=this.addModifierToRange(U,n,n.clone().add(s,"days"),"blocked-minimum-nights"),U=this.addModifierToRange(U,n,n.clone().add(s,"days"),"blocked"));var Q=(0,d.default)();if((0,p.default)(this.today,Q)||(U=this.deleteModifier(U,this.today,"today"),U=this.addModifier(U,Q,"today"),this.today=Q),Object.keys(U).length>0&&this.setState({visibleDays:(0,i.default)({},j,{},U)}),W||h!==P){var Z=Y(h,a);this.setState({phrases:(0,i.default)({},h,{chooseAvailableDate:Z})})}},t.onDayClick=function(e,t){var n=this.props,r=n.keepOpenOnDateSelect,a=n.minimumNights,o=n.onBlur,i=n.focusedInput,s=n.onFocusChange,u=n.onClose,l=n.onDatesChange,d=n.startDateOffset,c=n.endDateOffset,f=n.disabled;if(t&&t.preventDefault(),!this.isBlocked(e)){var h=this.props,m=h.startDate,p=h.endDate;if(d||c){if(m=(0,M.default)(d,e),p=(0,M.default)(c,e),this.isBlocked(m)||this.isBlocked(p))return;l({startDate:m,endDate:p}),r||(s(null),u({startDate:m,endDate:p}))}else if(i===L.START_DATE){var b=p&&p.clone().subtract(a,"days"),g=(0,v.default)(b,e)||(0,y.default)(m,p),k=f===L.END_DATE;k&&g||(m=e,g&&(p=null)),l({startDate:m,endDate:p}),k&&!g?(s(null),u({startDate:m,endDate:p})):k||s(L.END_DATE)}else if(i===L.END_DATE){var D=m&&m.clone().add(a,"days");m?(0,_.default)(e,D)?(l({startDate:m,endDate:p=e}),r||(s(null),u({startDate:m,endDate:p}))):f!==L.START_DATE?l({startDate:m=e,endDate:p=null}):l({startDate:m,endDate:p}):(l({startDate:m,endDate:p=e}),s(L.START_DATE))}else l({startDate:m,endDate:p});o()}},t.onDayMouseEnter=function(e){if(!this.isTouchDevice){var t=this.props,n=t.startDate,r=t.endDate,a=t.focusedInput,o=t.getMinNightsForHoverDate,s=t.minimumNights,u=t.startDateOffset,l=t.endDateOffset,d=this.state,c=d.hoverDate,f=d.visibleDays,h=d.dateOffset,_=null;if(a){var m=u||l,b={};if(m){var g=(0,M.default)(u,e),k=(0,M.default)(l,e,function(e){return e.add(1,"day")});_={start:g,end:k},h&&h.start&&h.end&&(b=this.deleteModifierFromRange(b,h.start,h.end,"hovered-offset")),b=this.addModifierToRange(b,g,k,"hovered-offset")}if(!m){if(b=this.deleteModifier(b,c,"hovered"),b=this.addModifier(b,e,"hovered"),n&&!r&&a===L.END_DATE){if((0,y.default)(c,n)){var D=c.clone().add(1,"day");b=this.deleteModifierFromRange(b,n,D,"hovered-span")}if(!this.isBlocked(e)&&(0,y.default)(e,n)){var w=e.clone().add(1,"day");b=this.addModifierToRange(b,n,w,"hovered-span")}}if(!n&&r&&a===L.START_DATE&&((0,v.default)(c,r)&&(b=this.deleteModifierFromRange(b,c,r,"hovered-span")),!this.isBlocked(e)&&(0,v.default)(e,r)&&(b=this.addModifierToRange(b,e,r,"hovered-span"))),n){var T=n.clone().add(1,"day"),S=n.clone().add(s+1,"days");if(b=this.deleteModifierFromRange(b,T,S,"after-hovered-start"),(0,p.default)(e,n)){var Y=n.clone().add(1,"day"),P=n.clone().add(s+1,"days");b=this.addModifierToRange(b,Y,P,"after-hovered-start")}}if(c&&!this.isBlocked(c)){var O=o(c);O>0&&a===L.START_DATE&&(b=this.deleteModifierFromRange(b,c.clone().add(1,"days"),c.clone().add(O,"days"),"hovered-start-blocked-minimum-nights"),b=this.deleteModifier(b,c.clone().add(O,"days"),"hovered-start-first-possible-end"))}if(!this.isBlocked(e)){var E=o(e);E>0&&a===L.START_DATE&&(b=this.addModifierToRange(b,e.clone().add(1,"days"),e.clone().add(E,"days"),"hovered-start-blocked-minimum-nights"),b=this.addModifier(b,e.clone().add(E,"days"),"hovered-start-first-possible-end"))}}this.setState({hoverDate:e,dateOffset:_,visibleDays:(0,i.default)({},f,{},b)})}}},t.onDayMouseLeave=function(e){var t=this.props,n=t.startDate,r=t.endDate,a=t.focusedInput,o=t.getMinNightsForHoverDate,s=t.minimumNights,u=this.state,l=u.hoverDate,d=u.visibleDays,c=u.dateOffset;if(!this.isTouchDevice&&l){var f={};if(f=this.deleteModifier(f,l,"hovered"),c&&(f=this.deleteModifierFromRange(f,c.start,c.end,"hovered-offset")),n&&!r&&(0,y.default)(l,n)){var h=l.clone().add(1,"day");f=this.deleteModifierFromRange(f,n,h,"hovered-span")}if(!n&&r&&(0,y.default)(r,l)&&(f=this.deleteModifierFromRange(f,l,r,"hovered-span")),n&&(0,p.default)(e,n)){var _=n.clone().add(1,"day"),m=n.clone().add(s+1,"days");f=this.deleteModifierFromRange(f,_,m,"after-hovered-start")}if(!this.isBlocked(l)){var v=o(l);v>0&&a===L.START_DATE&&(f=this.deleteModifierFromRange(f,l.clone().add(1,"days"),l.clone().add(v,"days"),"hovered-start-blocked-minimum-nights"),f=this.deleteModifier(f,l.clone().add(v,"days"),"hovered-start-first-possible-end"))}this.setState({hoverDate:null,visibleDays:(0,i.default)({},d,{},f)})}},t.onPrevMonthClick=function(){var e=this.props,t=e.enableOutsideDays,n=e.maxDate,r=e.minDate,a=e.numberOfMonths,o=e.onPrevMonthClick,s=this.state,u=s.currentMonth,l=s.visibleDays,d={};Object.keys(l).sort().slice(0,a+1).forEach(function(e){d[e]=l[e]});var c=u.clone().subtract(2,"months"),f=(0,b.default)(c,1,t,!0),h=u.clone().subtract(1,"month");this.setState({currentMonth:h,disablePrev:this.shouldDisableMonthNavigation(r,h),disableNext:this.shouldDisableMonthNavigation(n,h),visibleDays:(0,i.default)({},d,{},this.getModifiers(f))},function(){o(h.clone())})},t.onNextMonthClick=function(){var e=this.props,t=e.enableOutsideDays,n=e.maxDate,r=e.minDate,a=e.numberOfMonths,o=e.onNextMonthClick,s=this.state,u=s.currentMonth,l=s.visibleDays,d={};Object.keys(l).sort().slice(1).forEach(function(e){d[e]=l[e]});var c=u.clone().add(a+1,"month"),f=(0,b.default)(c,1,t,!0),h=u.clone().add(1,"month");this.setState({currentMonth:h,disablePrev:this.shouldDisableMonthNavigation(r,h),disableNext:this.shouldDisableMonthNavigation(n,h),visibleDays:(0,i.default)({},d,{},this.getModifiers(f))},function(){o(h.clone())})},t.onMonthChange=function(e){var t=this.props,n=t.numberOfMonths,r=t.enableOutsideDays,a=t.orientation===L.VERTICAL_SCROLLABLE,o=(0,b.default)(e,n,r,a);this.setState({currentMonth:e.clone(),visibleDays:this.getModifiers(o)})},t.onYearChange=function(e){var t=this.props,n=t.numberOfMonths,r=t.enableOutsideDays,a=t.orientation===L.VERTICAL_SCROLLABLE,o=(0,b.default)(e,n,r,a);this.setState({currentMonth:e.clone(),visibleDays:this.getModifiers(o)})},t.onMultiplyScrollableMonths=function(){var e=this.props,t=e.numberOfMonths,n=e.enableOutsideDays,r=this.state,a=r.currentMonth,o=r.visibleDays,s=Object.keys(o).length,u=a.clone().add(s,"month"),l=(0,b.default)(u,t,n,!0);this.setState({visibleDays:(0,i.default)({},o,{},this.getModifiers(l))})},t.getFirstFocusableDay=function(e){var t=this,n=this.props,r=n.startDate,a=n.endDate,i=n.focusedInput,s=n.minimumNights,u=n.numberOfMonths,l=e.clone().startOf("month");if(i===L.START_DATE&&r?l=r.clone():i===L.END_DATE&&!a&&r?l=r.clone().add(s,"days"):i===L.END_DATE&&a&&(l=a.clone()),this.isBlocked(l)){for(var d=[],c=e.clone().add(u-1,"months").endOf("month"),f=l.clone();!(0,y.default)(f,c);)f=f.clone().add(1,"day"),d.push(f);var h=d.filter(function(e){return!t.isBlocked(e)});if(h.length>0)l=(0,o.default)(h,1)[0]}return l},t.getModifiers=function(e){var t=this,n={};return Object.keys(e).forEach(function(r){n[r]={},e[r].forEach(function(e){n[r][(0,k.default)(e)]=t.getModifiersForDay(e)})}),n},t.getModifiersForDay=function(e){var t=this;return new Set(Object.keys(this.modifiers).filter(function(n){return t.modifiers[n](e)}))},t.getStateForNewMonth=function(e){var t=this,n=e.initialVisibleMonth,r=e.numberOfMonths,a=e.enableOutsideDays,o=e.orientation,i=e.startDate,s=(n||(i?function(){return i}:function(){return t.today}))(),u=o===L.VERTICAL_SCROLLABLE;return{currentMonth:s,visibleDays:this.getModifiers((0,b.default)(s,r,a,u))}},t.shouldDisableMonthNavigation=function(e,t){if(!e)return!1;var n=this.props,r=n.numberOfMonths,a=n.enableOutsideDays;return(0,g.default)(e,t,r,a)},t.addModifier=function(e,t,n){return(0,D.addModifier)(e,t,n,this.props,this.state)},t.addModifierToRange=function(e,t,n,r){for(var a=e,o=t.clone();(0,v.default)(o,n);)a=this.addModifier(a,o,r),o=o.clone().add(1,"day");return a},t.deleteModifier=function(e,t,n){return(0,D.deleteModifier)(e,t,n,this.props,this.state)},t.deleteModifierFromRange=function(e,t,n,r){for(var a=e,o=t.clone();(0,v.default)(o,n);)a=this.deleteModifier(a,o,r),o=o.clone().add(1,"day");return a},t.doesNotMeetMinimumNights=function(e){var t=this.props,n=t.startDate,r=t.isOutsideRange,a=t.focusedInput,o=t.minimumNights;if(a!==L.END_DATE)return!1;if(n){var i=e.diff(n.clone().startOf("day").hour(12),"days");return i<o&&i>=0}return r((0,d.default)(e).subtract(o,"days"))},t.doesNotMeetMinNightsForHoveredStartDate=function(e,t){var n=this.props,r=n.focusedInput,a=n.getMinNightsForHoverDate;if(r!==L.END_DATE)return!1;if(t&&!this.isBlocked(t)){var o=a(t),i=e.diff(t.clone().startOf("day").hour(12),"days");return i<o&&i>=0}return!1},t.isDayAfterHoveredStartDate=function(e){var t=this.props,n=t.startDate,r=t.endDate,a=t.minimumNights,o=(this.state||{}).hoverDate;return!!n&&!r&&!this.isBlocked(e)&&(0,m.default)(o,e)&&a>0&&(0,p.default)(o,n)},t.isEndDate=function(e){var t=this.props.endDate;return(0,p.default)(e,t)},t.isHovered=function(e){var t=(this.state||{}).hoverDate;return!!this.props.focusedInput&&(0,p.default)(e,t)},t.isInHoveredSpan=function(e){var t=this.props,n=t.startDate,r=t.endDate,a=(this.state||{}).hoverDate,o=!!n&&!r&&(e.isBetween(n,a)||(0,p.default)(a,e)),i=!!r&&!n&&(e.isBetween(a,r)||(0,p.default)(a,e)),s=a&&!this.isBlocked(a);return(o||i)&&s},t.isInSelectedSpan=function(e){var t=this.props,n=t.startDate,r=t.endDate;return e.isBetween(n,r,"days")},t.isLastInRange=function(e){var t=this.props.endDate;return this.isInSelectedSpan(e)&&(0,m.default)(e,t)},t.isStartDate=function(e){var t=this.props.startDate;return(0,p.default)(e,t)},t.isBlocked=function(e){var t=this.props,n=t.isDayBlocked,r=t.isOutsideRange;return n(e)||r(e)||this.doesNotMeetMinimumNights(e)},t.isToday=function(e){return(0,p.default)(e,this.today)},t.isFirstDayOfWeek=function(e){var t=this.props.firstDayOfWeek;return e.day()===(t||d.default.localeData().firstDayOfWeek())},t.isLastDayOfWeek=function(e){var t=this.props.firstDayOfWeek;return e.day()===((t||d.default.localeData().firstDayOfWeek())+6)%7},t.isFirstPossibleEndDateForHoveredStartDate=function(e,t){var n=this.props,r=n.focusedInput,a=n.getMinNightsForHoverDate;if(r!==L.END_DATE||!t||this.isBlocked(t))return!1;var o=a(t),i=t.clone().add(o,"days");return(0,p.default)(e,i)},t.render=function(){var e=this.props,t=e.numberOfMonths,n=e.orientation,r=e.monthFormat,a=e.renderMonthText,o=e.navPrev,i=e.navNext,s=e.noNavButtons,u=e.onOutsideClick,d=e.withPortal,c=e.enableOutsideDays,f=e.firstDayOfWeek,h=e.renderKeyboardShortcutsButton,_=e.hideKeyboardShortcutsPanel,m=e.daySize,p=e.focusedInput,y=e.renderCalendarDay,v=e.renderDayContents,b=e.renderCalendarInfo,g=e.renderMonthElement,M=e.calendarInfoPosition,k=e.onBlur,D=e.onShiftTab,L=e.onTab,T=e.isFocused,S=e.showKeyboardShortcuts,Y=e.isRTL,P=e.weekDayFormat,O=e.dayAriaLabelFormat,E=e.verticalHeight,x=e.noBorder,C=e.transitionDuration,j=e.verticalBorderSpacing,H=e.horizontalMonthPadding,I=this.state,A=I.currentMonth,F=I.phrases,R=I.visibleDays,N=I.disablePrev,W=I.disableNext;return l.default.createElement(w.default,{orientation:n,enableOutsideDays:c,modifiers:R,numberOfMonths:t,onDayClick:this.onDayClick,onDayMouseEnter:this.onDayMouseEnter,onDayMouseLeave:this.onDayMouseLeave,onPrevMonthClick:this.onPrevMonthClick,onNextMonthClick:this.onNextMonthClick,onMonthChange:this.onMonthChange,onTab:L,onShiftTab:D,onYearChange:this.onYearChange,onMultiplyScrollableMonths:this.onMultiplyScrollableMonths,monthFormat:r,renderMonthText:a,withPortal:d,hidden:!p,initialVisibleMonth:function(){return A},daySize:m,onOutsideClick:u,disablePrev:N,disableNext:W,navPrev:o,navNext:i,noNavButtons:s,renderCalendarDay:y,renderDayContents:v,renderCalendarInfo:b,renderMonthElement:g,renderKeyboardShortcutsButton:h,calendarInfoPosition:M,firstDayOfWeek:f,hideKeyboardShortcutsPanel:_,isFocused:T,getFirstFocusableDay:this.getFirstFocusableDay,onBlur:k,showKeyboardShortcuts:S,phrases:F,isRTL:Y,weekDayFormat:P,dayAriaLabelFormat:O,verticalHeight:E,verticalBorderSpacing:j,noBorder:x,transitionDuration:C,horizontalMonthPadding:H})},n}(l.default.PureComponent||l.default.Component);t.default=P,P.propTypes={},P.defaultProps=S},function(e,t,n){var r=n(304),a=n(305),o=n(306);e.exports=function(e,t){return r(e)||a(e,t)||o()}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!a.default.isMoment(e)||!a.default.isMoment(t))return!1;var n=(0,a.default)(e).add(1,"day");return(0,o.default)(n,t)};var a=r(n(1)),o=r(n(24))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){if(!a.default.isMoment(e))return{};for(var i={},s=r?e.clone():e.clone().subtract(1,"month"),u=0;u<(r?t:t+2);u+=1){var l=[],d=s.clone(),c=d.clone().startOf("month").hour(12),f=d.clone().endOf("month").hour(12),h=c.clone();if(n)for(var _=0;_<h.weekday();_+=1){var m=h.clone().subtract(_+1,"day");l.unshift(m)}for(;h<f;)l.push(h.clone()),h.add(1,"day");if(n&&0!==h.weekday())for(var p=h.weekday(),y=0;p<7;p+=1,y+=1){var v=h.clone().add(y,"day");l.push(v)}i[(0,o.default)(s)]=l,s=s.clone().add(1,"month")}return i};var a=r(n(1)),o=r(n(39))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.addModifier=function(e,t,n,r,c){var f=r.numberOfMonths,h=r.enableOutsideDays,_=r.orientation,m=c.currentMonth,p=c.visibleDays,y=m,v=f;_===d.VERTICAL_SCROLLABLE?v=Object.keys(p).length:(y=(0,l.default)(y),v+=2);if(!t||!(0,i.default)(t,y,v,h))return e;var b=(0,s.default)(t),g=(0,o.default)({},e);if(h){var M=Object.keys(p).filter(function(e){return Object.keys(p[e]).indexOf(b)>-1});g=M.reduce(function(t,r){var i=e[r]||p[r];if(!i[b]||!i[b].has(n)){var s=new Set(i[b]);s.add(n),t[r]=(0,o.default)({},i,(0,a.default)({},b,s))}return t},g)}else{var k=(0,u.default)(t),D=e[k]||p[k]||{};if(!D[b]||!D[b].has(n)){var L=new Set(D[b]);L.add(n),g[k]=(0,o.default)({},D,(0,a.default)({},b,L))}}return g},t.deleteModifier=function(e,t,n,r,c){var f=r.numberOfMonths,h=r.enableOutsideDays,_=r.orientation,m=c.currentMonth,p=c.visibleDays,y=m,v=f;_===d.VERTICAL_SCROLLABLE?v=Object.keys(p).length:(y=(0,l.default)(y),v+=2);if(!t||!(0,i.default)(t,y,v,h))return e;var b=(0,s.default)(t),g=(0,o.default)({},e);if(h){var M=Object.keys(p).filter(function(e){return Object.keys(p[e]).indexOf(b)>-1});g=M.reduce(function(t,r){var i=e[r]||p[r];if(i[b]&&i[b].has(n)){var s=new Set(i[b]);s.delete(n),t[r]=(0,o.default)({},i,(0,a.default)({},b,s))}return t},g)}else{var k=(0,u.default)(t),D=e[k]||p[k]||{};if(D[b]&&D[b].has(n)){var L=new Set(D[b]);L.delete(n),g[k]=(0,o.default)({},D,(0,a.default)({},b,L))}}return g};var a=r(n(31)),o=r(n(6)),i=r(n(55)),s=r(n(32)),u=r(n(39)),l=r(n(308)),d=n(4)},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){o.has(e)||o.set(e,(0,a.default)(e));return o.get(e)};var a=r(n(1)),o=new Map},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(10)),o=r(n(229)),i=r(n(6)),s=r(n(12)),u=r(n(8)),l=r(n(0)),d=(r(n(3)),r(n(15)),n(5),r(n(1))),c=r(n(49)),f=r(n(27)),h=n(7),_=(r(n(9)),r(n(24))),m=r(n(41)),p=r(n(231)),y=r(n(32)),v=n(232),b=(r(n(26)),r(n(20)),r(n(34)),n(4)),g=r(n(56)),M=r(n(233)),k={date:void 0,onDateChange:function(){},focused:!1,onFocusChange:function(){},onClose:function(){},keepOpenOnDateSelect:!1,isOutsideRange:function(){},isDayBlocked:function(){},isDayHighlighted:function(){},renderMonthText:null,enableOutsideDays:!1,numberOfMonths:1,orientation:b.HORIZONTAL_ORIENTATION,withPortal:!1,hideKeyboardShortcutsPanel:!1,initialVisibleMonth:null,firstDayOfWeek:null,daySize:b.DAY_SIZE,verticalHeight:null,noBorder:!1,verticalBorderSpacing:void 0,transitionDuration:void 0,horizontalMonthPadding:13,navPrev:null,navNext:null,onPrevMonthClick:function(){},onNextMonthClick:function(){},onOutsideClick:function(){},renderCalendarDay:void 0,renderDayContents:null,renderCalendarInfo:null,renderMonthElement:null,calendarInfoPosition:b.INFO_POSITION_BOTTOM,onBlur:function(){},isFocused:!1,showKeyboardShortcuts:!1,onTab:function(){},onShiftTab:function(){},monthFormat:"MMMM YYYY",weekDayFormat:"dd",phrases:h.DayPickerPhrases,dayAriaLabelFormat:void 0,isRTL:!1},D=function(e){(0,u.default)(n,e);var t=n.prototype;function n(t){var n;(n=e.call(this,t)||this).isTouchDevice=!1,n.today=(0,d.default)(),n.modifiers={today:function(e){return n.isToday(e)},blocked:function(e){return n.isBlocked(e)},"blocked-calendar":function(e){return t.isDayBlocked(e)},"blocked-out-of-range":function(e){return t.isOutsideRange(e)},"highlighted-calendar":function(e){return t.isDayHighlighted(e)},valid:function(e){return!n.isBlocked(e)},hovered:function(e){return n.isHovered(e)},selected:function(e){return n.isSelected(e)},"first-day-of-week":function(e){return n.isFirstDayOfWeek(e)},"last-day-of-week":function(e){return n.isLastDayOfWeek(e)}};var r=n.getStateForNewMonth(t),a=r.currentMonth,o=r.visibleDays;return n.state={hoverDate:null,currentMonth:a,visibleDays:o},n.onDayMouseEnter=n.onDayMouseEnter.bind((0,s.default)(n)),n.onDayMouseLeave=n.onDayMouseLeave.bind((0,s.default)(n)),n.onDayClick=n.onDayClick.bind((0,s.default)(n)),n.onPrevMonthClick=n.onPrevMonthClick.bind((0,s.default)(n)),n.onNextMonthClick=n.onNextMonthClick.bind((0,s.default)(n)),n.onMonthChange=n.onMonthChange.bind((0,s.default)(n)),n.onYearChange=n.onYearChange.bind((0,s.default)(n)),n.getFirstFocusableDay=n.getFirstFocusableDay.bind((0,s.default)(n)),n}return t[!l.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentDidMount=function(){this.isTouchDevice=(0,f.default)()},t.componentWillReceiveProps=function(e){var t=this,n=e.date,r=e.focused,a=e.isOutsideRange,o=e.isDayBlocked,s=e.isDayHighlighted,u=e.initialVisibleMonth,l=e.numberOfMonths,f=e.enableOutsideDays,h=this.props,m=h.isOutsideRange,p=h.isDayBlocked,y=h.isDayHighlighted,v=h.numberOfMonths,b=h.enableOutsideDays,g=h.initialVisibleMonth,k=h.focused,D=h.date,L=this.state.visibleDays,w=!1,T=!1,S=!1;a!==m&&(this.modifiers["blocked-out-of-range"]=function(e){return a(e)},w=!0),o!==p&&(this.modifiers["blocked-calendar"]=function(e){return o(e)},T=!0),s!==y&&(this.modifiers["highlighted-calendar"]=function(e){return s(e)},S=!0);var Y=w||T||S;if(l!==v||f!==b||u!==g&&!k&&r){var P=this.getStateForNewMonth(e),O=P.currentMonth;L=P.visibleDays,this.setState({currentMonth:O,visibleDays:L})}var E=r!==k,x={};n!==D&&(x=this.deleteModifier(x,D,"selected"),x=this.addModifier(x,n,"selected")),(E||Y)&&(0,c.default)(L).forEach(function(e){Object.keys(e).forEach(function(e){var n=(0,M.default)(e);x=t.isBlocked(n)?t.addModifier(x,n,"blocked"):t.deleteModifier(x,n,"blocked"),(E||w)&&(x=a(n)?t.addModifier(x,n,"blocked-out-of-range"):t.deleteModifier(x,n,"blocked-out-of-range")),(E||T)&&(x=o(n)?t.addModifier(x,n,"blocked-calendar"):t.deleteModifier(x,n,"blocked-calendar")),(E||S)&&(x=s(n)?t.addModifier(x,n,"highlighted-calendar"):t.deleteModifier(x,n,"highlighted-calendar"))})});var C=(0,d.default)();(0,_.default)(this.today,C)||(x=this.deleteModifier(x,this.today,"today"),x=this.addModifier(x,C,"today"),this.today=C),Object.keys(x).length>0&&this.setState({visibleDays:(0,i.default)({},L,{},x)})},t.componentWillUpdate=function(){this.today=(0,d.default)()},t.onDayClick=function(e,t){if(t&&t.preventDefault(),!this.isBlocked(e)){var n=this.props,r=n.onDateChange,a=n.keepOpenOnDateSelect,o=n.onFocusChange,i=n.onClose;r(e),a||(o({focused:!1}),i({date:e}))}},t.onDayMouseEnter=function(e){if(!this.isTouchDevice){var t=this.state,n=t.hoverDate,r=t.visibleDays,a=this.deleteModifier({},n,"hovered");a=this.addModifier(a,e,"hovered"),this.setState({hoverDate:e,visibleDays:(0,i.default)({},r,{},a)})}},t.onDayMouseLeave=function(){var e=this.state,t=e.hoverDate,n=e.visibleDays;if(!this.isTouchDevice&&t){var r=this.deleteModifier({},t,"hovered");this.setState({hoverDate:null,visibleDays:(0,i.default)({},n,{},r)})}},t.onPrevMonthClick=function(){var e=this.props,t=e.onPrevMonthClick,n=e.numberOfMonths,r=e.enableOutsideDays,a=this.state,o=a.currentMonth,s=a.visibleDays,u={};Object.keys(s).sort().slice(0,n+1).forEach(function(e){u[e]=s[e]});var l=o.clone().subtract(1,"month"),d=(0,p.default)(l,1,r);this.setState({currentMonth:l,visibleDays:(0,i.default)({},u,{},this.getModifiers(d))},function(){t(l.clone())})},t.onNextMonthClick=function(){var e=this.props,t=e.onNextMonthClick,n=e.numberOfMonths,r=e.enableOutsideDays,a=this.state,o=a.currentMonth,s=a.visibleDays,u={};Object.keys(s).sort().slice(1).forEach(function(e){u[e]=s[e]});var l=o.clone().add(n,"month"),d=(0,p.default)(l,1,r),c=o.clone().add(1,"month");this.setState({currentMonth:c,visibleDays:(0,i.default)({},u,{},this.getModifiers(d))},function(){t(c.clone())})},t.onMonthChange=function(e){var t=this.props,n=t.numberOfMonths,r=t.enableOutsideDays,a=t.orientation===b.VERTICAL_SCROLLABLE,o=(0,p.default)(e,n,r,a);this.setState({currentMonth:e.clone(),visibleDays:this.getModifiers(o)})},t.onYearChange=function(e){var t=this.props,n=t.numberOfMonths,r=t.enableOutsideDays,a=t.orientation===b.VERTICAL_SCROLLABLE,o=(0,p.default)(e,n,r,a);this.setState({currentMonth:e.clone(),visibleDays:this.getModifiers(o)})},t.getFirstFocusableDay=function(e){var t=this,n=this.props,r=n.date,a=n.numberOfMonths,i=e.clone().startOf("month");if(r&&(i=r.clone()),this.isBlocked(i)){for(var s=[],u=e.clone().add(a-1,"months").endOf("month"),l=i.clone();!(0,m.default)(l,u);)l=l.clone().add(1,"day"),s.push(l);var d=s.filter(function(e){return!t.isBlocked(e)&&(0,m.default)(e,i)});if(d.length>0){var c=(0,o.default)(d,1);i=c[0]}}return i},t.getModifiers=function(e){var t=this,n={};return Object.keys(e).forEach(function(r){n[r]={},e[r].forEach(function(e){n[r][(0,y.default)(e)]=t.getModifiersForDay(e)})}),n},t.getModifiersForDay=function(e){var t=this;return new Set(Object.keys(this.modifiers).filter(function(n){return t.modifiers[n](e)}))},t.getStateForNewMonth=function(e){var t=this,n=e.initialVisibleMonth,r=e.date,a=e.numberOfMonths,o=e.enableOutsideDays,i=(n||(r?function(){return r}:function(){return t.today}))();return{currentMonth:i,visibleDays:this.getModifiers((0,p.default)(i,a,o))}},t.addModifier=function(e,t,n){return(0,v.addModifier)(e,t,n,this.props,this.state)},t.deleteModifier=function(e,t,n){return(0,v.deleteModifier)(e,t,n,this.props,this.state)},t.isBlocked=function(e){var t=this.props,n=t.isDayBlocked,r=t.isOutsideRange;return n(e)||r(e)},t.isHovered=function(e){var t=(this.state||{}).hoverDate;return(0,_.default)(e,t)},t.isSelected=function(e){var t=this.props.date;return(0,_.default)(e,t)},t.isToday=function(e){return(0,_.default)(e,this.today)},t.isFirstDayOfWeek=function(e){var t=this.props.firstDayOfWeek;return e.day()===(t||d.default.localeData().firstDayOfWeek())},t.isLastDayOfWeek=function(e){var t=this.props.firstDayOfWeek;return e.day()===((t||d.default.localeData().firstDayOfWeek())+6)%7},t.render=function(){var e=this.props,t=e.numberOfMonths,n=e.orientation,r=e.monthFormat,a=e.renderMonthText,o=e.navPrev,i=e.navNext,s=e.onOutsideClick,u=e.onShiftTab,d=e.onTab,c=e.withPortal,f=e.focused,h=e.enableOutsideDays,_=e.hideKeyboardShortcutsPanel,m=e.daySize,p=e.firstDayOfWeek,y=e.renderCalendarDay,v=e.renderDayContents,b=e.renderCalendarInfo,M=e.renderMonthElement,k=e.calendarInfoPosition,D=e.isFocused,L=e.isRTL,w=e.phrases,T=e.dayAriaLabelFormat,S=e.onBlur,Y=e.showKeyboardShortcuts,P=e.weekDayFormat,O=e.verticalHeight,E=e.noBorder,x=e.transitionDuration,C=e.verticalBorderSpacing,j=e.horizontalMonthPadding,H=this.state,I=H.currentMonth,A=H.visibleDays;return l.default.createElement(g.default,{orientation:n,enableOutsideDays:h,modifiers:A,numberOfMonths:t,onDayClick:this.onDayClick,onDayMouseEnter:this.onDayMouseEnter,onDayMouseLeave:this.onDayMouseLeave,onPrevMonthClick:this.onPrevMonthClick,onNextMonthClick:this.onNextMonthClick,onMonthChange:this.onMonthChange,onYearChange:this.onYearChange,monthFormat:r,withPortal:c,hidden:!f,hideKeyboardShortcutsPanel:_,initialVisibleMonth:function(){return I},firstDayOfWeek:p,onOutsideClick:s,navPrev:o,navNext:i,renderMonthText:a,renderCalendarDay:y,renderDayContents:v,renderCalendarInfo:b,renderMonthElement:M,calendarInfoPosition:k,isFocused:D,getFirstFocusableDay:this.getFirstFocusableDay,onBlur:S,onTab:d,onShiftTab:u,phrases:w,daySize:m,isRTL:L,showKeyboardShortcuts:Y,weekDayFormat:P,dayAriaLabelFormat:T,verticalHeight:O,noBorder:E,transitionDuration:x,verticalBorderSpacing:C,horizontalMonthPadding:j})},n}(l.default.PureComponent||l.default.Component);t.default=D,D.propTypes={},D.defaultProps=k},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=r(n(15)),i=n(5),s=n(7),u=r(n(9)),l=r(n(28)),d=r(n(214)),c=r(n(215)),f=r(n(21)),h=r(n(20)),_=r(n(34)),m={date:o.default.momentObj,onDateChange:a.default.func.isRequired,focused:a.default.bool,onFocusChange:a.default.func.isRequired,id:a.default.string.isRequired,placeholder:a.default.string,ariaLabel:a.default.string,disabled:a.default.bool,required:a.default.bool,readOnly:a.default.bool,screenReaderInputMessage:a.default.string,showClearDate:a.default.bool,customCloseIcon:a.default.node,showDefaultInputIcon:a.default.bool,inputIconPosition:l.default,customInputIcon:a.default.node,noBorder:a.default.bool,block:a.default.bool,small:a.default.bool,regular:a.default.bool,verticalSpacing:i.nonNegativeInteger,keepFocusOnInput:a.default.bool,renderMonthText:(0,i.mutuallyExclusiveProps)(a.default.func,"renderMonthText","renderMonthElement"),renderMonthElement:(0,i.mutuallyExclusiveProps)(a.default.func,"renderMonthText","renderMonthElement"),orientation:d.default,anchorDirection:c.default,openDirection:f.default,horizontalMargin:a.default.number,withPortal:a.default.bool,withFullScreenPortal:a.default.bool,appendToBody:a.default.bool,disableScroll:a.default.bool,initialVisibleMonth:a.default.func,firstDayOfWeek:h.default,numberOfMonths:a.default.number,keepOpenOnDateSelect:a.default.bool,reopenPickerOnClearDate:a.default.bool,renderCalendarInfo:a.default.func,calendarInfoPosition:_.default,hideKeyboardShortcutsPanel:a.default.bool,daySize:i.nonNegativeInteger,isRTL:a.default.bool,verticalHeight:i.nonNegativeInteger,transitionDuration:i.nonNegativeInteger,horizontalMonthPadding:i.nonNegativeInteger,navPrev:a.default.node,navNext:a.default.node,onPrevMonthClick:a.default.func,onNextMonthClick:a.default.func,onClose:a.default.func,renderCalendarDay:a.default.func,renderDayContents:a.default.func,enableOutsideDays:a.default.bool,isDayBlocked:a.default.func,isOutsideRange:a.default.func,isDayHighlighted:a.default.func,displayFormat:a.default.oneOfType([a.default.string,a.default.func]),monthFormat:a.default.string,weekDayFormat:a.default.string,phrases:a.default.shape((0,u.default)(s.SingleDatePickerPhrases)),dayAriaLabelFormat:a.default.string};t.default=m},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(11)),o=(r(n(6)),r(n(0))),i=(r(n(3)),n(5),n(13)),s=n(7),u=(r(n(9)),r(n(18))),l=r(n(221)),d=(r(n(28)),r(n(36))),c=r(n(227)),f=(r(n(21)),n(4)),h={children:null,placeholder:"Select Date",ariaLabel:void 0,displayValue:"",screenReaderMessage:"",focused:!1,isFocused:!1,disabled:!1,required:!1,readOnly:!1,openDirection:f.OPEN_DOWN,showCaret:!1,showClearDate:!1,showDefaultInputIcon:!1,inputIconPosition:f.ICON_BEFORE_POSITION,customCloseIcon:null,customInputIcon:null,isRTL:!1,noBorder:!1,block:!1,small:!1,regular:!1,verticalSpacing:void 0,onChange:function(){},onClearDate:function(){},onFocus:function(){},onKeyDownShiftTab:function(){},onKeyDownTab:function(){},onKeyDownArrowDown:function(){},onKeyDownQuestionMark:function(){},phrases:s.SingleDatePickerInputPhrases};function _(e){var t=e.id,n=e.children,r=e.placeholder,s=e.ariaLabel,u=e.displayValue,h=e.focused,_=e.isFocused,m=e.disabled,p=e.required,y=e.readOnly,v=e.showCaret,b=e.showClearDate,g=e.showDefaultInputIcon,M=e.inputIconPosition,k=e.phrases,D=e.onClearDate,L=e.onChange,w=e.onFocus,T=e.onKeyDownShiftTab,S=e.onKeyDownTab,Y=e.onKeyDownArrowDown,P=e.onKeyDownQuestionMark,O=e.screenReaderMessage,E=e.customCloseIcon,x=e.customInputIcon,C=e.openDirection,j=e.isRTL,H=e.noBorder,I=e.block,A=e.small,F=e.regular,R=e.verticalSpacing,N=e.styles,W=x||o.default.createElement(c.default,(0,i.css)(N.SingleDatePickerInput_calendarIcon_svg)),z=E||o.default.createElement(d.default,(0,i.css)(N.SingleDatePickerInput_clearDate_svg,A&&N.SingleDatePickerInput_clearDate_svg__small)),B=O||k.keyboardForwardNavigationInstructions,U=(g||null!==x)&&o.default.createElement("button",(0,a.default)({},(0,i.css)(N.SingleDatePickerInput_calendarIcon),{type:"button",disabled:m,"aria-label":k.focusStartDate,onClick:w}),W);return o.default.createElement("div",(0,i.css)(N.SingleDatePickerInput,m&&N.SingleDatePickerInput__disabled,j&&N.SingleDatePickerInput__rtl,!H&&N.SingleDatePickerInput__withBorder,I&&N.SingleDatePickerInput__block,b&&N.SingleDatePickerInput__showClearDate),M===f.ICON_BEFORE_POSITION&&U,o.default.createElement(l.default,{id:t,placeholder:r,ariaLabel:s,displayValue:u,screenReaderMessage:B,focused:h,isFocused:_,disabled:m,required:p,readOnly:y,showCaret:v,onChange:L,onFocus:w,onKeyDownShiftTab:T,onKeyDownTab:S,onKeyDownArrowDown:Y,onKeyDownQuestionMark:P,openDirection:C,verticalSpacing:R,small:A,regular:F,block:I}),n,b&&o.default.createElement("button",(0,a.default)({},(0,i.css)(N.SingleDatePickerInput_clearDate,A&&N.SingleDatePickerInput_clearDate__small,!E&&N.SingleDatePickerInput_clearDate__default,!u&&N.SingleDatePickerInput_clearDate__hide),{type:"button","aria-label":k.clearDate,disabled:m,onClick:D}),z),M===f.ICON_AFTER_POSITION&&U)}_.propTypes={},_.defaultProps=h;var m=(0,i.withStyles)(function(e){var t=e.reactDates,n=t.border,r=t.color;return{SingleDatePickerInput:{display:"inline-block",backgroundColor:r.background},SingleDatePickerInput__withBorder:{borderColor:r.border,borderWidth:n.pickerInput.borderWidth,borderStyle:n.pickerInput.borderStyle,borderRadius:n.pickerInput.borderRadius},SingleDatePickerInput__rtl:{direction:(0,u.default)("rtl")},SingleDatePickerInput__disabled:{backgroundColor:r.disabled},SingleDatePickerInput__block:{display:"block"},SingleDatePickerInput__showClearDate:{paddingRight:30},SingleDatePickerInput_clearDate:{background:"none",border:0,color:"inherit",font:"inherit",lineHeight:"normal",overflow:"visible",cursor:"pointer",padding:10,margin:"0 10px 0 5px",position:"absolute",right:0,top:"50%",transform:"translateY(-50%)"},SingleDatePickerInput_clearDate__default:{":focus":{background:r.core.border,borderRadius:"50%"},":hover":{background:r.core.border,borderRadius:"50%"}},SingleDatePickerInput_clearDate__small:{padding:6},SingleDatePickerInput_clearDate__hide:{visibility:"hidden"},SingleDatePickerInput_clearDate_svg:{fill:r.core.grayLight,height:12,width:15,verticalAlign:"middle"},SingleDatePickerInput_clearDate_svg__small:{height:9},SingleDatePickerInput_calendarIcon:{background:"none",border:0,color:"inherit",font:"inherit",lineHeight:"normal",overflow:"visible",cursor:"pointer",display:"inline-block",verticalAlign:"middle",padding:10,margin:"0 5px 0 10px"},SingleDatePickerInput_calendarIcon_svg:{fill:r.core.grayLight,height:15,width:14,verticalAlign:"middle"}}},{pureComponent:void 0!==o.default.PureComponent})(_);t.default=m},function(e,t,n){"use strict";var r=n(326),a=Number.MAX_SAFE_INTEGER||Math.pow(2,53)-1,o=function e(t,n,o,i,s){for(var u=i,l=0;l<o;){var d=r.ToString(l);if(r.HasProperty(n,d)){var c=r.Get(n,d),f=!1;if(s>0&&(f=r.IsArray(c)),f){u=e(t,c,r.ToLength(r.Get(c,"length")),u,s-1)}else{if(u>=a)throw new TypeError("index too large");r.CreateDataPropertyOrThrow(t,r.ToString(u),c),u+=1}}l+=1}return u};e.exports=function(){var e=r.ToObject(this),t=r.ToLength(r.Get(e,"length")),n=1;arguments.length>0&&void 0!==arguments[0]&&(n=r.ToInteger(arguments[0]));var a=r.ArraySpeciesCreate(e,0);return o(a,e,t,0,n),a}},function(e,t,n){"use strict";var r=n(237);e.exports=function(){return Array.prototype.flat||r}},function(e,t){var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);e.exports=function(){return n(r),r}}else{var a=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),a[t]=e>>>((3&t)<<3)&255;return a}}},function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,a=n;return[a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],"-",a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]],a[e[r++]]].join("")}},function(e,t,n){"use strict";n.r(t);var r=n(14),a=n.n(r),o=n(0),i=n.n(o),s=n(3),u=n.n(s),l=!("undefined"==typeof window||!window.document||!window.document.createElement),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.a.Component),d(t,[{key:"componentWillUnmount",value:function(){this.defaultNode&&document.body.removeChild(this.defaultNode),this.defaultNode=null}},{key:"render",value:function(){return l?(this.props.node||this.defaultNode||(this.defaultNode=document.createElement("div"),document.body.appendChild(this.defaultNode)),a.a.createPortal(this.props.children,this.props.node||this.defaultNode)):null}}]),t}();c.propTypes={children:u.a.node.isRequired,node:u.a.any};var f=c,h=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var _=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.a.Component),h(t,[{key:"componentDidMount",value:function(){this.renderPortal()}},{key:"componentDidUpdate",value:function(e){this.renderPortal()}},{key:"componentWillUnmount",value:function(){a.a.unmountComponentAtNode(this.defaultNode||this.props.node),this.defaultNode&&document.body.removeChild(this.defaultNode),this.defaultNode=null,this.portal=null}},{key:"renderPortal",value:function(e){this.props.node||this.defaultNode||(this.defaultNode=document.createElement("div"),document.body.appendChild(this.defaultNode));var t=this.props.children;"function"==typeof this.props.children.type&&(t=i.a.cloneElement(this.props.children)),this.portal=a.a.unstable_renderSubtreeIntoContainer(this,t,this.props.node||this.defaultNode)}},{key:"render",value:function(){return null}}]),t}(),m=_;_.propTypes={children:u.a.node.isRequired,node:u.a.any};var p=a.a.createPortal?f:m,y=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var v=27,b=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.portalNode=null,n.state={active:!!e.defaultOpen},n.openPortal=n.openPortal.bind(n),n.closePortal=n.closePortal.bind(n),n.wrapWithPortal=n.wrapWithPortal.bind(n),n.handleOutsideMouseClick=n.handleOutsideMouseClick.bind(n),n.handleKeydown=n.handleKeydown.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.a.Component),y(t,[{key:"componentDidMount",value:function(){this.props.closeOnEsc&&document.addEventListener("keydown",this.handleKeydown),this.props.closeOnOutsideClick&&document.addEventListener("click",this.handleOutsideMouseClick)}},{key:"componentWillUnmount",value:function(){this.props.closeOnEsc&&document.removeEventListener("keydown",this.handleKeydown),this.props.closeOnOutsideClick&&document.removeEventListener("click",this.handleOutsideMouseClick)}},{key:"openPortal",value:function(e){this.state.active||(e&&e.nativeEvent&&e.nativeEvent.stopImmediatePropagation(),this.setState({active:!0},this.props.onOpen))}},{key:"closePortal",value:function(){this.state.active&&this.setState({active:!1},this.props.onClose)}},{key:"wrapWithPortal",value:function(e){var t=this;return this.state.active?i.a.createElement(p,{node:this.props.node,key:"react-portal",ref:function(e){return t.portalNode=e}},e):null}},{key:"handleOutsideMouseClick",value:function(e){if(this.state.active){var t=this.portalNode.props.node||this.portalNode.defaultNode;!t||t.contains(e.target)||e.button&&0!==e.button||this.closePortal()}}},{key:"handleKeydown",value:function(e){e.keyCode===v&&this.state.active&&this.closePortal()}},{key:"render",value:function(){return this.props.children({openPortal:this.openPortal,closePortal:this.closePortal,portal:this.wrapWithPortal,isOpen:this.state.active})}}]),t}();b.propTypes={children:u.a.func.isRequired,defaultOpen:u.a.bool,node:u.a.any,closeOnEsc:u.a.bool,closeOnOutsideClick:u.a.bool,onOpen:u.a.func,onClose:u.a.func},b.defaultProps={onOpen:function(){},onClose:function(){}};var g=b;n.d(t,"Portal",function(){return p}),n.d(t,"PortalWithState",function(){return g})},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(22))},function(e,t,n){var r=n(334),a=n(335),o=a;o.v1=r,o.v4=a,e.exports=o},function(e,t,n){"use strict";
/** @license React v16.9.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(59),a="function"==typeof Symbol&&Symbol.for,o=a?Symbol.for("react.element"):60103,i=a?Symbol.for("react.portal"):60106,s=a?Symbol.for("react.fragment"):60107,u=a?Symbol.for("react.strict_mode"):60108,l=a?Symbol.for("react.profiler"):60114,d=a?Symbol.for("react.provider"):60109,c=a?Symbol.for("react.context"):60110,f=a?Symbol.for("react.forward_ref"):60112,h=a?Symbol.for("react.suspense"):60113,_=a?Symbol.for("react.suspense_list"):60120,m=a?Symbol.for("react.memo"):60115,p=a?Symbol.for("react.lazy"):60116;a&&Symbol.for("react.fundamental"),a&&Symbol.for("react.responder");var y="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function M(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}function k(){}function D(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}M.prototype.isReactComponent={},M.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw v(Error(85));this.updater.enqueueSetState(this,e,t,"setState")},M.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},k.prototype=M.prototype;var L=D.prototype=new k;L.constructor=D,r(L,M.prototype),L.isPureReactComponent=!0;var w={current:null},T={suspense:null},S={current:null},Y=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r=void 0,a={},i=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)Y.call(t,r)&&!P.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var l=Array(u),d=0;d<u;d++)l[d]=arguments[d+2];a.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:s,props:a,_owner:S.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var x=/\/+/g,C=[];function j(e,t,n,r){if(C.length){var a=C.pop();return a.result=e,a.keyPrefix=t,a.func=n,a.context=r,a.count=0,a}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function H(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>C.length&&C.push(e)}function I(e,t,n){return null==e?0:function e(t,n,r,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var u=!1;if(null===t)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case o:case i:u=!0}}if(u)return r(a,t,""===n?"."+A(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var d=n+A(s=t[l],l);u+=e(s,d,r,a)}else if(d=null===t||"object"!=typeof t?null:"function"==typeof(d=y&&t[y]||t["@@iterator"])?d:null,"function"==typeof d)for(t=d.call(t),l=0;!(s=t.next()).done;)u+=e(s=s.value,d=n+A(s,l++),r,a);else if("object"===s)throw r=""+t,v(Error(31),"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return u}(e,"",t,n)}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function F(e,t){e.func.call(e.context,t,e.count++)}function R(e,t,n){var r=e.result,a=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?N(e,r,n,function(e){return e}):null!=e&&(E(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(x,"$&/")+"/")+n)),r.push(e))}function N(e,t,n,r,a){var o="";null!=n&&(o=(""+n).replace(x,"$&/")+"/"),I(e,R,t=j(t,o,r,a)),H(t)}function W(){var e=w.current;if(null===e)throw v(Error(321));return e}var z={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return N(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;I(e,F,t=j(null,null,t,n)),H(t)},count:function(e){return I(e,function(){return null},null)},toArray:function(e){var t=[];return N(e,t,null,function(e){return e}),t},only:function(e){if(!E(e))throw v(Error(143));return e}},createRef:function(){return{current:null}},Component:M,PureComponent:D,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:c,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:f,render:e}},lazy:function(e){return{$$typeof:p,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return W().useCallback(e,t)},useContext:function(e,t){return W().useContext(e,t)},useEffect:function(e,t){return W().useEffect(e,t)},useImperativeHandle:function(e,t,n){return W().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return W().useLayoutEffect(e,t)},useMemo:function(e,t){return W().useMemo(e,t)},useReducer:function(e,t,n){return W().useReducer(e,t,n)},useRef:function(e){return W().useRef(e)},useState:function(e){return W().useState(e)},Fragment:s,Profiler:l,StrictMode:u,Suspense:h,unstable_SuspenseList:_,createElement:O,cloneElement:function(e,t,n){if(null==e)throw v(Error(267),e);var a=void 0,i=r({},e.props),s=e.key,u=e.ref,l=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,l=S.current),void 0!==t.key&&(s=""+t.key);var d=void 0;for(a in e.type&&e.type.defaultProps&&(d=e.type.defaultProps),t)Y.call(t,a)&&!P.hasOwnProperty(a)&&(i[a]=void 0===t[a]&&void 0!==d?d[a]:t[a])}if(1===(a=arguments.length-2))i.children=n;else if(1<a){d=Array(a);for(var c=0;c<a;c++)d[c]=arguments[c+2];i.children=d}return{$$typeof:o,type:e.type,key:s,ref:u,props:i,_owner:l}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:E,version:"16.9.0",unstable_withSuspenseConfig:function(e,t){var n=T.suspense;T.suspense=void 0===t?null:t;try{e()}finally{T.suspense=n}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:w,ReactCurrentBatchConfig:T,ReactCurrentOwner:S,IsSomeRendererActing:{current:!1},assign:r}},B={default:z},U=B&&z||B;e.exports=U.default||U},function(e,t,n){"use strict";
/** @license React v16.9.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),a=n(59),o=n(247);function i(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}if(!r)throw i(Error(227));var s=null,u={};function l(){if(s)for(var e in u){var t=u[e],n=s.indexOf(e);if(!(-1<n))throw i(Error(96),e);if(!c[n]){if(!t.extractEvents)throw i(Error(97),e);for(var r in c[n]=t,n=t.eventTypes){var a=void 0,o=n[r],l=t,h=r;if(f.hasOwnProperty(h))throw i(Error(99),h);f[h]=o;var _=o.phasedRegistrationNames;if(_){for(a in _)_.hasOwnProperty(a)&&d(_[a],l,h);a=!0}else o.registrationName?(d(o.registrationName,l,h),a=!0):a=!1;if(!a)throw i(Error(98),r,e)}}}}function d(e,t,n){if(h[e])throw i(Error(100),e);h[e]=t,_[e]=t.eventTypes[n].dependencies}var c=[],f={},h={},_={};var m=!1,p=null,y=!1,v=null,b={onError:function(e){m=!0,p=e}};function g(e,t,n,r,a,o,i,s,u){m=!1,p=null,function(e,t,n,r,a,o,i,s,u){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}.apply(b,arguments)}var M=null,k=null,D=null;function L(e,t,n){var r=e.type||"unknown-event";e.currentTarget=D(n),function(e,t,n,r,a,o,s,u,l){if(g.apply(this,arguments),m){if(!m)throw i(Error(198));var d=p;m=!1,p=null,y||(y=!0,v=d)}}(r,t,void 0,e),e.currentTarget=null}function w(e,t){if(null==t)throw i(Error(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var S=null;function Y(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)L(e,t[r],n[r]);else t&&L(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function P(e){if(null!==e&&(S=w(S,e)),e=S,S=null,e){if(T(e,Y),S)throw i(Error(95));if(y)throw e=v,y=!1,v=null,e}}var O={injectEventPluginOrder:function(e){if(s)throw i(Error(101));s=Array.prototype.slice.call(e),l()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!u.hasOwnProperty(t)||u[t]!==r){if(u[t])throw i(Error(102),t);u[t]=r,n=!0}}n&&l()}};function E(e,t){var n=e.stateNode;if(!n)return null;var r=M(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw i(Error(231),t,typeof n);return n}var x=Math.random().toString(36).slice(2),C="__reactInternalInstance$"+x,j="__reactEventHandlers$"+x;function H(e){if(e[C])return e[C];for(;!e[C];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[C]).tag||6===e.tag?e:null}function I(e){return!(e=e[C])||5!==e.tag&&6!==e.tag?null:e}function A(e){if(5===e.tag||6===e.tag)return e.stateNode;throw i(Error(33))}function F(e){return e[j]||null}function R(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function N(e,t,n){(t=E(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=w(n._dispatchListeners,t),n._dispatchInstances=w(n._dispatchInstances,e))}function W(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=R(t);for(t=n.length;0<t--;)N(n[t],"captured",e);for(t=0;t<n.length;t++)N(n[t],"bubbled",e)}}function z(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=E(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=w(n._dispatchListeners,t),n._dispatchInstances=w(n._dispatchInstances,e))}function B(e){e&&e.dispatchConfig.registrationName&&z(e._targetInst,null,e)}function U(e){T(e,W)}var K=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement);function V(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var $={animationend:V("Animation","AnimationEnd"),animationiteration:V("Animation","AnimationIteration"),animationstart:V("Animation","AnimationStart"),transitionend:V("Transition","TransitionEnd")},G={},J={};function q(e){if(G[e])return G[e];if(!$[e])return e;var t,n=$[e];for(t in n)if(n.hasOwnProperty(t)&&t in J)return G[e]=n[t];return e}K&&(J=document.createElement("div").style,"AnimationEvent"in window||(delete $.animationend.animation,delete $.animationiteration.animation,delete $.animationstart.animation),"TransitionEvent"in window||delete $.transitionend.transition);var Q=q("animationend"),Z=q("animationiteration"),X=q("animationstart"),ee=q("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,ae=null;function oe(){if(ae)return ae;var e,t,n=re,r=n.length,a="value"in ne?ne.value:ne.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return ae=a.slice(e,1<t?1-t:void 0)}function ie(){return!0}function se(){return!1}function ue(e,t,n,r){for(var a in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(a)&&((t=e[a])?this[a]=t(n):"target"===a?this.target=r:this[a]=n[a]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ie:se,this.isPropagationStopped=se,this}function le(e,t,n,r){if(this.eventPool.length){var a=this.eventPool.pop();return this.call(a,e,t,n,r),a}return new this(e,t,n,r)}function de(e){if(!(e instanceof this))throw i(Error(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function ce(e){e.eventPool=[],e.getPooled=le,e.release=de}a(ue.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ie)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ie)},persist:function(){this.isPersistent=ie},isPersistent:se,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=se,this._dispatchInstances=this._dispatchListeners=null}}),ue.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},ue.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,ce(n),n},ce(ue);var fe=ue.extend({data:null}),he=ue.extend({data:null}),_e=[9,13,27,32],me=K&&"CompositionEvent"in window,pe=null;K&&"documentMode"in document&&(pe=document.documentMode);var ye=K&&"TextEvent"in window&&!pe,ve=K&&(!me||pe&&8<pe&&11>=pe),be=String.fromCharCode(32),ge={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Me=!1;function ke(e,t){switch(e){case"keyup":return-1!==_e.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function De(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Le=!1;var we={eventTypes:ge,extractEvents:function(e,t,n,r){var a=void 0,o=void 0;if(me)e:{switch(e){case"compositionstart":a=ge.compositionStart;break e;case"compositionend":a=ge.compositionEnd;break e;case"compositionupdate":a=ge.compositionUpdate;break e}a=void 0}else Le?ke(e,n)&&(a=ge.compositionEnd):"keydown"===e&&229===n.keyCode&&(a=ge.compositionStart);return a?(ve&&"ko"!==n.locale&&(Le||a!==ge.compositionStart?a===ge.compositionEnd&&Le&&(o=oe()):(re="value"in(ne=r)?ne.value:ne.textContent,Le=!0)),a=fe.getPooled(a,t,n,r),o?a.data=o:null!==(o=De(n))&&(a.data=o),U(a),o=a):o=null,(e=ye?function(e,t){switch(e){case"compositionend":return De(t);case"keypress":return 32!==t.which?null:(Me=!0,be);case"textInput":return(e=t.data)===be&&Me?null:e;default:return null}}(e,n):function(e,t){if(Le)return"compositionend"===e||!me&&ke(e,t)?(e=oe(),ae=re=ne=null,Le=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ve&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=he.getPooled(ge.beforeInput,t,n,r)).data=e,U(t)):t=null,null===o?t:null===t?o:[o,t]}},Te=null,Se=null,Ye=null;function Pe(e){if(e=k(e)){if("function"!=typeof Te)throw i(Error(280));var t=M(e.stateNode);Te(e.stateNode,e.type,t)}}function Oe(e){Se?Ye?Ye.push(e):Ye=[e]:Se=e}function Ee(){if(Se){var e=Se,t=Ye;if(Ye=Se=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function xe(e,t){return e(t)}function Ce(e,t,n,r){return e(t,n,r)}function je(){}var He=xe,Ie=!1;function Ae(){null===Se&&null===Ye||(je(),Ee())}var Fe={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Re(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Fe[e.type]:"textarea"===t}function Ne(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e){if(!K)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function ze(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Be(e){e._valueTracker||(e._valueTracker=function(e){var t=ze(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ue(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ze(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ke=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Ke.hasOwnProperty("ReactCurrentDispatcher")||(Ke.ReactCurrentDispatcher={current:null}),Ke.hasOwnProperty("ReactCurrentBatchConfig")||(Ke.ReactCurrentBatchConfig={suspense:null});var Ve=/^(.*)[\\\/]/,$e="function"==typeof Symbol&&Symbol.for,Ge=$e?Symbol.for("react.element"):60103,Je=$e?Symbol.for("react.portal"):60106,qe=$e?Symbol.for("react.fragment"):60107,Qe=$e?Symbol.for("react.strict_mode"):60108,Ze=$e?Symbol.for("react.profiler"):60114,Xe=$e?Symbol.for("react.provider"):60109,et=$e?Symbol.for("react.context"):60110,tt=$e?Symbol.for("react.concurrent_mode"):60111,nt=$e?Symbol.for("react.forward_ref"):60112,rt=$e?Symbol.for("react.suspense"):60113,at=$e?Symbol.for("react.suspense_list"):60120,ot=$e?Symbol.for("react.memo"):60115,it=$e?Symbol.for("react.lazy"):60116;$e&&Symbol.for("react.fundamental"),$e&&Symbol.for("react.responder");var st="function"==typeof Symbol&&Symbol.iterator;function ut(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=st&&e[st]||e["@@iterator"])?e:null}function lt(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case qe:return"Fragment";case Je:return"Portal";case Ze:return"Profiler";case Qe:return"StrictMode";case rt:return"Suspense";case at:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case et:return"Context.Consumer";case Xe:return"Context.Provider";case nt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case ot:return lt(e.type);case it:if(e=1===e._status?e._result:null)return lt(e)}return null}function dt(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,a=e._debugSource,o=lt(e.type);n=null,r&&(n=lt(r.type)),r=o,o="",a?o=" (at "+a.fileName.replace(Ve,"")+":"+a.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ft=Object.prototype.hasOwnProperty,ht={},_t={};function mt(e,t,n,r,a,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var pt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){pt[e]=new mt(e,0,!1,e,null,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];pt[t]=new mt(t,1,!1,e[1],null,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){pt[e]=new mt(e,2,!1,e.toLowerCase(),null,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){pt[e]=new mt(e,2,!1,e,null,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){pt[e]=new mt(e,3,!1,e.toLowerCase(),null,!1)}),["checked","multiple","muted","selected"].forEach(function(e){pt[e]=new mt(e,3,!0,e,null,!1)}),["capture","download"].forEach(function(e){pt[e]=new mt(e,4,!1,e,null,!1)}),["cols","rows","size","span"].forEach(function(e){pt[e]=new mt(e,6,!1,e,null,!1)}),["rowSpan","start"].forEach(function(e){pt[e]=new mt(e,5,!1,e.toLowerCase(),null,!1)});var yt=/[\-:]([a-z])/g;function vt(e){return e[1].toUpperCase()}function bt(e,t,n,r){var a=pt.hasOwnProperty(t)?pt[t]:null;(null!==a?0===a.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!ft.call(_t,e)||!ft.call(ht,e)&&(ct.test(e)?_t[e]=!0:(ht[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function gt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Mt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function kt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=gt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Dt(e,t){null!=(t=t.checked)&&bt(e,"checked",t,!1)}function Lt(e,t){Dt(e,t);var n=gt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Tt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Tt(e,t.type,gt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function wt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Tt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(yt,vt);pt[t]=new mt(t,1,!1,e,null,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(yt,vt);pt[t]=new mt(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(yt,vt);pt[t]=new mt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)}),["tabIndex","crossOrigin"].forEach(function(e){pt[e]=new mt(e,1,!1,e.toLowerCase(),null,!1)}),pt.xlinkHref=new mt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach(function(e){pt[e]=new mt(e,1,!1,e.toLowerCase(),null,!0)});var St={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Yt(e,t,n){return(e=ue.getPooled(St.change,e,t,n)).type="change",Oe(n),U(e),e}var Pt=null,Ot=null;function Et(e){P(e)}function xt(e){if(Ue(A(e)))return e}function Ct(e,t){if("change"===e)return t}var jt=!1;function Ht(){Pt&&(Pt.detachEvent("onpropertychange",It),Ot=Pt=null)}function It(e){if("value"===e.propertyName&&xt(Ot))if(e=Yt(Ot,e,Ne(e)),Ie)P(e);else{Ie=!0;try{xe(Et,e)}finally{Ie=!1,Ae()}}}function At(e,t,n){"focus"===e?(Ht(),Ot=n,(Pt=t).attachEvent("onpropertychange",It)):"blur"===e&&Ht()}function Ft(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return xt(Ot)}function Rt(e,t){if("click"===e)return xt(t)}function Nt(e,t){if("input"===e||"change"===e)return xt(t)}K&&(jt=We("input")&&(!document.documentMode||9<document.documentMode));var Wt={eventTypes:St,_isInputEventSupported:jt,extractEvents:function(e,t,n,r){var a=t?A(t):window,o=void 0,i=void 0,s=a.nodeName&&a.nodeName.toLowerCase();if("select"===s||"input"===s&&"file"===a.type?o=Ct:Re(a)?jt?o=Nt:(o=Ft,i=At):(s=a.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===a.type||"radio"===a.type)&&(o=Rt),o&&(o=o(e,t)))return Yt(o,n,r);i&&i(e,a,t),"blur"===e&&(e=a._wrapperState)&&e.controlled&&"number"===a.type&&Tt(a,"number",a.value)}},zt=ue.extend({view:null,detail:null}),Bt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ut(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Bt[e])&&!!t[e]}function Kt(){return Ut}var Vt=0,$t=0,Gt=!1,Jt=!1,qt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Kt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Vt;return Vt=e.screenX,Gt?"mousemove"===e.type?e.screenX-t:0:(Gt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=$t;return $t=e.screenY,Jt?"mousemove"===e.type?e.screenY-t:0:(Jt=!0,0)}}),Qt=qt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Zt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Xt={eventTypes:Zt,extractEvents:function(e,t,n,r){var a="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(a&&(n.relatedTarget||n.fromElement)||!o&&!a)return null;if(a=r.window===r?r:(a=r.ownerDocument)?a.defaultView||a.parentWindow:window,o?(o=t,t=(t=n.relatedTarget||n.toElement)?H(t):null):o=null,o===t)return null;var i=void 0,s=void 0,u=void 0,l=void 0;"mouseout"===e||"mouseover"===e?(i=qt,s=Zt.mouseLeave,u=Zt.mouseEnter,l="mouse"):"pointerout"!==e&&"pointerover"!==e||(i=Qt,s=Zt.pointerLeave,u=Zt.pointerEnter,l="pointer");var d=null==o?a:A(o);if(a=null==t?a:A(t),(e=i.getPooled(s,o,n,r)).type=l+"leave",e.target=d,e.relatedTarget=a,(n=i.getPooled(u,t,n,r)).type=l+"enter",n.target=a,n.relatedTarget=d,r=t,o&&r)e:{for(a=r,l=0,i=t=o;i;i=R(i))l++;for(i=0,u=a;u;u=R(u))i++;for(;0<l-i;)t=R(t),l--;for(;0<i-l;)a=R(a),i--;for(;l--;){if(t===a||t===a.alternate)break e;t=R(t),a=R(a)}t=null}else t=null;for(a=t,t=[];o&&o!==a&&(null===(l=o.alternate)||l!==a);)t.push(o),o=R(o);for(o=[];r&&r!==a&&(null===(l=r.alternate)||l!==a);)o.push(r),r=R(r);for(r=0;r<t.length;r++)z(t[r],"bubbled",e);for(r=o.length;0<r--;)z(o[r],"captured",n);return[e,n]}};function en(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var tn=Object.prototype.hasOwnProperty;function nn(e,t){if(en(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!tn.call(t,n[r])||!en(e[n[r]],t[n[r]]))return!1;return!0}function rn(e,t){return{responder:e,props:t}}function an(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function on(e){if(2!==an(e))throw i(Error(188))}function sn(e){if(!(e=function(e){var t=e.alternate;if(!t){if(3===(t=an(e)))throw i(Error(188));return 1===t?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return on(a),e;if(o===r)return on(a),t;o=o.sibling}throw i(Error(188))}if(n.return!==r.return)n=a,r=o;else{for(var s=!1,u=a.child;u;){if(u===n){s=!0,n=a,r=o;break}if(u===r){s=!0,r=a,n=o;break}u=u.sibling}if(!s){for(u=o.child;u;){if(u===n){s=!0,n=o,r=a;break}if(u===r){s=!0,r=o,n=a;break}u=u.sibling}if(!s)throw i(Error(189))}}if(n.alternate!==r)throw i(Error(190))}if(3!==n.tag)throw i(Error(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}new Map,new Map,new Set,new Map;var un=ue.extend({animationName:null,elapsedTime:null,pseudoElement:null}),ln=ue.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),dn=zt.extend({relatedTarget:null});function cn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}for(var fn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},hn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},_n=zt.extend({key:function(e){if(e.key){var t=fn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=cn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?hn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Kt,charCode:function(e){return"keypress"===e.type?cn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?cn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),mn=qt.extend({dataTransfer:null}),pn=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Kt}),yn=ue.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vn=qt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),bn=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Q,"animationEnd",2],[Z,"animationIteration",2],[X,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[ee,"transitionEnd",2],["waiting","waiting",2]],gn={},Mn={},kn=0;kn<bn.length;kn++){var Dn=bn[kn],Ln=Dn[0],wn=Dn[1],Tn=Dn[2],Sn="on"+(wn[0].toUpperCase()+wn.slice(1)),Yn={phasedRegistrationNames:{bubbled:Sn,captured:Sn+"Capture"},dependencies:[Ln],eventPriority:Tn};gn[wn]=Yn,Mn[Ln]=Yn}var Pn={eventTypes:gn,getEventPriority:function(e){return void 0!==(e=Mn[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var a=Mn[e];if(!a)return null;switch(e){case"keypress":if(0===cn(n))return null;case"keydown":case"keyup":e=_n;break;case"blur":case"focus":e=dn;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=qt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=pn;break;case Q:case Z:case X:e=un;break;case ee:e=yn;break;case"scroll":e=zt;break;case"wheel":e=vn;break;case"copy":case"cut":case"paste":e=ln;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Qt;break;default:e=ue}return U(t=e.getPooled(a,t,n,r)),t}},On=Pn.getEventPriority,En=[];function xn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=H(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var a=Ne(e.nativeEvent);r=e.topLevelType;for(var o=e.nativeEvent,i=null,s=0;s<c.length;s++){var u=c[s];u&&(u=u.extractEvents(r,t,o,a))&&(i=w(i,u))}P(i)}}var Cn=!0;function jn(e,t){Hn(t,e,!1)}function Hn(e,t,n){switch(On(t)){case 0:var r=function(e,t,n){Ie||je();var r=In,a=Ie;Ie=!0;try{Ce(r,e,t,n)}finally{(Ie=a)||Ae()}}.bind(null,t,1);break;case 1:r=function(e,t,n){In(e,t,n)}.bind(null,t,1);break;default:r=In.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function In(e,t,n){if(Cn){if(null===(t=H(t=Ne(n)))||"number"!=typeof t.tag||2===an(t)||(t=null),En.length){var r=En.pop();r.topLevelType=e,r.nativeEvent=n,r.targetInst=t,e=r}else e={topLevelType:e,nativeEvent:n,targetInst:t,ancestors:[]};try{if(n=e,Ie)xn(n);else{Ie=!0;try{He(xn,n,void 0)}finally{Ie=!1,Ae()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>En.length&&En.push(e)}}}var An=new("function"==typeof WeakMap?WeakMap:Map);function Fn(e){var t=An.get(e);return void 0===t&&(t=new Set,An.set(e,t)),t}function Rn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Nn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Wn(e,t){var n,r=Nn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Nn(r)}}function zn(){for(var e=window,t=Rn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Rn((e=t.contentWindow).document)}return t}function Bn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Un=K&&"documentMode"in document&&11>=document.documentMode,Kn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Vn=null,$n=null,Gn=null,Jn=!1;function qn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Jn||null==Vn||Vn!==Rn(n)?null:("selectionStart"in(n=Vn)&&Bn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Gn&&nn(Gn,n)?null:(Gn=n,(e=ue.getPooled(Kn.select,$n,e,t)).type="select",e.target=Vn,U(e),e))}var Qn={eventTypes:Kn,extractEvents:function(e,t,n,r){var a,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(a=!o)){e:{o=Fn(o),a=_.onSelect;for(var i=0;i<a.length;i++)if(!o.has(a[i])){o=!1;break e}o=!0}a=!o}if(a)return null;switch(o=t?A(t):window,e){case"focus":(Re(o)||"true"===o.contentEditable)&&(Vn=o,$n=t,Gn=null);break;case"blur":Gn=$n=Vn=null;break;case"mousedown":Jn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Jn=!1,qn(n,r);case"selectionchange":if(Un)break;case"keydown":case"keyup":return qn(n,r)}return null}};function Zn(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Xn(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+gt(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function er(e,t){if(null!=t.dangerouslySetInnerHTML)throw i(Error(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function tr(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw i(Error(92));if(Array.isArray(t)){if(!(1>=t.length))throw i(Error(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:gt(n)}}function nr(e,t){var n=gt(t.value),r=gt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function rr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}O.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),M=F,k=I,D=A,O.injectEventPluginsByName({SimpleEventPlugin:Pn,EnterLeaveEventPlugin:Xt,ChangeEventPlugin:Wt,SelectEventPlugin:Qn,BeforeInputEventPlugin:we});var ar={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function or(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ir(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?or(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var sr=void 0,ur=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,a){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==ar.svg||"innerHTML"in e)e.innerHTML=t;else{for((sr=sr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=sr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function lr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var dr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},cr=["Webkit","ms","Moz","O"];function fr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||dr.hasOwnProperty(e)&&dr[e]?(""+t).trim():t+"px"}function hr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=fr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(dr).forEach(function(e){cr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),dr[t]=dr[e]})});var _r=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function mr(e,t){if(t){if(_r[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw i(Error(137),e,"");if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw i(Error(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw i(Error(61))}if(null!=t.style&&"object"!=typeof t.style)throw i(Error(62),"")}}function pr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function yr(e,t){var n=Fn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=_[t];for(var r=0;r<t.length;r++){var a=t[r];if(!n.has(a)){switch(a){case"scroll":Hn(e,"scroll",!0);break;case"focus":case"blur":Hn(e,"focus",!0),Hn(e,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":We(a)&&Hn(e,a,!0);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(a)&&jn(a,e)}n.add(a)}}}function vr(){}var br=null,gr=null;function Mr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function kr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Dr="function"==typeof setTimeout?setTimeout:void 0,Lr="function"==typeof clearTimeout?clearTimeout:void 0;function wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}new Set;var Tr=[],Sr=-1;function Yr(e){0>Sr||(e.current=Tr[Sr],Tr[Sr]=null,Sr--)}function Pr(e,t){Tr[++Sr]=e.current,e.current=t}var Or={},Er={current:Or},xr={current:!1},Cr=Or;function jr(e,t){var n=e.type.contextTypes;if(!n)return Or;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Hr(e){return null!=(e=e.childContextTypes)}function Ir(e){Yr(xr),Yr(Er)}function Ar(e){Yr(xr),Yr(Er)}function Fr(e,t,n){if(Er.current!==Or)throw i(Error(168));Pr(Er,t),Pr(xr,n)}function Rr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw i(Error(108),lt(t)||"Unknown",o);return a({},n,r)}function Nr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Or,Cr=Er.current,Pr(Er,t),Pr(xr,xr.current),!0}function Wr(e,t,n){var r=e.stateNode;if(!r)throw i(Error(169));n?(t=Rr(e,t,Cr),r.__reactInternalMemoizedMergedChildContext=t,Yr(xr),Yr(Er),Pr(Er,t)):Yr(xr),Pr(xr,n)}var zr=o.unstable_runWithPriority,Br=o.unstable_scheduleCallback,Ur=o.unstable_cancelCallback,Kr=o.unstable_shouldYield,Vr=o.unstable_requestPaint,$r=o.unstable_now,Gr=o.unstable_getCurrentPriorityLevel,Jr=o.unstable_ImmediatePriority,qr=o.unstable_UserBlockingPriority,Qr=o.unstable_NormalPriority,Zr=o.unstable_LowPriority,Xr=o.unstable_IdlePriority,ea={},ta=void 0!==Vr?Vr:function(){},na=null,ra=null,aa=!1,oa=$r(),ia=1e4>oa?$r:function(){return $r()-oa};function sa(){switch(Gr()){case Jr:return 99;case qr:return 98;case Qr:return 97;case Zr:return 96;case Xr:return 95;default:throw i(Error(332))}}function ua(e){switch(e){case 99:return Jr;case 98:return qr;case 97:return Qr;case 96:return Zr;case 95:return Xr;default:throw i(Error(332))}}function la(e,t){return e=ua(e),zr(e,t)}function da(e,t,n){return e=ua(e),Br(e,t,n)}function ca(e){return null===na?(na=[e],ra=Br(Jr,ha)):na.push(e),ea}function fa(){null!==ra&&Ur(ra),ha()}function ha(){if(!aa&&null!==na){aa=!0;var e=0;try{var t=na;la(99,function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}}),na=null}catch(t){throw null!==na&&(na=na.slice(e+1)),Br(Jr,fa),t}finally{aa=!1}}}function _a(e,t){return 1073741823===t?99:1===t?95:0>=(e=10*(1073741821-t)-10*(1073741821-e))?99:250>=e?98:5250>=e?97:95}function ma(e,t){if(e&&e.defaultProps)for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var pa={current:null},ya=null,va=null,ba=null;function ga(){ba=va=ya=null}function Ma(e,t){var n=e.type._context;Pr(pa,n._currentValue),n._currentValue=t}function ka(e){var t=pa.current;Yr(pa),e.type._context._currentValue=t}function Da(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function La(e,t){ya=e,ba=va=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(ui=!0),e.firstContext=null)}function wa(e,t){if(ba!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ba=e,t=1073741823),t={context:e,observedBits:t,next:null},null===va){if(null===ya)throw i(Error(308));va=t,ya.dependencies={expirationTime:0,firstContext:t,responders:null}}else va=va.next=t;return e._currentValue}var Ta=!1;function Sa(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ya(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Pa(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Oa(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Ea(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,a=null;null===r&&(r=e.updateQueue=Sa(e.memoizedState))}else r=e.updateQueue,a=n.updateQueue,null===r?null===a?(r=e.updateQueue=Sa(e.memoizedState),a=n.updateQueue=Sa(n.memoizedState)):r=e.updateQueue=Ya(a):null===a&&(a=n.updateQueue=Ya(r));null===a||r===a?Oa(r,t):null===r.lastUpdate||null===a.lastUpdate?(Oa(r,t),Oa(a,t)):(Oa(r,t),a.lastUpdate=t)}function xa(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Sa(e.memoizedState):Ca(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Ca(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Ya(t)),t}function ja(e,t,n,r,o,i){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(i,r,o):e;case 3:e.effectTag=-2049&e.effectTag|64;case 0:if(null==(o="function"==typeof(e=n.payload)?e.call(i,r,o):e))break;return a({},r,o);case 2:Ta=!0}return r}function Ha(e,t,n,r,a){Ta=!1;for(var o=(t=Ca(e,t)).baseState,i=null,s=0,u=t.firstUpdate,l=o;null!==u;){var d=u.expirationTime;d<a?(null===i&&(i=u,o=l),s<d&&(s=d)):(Rs(d,u.suspenseConfig),l=ja(e,0,u,l,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(d=null,u=t.firstCapturedUpdate;null!==u;){var c=u.expirationTime;c<a?(null===d&&(d=u,null===i&&(o=l)),s<c&&(s=c)):(l=ja(e,0,u,l,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===i&&(t.lastUpdate=null),null===d?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===d&&(o=l),t.baseState=o,t.firstUpdate=i,t.firstCapturedUpdate=d,e.expirationTime=s,e.memoizedState=l}function Ia(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),Aa(t.firstEffect,n),t.firstEffect=t.lastEffect=null,Aa(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function Aa(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw i(Error(191),n);n.call(r)}e=e.nextEffect}}var Fa=Ke.ReactCurrentBatchConfig,Ra=(new r.Component).refs;function Na(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Wa={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===an(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Ts(),a=Fa.suspense;(a=Pa(r=Ss(r,e,a),a)).payload=t,null!=n&&(a.callback=n),Ea(e,a),Ps(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Ts(),a=Fa.suspense;(a=Pa(r=Ss(r,e,a),a)).tag=1,a.payload=t,null!=n&&(a.callback=n),Ea(e,a),Ps(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Ts(),r=Fa.suspense;(r=Pa(n=Ss(n,e,r),r)).tag=2,null!=t&&(r.callback=t),Ea(e,r),Ps(e,n)}};function za(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!t.prototype||!t.prototype.isPureReactComponent||(!nn(n,r)||!nn(a,o))}function Ba(e,t,n){var r=!1,a=Or,o=t.contextType;return"object"==typeof o&&null!==o?o=wa(o):(a=Hr(t)?Cr:Er.current,o=(r=null!=(r=t.contextTypes))?jr(e,a):Or),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Wa,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function Ua(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Wa.enqueueReplaceState(t,t.state,null)}function Ka(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=Ra;var o=t.contextType;"object"==typeof o&&null!==o?a.context=wa(o):(o=Hr(t)?Cr:Er.current,a.context=jr(e,o)),null!==(o=e.updateQueue)&&(Ha(e,o,n,a,r),a.state=e.memoizedState),"function"==typeof(o=t.getDerivedStateFromProps)&&(Na(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&Wa.enqueueReplaceState(a,a.state,null),null!==(o=e.updateQueue)&&(Ha(e,o,n,a,r),a.state=e.memoizedState)),"function"==typeof a.componentDidMount&&(e.effectTag|=4)}var Va=Array.isArray;function $a(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;if(n){if(1!==n.tag)throw i(Error(309));r=n.stateNode}if(!r)throw i(Error(147),e);var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===Ra&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw i(Error(284));if(!n._owner)throw i(Error(290),e)}return e}function Ga(e,t){if("textarea"!==e.type)throw i(Error(31),"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Ja(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t,n){return(e=Xs(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=nu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function l(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=$a(e,t,n),r.return=e,r):((r=eu(n.type,n.key,n.props,null,e.mode,r)).ref=$a(e,t,n),r.return=e,r)}function d(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=ru(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function c(e,t,n,r,o){return null===t||7!==t.tag?((t=tu(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=nu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ge:return(n=eu(t.type,t.key,t.props,null,e.mode,n)).ref=$a(e,null,t),n.return=e,n;case Je:return(t=ru(t,e.mode,n)).return=e,t}if(Va(t)||ut(t))return(t=tu(t,e.mode,n,null)).return=e,t;Ga(e,t)}return null}function h(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ge:return n.key===a?n.type===qe?c(e,t,n.props.children,r,a):l(e,t,n,r):null;case Je:return n.key===a?d(e,t,n,r):null}if(Va(n)||ut(n))return null!==a?null:c(e,t,n,r,null);Ga(e,n)}return null}function _(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ge:return e=e.get(null===r.key?n:r.key)||null,r.type===qe?c(t,e,r.props.children,a,r.key):l(t,e,r,a);case Je:return d(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(Va(r)||ut(r))return c(t,e=e.get(n)||null,r,a,null);Ga(t,r)}return null}function m(a,i,s,u){for(var l=null,d=null,c=i,m=i=0,p=null;null!==c&&m<s.length;m++){c.index>m?(p=c,c=null):p=c.sibling;var y=h(a,c,s[m],u);if(null===y){null===c&&(c=p);break}e&&c&&null===y.alternate&&t(a,c),i=o(y,i,m),null===d?l=y:d.sibling=y,d=y,c=p}if(m===s.length)return n(a,c),l;if(null===c){for(;m<s.length;m++)null!==(c=f(a,s[m],u))&&(i=o(c,i,m),null===d?l=c:d.sibling=c,d=c);return l}for(c=r(a,c);m<s.length;m++)null!==(p=_(c,a,m,s[m],u))&&(e&&null!==p.alternate&&c.delete(null===p.key?m:p.key),i=o(p,i,m),null===d?l=p:d.sibling=p,d=p);return e&&c.forEach(function(e){return t(a,e)}),l}function p(a,s,u,l){var d=ut(u);if("function"!=typeof d)throw i(Error(150));if(null==(u=d.call(u)))throw i(Error(151));for(var c=d=null,m=s,p=s=0,y=null,v=u.next();null!==m&&!v.done;p++,v=u.next()){m.index>p?(y=m,m=null):y=m.sibling;var b=h(a,m,v.value,l);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(a,m),s=o(b,s,p),null===c?d=b:c.sibling=b,c=b,m=y}if(v.done)return n(a,m),d;if(null===m){for(;!v.done;p++,v=u.next())null!==(v=f(a,v.value,l))&&(s=o(v,s,p),null===c?d=v:c.sibling=v,c=v);return d}for(m=r(a,m);!v.done;p++,v=u.next())null!==(v=_(m,a,p,v.value,l))&&(e&&null!==v.alternate&&m.delete(null===v.key?p:v.key),s=o(v,s,p),null===c?d=v:c.sibling=v,c=v);return e&&m.forEach(function(e){return t(a,e)}),d}return function(e,r,o,u){var l="object"==typeof o&&null!==o&&o.type===qe&&null===o.key;l&&(o=o.props.children);var d="object"==typeof o&&null!==o;if(d)switch(o.$$typeof){case Ge:e:{for(d=o.key,l=r;null!==l;){if(l.key===d){if(7===l.tag?o.type===qe:l.elementType===o.type){n(e,l.sibling),(r=a(l,o.type===qe?o.props.children:o.props)).ref=$a(e,l,o),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}o.type===qe?((r=tu(o.props.children,e.mode,u,o.key)).return=e,e=r):((u=eu(o.type,o.key,o.props,null,e.mode,u)).ref=$a(e,r,o),u.return=e,e=u)}return s(e);case Je:e:{for(l=o.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=a(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=ru(o,e.mode,u)).return=e,e=r}return s(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,o)).return=e,e=r):(n(e,r),(r=nu(o,e.mode,u)).return=e,e=r),s(e);if(Va(o))return m(e,r,o,u);if(ut(o))return p(e,r,o,u);if(d&&Ga(e,o),void 0===o&&!l)switch(e.tag){case 1:case 0:throw e=e.type,i(Error(152),e.displayName||e.name||"Component")}return n(e,r)}}var qa=Ja(!0),Qa=Ja(!1),Za={},Xa={current:Za},eo={current:Za},to={current:Za};function no(e){if(e===Za)throw i(Error(174));return e}function ro(e,t){Pr(to,t),Pr(eo,e),Pr(Xa,Za);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ir(null,"");break;default:t=ir(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Yr(Xa),Pr(Xa,t)}function ao(e){Yr(Xa),Yr(eo),Yr(to)}function oo(e){no(to.current);var t=no(Xa.current),n=ir(t,e.type);t!==n&&(Pr(eo,e),Pr(Xa,n))}function io(e){eo.current===e&&(Yr(Xa),Yr(eo))}var so=1,uo=1,lo=2,co={current:0};function fo(e){for(var t=e;null!==t;){if(13===t.tag){if(null!==t.memoizedState)return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ho=0,_o=2,mo=4,po=8,yo=16,vo=32,bo=64,go=128,Mo=Ke.ReactCurrentDispatcher,ko=0,Do=null,Lo=null,wo=null,To=null,So=null,Yo=null,Po=0,Oo=null,Eo=0,xo=!1,Co=null,jo=0;function Ho(){throw i(Error(321))}function Io(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!en(e[n],t[n]))return!1;return!0}function Ao(e,t,n,r,a,o){if(ko=o,Do=t,wo=null!==e?e.memoizedState:null,Mo.current=null===wo?qo:Qo,t=n(r,a),xo){do{xo=!1,jo+=1,wo=null!==e?e.memoizedState:null,Yo=To,Oo=So=Lo=null,Mo.current=Qo,t=n(r,a)}while(xo);Co=null,jo=0}if(Mo.current=Jo,(e=Do).memoizedState=To,e.expirationTime=Po,e.updateQueue=Oo,e.effectTag|=Eo,e=null!==Lo&&null!==Lo.next,ko=0,Yo=So=To=wo=Lo=Do=null,Po=0,Oo=null,Eo=0,e)throw i(Error(300));return t}function Fo(){Mo.current=Jo,ko=0,Yo=So=To=wo=Lo=Do=null,Po=0,Oo=null,Eo=0,xo=!1,Co=null,jo=0}function Ro(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===So?To=So=e:So=So.next=e,So}function No(){if(null!==Yo)Yo=(So=Yo).next,wo=null!==(Lo=wo)?Lo.next:null;else{if(null===wo)throw i(Error(310));var e={memoizedState:(Lo=wo).memoizedState,baseState:Lo.baseState,queue:Lo.queue,baseUpdate:Lo.baseUpdate,next:null};So=null===So?To=e:So.next=e,wo=Lo.next}return So}function Wo(e,t){return"function"==typeof t?t(e):t}function zo(e){var t=No(),n=t.queue;if(null===n)throw i(Error(311));if(n.lastRenderedReducer=e,0<jo){var r=n.dispatch;if(null!==Co){var a=Co.get(n);if(void 0!==a){Co.delete(n);var o=t.memoizedState;do{o=e(o,a.action),a=a.next}while(null!==a);return en(o,t.memoizedState)||(ui=!0),t.memoizedState=o,t.baseUpdate===n.last&&(t.baseState=o),n.lastRenderedState=o,[o,r]}}return[t.memoizedState,r]}r=n.last;var s=t.baseUpdate;if(o=t.baseState,null!==s?(null!==r&&(r.next=null),r=s.next):r=null!==r?r.next:null,null!==r){var u=a=null,l=r,d=!1;do{var c=l.expirationTime;c<ko?(d||(d=!0,u=s,a=o),c>Po&&(Po=c)):(Rs(c,l.suspenseConfig),o=l.eagerReducer===e?l.eagerState:e(o,l.action)),s=l,l=l.next}while(null!==l&&l!==r);d||(u=s,a=o),en(o,t.memoizedState)||(ui=!0),t.memoizedState=o,t.baseUpdate=u,t.baseState=a,n.lastRenderedState=o}return[t.memoizedState,n.dispatch]}function Bo(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Oo?(Oo={lastEffect:null}).lastEffect=e.next=e:null===(t=Oo.lastEffect)?Oo.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Oo.lastEffect=e),e}function Uo(e,t,n,r){var a=Ro();Eo|=e,a.memoizedState=Bo(t,n,void 0,void 0===r?null:r)}function Ko(e,t,n,r){var a=No();r=void 0===r?null:r;var o=void 0;if(null!==Lo){var i=Lo.memoizedState;if(o=i.destroy,null!==r&&Io(r,i.deps))return void Bo(ho,n,o,r)}Eo|=e,a.memoizedState=Bo(t,n,o,r)}function Vo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function $o(){}function Go(e,t,n){if(!(25>jo))throw i(Error(301));var r=e.alternate;if(e===Do||null!==r&&r===Do)if(xo=!0,e={expirationTime:ko,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===Co&&(Co=new Map),void 0===(n=Co.get(t)))Co.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var a=Ts(),o=Fa.suspense;o={expirationTime:a=Ss(a,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var s=t.last;if(null===s)o.next=o;else{var u=s.next;null!==u&&(o.next=u),s.next=o}if(t.last=o,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var l=t.lastRenderedState,d=r(l,n);if(o.eagerReducer=r,o.eagerState=d,en(d,l))return}catch(e){}Ps(e,a)}}var Jo={readContext:wa,useCallback:Ho,useContext:Ho,useEffect:Ho,useImperativeHandle:Ho,useLayoutEffect:Ho,useMemo:Ho,useReducer:Ho,useRef:Ho,useState:Ho,useDebugValue:Ho,useResponder:Ho},qo={readContext:wa,useCallback:function(e,t){return Ro().memoizedState=[e,void 0===t?null:t],e},useContext:wa,useEffect:function(e,t){return Uo(516,go|bo,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Uo(4,mo|vo,Vo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Uo(4,mo|vo,e,t)},useMemo:function(e,t){var n=Ro();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ro();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Go.bind(null,Do,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ro().memoizedState=e},useState:function(e){var t=Ro();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:Wo,lastRenderedState:e}).dispatch=Go.bind(null,Do,e),[t.memoizedState,e]},useDebugValue:$o,useResponder:rn},Qo={readContext:wa,useCallback:function(e,t){var n=No();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Io(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:wa,useEffect:function(e,t){return Ko(516,go|bo,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ko(4,mo|vo,Vo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ko(4,mo|vo,e,t)},useMemo:function(e,t){var n=No();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Io(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:zo,useRef:function(){return No().memoizedState},useState:function(e){return zo(Wo)},useDebugValue:$o,useResponder:rn},Zo=null,Xo=null,ei=!1;function ti(e,t){var n=Qs(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ni(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function ri(e){if(ei){var t=Xo;if(t){var n=t;if(!ni(e,t)){if(!(t=wr(n.nextSibling))||!ni(e,t))return e.effectTag|=2,ei=!1,void(Zo=e);ti(Zo,n)}Zo=e,Xo=wr(t.firstChild)}else e.effectTag|=2,ei=!1,Zo=e}}function ai(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;Zo=e}function oi(e){if(e!==Zo)return!1;if(!ei)return ai(e),ei=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!kr(t,e.memoizedProps))for(t=Xo;t;)ti(e,t),t=wr(t.nextSibling);return ai(e),Xo=Zo?wr(e.stateNode.nextSibling):null,!0}function ii(){Xo=Zo=null,ei=!1}var si=Ke.ReactCurrentOwner,ui=!1;function li(e,t,n,r){t.child=null===e?Qa(t,null,n,r):qa(t,e.child,n,r)}function di(e,t,n,r,a){n=n.render;var o=t.ref;return La(t,a),r=Ao(e,t,n,r,o,a),null===e||ui?(t.effectTag|=1,li(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),ki(e,t,a))}function ci(e,t,n,r,a,o){if(null===e){var i=n.type;return"function"!=typeof i||Zs(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=eu(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,fi(e,t,i,r,a,o))}return i=e.child,a<o&&(a=i.memoizedProps,(n=null!==(n=n.compare)?n:nn)(a,r)&&e.ref===t.ref)?ki(e,t,o):(t.effectTag|=1,(e=Xs(i,r)).ref=t.ref,e.return=t,t.child=e)}function fi(e,t,n,r,a,o){return null!==e&&nn(e.memoizedProps,r)&&e.ref===t.ref&&(ui=!1,a<o)?ki(e,t,o):_i(e,t,n,r,o)}function hi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function _i(e,t,n,r,a){var o=Hr(n)?Cr:Er.current;return o=jr(t,o),La(t,a),n=Ao(e,t,n,r,o,a),null===e||ui?(t.effectTag|=1,li(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),ki(e,t,a))}function mi(e,t,n,r,a){if(Hr(n)){var o=!0;Nr(t)}else o=!1;if(La(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Ba(t,n,r),Ka(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,s=t.memoizedProps;i.props=s;var u=i.context,l=n.contextType;"object"==typeof l&&null!==l?l=wa(l):l=jr(t,l=Hr(n)?Cr:Er.current);var d=n.getDerivedStateFromProps,c="function"==typeof d||"function"==typeof i.getSnapshotBeforeUpdate;c||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||u!==l)&&Ua(t,i,r,l),Ta=!1;var f=t.memoizedState;u=i.state=f;var h=t.updateQueue;null!==h&&(Ha(t,h,r,i,a),u=t.memoizedState),s!==r||f!==u||xr.current||Ta?("function"==typeof d&&(Na(t,n,d,r),u=t.memoizedState),(s=Ta||za(t,n,s,r,f,u,l))?(c||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=l,r=s):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,s=t.memoizedProps,i.props=t.type===t.elementType?s:ma(t.type,s),u=i.context,"object"==typeof(l=n.contextType)&&null!==l?l=wa(l):l=jr(t,l=Hr(n)?Cr:Er.current),(c="function"==typeof(d=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||u!==l)&&Ua(t,i,r,l),Ta=!1,u=t.memoizedState,f=i.state=u,null!==(h=t.updateQueue)&&(Ha(t,h,r,i,a),f=t.memoizedState),s!==r||u!==f||xr.current||Ta?("function"==typeof d&&(Na(t,n,d,r),f=t.memoizedState),(d=Ta||za(t,n,s,r,u,f,l))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,f,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,f,l)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=f),i.props=r,i.state=f,i.context=l,r=d):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return pi(e,t,n,r,o,a)}function pi(e,t,n,r,a,o){hi(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return a&&Wr(t,n,!1),ki(e,t,o);r=t.stateNode,si.current=t;var s=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=qa(t,e.child,null,o),t.child=qa(t,null,s,o)):li(e,t,s,o),t.memoizedState=r.state,a&&Wr(t,n,!0),t.child}function yi(e){var t=e.stateNode;t.pendingContext?Fr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Fr(0,t.context,!1),ro(e,t.containerInfo)}var vi={};function bi(e,t,n){var r,a=t.mode,o=t.pendingProps,i=co.current,s=null,u=!1;if((r=0!=(64&t.effectTag))||(r=0!=(i&lo)&&(null===e||null!==e.memoizedState)),r?(s=vi,u=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=uo),Pr(co,i&=so),null===e)if(u){if(o=o.fallback,(e=tu(null,a,0,null)).return=t,0==(2&t.mode))for(u=null!==t.memoizedState?t.child.child:t.child,e.child=u;null!==u;)u.return=e,u=u.sibling;(n=tu(o,a,n,null)).return=t,e.sibling=n,a=e}else a=n=Qa(t,null,o.children,n);else{if(null!==e.memoizedState)if(a=(i=e.child).sibling,u){if(o=o.fallback,(n=Xs(i,i.pendingProps)).return=t,0==(2&t.mode)&&(u=null!==t.memoizedState?t.child.child:t.child)!==i.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;(o=Xs(a,o,a.expirationTime)).return=t,n.sibling=o,a=n,n.childExpirationTime=0,n=o}else a=n=qa(t,i.child,o.children,n);else if(i=e.child,u){if(u=o.fallback,(o=tu(null,a,0,null)).return=t,o.child=i,null!==i&&(i.return=o),0==(2&t.mode))for(i=null!==t.memoizedState?t.child.child:t.child,o.child=i;null!==i;)i.return=o,i=i.sibling;(n=tu(u,a,n,null)).return=t,o.sibling=n,n.effectTag|=2,a=o,o.childExpirationTime=0}else n=a=qa(t,i,o.children,n);t.stateNode=e.stateNode}return t.memoizedState=s,t.child=a,n}function gi(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.last=r,o.tail=n,o.tailExpiration=0,o.tailMode=a)}function Mi(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(li(e,t,r.children,n),0!=((r=co.current)&lo))r=r&so|lo,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag){if(null!==e.memoizedState){e.expirationTime<n&&(e.expirationTime=n);var i=e.alternate;null!==i&&i.expirationTime<n&&(i.expirationTime=n),Da(e.return,n)}}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=so}if(Pr(co,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(r=n.alternate)&&null===fo(r)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),gi(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(r=a.alternate)&&null===fo(r)){t.child=a;break}r=a.sibling,a.sibling=n,n=a,a=r}gi(t,!0,n,null,o);break;case"together":gi(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function ki(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw i(Error(153));if(null!==t.child){for(n=Xs(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Xs(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Di(e){e.effectTag|=4}var Li=void 0,wi=void 0,Ti=void 0,Si=void 0;function Yi(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Pi(e){switch(e.tag){case 1:Hr(e.type)&&Ir();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:if(ao(),Ar(),0!=(64&(t=e.effectTag)))throw i(Error(285));return e.effectTag=-2049&t|64,e;case 5:return io(e),null;case 13:return Yr(co),2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 19:return Yr(co),null;case 4:return ao(),null;case 10:return ka(e),null;default:return null}}function Oi(e,t){return{value:e,source:t,stack:dt(t)}}Li=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(20===n.tag)e.appendChild(n.stateNode.instance);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},wi=function(){},Ti=function(e,t,n,r,o){var i=e.memoizedProps;if(i!==r){var s=t.stateNode;switch(no(Xa.current),e=null,n){case"input":i=Mt(s,i),r=Mt(s,r),e=[];break;case"option":i=Zn(s,i),r=Zn(s,r),e=[];break;case"select":i=a({},i,{value:void 0}),r=a({},r,{value:void 0}),e=[];break;case"textarea":i=er(s,i),r=er(s,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(s.onclick=vr)}mr(n,r),s=n=void 0;var u=null;for(n in i)if(!r.hasOwnProperty(n)&&i.hasOwnProperty(n)&&null!=i[n])if("style"===n){var l=i[n];for(s in l)l.hasOwnProperty(s)&&(u||(u={}),u[s]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(h.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var d=r[n];if(l=null!=i?i[n]:void 0,r.hasOwnProperty(n)&&d!==l&&(null!=d||null!=l))if("style"===n)if(l){for(s in l)!l.hasOwnProperty(s)||d&&d.hasOwnProperty(s)||(u||(u={}),u[s]="");for(s in d)d.hasOwnProperty(s)&&l[s]!==d[s]&&(u||(u={}),u[s]=d[s])}else u||(e||(e=[]),e.push(n,u)),u=d;else"dangerouslySetInnerHTML"===n?(d=d?d.__html:void 0,l=l?l.__html:void 0,null!=d&&l!==d&&(e=e||[]).push(n,""+d)):"children"===n?l===d||"string"!=typeof d&&"number"!=typeof d||(e=e||[]).push(n,""+d):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(h.hasOwnProperty(n)?(null!=d&&yr(o,n),e||l===d||(e=[])):(e=e||[]).push(n,d))}u&&(e=e||[]).push("style",u),o=e,(t.updateQueue=o)&&Di(t)}},Si=function(e,t,n,r){n!==r&&Di(t)};var Ei="function"==typeof WeakSet?WeakSet:Set;function xi(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=dt(n)),null!==n&&lt(n.type),t=t.value,null!==e&&1===e.tag&&lt(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function Ci(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ks(e,t)}else t.current=null}function ji(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==ho){var a=r.destroy;r.destroy=void 0,void 0!==a&&a()}(r.tag&t)!==ho&&(a=r.create,r.destroy=a()),r=r.next}while(r!==n)}}function Hi(e,t){switch("function"==typeof Js&&Js(e),e.tag){case 0:case 11:case 14:case 15:var n=e.updateQueue;if(null!==n&&null!==(n=n.lastEffect)){var r=n.next;la(97<t?97:t,function(){var t=r;do{var n=t.destroy;if(void 0!==n){var a=e;try{n()}catch(e){Ks(a,e)}}t=t.next}while(t!==r)})}break;case 1:Ci(e),"function"==typeof(t=e.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Ks(e,t)}}(e,t);break;case 5:Ci(e);break;case 4:Ri(e,t)}}function Ii(e,t){for(var n=e;;)if(Hi(n,t),null!==n.child&&4!==n.tag)n.child.return=n,n=n.child;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function Ai(e){return 5===e.tag||3===e.tag||4===e.tag}function Fi(e){e:{for(var t=e.return;null!==t;){if(Ai(t)){var n=t;break e}t=t.return}throw i(Error(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw i(Error(161))}16&n.effectTag&&(lr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Ai(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var a=e;;){var o=5===a.tag||6===a.tag;if(o||20===a.tag){var s=o?a.stateNode:a.stateNode.instance;if(n)if(r){var u=s;s=n,8===(o=t).nodeType?o.parentNode.insertBefore(u,s):o.insertBefore(u,s)}else t.insertBefore(s,n);else r?(8===(u=t).nodeType?(o=u.parentNode).insertBefore(s,u):(o=u).appendChild(s),null!=(u=u._reactRootContainer)||null!==o.onclick||(o.onclick=vr)):t.appendChild(s)}else if(4!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===e)break;for(;null===a.sibling;){if(null===a.return||a.return===e)return;a=a.return}a.sibling.return=a.return,a=a.sibling}}function Ri(e,t){for(var n=e,r=!1,a=void 0,o=void 0;;){if(!r){r=n.return;e:for(;;){if(null===r)throw i(Error(160));switch(a=r.stateNode,r.tag){case 5:o=!1;break e;case 3:case 4:a=a.containerInfo,o=!0;break e}r=r.return}r=!0}if(5===n.tag||6===n.tag)if(Ii(n,t),o){var s=a,u=n.stateNode;8===s.nodeType?s.parentNode.removeChild(u):s.removeChild(u)}else a.removeChild(n.stateNode);else if(20===n.tag)u=n.stateNode.instance,Ii(n,t),o?8===(s=a).nodeType?s.parentNode.removeChild(u):s.removeChild(u):a.removeChild(u);else if(4===n.tag){if(null!==n.child){a=n.stateNode.containerInfo,o=!0,n.child.return=n,n=n.child;continue}}else if(Hi(n,t),null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;4===(n=n.return).tag&&(r=!1)}n.sibling.return=n.return,n=n.sibling}}function Ni(e,t){switch(t.tag){case 0:case 11:case 14:case 15:ji(mo,po,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,a=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[j]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Dt(n,r),pr(e,a),t=pr(e,r),a=0;a<o.length;a+=2){var s=o[a],u=o[a+1];"style"===s?hr(n,u):"dangerouslySetInnerHTML"===s?ur(n,u):"children"===s?lr(n,u):bt(n,s,u,t)}switch(e){case"input":Lt(n,r);break;case"textarea":nr(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Xn(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Xn(n,!!r.multiple,r.defaultValue,!0):Xn(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw i(Error(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,fs=ia()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,a=null!=(a=e.memoizedProps.style)&&a.hasOwnProperty("display")?a.display:null,o.style.display=fr("display",a));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}Wi(t);break;case 19:Wi(t);break;case 17:case 20:break;default:throw i(Error(163))}}function Wi(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ei),t.forEach(function(t){var r=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),n=Ts(),t=Ss(n,e,null),n=_a(n,t),null!==(e=Os(e,t))&&Es(e,n,t)}.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))})}}var zi="function"==typeof WeakMap?WeakMap:Map;function Bi(e,t,n){(n=Pa(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ms||(ms=!0,ps=r),xi(e,t)},n}function Ui(e,t,n){(n=Pa(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return xi(e,t),r(a)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===ys?ys=new Set([this]):ys.add(this),xi(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Ki=Math.ceil,Vi=Ke.ReactCurrentDispatcher,$i=Ke.ReactCurrentOwner,Gi=0,Ji=8,qi=16,Qi=32,Zi=0,Xi=1,es=2,ts=3,ns=4,rs=Gi,as=null,os=null,is=0,ss=Zi,us=1073741823,ls=1073741823,ds=null,cs=!1,fs=0,hs=500,_s=null,ms=!1,ps=null,ys=null,vs=!1,bs=null,gs=90,Ms=0,ks=null,Ds=0,Ls=null,ws=0;function Ts(){return(rs&(qi|Qi))!==Gi?1073741821-(ia()/10|0):0!==ws?ws:ws=1073741821-(ia()/10|0)}function Ss(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=sa();if(0==(4&t))return 99===r?1073741823:1073741822;if((rs&qi)!==Gi)return is;if(null!==n)e=1073741821-25*(1+((1073741821-e+(0|n.timeoutMs||5e3)/10)/25|0));else switch(r){case 99:e=1073741823;break;case 98:e=1073741821-10*(1+((1073741821-e+15)/10|0));break;case 97:case 96:e=1073741821-25*(1+((1073741821-e+500)/25|0));break;case 95:e=1;break;default:throw i(Error(326))}return null!==as&&e===is&&--e,e}var Ys=0;function Ps(e,t){if(50<Ds)throw Ds=0,Ls=null,i(Error(185));if(null!==(e=Os(e,t))){e.pingTime=0;var n=sa();if(1073741823===t)if((rs&Ji)!==Gi&&(rs&(qi|Qi))===Gi)for(var r=Fs(e,1073741823,!0);null!==r;)r=r(!0);else Es(e,99,1073741823),rs===Gi&&fa();else Es(e,n,t);(4&rs)===Gi||98!==n&&99!==n||(null===ks?ks=new Map([[e,t]]):(void 0===(n=ks.get(e))||n>t)&&ks.set(e,t))}}function Os(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,a=null;if(null===r&&3===e.tag)a=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){a=r.stateNode;break}r=r.return}return null!==a&&(t>a.firstPendingTime&&(a.firstPendingTime=t),0===(e=a.lastPendingTime)||t<e)&&(a.lastPendingTime=t),a}function Es(e,t,n){if(e.callbackExpirationTime<n){var r=e.callbackNode;null!==r&&r!==ea&&Ur(r),e.callbackExpirationTime=n,1073741823===n?e.callbackNode=ca(xs.bind(null,e,Fs.bind(null,e,n))):(r=null,1!==n&&(r={timeout:10*(1073741821-n)-ia()}),e.callbackNode=da(t,xs.bind(null,e,Fs.bind(null,e,n)),r))}}function xs(e,t,n){var r=e.callbackNode,a=null;try{return null!==(a=t(n))?xs.bind(null,e,a):null}finally{null===a&&r===e.callbackNode&&(e.callbackNode=null,e.callbackExpirationTime=0)}}function Cs(){(rs&(1|qi|Qi))===Gi&&(function(){if(null!==ks){var e=ks;ks=null,e.forEach(function(e,t){ca(Fs.bind(null,t,e))}),fa()}}(),Bs())}function js(e,t){var n=rs;rs|=1;try{return e(t)}finally{(rs=n)===Gi&&fa()}}function Hs(e,t,n,r){var a=rs;rs|=4;try{return la(98,e.bind(null,t,n,r))}finally{(rs=a)===Gi&&fa()}}function Is(e,t){var n=rs;rs&=-2,rs|=Ji;try{return e(t)}finally{(rs=n)===Gi&&fa()}}function As(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Lr(n)),null!==os)for(n=os.return;null!==n;){var r=n;switch(r.tag){case 1:var a=r.type.childContextTypes;null!=a&&Ir();break;case 3:ao(),Ar();break;case 5:io(r);break;case 4:ao();break;case 13:case 19:Yr(co);break;case 10:ka(r)}n=n.return}as=e,os=Xs(e.current,null),is=t,ss=Zi,ls=us=1073741823,ds=null,cs=!1}function Fs(e,t,n){if((rs&(qi|Qi))!==Gi)throw i(Error(327));if(e.firstPendingTime<t)return null;if(n&&e.finishedExpirationTime===t)return zs.bind(null,e);if(Bs(),e!==as||t!==is)As(e,t);else if(ss===ts)if(cs)As(e,t);else{var r=e.lastPendingTime;if(r<t)return Fs.bind(null,e,r)}if(null!==os){r=rs,rs|=qi;var a=Vi.current;if(null===a&&(a=Jo),Vi.current=Jo,n){if(1073741823!==t){var o=Ts();if(o<t)return rs=r,ga(),Vi.current=a,Fs.bind(null,e,o)}}else ws=0;for(;;)try{if(n)for(;null!==os;)os=Ns(os);else for(;null!==os&&!Kr();)os=Ns(os);break}catch(n){if(ga(),Fo(),null===(o=os)||null===o.return)throw As(e,t),rs=r,n;e:{var s=e,u=o.return,l=o,d=n,c=is;if(l.effectTag|=1024,l.firstEffect=l.lastEffect=null,null!==d&&"object"==typeof d&&"function"==typeof d.then){var f=d,h=0!=(co.current&uo);d=u;do{var _;if((_=13===d.tag)&&(null!==d.memoizedState?_=!1:_=void 0!==(_=d.memoizedProps).fallback&&(!0!==_.unstable_avoidThisFallback||!h)),_){if(null===(u=d.updateQueue)?((u=new Set).add(f),d.updateQueue=u):u.add(f),0==(2&d.mode)){d.effectTag|=64,l.effectTag&=-1957,1===l.tag&&(null===l.alternate?l.tag=17:((c=Pa(1073741823,null)).tag=2,Ea(l,c))),l.expirationTime=1073741823;break e}l=s,s=c,null===(h=l.pingCache)?(h=l.pingCache=new zi,u=new Set,h.set(f,u)):void 0===(u=h.get(f))&&(u=new Set,h.set(f,u)),u.has(s)||(u.add(s),l=Vs.bind(null,l,f,s),f.then(l,l)),d.effectTag|=2048,d.expirationTime=c;break e}d=d.return}while(null!==d);d=Error((lt(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+dt(l))}ss!==ns&&(ss=Xi),d=Oi(d,l),l=u;do{switch(l.tag){case 3:l.effectTag|=2048,l.expirationTime=c,xa(l,c=Bi(l,d,c));break e;case 1:if(f=d,s=l.type,u=l.stateNode,0==(64&l.effectTag)&&("function"==typeof s.getDerivedStateFromError||null!==u&&"function"==typeof u.componentDidCatch&&(null===ys||!ys.has(u)))){l.effectTag|=2048,l.expirationTime=c,xa(l,c=Ui(l,f,c));break e}}l=l.return}while(null!==l)}os=Ws(o)}if(rs=r,ga(),Vi.current=a,null!==os)return Fs.bind(null,e,t)}if(e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,function(e,t){var n=e.firstBatch;return!!(null!==n&&n._defer&&n._expirationTime>=t)&&(da(97,function(){return n._onComplete(),null}),!0)}(e,t))return null;switch(as=null,ss){case Zi:throw i(Error(328));case Xi:return(r=e.lastPendingTime)<t?Fs.bind(null,e,r):n?zs.bind(null,e):(As(e,t),ca(Fs.bind(null,e,t)),null);case es:return 1073741823===us&&!n&&10<(n=fs+hs-ia())?cs?(As(e,t),Fs.bind(null,e,t)):(r=e.lastPendingTime)<t?Fs.bind(null,e,r):(e.timeoutHandle=Dr(zs.bind(null,e),n),null):zs.bind(null,e);case ts:if(!n){if(cs)return As(e,t),Fs.bind(null,e,t);if((n=e.lastPendingTime)<t)return Fs.bind(null,e,n);if(1073741823!==ls?n=10*(1073741821-ls)-ia():1073741823===us?n=0:(n=10*(1073741821-us)-5e3,0>(n=(r=ia())-n)&&(n=0),(t=10*(1073741821-t)-r)<(n=(120>n?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Ki(n/1960))-n)&&(n=t)),10<n)return e.timeoutHandle=Dr(zs.bind(null,e),n),null}return zs.bind(null,e);case ns:return!n&&1073741823!==us&&null!==ds&&(r=us,0>=(t=0|(a=ds).busyMinDurationMs)?t=0:(n=0|a.busyDelayMs,t=(r=ia()-(10*(1073741821-r)-(0|a.timeoutMs||5e3)))<=n?0:n+t-r),10<t)?(e.timeoutHandle=Dr(zs.bind(null,e),t),null):zs.bind(null,e);default:throw i(Error(329))}}function Rs(e,t){e<us&&1<e&&(us=e),null!==t&&e<ls&&1<e&&(ls=e,ds=t)}function Ns(e){var t=$s(e.alternate,e,is);return e.memoizedProps=e.pendingProps,null===t&&(t=Ws(e)),$i.current=null,t}function Ws(e){os=e;do{var t=os.alternate;if(e=os.return,0==(1024&os.effectTag)){e:{var n=t,r=is,o=(t=os).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Hr(t.type)&&Ir();break;case 3:ao(),Ar(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==n&&null!==n.child||(oi(t),t.effectTag&=-3),wi(t);break;case 5:io(t),r=no(to.current);var s=t.type;if(null!==n&&null!=t.stateNode)Ti(n,t,s,o,r),n.ref!==t.ref&&(t.effectTag|=128);else if(o){var u=no(Xa.current);if(oi(t)){o=void 0,s=(n=t).stateNode;var l=n.type,d=n.memoizedProps;switch(s[C]=n,s[j]=d,l){case"iframe":case"object":case"embed":jn("load",s);break;case"video":case"audio":for(var c=0;c<te.length;c++)jn(te[c],s);break;case"source":jn("error",s);break;case"img":case"image":case"link":jn("error",s),jn("load",s);break;case"form":jn("reset",s),jn("submit",s);break;case"details":jn("toggle",s);break;case"input":kt(s,d),jn("invalid",s),yr(r,"onChange");break;case"select":s._wrapperState={wasMultiple:!!d.multiple},jn("invalid",s),yr(r,"onChange");break;case"textarea":tr(s,d),jn("invalid",s),yr(r,"onChange")}for(o in mr(l,d),c=null,d)d.hasOwnProperty(o)&&(u=d[o],"children"===o?"string"==typeof u?s.textContent!==u&&(c=["children",u]):"number"==typeof u&&s.textContent!==""+u&&(c=["children",""+u]):h.hasOwnProperty(o)&&null!=u&&yr(r,o));switch(l){case"input":Be(s),wt(s,d,!0);break;case"textarea":Be(s),rr(s);break;case"select":case"option":break;default:"function"==typeof d.onClick&&(s.onclick=vr)}r=c,n.updateQueue=r,null!==r&&Di(t)}else{d=s,n=o,l=t,c=9===r.nodeType?r:r.ownerDocument,u===ar.html&&(u=or(d)),u===ar.html?"script"===d?((d=c.createElement("div")).innerHTML="<script><\/script>",c=d.removeChild(d.firstChild)):"string"==typeof n.is?c=c.createElement(d,{is:n.is}):(c=c.createElement(d),"select"===d&&(d=c,n.multiple?d.multiple=!0:n.size&&(d.size=n.size))):c=c.createElementNS(u,d),(d=c)[C]=l,d[j]=n,Li(n=d,t,!1,!1),l=n;var f=r,_=pr(s,o);switch(s){case"iframe":case"object":case"embed":jn("load",l),r=o;break;case"video":case"audio":for(r=0;r<te.length;r++)jn(te[r],l);r=o;break;case"source":jn("error",l),r=o;break;case"img":case"image":case"link":jn("error",l),jn("load",l),r=o;break;case"form":jn("reset",l),jn("submit",l),r=o;break;case"details":jn("toggle",l),r=o;break;case"input":kt(l,o),r=Mt(l,o),jn("invalid",l),yr(f,"onChange");break;case"option":r=Zn(l,o);break;case"select":l._wrapperState={wasMultiple:!!o.multiple},r=a({},o,{value:void 0}),jn("invalid",l),yr(f,"onChange");break;case"textarea":tr(l,o),r=er(l,o),jn("invalid",l),yr(f,"onChange");break;default:r=o}mr(s,r),d=void 0,c=s,u=l;var m=r;for(d in m)if(m.hasOwnProperty(d)){var p=m[d];"style"===d?hr(u,p):"dangerouslySetInnerHTML"===d?null!=(p=p?p.__html:void 0)&&ur(u,p):"children"===d?"string"==typeof p?("textarea"!==c||""!==p)&&lr(u,p):"number"==typeof p&&lr(u,""+p):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(h.hasOwnProperty(d)?null!=p&&yr(f,d):null!=p&&bt(u,d,p,_))}switch(s){case"input":Be(l),wt(l,o,!1);break;case"textarea":Be(l),rr(l);break;case"option":null!=o.value&&l.setAttribute("value",""+gt(o.value));break;case"select":r=l,l=o,r.multiple=!!l.multiple,null!=(d=l.value)?Xn(r,!!l.multiple,d,!1):null!=l.defaultValue&&Xn(r,!!l.multiple,l.defaultValue,!0);break;default:"function"==typeof r.onClick&&(l.onclick=vr)}Mr(s,o)&&Di(t),t.stateNode=n}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw i(Error(166));break;case 6:if(n&&null!=t.stateNode)Si(n,t,n.memoizedProps,o);else{if("string"!=typeof o&&null===t.stateNode)throw i(Error(166));n=no(to.current),no(Xa.current),oi(t)?(r=t.stateNode,n=t.memoizedProps,r[C]=t,r.nodeValue!==n&&Di(t)):(r=t,(n=(9===n.nodeType?n:n.ownerDocument).createTextNode(o))[C]=t,r.stateNode=n)}break;case 11:break;case 13:if(Yr(co),o=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}r=null!==o,o=!1,null===n?oi(t):(o=null!==(s=n.memoizedState),r||null===s||null!==(s=n.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=s,s.nextEffect=l):(t.firstEffect=t.lastEffect=s,s.nextEffect=null),s.effectTag=8)),r&&!o&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(co.current&uo)?ss===Zi&&(ss=es):ss!==Zi&&ss!==es||(ss=ts)),(r||o)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:ao(),wi(t);break;case 10:ka(t);break;case 9:case 14:break;case 17:Hr(t.type)&&Ir();break;case 18:break;case 19:if(Yr(co),null===(o=t.memoizedState))break;if(s=0!=(64&t.effectTag),null===(l=o.rendering)){if(s)Yi(o,!1);else if(ss!==Zi||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(l=fo(n))){for(t.effectTag|=64,Yi(o,!1),null!==(n=l.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),t.firstEffect=t.lastEffect=null,n=t.child;null!==n;)s=r,(o=n).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(l=o.alternate)?(o.childExpirationTime=0,o.expirationTime=s,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=l.childExpirationTime,o.expirationTime=l.expirationTime,o.child=l.child,o.memoizedProps=l.memoizedProps,o.memoizedState=l.memoizedState,o.updateQueue=l.updateQueue,s=l.dependencies,o.dependencies=null===s?null:{expirationTime:s.expirationTime,firstContext:s.firstContext,responders:s.responders}),n=n.sibling;Pr(co,co.current&so|lo),t=t.child;break e}n=n.sibling}}else{if(!s)if(null!==(n=fo(l))){if(t.effectTag|=64,s=!0,Yi(o,!0),null===o.tail&&"hidden"===o.tailMode){null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),null!==(t=t.lastEffect=o.lastEffect)&&(t.nextEffect=null);break}}else ia()>o.tailExpiration&&1<r&&(t.effectTag|=64,s=!0,Yi(o,!1),t.expirationTime=t.childExpirationTime=r-1);o.isBackwards?(l.sibling=t.child,t.child=l):(null!==(r=o.last)?r.sibling=l:t.child=l,o.last=l)}if(null!==o.tail){0===o.tailExpiration&&(o.tailExpiration=ia()+500),r=o.tail,o.rendering=r,o.tail=r.sibling,o.lastEffect=t.lastEffect,r.sibling=null,n=co.current,Pr(co,n=s?n&so|lo:n&so),t=r;break e}break;case 20:break;default:throw i(Error(156))}t=null}if(r=os,1===is||1!==r.childExpirationTime){for(n=0,o=r.child;null!==o;)(s=o.expirationTime)>n&&(n=s),(l=o.childExpirationTime)>n&&(n=l),o=o.sibling;r.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(1024&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=os.firstEffect),null!==os.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=os.firstEffect),e.lastEffect=os.lastEffect),1<os.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=os:e.firstEffect=os,e.lastEffect=os))}else{if(null!==(t=Pi(os)))return t.effectTag&=1023,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=1024)}if(null!==(t=os.sibling))return t;os=e}while(null!==os);return ss===Zi&&(ss=ns),null}function zs(e){var t=sa();return la(99,function(e,t){if(Bs(),(rs&(qi|Qi))!==Gi)throw i(Error(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw i(Error(177));e.callbackNode=null,e.callbackExpirationTime=0;var a=n.expirationTime,o=n.childExpirationTime;if(a=o>a?o:a,e.firstPendingTime=a,a<e.lastPendingTime&&(e.lastPendingTime=a),e===as&&(os=as=null,is=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,a=n.firstEffect):a=n:a=n.firstEffect,null!==a){o=rs,rs|=Qi,$i.current=null,br=Cn;var s=zn();if(Bn(s)){if("selectionStart"in s)var u={start:s.selectionStart,end:s.selectionEnd};else e:{var l=(u=(u=s.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(l&&0!==l.rangeCount){u=l.anchorNode;var d=l.anchorOffset,c=l.focusNode;l=l.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,h=-1,_=-1,m=0,p=0,y=s,v=null;t:for(;;){for(var b;y!==u||0!==d&&3!==y.nodeType||(h=f+d),y!==c||0!==l&&3!==y.nodeType||(_=f+l),3===y.nodeType&&(f+=y.nodeValue.length),null!==(b=y.firstChild);)v=y,y=b;for(;;){if(y===s)break t;if(v===u&&++m===d&&(h=f),v===c&&++p===l&&(_=f),null!==(b=y.nextSibling))break;v=(y=v).parentNode}y=b}u=-1===h||-1===_?null:{start:h,end:_}}else u=null}u=u||{start:0,end:0}}else u=null;gr={focusedElem:s,selectionRange:u},Cn=!1,_s=a;do{try{for(;null!==_s;){if(0!=(256&_s.effectTag)){var g=_s.alternate;switch((s=_s).tag){case 0:case 11:case 15:ji(_o,ho,s);break;case 1:if(256&s.effectTag&&null!==g){var M=g.memoizedProps,k=g.memoizedState,D=s.stateNode,L=D.getSnapshotBeforeUpdate(s.elementType===s.type?M:ma(s.type,M),k);D.__reactInternalSnapshotBeforeUpdate=L}break;case 3:case 5:case 6:case 4:case 17:break;default:throw i(Error(163))}}_s=_s.nextEffect}}catch(e){if(null===_s)throw i(Error(330));Ks(_s,e),_s=_s.nextEffect}}while(null!==_s);_s=a;do{try{for(g=t;null!==_s;){var w=_s.effectTag;if(16&w&&lr(_s.stateNode,""),128&w){var T=_s.alternate;if(null!==T){var S=T.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(14&w){case 2:Fi(_s),_s.effectTag&=-3;break;case 6:Fi(_s),_s.effectTag&=-3,Ni(_s.alternate,_s);break;case 4:Ni(_s.alternate,_s);break;case 8:Ri(M=_s,g),M.return=null,M.child=null,M.memoizedState=null,M.updateQueue=null,M.dependencies=null;var Y=M.alternate;null!==Y&&(Y.return=null,Y.child=null,Y.memoizedState=null,Y.updateQueue=null,Y.dependencies=null)}_s=_s.nextEffect}}catch(e){if(null===_s)throw i(Error(330));Ks(_s,e),_s=_s.nextEffect}}while(null!==_s);if(S=gr,T=zn(),w=S.focusedElem,g=S.selectionRange,T!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==g&&Bn(w)&&(T=g.start,void 0===(S=g.end)&&(S=T),"selectionStart"in w?(w.selectionStart=T,w.selectionEnd=Math.min(S,w.value.length)):(S=(T=w.ownerDocument||document)&&T.defaultView||window).getSelection&&(S=S.getSelection(),M=w.textContent.length,Y=Math.min(g.start,M),g=void 0===g.end?Y:Math.min(g.end,M),!S.extend&&Y>g&&(M=g,g=Y,Y=M),M=Wn(w,Y),k=Wn(w,g),M&&k&&(1!==S.rangeCount||S.anchorNode!==M.node||S.anchorOffset!==M.offset||S.focusNode!==k.node||S.focusOffset!==k.offset)&&((T=T.createRange()).setStart(M.node,M.offset),S.removeAllRanges(),Y>g?(S.addRange(T),S.extend(k.node,k.offset)):(T.setEnd(k.node,k.offset),S.addRange(T))))),T=[];for(S=w;S=S.parentNode;)1===S.nodeType&&T.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<T.length;w++)(S=T[w]).element.scrollLeft=S.left,S.element.scrollTop=S.top}gr=null,Cn=!!br,br=null,e.current=n,_s=a;do{try{for(w=r;null!==_s;){var P=_s.effectTag;if(36&P){var O=_s.alternate;switch(S=w,(T=_s).tag){case 0:case 11:case 15:ji(yo,vo,T);break;case 1:var E=T.stateNode;if(4&T.effectTag)if(null===O)E.componentDidMount();else{var x=T.elementType===T.type?O.memoizedProps:ma(T.type,O.memoizedProps);E.componentDidUpdate(x,O.memoizedState,E.__reactInternalSnapshotBeforeUpdate)}var C=T.updateQueue;null!==C&&Ia(0,C,E);break;case 3:var j=T.updateQueue;if(null!==j){if(Y=null,null!==T.child)switch(T.child.tag){case 5:Y=T.child.stateNode;break;case 1:Y=T.child.stateNode}Ia(0,j,Y)}break;case 5:var H=T.stateNode;null===O&&4&T.effectTag&&(S=H,Mr(T.type,T.memoizedProps)&&S.focus());break;case 6:case 4:case 12:break;case 13:case 19:case 17:case 20:break;default:throw i(Error(163))}}if(128&P){var I=_s.ref;if(null!==I){var A=_s.stateNode;switch(_s.tag){case 5:var F=A;break;default:F=A}"function"==typeof I?I(F):I.current=F}}512&P&&(vs=!0),_s=_s.nextEffect}}catch(e){if(null===_s)throw i(Error(330));Ks(_s,e),_s=_s.nextEffect}}while(null!==_s);_s=null,ta(),rs=o}else e.current=n;if(vs)vs=!1,bs=e,Ms=r,gs=t;else for(_s=a;null!==_s;)t=_s.nextEffect,_s.nextEffect=null,_s=t;if(0!==(t=e.firstPendingTime)?(P=_a(P=Ts(),t),Es(e,P,t)):ys=null,"function"==typeof Gs&&Gs(n.stateNode,r),1073741823===t?e===Ls?Ds++:(Ds=0,Ls=e):Ds=0,ms)throw ms=!1,e=ps,ps=null,e;return(rs&Ji)!==Gi?null:(fa(),null)}.bind(null,e,t)),null!==bs&&da(97,function(){return Bs(),null}),null}function Bs(){if(null===bs)return!1;var e=bs,t=Ms,n=gs;return bs=null,Ms=0,gs=90,la(97<n?97:n,function(e){if((rs&(qi|Qi))!==Gi)throw i(Error(331));var t=rs;for(rs|=Qi,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:ji(go,ho,n),ji(ho,bo,n)}}catch(t){if(null===e)throw i(Error(330));Ks(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return rs=t,fa(),!0}.bind(null,e,t))}function Us(e,t,n){Ea(e,t=Bi(e,t=Oi(n,t),1073741823)),null!==(e=Os(e,1073741823))&&Es(e,99,1073741823)}function Ks(e,t){if(3===e.tag)Us(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Us(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===ys||!ys.has(r))){Ea(n,e=Ui(n,e=Oi(t,e),1073741823)),null!==(n=Os(n,1073741823))&&Es(n,99,1073741823);break}}n=n.return}}function Vs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),as===e&&is===n?ss===ts||ss===es&&1073741823===us&&ia()-fs<hs?As(e,is):cs=!0:e.lastPendingTime<n||(0!==(t=e.pingTime)&&t<n||(e.pingTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),Es(e,t=_a(t=Ts(),n),n)))}var $s=void 0;$s=function(e,t,n){var r=t.expirationTime;if(null!==e){var a=t.pendingProps;if(e.memoizedProps!==a||xr.current)ui=!0;else if(r<n){switch(ui=!1,t.tag){case 3:yi(t),ii();break;case 5:if(oo(t),4&t.mode&&1!==n&&a.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:Hr(t.type)&&Nr(t);break;case 4:ro(t,t.stateNode.containerInfo);break;case 10:Ma(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?bi(e,t,n):(Pr(co,co.current&so),null!==(t=ki(e,t,n))?t.sibling:null);Pr(co,co.current&so);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Mi(e,t,n);t.effectTag|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null),Pr(co,co.current),!r)return null}return ki(e,t,n)}}else ui=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,a=jr(t,Er.current),La(t,n),a=Ao(null,t,r,e,a,n),t.effectTag|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,Fo(),Hr(r)){var o=!0;Nr(t)}else o=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null;var s=r.getDerivedStateFromProps;"function"==typeof s&&Na(t,r,s,e),a.updater=Wa,t.stateNode=a,a._reactInternalFiber=t,Ka(t,r,e,n),t=pi(null,t,r,!0,o,n)}else t.tag=0,li(null,t,a,n),t=t.child;return t;case 16:switch(a=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,a=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(a),t.type=a,o=t.tag=function(e){if("function"==typeof e)return Zs(e)?1:0;if(null!=e){if((e=e.$$typeof)===nt)return 11;if(e===ot)return 14}return 2}(a),e=ma(a,e),o){case 0:t=_i(null,t,a,e,n);break;case 1:t=mi(null,t,a,e,n);break;case 11:t=di(null,t,a,e,n);break;case 14:t=ci(null,t,a,ma(a.type,e),r,n);break;default:throw i(Error(306),a,"")}return t;case 0:return r=t.type,a=t.pendingProps,_i(e,t,r,a=t.elementType===r?a:ma(r,a),n);case 1:return r=t.type,a=t.pendingProps,mi(e,t,r,a=t.elementType===r?a:ma(r,a),n);case 3:if(yi(t),null===(r=t.updateQueue))throw i(Error(282));return a=null!==(a=t.memoizedState)?a.element:null,Ha(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===a?(ii(),t=ki(e,t,n)):(a=t.stateNode,(a=(null===e||null===e.child)&&a.hydrate)&&(Xo=wr(t.stateNode.containerInfo.firstChild),Zo=t,a=ei=!0),a?(t.effectTag|=2,t.child=Qa(t,null,r,n)):(li(e,t,r,n),ii()),t=t.child),t;case 5:return oo(t),null===e&&ri(t),r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,s=a.children,kr(r,a)?s=null:null!==o&&kr(r,o)&&(t.effectTag|=16),hi(e,t),4&t.mode&&1!==n&&a.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(li(e,t,s,n),t=t.child),t;case 6:return null===e&&ri(t),null;case 13:return bi(e,t,n);case 4:return ro(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=qa(t,null,r,n):li(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,di(e,t,r,a=t.elementType===r?a:ma(r,a),n);case 7:return li(e,t,t.pendingProps,n),t.child;case 8:case 12:return li(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,s=t.memoizedProps,Ma(t,o=a.value),null!==s){var u=s.value;if(0===(o=en(u,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(s.children===a.children&&!xr.current){t=ki(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var l=u.dependencies;if(null!==l){s=u.child;for(var d=l.firstContext;null!==d;){if(d.context===r&&0!=(d.observedBits&o)){1===u.tag&&((d=Pa(n,null)).tag=2,Ea(u,d)),u.expirationTime<n&&(u.expirationTime=n),null!==(d=u.alternate)&&d.expirationTime<n&&(d.expirationTime=n),Da(u.return,n),l.expirationTime<n&&(l.expirationTime=n);break}d=d.next}}else s=10===u.tag&&u.type===t.type?null:u.child;if(null!==s)s.return=u;else for(s=u;null!==s;){if(s===t){s=null;break}if(null!==(u=s.sibling)){u.return=s.return,s=u;break}s=s.return}u=s}}li(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(o=t.pendingProps).children,La(t,n),r=r(a=wa(a,o.unstable_observedBits)),t.effectTag|=1,li(e,t,r,n),t.child;case 14:return o=ma(a=t.type,t.pendingProps),ci(e,t,a,o=ma(a.type,o),r,n);case 15:return fi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:ma(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Hr(r)?(e=!0,Nr(t)):e=!1,La(t,n),Ba(t,r,a),Ka(t,r,a,n),pi(null,t,r,!0,e,n);case 19:return Mi(e,t,n)}throw i(Error(156))};var Gs=null,Js=null;function qs(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Qs(e,t,n,r){return new qs(e,t,n,r)}function Zs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Xs(e,t){var n=e.alternate;return null===n?((n=Qs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function eu(e,t,n,r,a,o){var s=2;if(r=e,"function"==typeof e)Zs(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case qe:return tu(n.children,a,o,t);case tt:s=8,a|=7;break;case Qe:s=8,a|=1;break;case Ze:return(e=Qs(12,n,t,8|a)).elementType=Ze,e.type=Ze,e.expirationTime=o,e;case rt:return(e=Qs(13,n,t,a)).type=rt,e.elementType=rt,e.expirationTime=o,e;case at:return(e=Qs(19,n,t,a)).elementType=at,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Xe:s=10;break e;case et:s=9;break e;case nt:s=11;break e;case ot:s=14;break e;case it:s=16,r=null;break e}throw i(Error(130),null==e?e:typeof e,"")}return(t=Qs(s,n,t,a)).elementType=e,t.type=r,t.expirationTime=o,t}function tu(e,t,n,r){return(e=Qs(7,e,r,t)).expirationTime=n,e}function nu(e,t,n){return(e=Qs(6,e,null,t)).expirationTime=n,e}function ru(e,t,n){return(t=Qs(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function au(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=this.firstBatch=null,this.pingTime=this.lastPendingTime=this.firstPendingTime=this.callbackExpirationTime=0}function ou(e,t,n){return e=new au(e,t,n),t=Qs(3,null,null,2===t?7:1===t?3:0),e.current=t,t.stateNode=e}function iu(e,t,n,r,a,o){var s=t.current;e:if(n){t:{if(2!==an(n=n._reactInternalFiber)||1!==n.tag)throw i(Error(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(Hr(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw i(Error(171))}if(1===n.tag){var l=n.type;if(Hr(l)){n=Rr(n,l,u);break e}}n=u}else n=Or;return null===t.context?t.context=n:t.pendingContext=n,t=o,(a=Pa(r,a)).payload={element:e},null!==(t=void 0===t?null:t)&&(a.callback=t),Ea(s,a),Ps(s,r),r}function su(e,t,n,r){var a=t.current,o=Ts(),i=Fa.suspense;return iu(e,t,n,a=Ss(o,a,i),i,r)}function uu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function lu(e){var t=1073741821-25*(1+((1073741821-Ts()+500)/25|0));t<=Ys&&--t,this._expirationTime=Ys=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function du(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function cu(e,t,n){this._internalRoot=ou(e,t,n)}function fu(e,t){this._internalRoot=ou(e,2,t)}function hu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function _u(e,t,n,r,a){var o=n._reactRootContainer,i=void 0;if(o){if(i=o._internalRoot,"function"==typeof a){var s=a;a=function(){var e=uu(i);s.call(e)}}su(t,i,e,a)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new cu(e,0,t)}(n,r),i=o._internalRoot,"function"==typeof a){var u=a;a=function(){var e=uu(i);u.call(e)}}Is(function(){su(t,i,e,a)})}return uu(i)}function mu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!hu(t))throw i(Error(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Je,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Te=function(e,t,n){switch(t){case"input":if(Lt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=F(r);if(!a)throw i(Error(90));Ue(r),Lt(r,a)}}}break;case"textarea":nr(e,n);break;case"select":null!=(t=n.value)&&Xn(e,!!n.multiple,t,!1)}},lu.prototype.render=function(e){if(!this._defer)throw i(Error(250));this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new du;return iu(e,t,null,n,null,r._onCommit),r},lu.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},lu.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(!this._defer||null===t)throw i(Error(251));if(this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,a=t;a!==this;)r=a,a=a._next;if(null===r)throw i(Error(251));r._next=a._next,this._next=t,e.firstBatch=this}if(this._defer=!1,t=n,(rs&(qi|Qi))!==Gi)throw i(Error(253));ca(Fs.bind(null,e,t)),fa(),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},lu.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},du.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},du.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];if("function"!=typeof n)throw i(Error(191),n);n()}}},fu.prototype.render=cu.prototype.render=function(e,t){var n=this._internalRoot,r=new du;return null!==(t=void 0===t?null:t)&&r.then(t),su(e,n,null,r._onCommit),r},fu.prototype.unmount=cu.prototype.unmount=function(e){var t=this._internalRoot,n=new du;return null!==(e=void 0===e?null:e)&&n.then(e),su(null,t,null,n._onCommit),n},fu.prototype.createBatch=function(){var e=new lu(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},xe=js,Ce=Hs,je=Cs,He=function(e,t){var n=rs;rs|=2;try{return e(t)}finally{(rs=n)===Gi&&fa()}};var pu,yu,vu={createPortal:mu,findDOMNode:function(e){if(null==e)e=null;else if(1!==e.nodeType){var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw i(Error(188));throw i(Error(268),Object.keys(e))}e=null===(e=sn(t))?null:e.stateNode}return e},hydrate:function(e,t,n){if(!hu(t))throw i(Error(200));return _u(null,e,t,!0,n)},render:function(e,t,n){if(!hu(t))throw i(Error(200));return _u(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!hu(n))throw i(Error(200));if(null==e||void 0===e._reactInternalFiber)throw i(Error(38));return _u(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!hu(e))throw i(Error(40));return!!e._reactRootContainer&&(Is(function(){_u(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return mu.apply(void 0,arguments)},unstable_batchedUpdates:js,unstable_interactiveUpdates:function(e,t,n,r){return Cs(),Hs(e,t,n,r)},unstable_discreteUpdates:Hs,unstable_flushDiscreteUpdates:Cs,flushSync:function(e,t){if((rs&(qi|Qi))!==Gi)throw i(Error(187));var n=rs;rs|=1;try{return la(99,e.bind(null,t))}finally{rs=n,fa()}},unstable_createRoot:function(e,t){if(!hu(e))throw i(Error(299),"unstable_createRoot");return new fu(e,null!=t&&!0===t.hydrate)},unstable_createSyncRoot:function(e,t){if(!hu(e))throw i(Error(299),"unstable_createRoot");return new cu(e,1,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=rs;rs|=1;try{la(99,e)}finally{(rs=t)===Gi&&fa()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[I,A,F,O.injectEventPluginsByName,f,U,function(e){T(e,B)},Oe,Ee,In,P,Bs,{current:!1}]}};yu=(pu={findFiberByHostInstance:H,bundleType:0,version:"16.9.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Gs=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Js=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(a({},pu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Ke.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=sn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return yu?yu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var bu={default:vu},gu=bu&&vu||bu;e.exports=gu.default||gu},function(e,t,n){"use strict";e.exports=n(248)},function(e,t,n){"use strict";
/** @license React v0.15.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r=void 0,a=void 0,o=void 0,i=void 0,s=void 0;if(t.unstable_now=void 0,t.unstable_forceFrameRate=void 0,"undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,l=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}};t.unstable_now=function(){return Date.now()},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(d,0))},a=function(e,t){l=setTimeout(e,t)},o=function(){clearTimeout(l)},i=function(){return!1},s=t.unstable_forceFrameRate=function(){}}else{var c=window.performance,f=window.Date,h=window.setTimeout,_=window.clearTimeout,m=window.requestAnimationFrame,p=window.cancelAnimationFrame;"undefined"!=typeof console&&("function"!=typeof m&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")),t.unstable_now="object"==typeof c&&"function"==typeof c.now?function(){return c.now()}:function(){return f.now()};var y=!1,v=null,b=-1,g=-1,M=33.33,k=-1,D=-1,L=0,w=!1;i=function(){return t.unstable_now()>=L},s=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):0<e?(M=Math.floor(1e3/e),w=!0):(M=33.33,w=!1)};var T=function(){if(null!==v){var e=t.unstable_now(),n=0<L-e;try{v(n,e)||(v=null)}catch(e){throw Y.postMessage(null),e}}},S=new MessageChannel,Y=S.port2;S.port1.onmessage=T;var P=function(e){if(null===v)D=k=-1,y=!1;else{y=!0,m(function(e){_(b),P(e)});var n=function(){L=t.unstable_now()+M/2,T(),b=h(n,3*M)};if(b=h(n,3*M),-1!==k&&.1<e-k){var r=e-k;!w&&-1!==D&&r<M&&D<M&&(8.33>(M=r<D?D:r)&&(M=8.33)),D=r}k=e,L=e+M,Y.postMessage(null)}};r=function(e){v=e,y||(y=!0,m(function(e){P(e)}))},a=function(e,n){g=h(function(){e(t.unstable_now())},n)},o=function(){_(g),g=-1}}var O=null,E=null,x=null,C=3,j=!1,H=!1,I=!1;function A(e,t){var n=e.next;if(n===e)O=null;else{e===O&&(O=n);var r=e.previous;r.next=n,n.previous=r}e.next=e.previous=null,n=e.callback,r=C;var a=x;C=e.priorityLevel,x=e;try{var o=e.expirationTime<=t;switch(C){case 1:var i=n(o);break;case 2:case 3:case 4:i=n(o);break;case 5:i=n(o)}}catch(e){throw e}finally{C=r,x=a}if("function"==typeof i)if(t=e.expirationTime,e.callback=i,null===O)O=e.next=e.previous=e;else{i=null,o=O;do{if(t<=o.expirationTime){i=o;break}o=o.next}while(o!==O);null===i?i=O:i===O&&(O=e),(t=i.previous).next=i.previous=e,e.next=i,e.previous=t}}function F(e){if(null!==E&&E.startTime<=e)do{var t=E,n=t.next;if(t===n)E=null;else{E=n;var r=t.previous;r.next=n,n.previous=r}t.next=t.previous=null,z(t,t.expirationTime)}while(null!==E&&E.startTime<=e)}function R(e){I=!1,F(e),H||(null!==O?(H=!0,r(N)):null!==E&&a(R,E.startTime-e))}function N(e,n){H=!1,I&&(I=!1,o()),F(n),j=!0;try{if(e){if(null!==O)do{A(O,n),F(n=t.unstable_now())}while(null!==O&&!i())}else for(;null!==O&&O.expirationTime<=n;)A(O,n),F(n=t.unstable_now());return null!==O||(null!==E&&a(R,E.startTime-n),!1)}finally{j=!1}}function W(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}function z(e,t){if(null===O)O=e.next=e.previous=e;else{var n=null,r=O;do{if(t<r.expirationTime){n=r;break}r=r.next}while(r!==O);null===n?n=O:n===O&&(O=e),(t=n.previous).next=n.previous=e,e.next=n,e.previous=t}}var B=s;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=C;C=e;try{return t()}finally{C=n}},t.unstable_next=function(e){switch(C){case 1:case 2:case 3:var t=3;break;default:t=C}var n=C;C=t;try{return e()}finally{C=n}},t.unstable_scheduleCallback=function(e,n,i){var s=t.unstable_now();if("object"==typeof i&&null!==i){var u=i.delay;u="number"==typeof u&&0<u?s+u:s,i="number"==typeof i.timeout?i.timeout:W(e)}else i=W(e),u=s;if(e={callback:n,priorityLevel:e,startTime:u,expirationTime:i=u+i,next:null,previous:null},u>s){if(i=u,null===E)E=e.next=e.previous=e;else{n=null;var l=E;do{if(i<l.startTime){n=l;break}l=l.next}while(l!==E);null===n?n=E:n===E&&(E=e),(i=n.previous).next=n.previous=e,e.next=n,e.previous=i}null===O&&E===e&&(I?o():I=!0,a(R,u-s))}else z(e,i),H||j||(H=!0,r(N));return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(e===t)e===O?O=null:e===E&&(E=null);else{e===O?O=t:e===E&&(E=t);var n=e.previous;n.next=t,t.previous=n}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var t=C;return function(){var n=C;C=t;try{return e.apply(this,arguments)}finally{C=n}}},t.unstable_getCurrentPriorityLevel=function(){return C},t.unstable_shouldYield=function(){var e=t.unstable_now();return F(e),null!==x&&null!==O&&O.startTime<=e&&O.expirationTime<x.expirationTime||i()},t.unstable_requestPaint=B,t.unstable_continueExecution=function(){H||j||(H=!0,r(N))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return O}},function(e,t,n){"use strict";var r=n(250);function a(){}function o(){}o.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,o,i){if(i!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:a};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.9.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,a=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,d=r?Symbol.for("react.context"):60110,c=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,h=r?Symbol.for("react.forward_ref"):60112,_=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,p=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,v=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118;function g(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case a:switch(e=e.type){case c:case f:case i:case u:case s:case _:return e;default:switch(e=e&&e.$$typeof){case d:case h:case l:return e;default:return t}}case y:case p:case o:return t}}}function M(e){return g(e)===f}t.typeOf=g,t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=d,t.ContextProvider=l,t.Element=a,t.ForwardRef=h,t.Fragment=i,t.Lazy=y,t.Memo=p,t.Portal=o,t.Profiler=u,t.StrictMode=s,t.Suspense=_,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===u||e===s||e===_||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===p||e.$$typeof===l||e.$$typeof===d||e.$$typeof===h||e.$$typeof===v||e.$$typeof===b)},t.isAsyncMode=function(e){return M(e)||g(e)===c},t.isConcurrentMode=M,t.isContextConsumer=function(e){return g(e)===d},t.isContextProvider=function(e){return g(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===a},t.isForwardRef=function(e){return g(e)===h},t.isFragment=function(e){return g(e)===i},t.isLazy=function(e){return g(e)===y},t.isMemo=function(e){return g(e)===p},t.isPortal=function(e){return g(e)===o},t.isProfiler=function(e){return g(e)===u},t.isStrictMode=function(e){return g(e)===s},t.isSuspense=function(e){return g(e)===_}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r={"./af":60,"./af.js":60,"./ar":61,"./ar-dz":62,"./ar-dz.js":62,"./ar-kw":63,"./ar-kw.js":63,"./ar-ly":64,"./ar-ly.js":64,"./ar-ma":65,"./ar-ma.js":65,"./ar-sa":66,"./ar-sa.js":66,"./ar-tn":67,"./ar-tn.js":67,"./ar.js":61,"./az":68,"./az.js":68,"./be":69,"./be.js":69,"./bg":70,"./bg.js":70,"./bm":71,"./bm.js":71,"./bn":72,"./bn.js":72,"./bo":73,"./bo.js":73,"./br":74,"./br.js":74,"./bs":75,"./bs.js":75,"./ca":76,"./ca.js":76,"./cs":77,"./cs.js":77,"./cv":78,"./cv.js":78,"./cy":79,"./cy.js":79,"./da":80,"./da.js":80,"./de":81,"./de-at":82,"./de-at.js":82,"./de-ch":83,"./de-ch.js":83,"./de.js":81,"./dv":84,"./dv.js":84,"./el":85,"./el.js":85,"./en-SG":86,"./en-SG.js":86,"./en-au":87,"./en-au.js":87,"./en-ca":88,"./en-ca.js":88,"./en-gb":89,"./en-gb.js":89,"./en-ie":90,"./en-ie.js":90,"./en-il":91,"./en-il.js":91,"./en-nz":92,"./en-nz.js":92,"./eo":93,"./eo.js":93,"./es":94,"./es-do":95,"./es-do.js":95,"./es-us":96,"./es-us.js":96,"./es.js":94,"./et":97,"./et.js":97,"./eu":98,"./eu.js":98,"./fa":99,"./fa.js":99,"./fi":100,"./fi.js":100,"./fo":101,"./fo.js":101,"./fr":102,"./fr-ca":103,"./fr-ca.js":103,"./fr-ch":104,"./fr-ch.js":104,"./fr.js":102,"./fy":105,"./fy.js":105,"./ga":106,"./ga.js":106,"./gd":107,"./gd.js":107,"./gl":108,"./gl.js":108,"./gom-latn":109,"./gom-latn.js":109,"./gu":110,"./gu.js":110,"./he":111,"./he.js":111,"./hi":112,"./hi.js":112,"./hr":113,"./hr.js":113,"./hu":114,"./hu.js":114,"./hy-am":115,"./hy-am.js":115,"./id":116,"./id.js":116,"./is":117,"./is.js":117,"./it":118,"./it-ch":119,"./it-ch.js":119,"./it.js":118,"./ja":120,"./ja.js":120,"./jv":121,"./jv.js":121,"./ka":122,"./ka.js":122,"./kk":123,"./kk.js":123,"./km":124,"./km.js":124,"./kn":125,"./kn.js":125,"./ko":126,"./ko.js":126,"./ku":127,"./ku.js":127,"./ky":128,"./ky.js":128,"./lb":129,"./lb.js":129,"./lo":130,"./lo.js":130,"./lt":131,"./lt.js":131,"./lv":132,"./lv.js":132,"./me":133,"./me.js":133,"./mi":134,"./mi.js":134,"./mk":135,"./mk.js":135,"./ml":136,"./ml.js":136,"./mn":137,"./mn.js":137,"./mr":138,"./mr.js":138,"./ms":139,"./ms-my":140,"./ms-my.js":140,"./ms.js":139,"./mt":141,"./mt.js":141,"./my":142,"./my.js":142,"./nb":143,"./nb.js":143,"./ne":144,"./ne.js":144,"./nl":145,"./nl-be":146,"./nl-be.js":146,"./nl.js":145,"./nn":147,"./nn.js":147,"./pa-in":148,"./pa-in.js":148,"./pl":149,"./pl.js":149,"./pt":150,"./pt-br":151,"./pt-br.js":151,"./pt.js":150,"./ro":152,"./ro.js":152,"./ru":153,"./ru.js":153,"./sd":154,"./sd.js":154,"./se":155,"./se.js":155,"./si":156,"./si.js":156,"./sk":157,"./sk.js":157,"./sl":158,"./sl.js":158,"./sq":159,"./sq.js":159,"./sr":160,"./sr-cyrl":161,"./sr-cyrl.js":161,"./sr.js":160,"./ss":162,"./ss.js":162,"./sv":163,"./sv.js":163,"./sw":164,"./sw.js":164,"./ta":165,"./ta.js":165,"./te":166,"./te.js":166,"./tet":167,"./tet.js":167,"./tg":168,"./tg.js":168,"./th":169,"./th.js":169,"./tl-ph":170,"./tl-ph.js":170,"./tlh":171,"./tlh.js":171,"./tr":172,"./tr.js":172,"./tzl":173,"./tzl.js":173,"./tzm":174,"./tzm-latn":175,"./tzm-latn.js":175,"./tzm.js":174,"./ug-cn":176,"./ug-cn.js":176,"./uk":177,"./uk.js":177,"./ur":178,"./ur.js":178,"./uz":179,"./uz-latn":180,"./uz-latn.js":180,"./uz.js":179,"./vi":181,"./vi.js":181,"./x-pseudo":182,"./x-pseudo.js":182,"./yo":183,"./yo.js":183,"./zh-cn":184,"./zh-cn.js":184,"./zh-hk":185,"./zh-hk.js":185,"./zh-tw":186,"./zh-tw.js":186};function a(e){var t=o(e);return n(t)}function o(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=o,e.exports=a,a.id=255},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"CalendarDay",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"CalendarMonth",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"CalendarMonthGrid",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"DateRangePicker",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"DateRangePickerInput",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"DateRangePickerInputController",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"DateRangePickerShape",{enumerable:!0,get:function(){return d.default}}),Object.defineProperty(t,"DayPicker",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(t,"DayPickerRangeController",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(t,"DayPickerSingleDateController",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(t,"SingleDatePicker",{enumerable:!0,get:function(){return _.default}}),Object.defineProperty(t,"SingleDatePickerInput",{enumerable:!0,get:function(){return m.default}}),Object.defineProperty(t,"SingleDatePickerShape",{enumerable:!0,get:function(){return p.default}}),Object.defineProperty(t,"isInclusivelyAfterDay",{enumerable:!0,get:function(){return y.default}}),Object.defineProperty(t,"isInclusivelyBeforeDay",{enumerable:!0,get:function(){return v.default}}),Object.defineProperty(t,"isNextDay",{enumerable:!0,get:function(){return b.default}}),Object.defineProperty(t,"isSameDay",{enumerable:!0,get:function(){return g.default}}),Object.defineProperty(t,"toISODateString",{enumerable:!0,get:function(){return M.default}}),Object.defineProperty(t,"toLocalizedDateString",{enumerable:!0,get:function(){return k.default}}),Object.defineProperty(t,"toMomentObject",{enumerable:!0,get:function(){return D.default}});var a=r(n(45)),o=r(n(194)),i=r(n(197)),s=r(n(280)),u=r(n(220)),l=r(n(219)),d=r(n(212)),c=r(n(56)),f=r(n(228)),h=r(n(234)),_=r(n(317)),m=r(n(236)),p=r(n(235)),y=r(n(29)),v=r(n(319)),b=r(n(230)),g=r(n(24)),M=r(n(32)),k=r(n(54)),D=r(n(25))},function(e,t,n){"use strict";var r=function(e){return e!=e};e.exports=function(e,t){return 0===e&&0===t?1/e==1/t:e===t||!(!r(e)||!r(t))}},function(e,t,n){"use strict";var r="Function.prototype.bind called on incompatible ",a=Array.prototype.slice,o=Object.prototype.toString;e.exports=function(e){var t=this;if("function"!=typeof t||"[object Function]"!==o.call(t))throw new TypeError(r+t);for(var n,i=a.call(arguments,1),s=function(){if(this instanceof n){var r=t.apply(this,i.concat(a.call(arguments)));return Object(r)===r?r:this}return t.apply(e,i.concat(a.call(arguments)))},u=Math.max(0,t.length-i.length),l=[],d=0;d<u;d++)l.push("$"+d);if(n=Function("binder","return function ("+l.join(",")+"){ return binder.apply(this,arguments); }")(s),t.prototype){var c=function(){};c.prototype=t.prototype,n.prototype=new c,c.prototype=null}return n}},function(e,t,n){var r=n(1);e.exports={isValidMoment:function(e){return!("function"==typeof r.isMoment&&!r.isMoment(e))&&("function"==typeof e.isValid?e.isValid():!isNaN(e))}}},function(e,t){var n={invalidPredicate:"`predicate` must be a function",invalidPropValidator:"`propValidator` must be a function",requiredCore:"is marked as required",invalidTypeCore:"Invalid input type",predicateFailureCore:"Failed to succeed with predicate",anonymousMessage:"<<anonymous>>",baseInvalidMessage:"Invalid "};function r(e){if("function"!=typeof e)throw new Error(n.invalidPropValidator);var t=e.bind(null,!1,null);return t.isRequired=e.bind(null,!0,null),t.withPredicate=function(t){if("function"!=typeof t)throw new Error(n.invalidPredicate);var r=e.bind(null,!1,t);return r.isRequired=e.bind(null,!0,t),r},t}function a(e,t,r){return new Error("The prop `"+e+"` "+n.requiredCore+" in `"+t+"`, but its value is `"+r+"`.")}var o=-1;e.exports={constructPropValidatorVariations:r,createMomentChecker:function(e,t,i,s){return r(function(r,u,l,d,c,f,h){var _=l[d],m=typeof _,p=function(e,t,n,r){var i=void 0===r,s=null===r;if(e){if(i)return a(n,t,"undefined");if(s)return a(n,t,"null")}return i||s?null:o}(r,c=c||n.anonymousMessage,h=h||d,_);if(p!==o)return p;if(t&&!t(_))return new Error(n.invalidTypeCore+": `"+d+"` of type `"+m+"` supplied to `"+c+"`, expected `"+e+"`.");if(!i(_))return new Error(n.baseInvalidMessage+f+" `"+d+"` of type `"+m+"` supplied to `"+c+"`, expected `"+s+"`.");if(u&&!u(_)){var y=u.name||n.anonymousMessage;return new Error(n.baseInvalidMessage+f+" `"+d+"` of type `"+m+"` supplied to `"+c+"`. "+n.predicateFailureCore+" `"+y+"`.")}return null})},messages:n}},function(e,t,n){"use strict";function r(){return null}function a(){return r}r.isRequired=r,e.exports={and:a,between:a,booleanSome:a,childrenHavePropXorChildren:a,childrenOf:a,childrenOfType:a,childrenSequenceOf:a,componentWithName:a,disallowedIf:a,elementType:a,empty:a,explicitNull:a,forbidExtraProps:Object,integer:a,keysOf:a,mutuallyExclusiveProps:a,mutuallyExclusiveTrueProps:a,nChildren:a,nonNegativeInteger:r,nonNegativeNumber:a,numericString:a,object:a,or:a,range:a,ref:a,requiredBy:a,restrictedProp:a,sequenceOf:a,shape:a,stringEndsWith:a,stringStartsWith:a,uniqueArray:a,uniqueArrayOf:a,valuesOf:a,withShape:a}},function(e,t,n){"use strict";var r=n(16),a=n(188),o=n(190),i=n(264),s=o();r(s,{getPolyfill:o,implementation:a,shim:i}),e.exports=s},function(e,t,n){"use strict";var r;if(!Object.keys){var a=Object.prototype.hasOwnProperty,o=Object.prototype.toString,i=n(187),s=Object.prototype.propertyIsEnumerable,u=!s.call({toString:null},"toString"),l=s.call(function(){},"prototype"),d=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],c=function(e){var t=e.constructor;return t&&t.prototype===e},f={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},h=function(){if("undefined"==typeof window)return!1;for(var e in window)try{if(!f["$"+e]&&a.call(window,e)&&null!==window[e]&&"object"==typeof window[e])try{c(window[e])}catch(e){return!0}}catch(e){return!0}return!1}();r=function(e){var t=null!==e&&"object"==typeof e,n="[object Function]"===o.call(e),r=i(e),s=t&&"[object String]"===o.call(e),f=[];if(!t&&!n&&!r)throw new TypeError("Object.keys called on a non-object");var _=l&&n;if(s&&e.length>0&&!a.call(e,0))for(var m=0;m<e.length;++m)f.push(String(m));if(r&&e.length>0)for(var p=0;p<e.length;++p)f.push(String(p));else for(var y in e)_&&"prototype"===y||!a.call(e,y)||f.push(String(y));if(u)for(var v=function(e){if("undefined"==typeof window||!h)return c(e);try{return c(e)}catch(e){return!1}}(e),b=0;b<d.length;++b)v&&"constructor"===d[b]||!a.call(e,d[b])||f.push(d[b]);return f}}e.exports=r},function(e,t,n){"use strict";var r=n(16),a=n(190);e.exports=function(){var e=a();return r(Object,{assign:e},{assign:function(){return Object.assign!==e}}),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CHANNEL="__direction__",t.DIRECTIONS={LTR:"ltr",RTL:"rtl"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=n(3),o=(r=a)&&r.__esModule?r:{default:r};t.default=o.default.shape({getState:o.default.func,setState:o.default.func,subscribe:o.default.func})},function(e,t,n){(function(t){(function(){var n,r,a,o,i,s;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:null!=t&&t.hrtime?(e.exports=function(){return(n()-i)/1e6},r=t.hrtime,o=(n=function(){var e;return 1e9*(e=r())[0]+e[1]})(),s=1e9*t.uptime(),i=o-s):Date.now?(e.exports=function(){return Date.now()-a},a=Date.now()):(e.exports=function(){return(new Date).getTime()-a},a=(new Date).getTime())}).call(this)}).call(this,n(268))},function(e,t){var n,r,a=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var u,l=[],d=!1,c=-1;function f(){d&&u&&(d=!1,u.length?l=u.concat(l):c=-1,l.length&&h())}function h(){if(!d){var e=s(f);d=!0;for(var t=l.length;t;){for(u=l,l=[];++c<t;)u&&u[c].run();c=-1,t=l.length}u=null,d=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function _(e,t){this.fun=e,this.array=t}function m(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new _(e,t)),1!==l.length||d||s(h)},_.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=m,a.addListener=m,a.once=m,a.off=m,a.removeListener=m,a.removeAllListeners=m,a.emit=m,a.prependListener=m,a.prependOnceListener=m,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof e)return e;if("function"==typeof e)return e(t);return""}},function(e,t){e.exports=function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}},function(e,t){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=o;var a=r(n(0));n(5),r(n(45)),r(n(274));function o(e){var t=e.children;return a.default.createElement("tr",null,t)}o.propTypes={}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.PureCustomizableCalendarDay=t.selectedStyles=t.lastInRangeStyles=t.selectedSpanStyles=t.hoveredSpanStyles=t.blockedOutOfRangeStyles=t.blockedCalendarStyles=t.blockedMinNightsStyles=t.highlightedCalendarStyles=t.outsideStyles=t.defaultStyles=void 0;var a=r(n(10)),o=r(n(11)),i=r(n(12)),s=r(n(8)),u=(r(n(6)),r(n(0))),l=(r(n(3)),r(n(15)),n(5),n(13)),d=r(n(1)),c=r(n(192)),f=n(7),h=(r(n(9)),r(n(193))),_=n(4),m=r(n(195)).default.reactDates.color;function p(e,t){if(!e)return null;var n=e.hover;return t&&n?n:e}var y={border:"1px solid ".concat(m.core.borderLight),color:m.text,background:m.background,hover:{background:m.core.borderLight,border:"1px solid ".concat(m.core.borderLight),color:"inherit"}};t.defaultStyles=y;var v={background:m.outside.backgroundColor,border:0,color:m.outside.color};t.outsideStyles=v;var b={background:m.highlighted.backgroundColor,color:m.highlighted.color,hover:{background:m.highlighted.backgroundColor_hover,color:m.highlighted.color_active}};t.highlightedCalendarStyles=b;var g={background:m.minimumNights.backgroundColor,border:"1px solid ".concat(m.minimumNights.borderColor),color:m.minimumNights.color,hover:{background:m.minimumNights.backgroundColor_hover,color:m.minimumNights.color_active}};t.blockedMinNightsStyles=g;var M={background:m.blocked_calendar.backgroundColor,border:"1px solid ".concat(m.blocked_calendar.borderColor),color:m.blocked_calendar.color,hover:{background:m.blocked_calendar.backgroundColor_hover,border:"1px solid ".concat(m.blocked_calendar.borderColor),color:m.blocked_calendar.color_active}};t.blockedCalendarStyles=M;var k={background:m.blocked_out_of_range.backgroundColor,border:"1px solid ".concat(m.blocked_out_of_range.borderColor),color:m.blocked_out_of_range.color,hover:{background:m.blocked_out_of_range.backgroundColor_hover,border:"1px solid ".concat(m.blocked_out_of_range.borderColor),color:m.blocked_out_of_range.color_active}};t.blockedOutOfRangeStyles=k;var D={background:m.hoveredSpan.backgroundColor,border:"1px double ".concat(m.hoveredSpan.borderColor),color:m.hoveredSpan.color,hover:{background:m.hoveredSpan.backgroundColor_hover,border:"1px double ".concat(m.hoveredSpan.borderColor),color:m.hoveredSpan.color_active}};t.hoveredSpanStyles=D;var L={background:m.selectedSpan.backgroundColor,border:"1px double ".concat(m.selectedSpan.borderColor),color:m.selectedSpan.color,hover:{background:m.selectedSpan.backgroundColor_hover,border:"1px double ".concat(m.selectedSpan.borderColor),color:m.selectedSpan.color_active}};t.selectedSpanStyles=L;var w={};t.lastInRangeStyles=w;var T={background:m.selected.backgroundColor,border:"1px double ".concat(m.selected.borderColor),color:m.selected.color,hover:{background:m.selected.backgroundColor_hover,border:"1px double ".concat(m.selected.borderColor),color:m.selected.color_active}};t.selectedStyles=T;var S={day:(0,d.default)(),daySize:_.DAY_SIZE,isOutsideDay:!1,modifiers:new Set,isFocused:!1,tabIndex:-1,onDayClick:function(){},onDayMouseEnter:function(){},onDayMouseLeave:function(){},renderDayContents:null,ariaLabelFormat:"dddd, LL",defaultStyles:y,outsideStyles:v,todayStyles:{},highlightedCalendarStyles:b,blockedMinNightsStyles:g,blockedCalendarStyles:M,blockedOutOfRangeStyles:k,hoveredSpanStyles:D,selectedSpanStyles:L,lastInRangeStyles:w,selectedStyles:T,selectedStartStyles:{},selectedEndStyles:{},afterHoveredStartStyles:{},firstDayOfWeekStyles:{},lastDayOfWeekStyles:{},hoveredStartFirstPossibleEndStyles:{},hoveredStartBlockedMinNightsStyles:{},phrases:f.CalendarDayPhrases},Y=function(e){(0,s.default)(n,e);var t=n.prototype;function n(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return(t=e.call.apply(e,[this].concat(r))||this).state={isHovered:!1},t.setButtonRef=t.setButtonRef.bind((0,i.default)(t)),t}return t[!u.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentDidUpdate=function(e){var t=this,n=this.props,r=n.isFocused,a=n.tabIndex;0===a&&(r||a!==e.tabIndex)&&(0,c.default)(function(){t.buttonRef&&t.buttonRef.focus()})},t.onDayClick=function(e,t){var n=this.props.onDayClick;n(e,t)},t.onDayMouseEnter=function(e,t){var n=this.props.onDayMouseEnter;this.setState({isHovered:!0}),n(e,t)},t.onDayMouseLeave=function(e,t){var n=this.props.onDayMouseLeave;this.setState({isHovered:!1}),n(e,t)},t.onKeyDown=function(e,t){var n=this.props.onDayClick,r=t.key;"Enter"!==r&&" "!==r||n(e,t)},t.setButtonRef=function(e){this.buttonRef=e},t.render=function(){var e=this,t=this.props,n=t.day,r=t.ariaLabelFormat,a=t.daySize,i=t.isOutsideDay,s=t.modifiers,d=t.tabIndex,c=t.renderDayContents,f=t.styles,_=t.phrases,m=t.defaultStyles,y=t.outsideStyles,v=t.todayStyles,b=t.firstDayOfWeekStyles,g=t.lastDayOfWeekStyles,M=t.highlightedCalendarStyles,k=t.blockedMinNightsStyles,D=t.blockedCalendarStyles,L=t.blockedOutOfRangeStyles,w=t.hoveredSpanStyles,T=t.selectedSpanStyles,S=t.lastInRangeStyles,Y=t.selectedStyles,P=t.selectedStartStyles,O=t.selectedEndStyles,E=t.afterHoveredStartStyles,x=t.hoveredStartFirstPossibleEndStyles,C=t.hoveredStartBlockedMinNightsStyles,j=this.state.isHovered;if(!n)return u.default.createElement("td",null);var H=(0,h.default)(n,r,a,s,_),I=H.daySizeStyles,A=H.useDefaultCursor,F=H.selected,R=H.hoveredSpan,N=H.isOutsideRange,W=H.ariaLabel;return u.default.createElement("td",(0,o.default)({},(0,l.css)(f.CalendarDay,A&&f.CalendarDay__defaultCursor,I,p(m,j),i&&p(y,j),s.has("today")&&p(v,j),s.has("first-day-of-week")&&p(b,j),s.has("last-day-of-week")&&p(g,j),s.has("hovered-start-first-possible-end")&&p(x,j),s.has("hovered-start-blocked-minimum-nights")&&p(C,j),s.has("highlighted-calendar")&&p(M,j),s.has("blocked-minimum-nights")&&p(k,j),s.has("blocked-calendar")&&p(D,j),R&&p(w,j),s.has("after-hovered-start")&&p(E,j),s.has("selected-span")&&p(T,j),s.has("last-in-range")&&p(S,j),F&&p(Y,j),s.has("selected-start")&&p(P,j),s.has("selected-end")&&p(O,j),N&&p(L,j)),{role:"button",ref:this.setButtonRef,"aria-disabled":s.has("blocked"),"aria-label":W,onMouseEnter:function(t){e.onDayMouseEnter(n,t)},onMouseLeave:function(t){e.onDayMouseLeave(n,t)},onMouseUp:function(e){e.currentTarget.blur()},onClick:function(t){e.onDayClick(n,t)},onKeyDown:function(t){e.onKeyDown(n,t)},tabIndex:d}),c?c(n,s):n.format("D"))},n}(u.default.PureComponent||u.default.Component);t.PureCustomizableCalendarDay=Y,Y.propTypes={},Y.defaultProps=S;var P=(0,l.withStyles)(function(e){return{CalendarDay:{boxSizing:"border-box",cursor:"pointer",fontSize:e.reactDates.font.size,textAlign:"center",":active":{outline:0}},CalendarDay__defaultCursor:{cursor:"default"}}},{pureComponent:void 0!==u.default.PureComponent})(Y);t.default=P},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a.default.localeData().firstDayOfWeek();if(!a.default.isMoment(e)||!e.isValid())throw new TypeError("`month` must be a valid moment object");if(-1===o.WEEKDAYS.indexOf(n))throw new TypeError("`firstDayOfWeek` must be an integer between 0 and 6");for(var r=e.clone().startOf("month").hour(12),i=e.clone().endOf("month").hour(12),s=(r.day()+7-n)%7,u=(n+6-i.day())%7,l=r.clone().subtract(s,"day"),d=i.clone().add(u,"day").diff(l,"days")+1,c=l.clone(),f=[],h=0;h<d;h+=1){h%7==0&&f.push([]);var _=null;(h>=s&&h<d-u||t)&&(_=c.clone()),f[f.length-1].push(_),c.add(1,"day")}return f};var a=r(n(1)),o=n(4)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return!!("undefined"!=typeof window&&"TransitionEvent"in window)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return{transform:e,msTransform:e,MozTransform:e,WebkitTransform:e}}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!a.default.isMoment(e)||!a.default.isMoment(t))&&(0,o.default)(e.clone().subtract(1,"month"),t)};var a=r(n(1)),o=r(n(199))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!a.default.isMoment(e)||!a.default.isMoment(t))&&(0,o.default)(e.clone().add(1,"month"),t)};var a=r(n(1)),o=r(n(199))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.PureDateRangePicker=void 0;var a=r(n(10)),o=r(n(11)),i=r(n(12)),s=r(n(8)),u=r(n(6)),l=r(n(0)),d=r(n(1)),c=n(13),f=n(241),h=(n(5),n(38)),_=r(n(27)),m=r(n(48)),p=(r(n(212)),n(7)),y=r(n(216)),v=r(n(217)),b=r(n(52)),g=r(n(29)),M=r(n(218)),k=r(n(18)),D=r(n(219)),L=r(n(228)),w=r(n(36)),T=n(4),S={startDate:null,endDate:null,focusedInput:null,startDatePlaceholderText:"Start Date",endDatePlaceholderText:"End Date",startDateAriaLabel:void 0,endDateAriaLabel:void 0,startDateOffset:void 0,endDateOffset:void 0,disabled:!1,required:!1,readOnly:!1,screenReaderInputMessage:"",showClearDates:!1,showDefaultInputIcon:!1,inputIconPosition:T.ICON_BEFORE_POSITION,customInputIcon:null,customArrowIcon:null,customCloseIcon:null,noBorder:!1,block:!1,small:!1,regular:!1,keepFocusOnInput:!1,renderMonthText:null,orientation:T.HORIZONTAL_ORIENTATION,anchorDirection:T.ANCHOR_LEFT,openDirection:T.OPEN_DOWN,horizontalMargin:0,withPortal:!1,withFullScreenPortal:!1,appendToBody:!1,disableScroll:!1,initialVisibleMonth:null,numberOfMonths:2,keepOpenOnDateSelect:!1,reopenPickerOnClearDates:!1,renderCalendarInfo:null,calendarInfoPosition:T.INFO_POSITION_BOTTOM,hideKeyboardShortcutsPanel:!1,daySize:T.DAY_SIZE,isRTL:!1,firstDayOfWeek:null,verticalHeight:null,transitionDuration:void 0,verticalSpacing:T.DEFAULT_VERTICAL_SPACING,horizontalMonthPadding:void 0,navPrev:null,navNext:null,onPrevMonthClick:function(){},onNextMonthClick:function(){},onClose:function(){},renderCalendarDay:void 0,renderDayContents:null,renderMonthElement:null,minimumNights:1,enableOutsideDays:!1,isDayBlocked:function(){return!1},isOutsideRange:function(e){return!(0,g.default)(e,(0,d.default)())},isDayHighlighted:function(){return!1},displayFormat:function(){return d.default.localeData().longDateFormat("L")},monthFormat:"MMMM YYYY",weekDayFormat:"dd",phrases:p.DateRangePickerPhrases,dayAriaLabelFormat:void 0},Y=function(e){(0,s.default)(n,e);var t=n.prototype;function n(t){var n;return(n=e.call(this,t)||this).state={dayPickerContainerStyles:{},isDateRangePickerInputFocused:!1,isDayPickerFocused:!1,showKeyboardShortcuts:!1},n.isTouchDevice=!1,n.onOutsideClick=n.onOutsideClick.bind((0,i.default)(n)),n.onDateRangePickerInputFocus=n.onDateRangePickerInputFocus.bind((0,i.default)(n)),n.onDayPickerFocus=n.onDayPickerFocus.bind((0,i.default)(n)),n.onDayPickerFocusOut=n.onDayPickerFocusOut.bind((0,i.default)(n)),n.onDayPickerBlur=n.onDayPickerBlur.bind((0,i.default)(n)),n.showKeyboardShortcutsPanel=n.showKeyboardShortcutsPanel.bind((0,i.default)(n)),n.responsivizePickerPosition=n.responsivizePickerPosition.bind((0,i.default)(n)),n.disableScroll=n.disableScroll.bind((0,i.default)(n)),n.setDayPickerContainerRef=n.setDayPickerContainerRef.bind((0,i.default)(n)),n.setContainerRef=n.setContainerRef.bind((0,i.default)(n)),n}return t[!l.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentDidMount=function(){this.removeEventListener=(0,h.addEventListener)(window,"resize",this.responsivizePickerPosition,{passive:!0}),this.responsivizePickerPosition(),this.disableScroll(),this.props.focusedInput&&this.setState({isDateRangePickerInputFocused:!0}),this.isTouchDevice=(0,_.default)()},t.componentDidUpdate=function(e){var t=this.props.focusedInput;!e.focusedInput&&t&&this.isOpened()?(this.responsivizePickerPosition(),this.disableScroll()):!e.focusedInput||t||this.isOpened()||this.enableScroll&&this.enableScroll()},t.componentWillUnmount=function(){this.removeDayPickerEventListeners(),this.removeEventListener&&this.removeEventListener(),this.enableScroll&&this.enableScroll()},t.onOutsideClick=function(e){var t=this.props,n=t.onFocusChange,r=t.onClose,a=t.startDate,o=t.endDate,i=t.appendToBody;this.isOpened()&&(i&&this.dayPickerContainer.contains(e.target)||(this.setState({isDateRangePickerInputFocused:!1,isDayPickerFocused:!1,showKeyboardShortcuts:!1}),n(null),r({startDate:a,endDate:o})))},t.onDateRangePickerInputFocus=function(e){var t=this.props,n=t.onFocusChange,r=t.readOnly,a=t.withPortal,o=t.withFullScreenPortal,i=t.keepFocusOnInput;e&&(a||o||r&&!i||this.isTouchDevice&&!i?this.onDayPickerFocus():this.onDayPickerBlur());n(e)},t.onDayPickerFocus=function(){var e=this.props,t=e.focusedInput,n=e.onFocusChange;t||n(T.START_DATE),this.setState({isDateRangePickerInputFocused:!1,isDayPickerFocused:!0,showKeyboardShortcuts:!1})},t.onDayPickerFocusOut=function(e){var t=e.relatedTarget===document.body?e.target:e.relatedTarget||e.target;this.dayPickerContainer.contains(t)||this.onOutsideClick(e)},t.onDayPickerBlur=function(){this.setState({isDateRangePickerInputFocused:!0,isDayPickerFocused:!1,showKeyboardShortcuts:!1})},t.setDayPickerContainerRef=function(e){e!==this.dayPickerContainer&&(this.dayPickerContainer&&this.removeDayPickerEventListeners(),this.dayPickerContainer=e,e&&this.addDayPickerEventListeners())},t.setContainerRef=function(e){this.container=e},t.addDayPickerEventListeners=function(){this.removeDayPickerFocusOut=(0,h.addEventListener)(this.dayPickerContainer,"focusout",this.onDayPickerFocusOut)},t.removeDayPickerEventListeners=function(){this.removeDayPickerFocusOut&&this.removeDayPickerFocusOut()},t.isOpened=function(){var e=this.props.focusedInput;return e===T.START_DATE||e===T.END_DATE},t.disableScroll=function(){var e=this.props,t=e.appendToBody,n=e.disableScroll;(t||n)&&this.isOpened()&&(this.enableScroll=(0,M.default)(this.container))},t.responsivizePickerPosition=function(){var e=this.state.dayPickerContainerStyles;if(Object.keys(e).length>0&&this.setState({dayPickerContainerStyles:{}}),this.isOpened()){var t=this.props,n=t.openDirection,r=t.anchorDirection,a=t.horizontalMargin,o=t.withPortal,i=t.withFullScreenPortal,s=t.appendToBody,l=r===T.ANCHOR_LEFT;if(!o&&!i){var d=this.dayPickerContainer.getBoundingClientRect(),c=e[r]||0,f=l?d[T.ANCHOR_RIGHT]:d[T.ANCHOR_LEFT];this.setState({dayPickerContainerStyles:(0,u.default)({},(0,y.default)(r,c,f,a),{},s&&(0,v.default)(n,r,this.container))})}}},t.showKeyboardShortcutsPanel=function(){this.setState({isDateRangePickerInputFocused:!1,isDayPickerFocused:!0,showKeyboardShortcuts:!0})},t.maybeRenderDayPickerWithPortal=function(){var e=this.props,t=e.withPortal,n=e.withFullScreenPortal,r=e.appendToBody;return this.isOpened()?t||n||r?l.default.createElement(f.Portal,null,this.renderDayPicker()):this.renderDayPicker():null},t.renderDayPicker=function(){var e=this.props,t=e.anchorDirection,n=e.openDirection,r=e.isDayBlocked,a=e.isDayHighlighted,i=e.isOutsideRange,s=e.numberOfMonths,u=e.orientation,f=e.monthFormat,h=e.renderMonthText,_=e.navPrev,m=e.navNext,p=e.onPrevMonthClick,y=e.onNextMonthClick,v=e.onDatesChange,g=e.onFocusChange,M=e.withPortal,k=e.withFullScreenPortal,D=e.daySize,S=e.enableOutsideDays,Y=e.focusedInput,P=e.startDate,O=e.startDateOffset,E=e.endDate,x=e.endDateOffset,C=e.minimumNights,j=e.keepOpenOnDateSelect,H=e.renderCalendarDay,I=e.renderDayContents,A=e.renderCalendarInfo,F=e.renderMonthElement,R=e.calendarInfoPosition,N=e.firstDayOfWeek,W=e.initialVisibleMonth,z=e.hideKeyboardShortcutsPanel,B=e.customCloseIcon,U=e.onClose,K=e.phrases,V=e.dayAriaLabelFormat,$=e.isRTL,G=e.weekDayFormat,J=e.styles,q=e.verticalHeight,Q=e.transitionDuration,Z=e.verticalSpacing,X=e.horizontalMonthPadding,ee=e.small,te=e.disabled,ne=e.theme.reactDates,re=this.state,ae=re.dayPickerContainerStyles,oe=re.isDayPickerFocused,ie=re.showKeyboardShortcuts,se=!k&&M?this.onOutsideClick:void 0,ue=W||function(){return P||E||(0,d.default)()},le=B||l.default.createElement(w.default,(0,c.css)(J.DateRangePicker_closeButton_svg)),de=(0,b.default)(ne,ee),ce=M||k;return l.default.createElement("div",(0,o.default)({ref:this.setDayPickerContainerRef},(0,c.css)(J.DateRangePicker_picker,t===T.ANCHOR_LEFT&&J.DateRangePicker_picker__directionLeft,t===T.ANCHOR_RIGHT&&J.DateRangePicker_picker__directionRight,u===T.HORIZONTAL_ORIENTATION&&J.DateRangePicker_picker__horizontal,u===T.VERTICAL_ORIENTATION&&J.DateRangePicker_picker__vertical,!ce&&n===T.OPEN_DOWN&&{top:de+Z},!ce&&n===T.OPEN_UP&&{bottom:de+Z},ce&&J.DateRangePicker_picker__portal,k&&J.DateRangePicker_picker__fullScreenPortal,$&&J.DateRangePicker_picker__rtl,ae),{onClick:se}),l.default.createElement(L.default,{orientation:u,enableOutsideDays:S,numberOfMonths:s,onPrevMonthClick:p,onNextMonthClick:y,onDatesChange:v,onFocusChange:g,onClose:U,focusedInput:Y,startDate:P,startDateOffset:O,endDate:E,endDateOffset:x,monthFormat:f,renderMonthText:h,withPortal:ce,daySize:D,initialVisibleMonth:ue,hideKeyboardShortcutsPanel:z,navPrev:_,navNext:m,minimumNights:C,isOutsideRange:i,isDayHighlighted:a,isDayBlocked:r,keepOpenOnDateSelect:j,renderCalendarDay:H,renderDayContents:I,renderCalendarInfo:A,renderMonthElement:F,calendarInfoPosition:R,isFocused:oe,showKeyboardShortcuts:ie,onBlur:this.onDayPickerBlur,phrases:K,dayAriaLabelFormat:V,isRTL:$,firstDayOfWeek:N,weekDayFormat:G,verticalHeight:q,transitionDuration:Q,disabled:te,horizontalMonthPadding:X}),k&&l.default.createElement("button",(0,o.default)({},(0,c.css)(J.DateRangePicker_closeButton),{type:"button",onClick:this.onOutsideClick,"aria-label":K.closeDatePicker}),le))},t.render=function(){var e=this.props,t=e.startDate,n=e.startDateId,r=e.startDatePlaceholderText,a=e.startDateAriaLabel,i=e.endDate,s=e.endDateId,u=e.endDatePlaceholderText,d=e.endDateAriaLabel,f=e.focusedInput,h=e.screenReaderInputMessage,_=e.showClearDates,p=e.showDefaultInputIcon,y=e.inputIconPosition,v=e.customInputIcon,b=e.customArrowIcon,g=e.customCloseIcon,M=e.disabled,k=e.required,L=e.readOnly,w=e.openDirection,S=e.phrases,Y=e.isOutsideRange,P=e.minimumNights,O=e.withPortal,E=e.withFullScreenPortal,x=e.displayFormat,C=e.reopenPickerOnClearDates,j=e.keepOpenOnDateSelect,H=e.onDatesChange,I=e.onClose,A=e.isRTL,F=e.noBorder,R=e.block,N=e.verticalSpacing,W=e.small,z=e.regular,B=e.styles,U=this.state.isDateRangePickerInputFocused,K=!O&&!E,V=N<T.FANG_HEIGHT_PX,$=l.default.createElement(D.default,{startDate:t,startDateId:n,startDatePlaceholderText:r,isStartDateFocused:f===T.START_DATE,startDateAriaLabel:a,endDate:i,endDateId:s,endDatePlaceholderText:u,isEndDateFocused:f===T.END_DATE,endDateAriaLabel:d,displayFormat:x,showClearDates:_,showCaret:!O&&!E&&!V,showDefaultInputIcon:p,inputIconPosition:y,customInputIcon:v,customArrowIcon:b,customCloseIcon:g,disabled:M,required:k,readOnly:L,openDirection:w,reopenPickerOnClearDates:C,keepOpenOnDateSelect:j,isOutsideRange:Y,minimumNights:P,withFullScreenPortal:E,onDatesChange:H,onFocusChange:this.onDateRangePickerInputFocus,onKeyDownArrowDown:this.onDayPickerFocus,onKeyDownQuestionMark:this.showKeyboardShortcutsPanel,onClose:I,phrases:S,screenReaderMessage:h,isFocused:U,isRTL:A,noBorder:F,block:R,small:W,regular:z,verticalSpacing:N},this.maybeRenderDayPickerWithPortal());return l.default.createElement("div",(0,o.default)({ref:this.setContainerRef},(0,c.css)(B.DateRangePicker,R&&B.DateRangePicker__block)),K&&l.default.createElement(m.default,{onOutsideClick:this.onOutsideClick},$),K||$)},n}(l.default.PureComponent||l.default.Component);t.PureDateRangePicker=Y,Y.propTypes={},Y.defaultProps=S;var P=(0,c.withStyles)(function(e){var t=e.reactDates,n=t.color,r=t.zIndex;return{DateRangePicker:{position:"relative",display:"inline-block"},DateRangePicker__block:{display:"block"},DateRangePicker_picker:{zIndex:r+1,backgroundColor:n.background,position:"absolute"},DateRangePicker_picker__rtl:{direction:(0,k.default)("rtl")},DateRangePicker_picker__directionLeft:{left:(0,k.default)(0)},DateRangePicker_picker__directionRight:{right:(0,k.default)(0)},DateRangePicker_picker__portal:{backgroundColor:"rgba(0, 0, 0, 0.3)",position:"fixed",top:0,left:(0,k.default)(0),height:"100%",width:"100%"},DateRangePicker_picker__fullScreenPortal:{backgroundColor:n.background},DateRangePicker_closeButton:{background:"none",border:0,color:"inherit",font:"inherit",lineHeight:"normal",overflow:"visible",cursor:"pointer",position:"absolute",top:0,right:(0,k.default)(0),padding:15,zIndex:r+2,":hover":{color:"darken(".concat(n.core.grayLighter,", 10%)"),textDecoration:"none"},":focus":{color:"darken(".concat(n.core.grayLighter,", 10%)"),textDecoration:"none"}},DateRangePicker_closeButton_svg:{height:15,width:15,fill:n.core.grayLighter}}},{pureComponent:void 0!==l.default.PureComponent})(Y);t.default=P},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=d(n(0)),o=d(n(3)),i=n(5),s=n(38),u=d(n(49)),l=d(n(293));function d(e){return e&&e.__esModule?e:{default:e}}var c={BLOCK:"block",FLEX:"flex",INLINE_BLOCK:"inline-block"},f=(0,i.forbidExtraProps)({children:o.default.node.isRequired,onOutsideClick:o.default.func.isRequired,disabled:o.default.bool,useCapture:o.default.bool,display:o.default.oneOf((0,u.default)(c))}),h={disabled:!1,useCapture:!0,display:c.BLOCK},_=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),a=0;a<n;a++)r[a]=arguments[a];var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o.onMouseDown=o.onMouseDown.bind(o),o.onMouseUp=o.onMouseUp.bind(o),o.setChildNodeRef=o.setChildNodeRef.bind(o),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a["default"].Component),r(t,[{key:"componentDidMount",value:function(){var e=this.props,t=e.disabled,n=e.useCapture;t||this.addMouseDownEventListener(n)}},{key:"componentWillReceiveProps",value:function(e){var t=e.disabled,n=e.useCapture;this.props.disabled!==t&&(t?this.removeEventListeners():this.addMouseDownEventListener(n))}},{key:"componentWillUnmount",value:function(){this.removeEventListeners()}},{key:"onMouseDown",value:function(e){var t=this.props.useCapture;this.childNode&&(0,l.default)(this.childNode,e.target)||(this.removeMouseUp&&(this.removeMouseUp(),this.removeMouseUp=null),this.removeMouseUp=(0,s.addEventListener)(document,"mouseup",this.onMouseUp,{capture:t}))}},{key:"onMouseUp",value:function(e){var t=this.props.onOutsideClick,n=this.childNode&&(0,l.default)(this.childNode,e.target);this.removeMouseUp&&(this.removeMouseUp(),this.removeMouseUp=null),n||t(e)}},{key:"setChildNodeRef",value:function(e){this.childNode=e}},{key:"addMouseDownEventListener",value:function(e){this.removeMouseDown=(0,s.addEventListener)(document,"mousedown",this.onMouseDown,{capture:e})}},{key:"removeEventListeners",value:function(){this.removeMouseDown&&this.removeMouseDown(),this.removeMouseUp&&this.removeMouseUp()}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.display;return a.default.createElement("div",{ref:this.setChildNodeRef,style:n!==c.BLOCK&&(0,u.default)(c).includes(n)?{display:n}:void 0},t)}}]),t}();t.default=_,_.propTypes=f,_.defaultProps=h},function(e,t,n){"use strict";e.exports=n(201)},function(e,t,n){"use strict";var r=n(23),a=n(284),o=n(46),i=n(40),s=i("%TypeError%"),u=i("%SyntaxError%"),l=i("%Array%"),d=i("%String%"),c=i("%Object%"),f=i("%Number%"),h=i("%Symbol%",!0),_=i("%RegExp%"),m=!!h,p=n(204),y=n(205),v=n(206),b=f.MAX_SAFE_INTEGER||Math.pow(2,53)-1,g=n(51),M=n(207),k=n(208),D=n(288),L=parseInt,w=n(19),T=w.call(Function.call,l.prototype.slice),S=w.call(Function.call,d.prototype.slice),Y=w.call(Function.call,_.prototype.test,/^0b[01]+$/i),P=w.call(Function.call,_.prototype.test,/^0o[0-7]+$/i),O=w.call(Function.call,_.prototype.exec),E=new _("["+["","​","￾"].join("")+"]","g"),x=w.call(Function.call,_.prototype.test,E),C=w.call(Function.call,_.prototype.test,/^[-+]0x[0-9a-f]+$/i),j=w.call(Function.call,d.prototype.charCodeAt),H=w.call(Function.call,Object.prototype.toString),I=w.call(Function.call,i("%NumberPrototype%").valueOf),A=w.call(Function.call,i("%BooleanPrototype%").valueOf),F=w.call(Function.call,i("%StringPrototype%").valueOf),R=w.call(Function.call,i("%DatePrototype%").valueOf),N=Math.floor,W=Math.abs,z=Object.create,B=c.getOwnPropertyDescriptor,U=c.isExtensible,K=c.defineProperty,V=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),$=new RegExp("(^["+V+"]+)|(["+V+"]+$)","g"),G=w.call(Function.call,d.prototype.replace),J=n(289),q=n(291),Q=g(g({},J),{Call:function(e,t){var n=arguments.length>2?arguments[2]:[];if(!this.IsCallable(e))throw new s(e+" is not a function");return e.apply(t,n)},ToPrimitive:a,ToNumber:function(e){var t=D(e)?e:a(e,f);if("symbol"==typeof t)throw new s("Cannot convert a Symbol value to a number");if("string"==typeof t){if(Y(t))return this.ToNumber(L(S(t,2),2));if(P(t))return this.ToNumber(L(S(t,2),8));if(x(t)||C(t))return NaN;var n=function(e){return G(e,$,"")}(t);if(n!==t)return this.ToNumber(n)}return f(t)},ToInt16:function(e){var t=this.ToUint16(e);return t>=32768?t-65536:t},ToInt8:function(e){var t=this.ToUint8(e);return t>=128?t-256:t},ToUint8:function(e){var t=this.ToNumber(e);if(y(t)||0===t||!v(t))return 0;var n=M(t)*N(W(t));return k(n,256)},ToUint8Clamp:function(e){var t=this.ToNumber(e);if(y(t)||t<=0)return 0;if(t>=255)return 255;var n=N(e);return n+.5<t?n+1:t<n+.5?n:n%2!=0?n+1:n},ToString:function(e){if("symbol"==typeof e)throw new s("Cannot convert a Symbol value to a string");return d(e)},ToObject:function(e){return this.RequireObjectCoercible(e),c(e)},ToPropertyKey:function(e){var t=this.ToPrimitive(e,d);return"symbol"==typeof t?t:this.ToString(t)},ToLength:function(e){var t=this.ToInteger(e);return t<=0?0:t>b?b:t},CanonicalNumericIndexString:function(e){if("[object String]"!==H(e))throw new s("must be a string");if("-0"===e)return-0;var t=this.ToNumber(e);return this.SameValue(this.ToString(t),e)?t:void 0},RequireObjectCoercible:J.CheckObjectCoercible,IsArray:l.isArray||function(e){return"[object Array]"===H(e)},IsConstructor:function(e){return"function"==typeof e&&!!e.prototype},IsExtensible:Object.preventExtensions?function(e){return!D(e)&&U(e)}:function(e){return!0},IsInteger:function(e){if("number"!=typeof e||y(e)||!v(e))return!1;var t=W(e);return N(t)===t},IsPropertyKey:function(e){return"string"==typeof e||"symbol"==typeof e},IsRegExp:function(e){if(!e||"object"!=typeof e)return!1;if(m){var t=e[h.match];if(void 0!==t)return J.ToBoolean(t)}return q(e)},SameValueZero:function(e,t){return e===t||y(e)&&y(t)},GetV:function(e,t){if(!this.IsPropertyKey(t))throw new s("Assertion failed: IsPropertyKey(P) is not true");return this.ToObject(e)[t]},GetMethod:function(e,t){if(!this.IsPropertyKey(t))throw new s("Assertion failed: IsPropertyKey(P) is not true");var n=this.GetV(e,t);if(null!=n){if(!this.IsCallable(n))throw new s(t+"is not a function");return n}},Get:function(e,t){if("Object"!==this.Type(e))throw new s("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(t))throw new s("Assertion failed: IsPropertyKey(P) is not true");return e[t]},Type:function(e){return"symbol"==typeof e?"Symbol":J.Type(e)},SpeciesConstructor:function(e,t){if("Object"!==this.Type(e))throw new s("Assertion failed: Type(O) is not Object");var n=e.constructor;if(void 0===n)return t;if("Object"!==this.Type(n))throw new s("O.constructor is not an Object");var r=m&&h.species?n[h.species]:void 0;if(null==r)return t;if(this.IsConstructor(r))return r;throw new s("no constructor found")},CompletePropertyDescriptor:function(e){return p(this,"Property Descriptor","Desc",e),this.IsGenericDescriptor(e)||this.IsDataDescriptor(e)?(r(e,"[[Value]]")||(e["[[Value]]"]=void 0),r(e,"[[Writable]]")||(e["[[Writable]]"]=!1)):(r(e,"[[Get]]")||(e["[[Get]]"]=void 0),r(e,"[[Set]]")||(e["[[Set]]"]=void 0)),r(e,"[[Enumerable]]")||(e["[[Enumerable]]"]=!1),r(e,"[[Configurable]]")||(e["[[Configurable]]"]=!1),e},Set:function(e,t,n,r){if("Object"!==this.Type(e))throw new s("O must be an Object");if(!this.IsPropertyKey(t))throw new s("P must be a Property Key");if("Boolean"!==this.Type(r))throw new s("Throw must be a Boolean");if(r)return e[t]=n,!0;try{e[t]=n}catch(e){return!1}},HasOwnProperty:function(e,t){if("Object"!==this.Type(e))throw new s("O must be an Object");if(!this.IsPropertyKey(t))throw new s("P must be a Property Key");return r(e,t)},HasProperty:function(e,t){if("Object"!==this.Type(e))throw new s("O must be an Object");if(!this.IsPropertyKey(t))throw new s("P must be a Property Key");return t in e},IsConcatSpreadable:function(e){if("Object"!==this.Type(e))return!1;if(m&&"symbol"==typeof h.isConcatSpreadable){var t=this.Get(e,Symbol.isConcatSpreadable);if(void 0!==t)return this.ToBoolean(t)}return this.IsArray(e)},Invoke:function(e,t){if(!this.IsPropertyKey(t))throw new s("P must be a Property Key");var n=T(arguments,2),r=this.GetV(e,t);return this.Call(r,e,n)},GetIterator:function(e,t){if(!m)throw new SyntaxError("ES.GetIterator depends on native iterator support.");var n=t;arguments.length<2&&(n=this.GetMethod(e,h.iterator));var r=this.Call(n,e);if("Object"!==this.Type(r))throw new s("iterator must return an object");return r},IteratorNext:function(e,t){var n=this.Invoke(e,"next",arguments.length<2?[]:[t]);if("Object"!==this.Type(n))throw new s("iterator next must return an object");return n},IteratorComplete:function(e){if("Object"!==this.Type(e))throw new s("Assertion failed: Type(iterResult) is not Object");return this.ToBoolean(this.Get(e,"done"))},IteratorValue:function(e){if("Object"!==this.Type(e))throw new s("Assertion failed: Type(iterResult) is not Object");return this.Get(e,"value")},IteratorStep:function(e){var t=this.IteratorNext(e);return!0!==this.IteratorComplete(t)&&t},IteratorClose:function(e,t){if("Object"!==this.Type(e))throw new s("Assertion failed: Type(iterator) is not Object");if(!this.IsCallable(t))throw new s("Assertion failed: completion is not a thunk for a Completion Record");var n,r=t,a=this.GetMethod(e,"return");if(void 0===a)return r();try{var o=this.Call(a,e,[])}catch(e){throw n=r(),r=null,e}if(n=r(),r=null,"Object"!==this.Type(o))throw new s("iterator .return must return an object");return n},CreateIterResultObject:function(e,t){if("Boolean"!==this.Type(t))throw new s("Assertion failed: Type(done) is not Boolean");return{value:e,done:t}},RegExpExec:function(e,t){if("Object"!==this.Type(e))throw new s("R must be an Object");if("String"!==this.Type(t))throw new s("S must be a String");var n=this.Get(e,"exec");if(this.IsCallable(n)){var r=this.Call(n,e,[t]);if(null===r||"Object"===this.Type(r))return r;throw new s('"exec" method must return `null` or an Object')}return O(e,t)},ArraySpeciesCreate:function(e,t){if(!this.IsInteger(t)||t<0)throw new s("Assertion failed: length must be an integer >= 0");var n,r=0===t?0:t;if(this.IsArray(e)&&(n=this.Get(e,"constructor"),"Object"===this.Type(n)&&m&&h.species&&null===(n=this.Get(n,h.species))&&(n=void 0)),void 0===n)return l(r);if(!this.IsConstructor(n))throw new s("C must be a constructor");return new n(r)},CreateDataProperty:function(e,t,n){if("Object"!==this.Type(e))throw new s("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(t))throw new s("Assertion failed: IsPropertyKey(P) is not true");var r=B(e,t),a=r||"function"!=typeof U||U(e);return!(!(!r||r.writable&&r.configurable)||!a)&&(K(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}),!0)},CreateDataPropertyOrThrow:function(e,t,n){if("Object"!==this.Type(e))throw new s("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(t))throw new s("Assertion failed: IsPropertyKey(P) is not true");var r=this.CreateDataProperty(e,t,n);if(!r)throw new s("unable to create data property");return r},ObjectCreate:function(e,t){if(null!==e&&"Object"!==this.Type(e))throw new s("Assertion failed: proto must be null or an object");var n=arguments.length<2?[]:t;if(n.length>0)throw new u("es-abstract does not yet support internal slots");if(null===e&&!z)throw new u("native Object.create support is required to create null objects");return z(e)},AdvanceStringIndex:function(e,t,n){if("String"!==this.Type(e))throw new s("S must be a String");if(!this.IsInteger(t)||t<0||t>b)throw new s("Assertion failed: length must be an integer >= 0 and <= 2**53");if("Boolean"!==this.Type(n))throw new s("Assertion failed: unicode must be a Boolean");if(!n)return t+1;if(t+1>=e.length)return t+1;var r=j(e,t);if(r<55296||r>56319)return t+1;var a=j(e,t+1);return a<56320||a>57343?t+1:t+2},CreateMethodProperty:function(e,t,n){if("Object"!==this.Type(e))throw new s("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(t))throw new s("Assertion failed: IsPropertyKey(P) is not true");return!!K(e,t,{configurable:!0,enumerable:!1,value:n,writable:!0})},DefinePropertyOrThrow:function(e,t,n){if("Object"!==this.Type(e))throw new s("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(t))throw new s("Assertion failed: IsPropertyKey(P) is not true");return!!K(e,t,n)},DeletePropertyOrThrow:function(e,t){if("Object"!==this.Type(e))throw new s("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(t))throw new s("Assertion failed: IsPropertyKey(P) is not true");var n=delete e[t];if(!n)throw new TypeError("Attempt to delete property failed.");return n},EnumerableOwnNames:function(e){if("Object"!==this.Type(e))throw new s("Assertion failed: Type(O) is not Object");return o(e)},thisNumberValue:function(e){return"Number"===this.Type(e)?e:I(e)},thisBooleanValue:function(e){return"Boolean"===this.Type(e)?e:A(e)},thisStringValue:function(e){return"String"===this.Type(e)?e:F(e)},thisTimeValue:function(e){return R(e)}});delete Q.CheckObjectCoercible,e.exports=Q},function(e,t,n){"use strict";e.exports=n(285)},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,a=n(202),o=n(50),i=n(286),s=n(203),u=function(e,t){if(null==e)throw new TypeError("Cannot call method on "+e);if("string"!=typeof t||"number"!==t&&"string"!==t)throw new TypeError('hint must be "string" or "number"');var n,r,i,s="string"===t?["toString","valueOf"]:["valueOf","toString"];for(i=0;i<s.length;++i)if(n=e[s[i]],o(n)&&(r=n.call(e),a(r)))return r;throw new TypeError("No default value")},l=function(e,t){var n=e[t];if(null!=n){if(!o(n))throw new TypeError(n+" returned for property "+t+" of object "+e+" is not a function");return n}};e.exports=function(e){if(a(e))return e;var t,n="default";if(arguments.length>1&&(arguments[1]===String?n="string":arguments[1]===Number&&(n="number")),r&&(Symbol.toPrimitive?t=l(e,Symbol.toPrimitive):s(e)&&(t=Symbol.prototype.valueOf)),void 0!==t){var o=t.call(e,n);if(a(o))return o;throw new TypeError("unable to convert exotic object to primitive")}return"default"===n&&(i(e)||s(e))&&(n="string"),u(e,"default"===n?"number":n)}},function(e,t,n){"use strict";var r=Date.prototype.getDay,a=Object.prototype.toString,o="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;e.exports=function(e){return"object"==typeof e&&null!==e&&(o?function(e){try{return r.call(e),!0}catch(e){return!1}}(e):"[object Date]"===a.call(e))}},function(e,t,n){"use strict";(function(t){var r=t.Symbol,a=n(189);e.exports=function(){return"function"==typeof r&&("function"==typeof Symbol&&("symbol"==typeof r("foo")&&("symbol"==typeof Symbol("bar")&&a())))}}).call(this,n(22))},function(e,t){e.exports=function(e){return null===e||"function"!=typeof e&&"object"!=typeof e}},function(e,t,n){"use strict";var r=n(40),a=r("%Object%"),o=r("%TypeError%"),i=r("%String%"),s=n(204),u=n(205),l=n(206),d=n(207),c=n(208),f=n(50),h=n(290),_=n(23),m={ToPrimitive:h,ToBoolean:function(e){return!!e},ToNumber:function(e){return+e},ToInteger:function(e){var t=this.ToNumber(e);return u(t)?0:0!==t&&l(t)?d(t)*Math.floor(Math.abs(t)):t},ToInt32:function(e){return this.ToNumber(e)>>0},ToUint32:function(e){return this.ToNumber(e)>>>0},ToUint16:function(e){var t=this.ToNumber(e);if(u(t)||0===t||!l(t))return 0;var n=d(t)*Math.floor(Math.abs(t));return c(n,65536)},ToString:function(e){return i(e)},ToObject:function(e){return this.CheckObjectCoercible(e),a(e)},CheckObjectCoercible:function(e,t){if(null==e)throw new o(t||"Cannot call method on "+e);return e},IsCallable:f,SameValue:function(e,t){return e===t?0!==e||1/e==1/t:u(e)&&u(t)},Type:function(e){return null===e?"Null":void 0===e?"Undefined":"function"==typeof e||"object"==typeof e?"Object":"number"==typeof e?"Number":"boolean"==typeof e?"Boolean":"string"==typeof e?"String":void 0},IsPropertyDescriptor:function(e){if("Object"!==this.Type(e))return!1;var t={"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Get]]":!0,"[[Set]]":!0,"[[Value]]":!0,"[[Writable]]":!0};for(var n in e)if(_(e,n)&&!t[n])return!1;var r=_(e,"[[Value]]"),a=_(e,"[[Get]]")||_(e,"[[Set]]");if(r&&a)throw new o("Property Descriptors may not be both accessor and data descriptors");return!0},IsAccessorDescriptor:function(e){return void 0!==e&&(s(this,"Property Descriptor","Desc",e),!(!_(e,"[[Get]]")&&!_(e,"[[Set]]")))},IsDataDescriptor:function(e){return void 0!==e&&(s(this,"Property Descriptor","Desc",e),!(!_(e,"[[Value]]")&&!_(e,"[[Writable]]")))},IsGenericDescriptor:function(e){return void 0!==e&&(s(this,"Property Descriptor","Desc",e),!this.IsAccessorDescriptor(e)&&!this.IsDataDescriptor(e))},FromPropertyDescriptor:function(e){if(void 0===e)return e;if(s(this,"Property Descriptor","Desc",e),this.IsDataDescriptor(e))return{value:e["[[Value]]"],writable:!!e["[[Writable]]"],enumerable:!!e["[[Enumerable]]"],configurable:!!e["[[Configurable]]"]};if(this.IsAccessorDescriptor(e))return{get:e["[[Get]]"],set:e["[[Set]]"],enumerable:!!e["[[Enumerable]]"],configurable:!!e["[[Configurable]]"]};throw new o("FromPropertyDescriptor must be called with a fully populated Property Descriptor")},ToPropertyDescriptor:function(e){if("Object"!==this.Type(e))throw new o("ToPropertyDescriptor requires an object");var t={};if(_(e,"enumerable")&&(t["[[Enumerable]]"]=this.ToBoolean(e.enumerable)),_(e,"configurable")&&(t["[[Configurable]]"]=this.ToBoolean(e.configurable)),_(e,"value")&&(t["[[Value]]"]=e.value),_(e,"writable")&&(t["[[Writable]]"]=this.ToBoolean(e.writable)),_(e,"get")){var n=e.get;if(void 0!==n&&!this.IsCallable(n))throw new TypeError("getter must be a function");t["[[Get]]"]=n}if(_(e,"set")){var r=e.set;if(void 0!==r&&!this.IsCallable(r))throw new o("setter must be a function");t["[[Set]]"]=r}if((_(t,"[[Get]]")||_(t,"[[Set]]"))&&(_(t,"[[Value]]")||_(t,"[[Writable]]")))throw new o("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");return t}};e.exports=m},function(e,t,n){"use strict";var r=Object.prototype.toString,a=n(202),o=n(50),i=function(e){var t;if((t=arguments.length>1?arguments[1]:"[object Date]"===r.call(e)?String:Number)===String||t===Number){var n,i,s=t===String?["toString","valueOf"]:["valueOf","toString"];for(i=0;i<s.length;++i)if(o(e[s[i]])&&(n=e[s[i]](),a(n)))return n;throw new TypeError("No default value")}throw new TypeError("invalid [[DefaultValue]] hint supplied")};e.exports=function(e){return a(e)?e:arguments.length>1?i(e,arguments[1]):i(e)}},function(e,t,n){"use strict";var r=n(23),a=RegExp.prototype.exec,o=Object.getOwnPropertyDescriptor,i=Object.prototype.toString,s="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;e.exports=function(e){if(!e||"object"!=typeof e)return!1;if(!s)return"[object RegExp]"===i.call(e);var t=o(e,"lastIndex");return!(!t||!r(t,"value"))&&function(e){try{var t=e.lastIndex;return e.lastIndex=0,a.call(e),!0}catch(e){return!1}finally{e.lastIndex=t}}(e)}},function(e,t,n){"use strict";var r=n(209),a=n(16);e.exports=function(){var e=r();return a(Object,{values:e},{values:function(){return Object.values!==e}}),e}},function(e,t,n){"use strict";var r=n(16),a=n(210),o=n(211),i=o(),s=function(e,t){return i.apply(e,[t])};r(s,{getPolyfill:o,implementation:a,shim:n(294)}),e.exports=s},function(e,t,n){"use strict";var r=n(16),a=n(211);e.exports=function(){var e=a();return"undefined"!=typeof document&&(r(document,{contains:e},{contains:function(){return document.contains!==e}}),"undefined"!=typeof Element&&r(Element.prototype,{contains:e},{contains:function(){return Element.prototype.contains!==e}})),e}},function(e,t,n){var r=n(53),a=n(296),o=n(298),i="Expected a function",s=Math.max,u=Math.min;e.exports=function(e,t,n){var l,d,c,f,h,_,m=0,p=!1,y=!1,v=!0;if("function"!=typeof e)throw new TypeError(i);function b(t){var n=l,r=d;return l=d=void 0,m=t,f=e.apply(r,n)}function g(e){var n=e-_;return void 0===_||n>=t||n<0||y&&e-m>=c}function M(){var e=a();if(g(e))return k(e);h=setTimeout(M,function(e){var n=t-(e-_);return y?u(n,c-(e-m)):n}(e))}function k(e){return h=void 0,v&&l?b(e):(l=d=void 0,f)}function D(){var e=a(),n=g(e);if(l=arguments,d=this,_=e,n){if(void 0===h)return function(e){return m=e,h=setTimeout(M,t),p?b(e):f}(_);if(y)return clearTimeout(h),h=setTimeout(M,t),b(_)}return void 0===h&&(h=setTimeout(M,t)),f}return t=o(t)||0,r(n)&&(p=!!n.leading,c=(y="maxWait"in n)?s(o(n.maxWait)||0,t):c,v="trailing"in n?!!n.trailing:v),D.cancel=function(){void 0!==h&&clearTimeout(h),m=0,l=_=d=h=void 0},D.flush=function(){return void 0===h?f:k(a())},D}},function(e,t,n){var r=n(223);e.exports=function(){return r.Date.now()}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(22))},function(e,t,n){var r=n(53),a=n(299),o=NaN,i=/^\s+|\s+$/g,s=/^[-+]0x[0-9a-f]+$/i,u=/^0b[01]+$/i,l=/^0o[0-7]+$/i,d=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(a(e))return o;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(i,"");var n=u.test(e);return n||l.test(e)?d(e.slice(2),n?2:8):s.test(e)?o:+e}},function(e,t,n){var r=n(300),a=n(303),o="[object Symbol]";e.exports=function(e){return"symbol"==typeof e||a(e)&&r(e)==o}},function(e,t,n){var r=n(224),a=n(301),o=n(302),i="[object Null]",s="[object Undefined]",u=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?s:i:u&&u in Object(e)?a(e):o(e)}},function(e,t,n){var r=n(224),a=Object.prototype,o=a.hasOwnProperty,i=a.toString,s=r?r.toStringTag:void 0;e.exports=function(e){var t=o.call(e,s),n=e[s];try{e[s]=void 0;var r=!0}catch(e){}var a=i.call(e);return r&&(t?e[s]=n:delete e[s]),a}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(e,t){var n=[],r=!0,a=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(a)throw o}}return n}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r;return e?n(e(t.clone())):t};var r=function(e){return e}},function(e,t,n){"use strict";var r,a;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e!==r&&(r=e,a=e.clone().subtract(1,"month"));return a}},function(e,t){e.exports=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(11)),o=r(n(47)),i=(r(n(6)),r(n(0))),s=(r(n(3)),n(5),n(13)),u=n(7),l=(r(n(9)),r(n(18))),d=r(n(226)),c=r(n(225)),f=r(n(311)),h=r(n(312)),_=(r(n(26)),n(4)),m={disablePrev:!1,disableNext:!1,navPrev:null,navNext:null,orientation:_.HORIZONTAL_ORIENTATION,onPrevMonthClick:function(){},onNextMonthClick:function(){},phrases:u.DayPickerNavigationPhrases,isRTL:!1};function p(e){var t=e.disablePrev,n=e.disableNext,r=e.navPrev,u=e.navNext,l=e.onPrevMonthClick,m=e.onNextMonthClick,p=e.orientation,y=e.phrases,v=e.isRTL,b=e.styles,g=p===_.HORIZONTAL_ORIENTATION,M=p!==_.HORIZONTAL_ORIENTATION,k=p===_.VERTICAL_SCROLLABLE,D=r,L=u,w=!1,T=!1,S={},Y={};if(!D){S={tabIndex:"0"},w=!0;var P=M?f.default:d.default;v&&!M&&(P=c.default),D=i.default.createElement(P,(0,s.css)(g&&b.DayPickerNavigation_svg__horizontal,M&&b.DayPickerNavigation_svg__vertical,t&&b.DayPickerNavigation_svg__disabled))}if(!L){Y={tabIndex:"0"},T=!0;var O=M?h.default:c.default;v&&!M&&(O=d.default),L=i.default.createElement(O,(0,s.css)(g&&b.DayPickerNavigation_svg__horizontal,M&&b.DayPickerNavigation_svg__vertical,n&&b.DayPickerNavigation_svg__disabled))}var E=k?T:T||w;return i.default.createElement("div",s.css.apply(void 0,[b.DayPickerNavigation,g&&b.DayPickerNavigation__horizontal].concat((0,o.default)(M?[b.DayPickerNavigation__vertical,E&&b.DayPickerNavigation__verticalDefault]:[]),(0,o.default)(k?[b.DayPickerNavigation__verticalScrollable,E&&b.DayPickerNavigation__verticalScrollableDefault]:[]))),!k&&i.default.createElement("div",(0,a.default)({role:"button"},S,s.css.apply(void 0,[b.DayPickerNavigation_button,w&&b.DayPickerNavigation_button__default,t&&b.DayPickerNavigation_button__disabled].concat((0,o.default)(g?[b.DayPickerNavigation_button__horizontal].concat((0,o.default)(w?[b.DayPickerNavigation_button__horizontalDefault,!v&&b.DayPickerNavigation_leftButton__horizontalDefault,v&&b.DayPickerNavigation_rightButton__horizontalDefault]:[])):[]),(0,o.default)(M?[b.DayPickerNavigation_button__vertical].concat((0,o.default)(w?[b.DayPickerNavigation_button__verticalDefault,b.DayPickerNavigation_prevButton__verticalDefault]:[])):[]))),{"aria-disabled":!!t||void 0,"aria-label":y.jumpToPrevMonth,onClick:t?void 0:l,onKeyUp:t?void 0:function(e){var t=e.key;"Enter"!==t&&" "!==t||l(e)},onMouseUp:t?void 0:function(e){e.currentTarget.blur()}}),D),i.default.createElement("div",(0,a.default)({role:"button"},Y,s.css.apply(void 0,[b.DayPickerNavigation_button,T&&b.DayPickerNavigation_button__default,n&&b.DayPickerNavigation_button__disabled].concat((0,o.default)(g?[b.DayPickerNavigation_button__horizontal].concat((0,o.default)(T?[b.DayPickerNavigation_button__horizontalDefault,v&&b.DayPickerNavigation_leftButton__horizontalDefault,!v&&b.DayPickerNavigation_rightButton__horizontalDefault]:[])):[]),(0,o.default)(M?[b.DayPickerNavigation_button__vertical,b.DayPickerNavigation_nextButton__vertical].concat((0,o.default)(T?[b.DayPickerNavigation_button__verticalDefault,b.DayPickerNavigation_nextButton__verticalDefault,k&&b.DayPickerNavigation_nextButton__verticalScrollableDefault]:[])):[]))),{"aria-disabled":!!n||void 0,"aria-label":y.jumpToNextMonth,onClick:n?void 0:m,onKeyUp:n?void 0:function(e){var t=e.key;"Enter"!==t&&" "!==t||m(e)},onMouseUp:n?void 0:function(e){e.currentTarget.blur()}}),L))}p.propTypes={},p.defaultProps=m;var y=(0,s.withStyles)(function(e){var t=e.reactDates,n=t.color;return{DayPickerNavigation:{position:"relative",zIndex:t.zIndex+2},DayPickerNavigation__horizontal:{height:0},DayPickerNavigation__vertical:{},DayPickerNavigation__verticalScrollable:{},DayPickerNavigation__verticalDefault:{position:"absolute",width:"100%",height:52,bottom:0,left:(0,l.default)(0)},DayPickerNavigation__verticalScrollableDefault:{position:"relative"},DayPickerNavigation_button:{cursor:"pointer",userSelect:"none",border:0,padding:0,margin:0},DayPickerNavigation_button__default:{border:"1px solid ".concat(n.core.borderLight),backgroundColor:n.background,color:n.placeholderText,":focus":{border:"1px solid ".concat(n.core.borderMedium)},":hover":{border:"1px solid ".concat(n.core.borderMedium)},":active":{background:n.backgroundDark}},DayPickerNavigation_button__disabled:{cursor:"default",border:"1px solid ".concat(n.disabled),":focus":{border:"1px solid ".concat(n.disabled)},":hover":{border:"1px solid ".concat(n.disabled)},":active":{background:"none"}},DayPickerNavigation_button__horizontal:{},DayPickerNavigation_button__horizontalDefault:{position:"absolute",top:18,lineHeight:.78,borderRadius:3,padding:"6px 9px"},DayPickerNavigation_leftButton__horizontalDefault:{left:(0,l.default)(22)},DayPickerNavigation_rightButton__horizontalDefault:{right:(0,l.default)(22)},DayPickerNavigation_button__vertical:{},DayPickerNavigation_button__verticalDefault:{padding:5,background:n.background,boxShadow:(0,l.default)("0 0 5px 2px rgba(0, 0, 0, 0.1)"),position:"relative",display:"inline-block",textAlign:"center",height:"100%",width:"50%"},DayPickerNavigation_prevButton__verticalDefault:{},DayPickerNavigation_nextButton__verticalDefault:{borderLeft:(0,l.default)(0)},DayPickerNavigation_nextButton__verticalScrollableDefault:{width:"100%"},DayPickerNavigation_svg__horizontal:{height:19,width:19,fill:n.core.grayLight,display:"block"},DayPickerNavigation_svg__vertical:{height:42,width:42,fill:n.text},DayPickerNavigation_svg__disabled:{fill:n.disabled}}},{pureComponent:void 0!==i.default.PureComponent})(p);t.default=y},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=function(e){return a.default.createElement("svg",e,a.default.createElement("path",{d:"M32 713l453-453c11-11 21-11 32 0l453 453c5 5 7 10 7 16 0 13-10 23-22 23-7 0-12-2-16-7L501 309 64 745c-4 5-9 7-15 7-7 0-12-2-17-7-9-11-9-21 0-32z"}))};o.defaultProps={focusable:"false",viewBox:"0 0 1000 1000"};var i=o;t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=function(e){return a.default.createElement("svg",e,a.default.createElement("path",{d:"M968 289L514 741c-11 11-21 11-32 0L29 289c-4-5-6-11-6-16 0-13 10-23 23-23 6 0 11 2 15 7l437 436 438-436c4-5 9-7 16-7 6 0 11 2 16 7 9 10 9 21 0 32z"}))};o.defaultProps={focusable:"false",viewBox:"0 0 1000 1000"};var i=o;t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.BOTTOM_RIGHT=t.TOP_RIGHT=t.TOP_LEFT=void 0;var a=r(n(10)),o=r(n(11)),i=r(n(12)),s=r(n(8)),u=(r(n(6)),r(n(0))),l=(r(n(3)),n(5),n(13)),d=n(7),c=(r(n(9)),r(n(314))),f=r(n(36));t.TOP_LEFT="top-left";t.TOP_RIGHT="top-right";t.BOTTOM_RIGHT="bottom-right";var h={block:!1,buttonLocation:"bottom-right",showKeyboardShortcutsPanel:!1,openKeyboardShortcutsPanel:function(){},closeKeyboardShortcutsPanel:function(){},phrases:d.DayPickerKeyboardShortcutsPhrases,renderKeyboardShortcutsButton:void 0};function _(e){return[{unicode:"↵",label:e.enterKey,action:e.selectFocusedDate},{unicode:"←/→",label:e.leftArrowRightArrow,action:e.moveFocusByOneDay},{unicode:"↑/↓",label:e.upArrowDownArrow,action:e.moveFocusByOneWeek},{unicode:"PgUp/PgDn",label:e.pageUpPageDown,action:e.moveFocusByOneMonth},{unicode:"Home/End",label:e.homeEnd,action:e.moveFocustoStartAndEndOfWeek},{unicode:"Esc",label:e.escape,action:e.returnFocusToInput},{unicode:"?",label:e.questionMark,action:e.openThisPanel}]}var m=function(e){(0,s.default)(n,e);var t=n.prototype;function n(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];var o=(t=e.call.apply(e,[this].concat(r))||this).props.phrases;return t.keyboardShortcuts=_(o),t.onShowKeyboardShortcutsButtonClick=t.onShowKeyboardShortcutsButtonClick.bind((0,i.default)(t)),t.setShowKeyboardShortcutsButtonRef=t.setShowKeyboardShortcutsButtonRef.bind((0,i.default)(t)),t.setHideKeyboardShortcutsButtonRef=t.setHideKeyboardShortcutsButtonRef.bind((0,i.default)(t)),t.handleFocus=t.handleFocus.bind((0,i.default)(t)),t.onKeyDown=t.onKeyDown.bind((0,i.default)(t)),t}return t[!u.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentWillReceiveProps=function(e){var t=this.props.phrases;e.phrases!==t&&(this.keyboardShortcuts=_(e.phrases))},t.componentDidUpdate=function(){this.handleFocus()},t.onKeyDown=function(e){e.stopPropagation();var t=this.props.closeKeyboardShortcutsPanel;switch(e.key){case"Escape":t();break;case"ArrowUp":case"ArrowDown":break;case"Tab":case"Home":case"End":case"PageUp":case"PageDown":case"ArrowLeft":case"ArrowRight":e.preventDefault()}},t.onShowKeyboardShortcutsButtonClick=function(){var e=this;(0,this.props.openKeyboardShortcutsPanel)(function(){e.showKeyboardShortcutsButton.focus()})},t.setShowKeyboardShortcutsButtonRef=function(e){this.showKeyboardShortcutsButton=e},t.setHideKeyboardShortcutsButtonRef=function(e){this.hideKeyboardShortcutsButton=e},t.handleFocus=function(){this.hideKeyboardShortcutsButton&&this.hideKeyboardShortcutsButton.focus()},t.render=function(){var e=this.props,t=e.block,n=e.buttonLocation,r=e.showKeyboardShortcutsPanel,a=e.closeKeyboardShortcutsPanel,i=e.styles,s=e.phrases,d=e.renderKeyboardShortcutsButton,h=r?s.hideKeyboardShortcutsPanel:s.showKeyboardShortcutsPanel,_="bottom-right"===n,m="top-right"===n,p="top-left"===n;return u.default.createElement("div",null,d&&d({ref:this.setShowKeyboardShortcutsButtonRef,onClick:this.onShowKeyboardShortcutsButtonClick,ariaLabel:h}),d||u.default.createElement("button",(0,o.default)({ref:this.setShowKeyboardShortcutsButtonRef},(0,l.css)(i.DayPickerKeyboardShortcuts_buttonReset,i.DayPickerKeyboardShortcuts_show,_&&i.DayPickerKeyboardShortcuts_show__bottomRight,m&&i.DayPickerKeyboardShortcuts_show__topRight,p&&i.DayPickerKeyboardShortcuts_show__topLeft),{type:"button","aria-label":h,onClick:this.onShowKeyboardShortcutsButtonClick,onMouseUp:function(e){e.currentTarget.blur()}}),u.default.createElement("span",(0,l.css)(i.DayPickerKeyboardShortcuts_showSpan,_&&i.DayPickerKeyboardShortcuts_showSpan__bottomRight,m&&i.DayPickerKeyboardShortcuts_showSpan__topRight,p&&i.DayPickerKeyboardShortcuts_showSpan__topLeft),"?")),r&&u.default.createElement("div",(0,o.default)({},(0,l.css)(i.DayPickerKeyboardShortcuts_panel),{role:"dialog","aria-labelledby":"DayPickerKeyboardShortcuts_title","aria-describedby":"DayPickerKeyboardShortcuts_description"}),u.default.createElement("div",(0,o.default)({},(0,l.css)(i.DayPickerKeyboardShortcuts_title),{id:"DayPickerKeyboardShortcuts_title"}),s.keyboardShortcuts),u.default.createElement("button",(0,o.default)({ref:this.setHideKeyboardShortcutsButtonRef},(0,l.css)(i.DayPickerKeyboardShortcuts_buttonReset,i.DayPickerKeyboardShortcuts_close),{type:"button",tabIndex:"0","aria-label":s.hideKeyboardShortcutsPanel,onClick:a,onKeyDown:this.onKeyDown}),u.default.createElement(f.default,(0,l.css)(i.DayPickerKeyboardShortcuts_closeSvg))),u.default.createElement("ul",(0,o.default)({},(0,l.css)(i.DayPickerKeyboardShortcuts_list),{id:"DayPickerKeyboardShortcuts_description"}),this.keyboardShortcuts.map(function(e){var n=e.unicode,r=e.label,a=e.action;return u.default.createElement(c.default,{key:r,unicode:n,label:r,action:a,block:t})}))))},n}(u.default.PureComponent||u.default.Component);m.propTypes={},m.defaultProps=h;var p=(0,l.withStyles)(function(e){var t=e.reactDates,n=t.color,r=t.font,a=t.zIndex;return{DayPickerKeyboardShortcuts_buttonReset:{background:"none",border:0,borderRadius:0,color:"inherit",font:"inherit",lineHeight:"normal",overflow:"visible",padding:0,cursor:"pointer",fontSize:r.size,":active":{outline:"none"}},DayPickerKeyboardShortcuts_show:{width:33,height:26,position:"absolute",zIndex:a+2,"::before":{content:'""',display:"block",position:"absolute"}},DayPickerKeyboardShortcuts_show__bottomRight:{bottom:0,right:0,"::before":{borderTop:"26px solid transparent",borderRight:"33px solid ".concat(n.core.primary),bottom:0,right:0},":hover::before":{borderRight:"33px solid ".concat(n.core.primary_dark)}},DayPickerKeyboardShortcuts_show__topRight:{top:0,right:0,"::before":{borderBottom:"26px solid transparent",borderRight:"33px solid ".concat(n.core.primary),top:0,right:0},":hover::before":{borderRight:"33px solid ".concat(n.core.primary_dark)}},DayPickerKeyboardShortcuts_show__topLeft:{top:0,left:0,"::before":{borderBottom:"26px solid transparent",borderLeft:"33px solid ".concat(n.core.primary),top:0,left:0},":hover::before":{borderLeft:"33px solid ".concat(n.core.primary_dark)}},DayPickerKeyboardShortcuts_showSpan:{color:n.core.white,position:"absolute"},DayPickerKeyboardShortcuts_showSpan__bottomRight:{bottom:0,right:5},DayPickerKeyboardShortcuts_showSpan__topRight:{top:1,right:5},DayPickerKeyboardShortcuts_showSpan__topLeft:{top:1,left:5},DayPickerKeyboardShortcuts_panel:{overflow:"auto",background:n.background,border:"1px solid ".concat(n.core.border),borderRadius:2,position:"absolute",top:0,bottom:0,right:0,left:0,zIndex:a+2,padding:22,margin:33,textAlign:"left"},DayPickerKeyboardShortcuts_title:{fontSize:16,fontWeight:"bold",margin:0},DayPickerKeyboardShortcuts_list:{listStyle:"none",padding:0,fontSize:r.size},DayPickerKeyboardShortcuts_close:{position:"absolute",right:22,top:22,zIndex:a+2,":active":{outline:"none"}},DayPickerKeyboardShortcuts_closeSvg:{height:15,width:15,fill:n.core.grayLighter,":hover":{fill:n.core.grayLight},":focus":{fill:n.core.grayLight}}}},{pureComponent:void 0!==u.default.PureComponent})(m);t.default=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(11)),o=(r(n(6)),r(n(0))),i=(r(n(3)),n(5),n(13));function s(e){var t=e.unicode,n=e.label,r=e.action,s=e.block,u=e.styles;return o.default.createElement("li",(0,i.css)(u.KeyboardShortcutRow,s&&u.KeyboardShortcutRow__block),o.default.createElement("div",(0,i.css)(u.KeyboardShortcutRow_keyContainer,s&&u.KeyboardShortcutRow_keyContainer__block),o.default.createElement("span",(0,a.default)({},(0,i.css)(u.KeyboardShortcutRow_key),{role:"img","aria-label":"".concat(n,",")}),t)),o.default.createElement("div",(0,i.css)(u.KeyboardShortcutRow_action),r))}s.propTypes={},s.defaultProps={block:!1};var u=(0,i.withStyles)(function(e){return{KeyboardShortcutRow:{listStyle:"none",margin:"6px 0"},KeyboardShortcutRow__block:{marginBottom:16},KeyboardShortcutRow_keyContainer:{display:"inline-block",whiteSpace:"nowrap",textAlign:"right",marginRight:6},KeyboardShortcutRow_keyContainer__block:{textAlign:"left",display:"inline"},KeyboardShortcutRow_key:{fontFamily:"monospace",fontSize:12,textTransform:"uppercase",background:e.reactDates.color.core.grayLightest,padding:"2px 6px"},KeyboardShortcutRow_action:{display:"inline",wordBreak:"break-word",marginLeft:8}}},{pureComponent:void 0!==o.default.PureComponent})(s);t.default=u},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a.default.localeData().firstDayOfWeek(),n=function(e,t){return(e.day()-t+7)%7}(e.clone().startOf("month"),t);return Math.ceil((n+e.daysInMonth())/7)};var a=r(n(1))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return"undefined"!=typeof document&&document.activeElement}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.PureSingleDatePicker=void 0;var a=r(n(10)),o=r(n(11)),i=r(n(12)),s=r(n(8)),u=r(n(6)),l=r(n(0)),d=r(n(1)),c=n(13),f=n(241),h=(n(5),n(38)),_=r(n(27)),m=r(n(48)),p=(r(n(235)),n(7)),y=r(n(216)),v=r(n(217)),b=r(n(52)),g=r(n(29)),M=r(n(218)),k=r(n(18)),D=r(n(318)),L=r(n(234)),w=r(n(36)),T=n(4),S={date:null,focused:!1,id:"date",placeholder:"Date",ariaLabel:void 0,disabled:!1,required:!1,readOnly:!1,screenReaderInputMessage:"",showClearDate:!1,showDefaultInputIcon:!1,inputIconPosition:T.ICON_BEFORE_POSITION,customInputIcon:null,customCloseIcon:null,noBorder:!1,block:!1,small:!1,regular:!1,verticalSpacing:T.DEFAULT_VERTICAL_SPACING,keepFocusOnInput:!1,orientation:T.HORIZONTAL_ORIENTATION,anchorDirection:T.ANCHOR_LEFT,openDirection:T.OPEN_DOWN,horizontalMargin:0,withPortal:!1,withFullScreenPortal:!1,appendToBody:!1,disableScroll:!1,initialVisibleMonth:null,firstDayOfWeek:null,numberOfMonths:2,keepOpenOnDateSelect:!1,reopenPickerOnClearDate:!1,renderCalendarInfo:null,calendarInfoPosition:T.INFO_POSITION_BOTTOM,hideKeyboardShortcutsPanel:!1,daySize:T.DAY_SIZE,isRTL:!1,verticalHeight:null,transitionDuration:void 0,horizontalMonthPadding:13,navPrev:null,navNext:null,onPrevMonthClick:function(){},onNextMonthClick:function(){},onClose:function(){},renderMonthText:null,renderCalendarDay:void 0,renderDayContents:null,renderMonthElement:null,enableOutsideDays:!1,isDayBlocked:function(){return!1},isOutsideRange:function(e){return!(0,g.default)(e,(0,d.default)())},isDayHighlighted:function(){},displayFormat:function(){return d.default.localeData().longDateFormat("L")},monthFormat:"MMMM YYYY",weekDayFormat:"dd",phrases:p.SingleDatePickerPhrases,dayAriaLabelFormat:void 0},Y=function(e){(0,s.default)(n,e);var t=n.prototype;function n(t){var n;return(n=e.call(this,t)||this).isTouchDevice=!1,n.state={dayPickerContainerStyles:{},isDayPickerFocused:!1,isInputFocused:!1,showKeyboardShortcuts:!1},n.onFocusOut=n.onFocusOut.bind((0,i.default)(n)),n.onOutsideClick=n.onOutsideClick.bind((0,i.default)(n)),n.onInputFocus=n.onInputFocus.bind((0,i.default)(n)),n.onDayPickerFocus=n.onDayPickerFocus.bind((0,i.default)(n)),n.onDayPickerBlur=n.onDayPickerBlur.bind((0,i.default)(n)),n.showKeyboardShortcutsPanel=n.showKeyboardShortcutsPanel.bind((0,i.default)(n)),n.responsivizePickerPosition=n.responsivizePickerPosition.bind((0,i.default)(n)),n.disableScroll=n.disableScroll.bind((0,i.default)(n)),n.setDayPickerContainerRef=n.setDayPickerContainerRef.bind((0,i.default)(n)),n.setContainerRef=n.setContainerRef.bind((0,i.default)(n)),n}return t[!l.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentDidMount=function(){this.removeResizeEventListener=(0,h.addEventListener)(window,"resize",this.responsivizePickerPosition,{passive:!0}),this.responsivizePickerPosition(),this.disableScroll(),this.props.focused&&this.setState({isInputFocused:!0}),this.isTouchDevice=(0,_.default)()},t.componentDidUpdate=function(e){var t=this.props.focused;!e.focused&&t?(this.responsivizePickerPosition(),this.disableScroll()):e.focused&&!t&&this.enableScroll&&this.enableScroll()},t.componentWillUnmount=function(){this.removeResizeEventListener&&this.removeResizeEventListener(),this.removeFocusOutEventListener&&this.removeFocusOutEventListener(),this.enableScroll&&this.enableScroll()},t.onOutsideClick=function(e){var t=this.props,n=t.focused,r=t.onFocusChange,a=t.onClose,o=t.date,i=t.appendToBody;n&&(i&&this.dayPickerContainer.contains(e.target)||(this.setState({isInputFocused:!1,isDayPickerFocused:!1,showKeyboardShortcuts:!1}),r({focused:!1}),a({date:o})))},t.onInputFocus=function(e){var t=e.focused,n=this.props,r=n.onFocusChange,a=n.readOnly,o=n.withPortal,i=n.withFullScreenPortal,s=n.keepFocusOnInput;t&&(o||i||a&&!s||this.isTouchDevice&&!s?this.onDayPickerFocus():this.onDayPickerBlur());r({focused:t})},t.onDayPickerFocus=function(){this.setState({isInputFocused:!1,isDayPickerFocused:!0,showKeyboardShortcuts:!1})},t.onDayPickerBlur=function(){this.setState({isInputFocused:!0,isDayPickerFocused:!1,showKeyboardShortcuts:!1})},t.onFocusOut=function(e){var t=this.props.onFocusChange,n=e.relatedTarget===document.body?e.target:e.relatedTarget||e.target;this.dayPickerContainer.contains(n)||t({focused:!1})},t.setDayPickerContainerRef=function(e){e!==this.dayPickerContainer&&(this.removeEventListeners(),this.dayPickerContainer=e,e&&this.addEventListeners())},t.setContainerRef=function(e){this.container=e},t.addEventListeners=function(){this.removeFocusOutEventListener=(0,h.addEventListener)(this.dayPickerContainer,"focusout",this.onFocusOut)},t.removeEventListeners=function(){this.removeFocusOutEventListener&&this.removeFocusOutEventListener()},t.disableScroll=function(){var e=this.props,t=e.appendToBody,n=e.disableScroll,r=e.focused;(t||n)&&r&&(this.enableScroll=(0,M.default)(this.container))},t.responsivizePickerPosition=function(){this.setState({dayPickerContainerStyles:{}});var e=this.props,t=e.openDirection,n=e.anchorDirection,r=e.horizontalMargin,a=e.withPortal,o=e.withFullScreenPortal,i=e.appendToBody,s=e.focused,l=this.state.dayPickerContainerStyles;if(s){var d=n===T.ANCHOR_LEFT;if(!a&&!o){var c=this.dayPickerContainer.getBoundingClientRect(),f=l[n]||0,h=d?c[T.ANCHOR_RIGHT]:c[T.ANCHOR_LEFT];this.setState({dayPickerContainerStyles:(0,u.default)({},(0,y.default)(n,f,h,r),{},i&&(0,v.default)(t,n,this.container))})}}},t.showKeyboardShortcutsPanel=function(){this.setState({isInputFocused:!1,isDayPickerFocused:!0,showKeyboardShortcuts:!0})},t.maybeRenderDayPickerWithPortal=function(){var e=this.props,t=e.focused,n=e.withPortal,r=e.withFullScreenPortal,a=e.appendToBody;return t?n||r||a?l.default.createElement(f.Portal,null,this.renderDayPicker()):this.renderDayPicker():null},t.renderDayPicker=function(){var e=this.props,t=e.anchorDirection,n=e.openDirection,r=e.onDateChange,a=e.date,i=e.onFocusChange,s=e.focused,u=e.enableOutsideDays,d=e.numberOfMonths,f=e.orientation,h=e.monthFormat,_=e.navPrev,m=e.navNext,p=e.onPrevMonthClick,y=e.onNextMonthClick,v=e.onClose,g=e.withPortal,M=e.withFullScreenPortal,k=e.keepOpenOnDateSelect,D=e.initialVisibleMonth,S=e.renderMonthText,Y=e.renderCalendarDay,P=e.renderDayContents,O=e.renderCalendarInfo,E=e.renderMonthElement,x=e.calendarInfoPosition,C=e.hideKeyboardShortcutsPanel,j=e.firstDayOfWeek,H=e.customCloseIcon,I=e.phrases,A=e.dayAriaLabelFormat,F=e.daySize,R=e.isRTL,N=e.isOutsideRange,W=e.isDayBlocked,z=e.isDayHighlighted,B=e.weekDayFormat,U=e.styles,K=e.verticalHeight,V=e.transitionDuration,$=e.verticalSpacing,G=e.horizontalMonthPadding,J=e.small,q=e.theme.reactDates,Q=this.state,Z=Q.dayPickerContainerStyles,X=Q.isDayPickerFocused,ee=Q.showKeyboardShortcuts,te=!M&&g?this.onOutsideClick:void 0,ne=H||l.default.createElement(w.default,null),re=(0,b.default)(q,J),ae=g||M;return l.default.createElement("div",(0,o.default)({ref:this.setDayPickerContainerRef},(0,c.css)(U.SingleDatePicker_picker,t===T.ANCHOR_LEFT&&U.SingleDatePicker_picker__directionLeft,t===T.ANCHOR_RIGHT&&U.SingleDatePicker_picker__directionRight,n===T.OPEN_DOWN&&U.SingleDatePicker_picker__openDown,n===T.OPEN_UP&&U.SingleDatePicker_picker__openUp,!ae&&n===T.OPEN_DOWN&&{top:re+$},!ae&&n===T.OPEN_UP&&{bottom:re+$},f===T.HORIZONTAL_ORIENTATION&&U.SingleDatePicker_picker__horizontal,f===T.VERTICAL_ORIENTATION&&U.SingleDatePicker_picker__vertical,ae&&U.SingleDatePicker_picker__portal,M&&U.SingleDatePicker_picker__fullScreenPortal,R&&U.SingleDatePicker_picker__rtl,Z),{onClick:te}),l.default.createElement(L.default,{date:a,onDateChange:r,onFocusChange:i,orientation:f,enableOutsideDays:u,numberOfMonths:d,monthFormat:h,withPortal:ae,focused:s,keepOpenOnDateSelect:k,hideKeyboardShortcutsPanel:C,initialVisibleMonth:D,navPrev:_,navNext:m,onPrevMonthClick:p,onNextMonthClick:y,onClose:v,renderMonthText:S,renderCalendarDay:Y,renderDayContents:P,renderCalendarInfo:O,renderMonthElement:E,calendarInfoPosition:x,isFocused:X,showKeyboardShortcuts:ee,onBlur:this.onDayPickerBlur,phrases:I,dayAriaLabelFormat:A,daySize:F,isRTL:R,isOutsideRange:N,isDayBlocked:W,isDayHighlighted:z,firstDayOfWeek:j,weekDayFormat:B,verticalHeight:K,transitionDuration:V,horizontalMonthPadding:G}),M&&l.default.createElement("button",(0,o.default)({},(0,c.css)(U.SingleDatePicker_closeButton),{"aria-label":I.closeDatePicker,type:"button",onClick:this.onOutsideClick}),l.default.createElement("div",(0,c.css)(U.SingleDatePicker_closeButton_svg),ne)))},t.render=function(){var e=this.props,t=e.id,n=e.placeholder,r=e.ariaLabel,a=e.disabled,i=e.focused,s=e.required,u=e.readOnly,d=e.openDirection,f=e.showClearDate,h=e.showDefaultInputIcon,_=e.inputIconPosition,p=e.customCloseIcon,y=e.customInputIcon,v=e.date,b=e.onDateChange,g=e.displayFormat,M=e.phrases,k=e.withPortal,L=e.withFullScreenPortal,w=e.screenReaderInputMessage,S=e.isRTL,Y=e.noBorder,P=e.block,O=e.small,E=e.regular,x=e.verticalSpacing,C=e.reopenPickerOnClearDate,j=e.keepOpenOnDateSelect,H=e.styles,I=e.isOutsideRange,A=this.state.isInputFocused,F=!k&&!L,R=x<T.FANG_HEIGHT_PX,N=l.default.createElement(D.default,{id:t,placeholder:n,ariaLabel:r,focused:i,isFocused:A,disabled:a,required:s,readOnly:u,openDirection:d,showCaret:!k&&!L&&!R,showClearDate:f,showDefaultInputIcon:h,inputIconPosition:_,isOutsideRange:I,customCloseIcon:p,customInputIcon:y,date:v,onDateChange:b,displayFormat:g,onFocusChange:this.onInputFocus,onKeyDownArrowDown:this.onDayPickerFocus,onKeyDownQuestionMark:this.showKeyboardShortcutsPanel,screenReaderMessage:w,phrases:M,isRTL:S,noBorder:Y,block:P,small:O,regular:E,verticalSpacing:x,reopenPickerOnClearDate:C,keepOpenOnDateSelect:j},this.maybeRenderDayPickerWithPortal());return l.default.createElement("div",(0,o.default)({ref:this.setContainerRef},(0,c.css)(H.SingleDatePicker,P&&H.SingleDatePicker__block)),F&&l.default.createElement(m.default,{onOutsideClick:this.onOutsideClick},N),F||N)},n}(l.default.PureComponent||l.default.Component);t.PureSingleDatePicker=Y,Y.propTypes={},Y.defaultProps=S;var P=(0,c.withStyles)(function(e){var t=e.reactDates,n=t.color,r=t.zIndex;return{SingleDatePicker:{position:"relative",display:"inline-block"},SingleDatePicker__block:{display:"block"},SingleDatePicker_picker:{zIndex:r+1,backgroundColor:n.background,position:"absolute"},SingleDatePicker_picker__rtl:{direction:(0,k.default)("rtl")},SingleDatePicker_picker__directionLeft:{left:(0,k.default)(0)},SingleDatePicker_picker__directionRight:{right:(0,k.default)(0)},SingleDatePicker_picker__portal:{backgroundColor:"rgba(0, 0, 0, 0.3)",position:"fixed",top:0,left:(0,k.default)(0),height:"100%",width:"100%"},SingleDatePicker_picker__fullScreenPortal:{backgroundColor:n.background},SingleDatePicker_closeButton:{background:"none",border:0,color:"inherit",font:"inherit",lineHeight:"normal",overflow:"visible",cursor:"pointer",position:"absolute",top:0,right:(0,k.default)(0),padding:15,zIndex:r+2,":hover":{color:"darken(".concat(n.core.grayLighter,", 10%)"),textDecoration:"none"},":focus":{color:"darken(".concat(n.core.grayLighter,", 10%)"),textDecoration:"none"}},SingleDatePicker_closeButton_svg:{height:15,width:15,fill:n.core.grayLighter}}},{pureComponent:void 0!==l.default.PureComponent})(Y);t.default=P},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(10)),o=r(n(12)),i=r(n(8)),s=r(n(0)),u=(r(n(3)),r(n(1))),l=(r(n(15)),n(5),r(n(21)),n(7)),d=(r(n(9)),r(n(236))),c=(r(n(28)),r(n(33)),r(n(25))),f=r(n(54)),h=r(n(29)),_=n(4),m={children:null,date:null,focused:!1,placeholder:"",ariaLabel:void 0,screenReaderMessage:"Date",showClearDate:!1,showCaret:!1,showDefaultInputIcon:!1,inputIconPosition:_.ICON_BEFORE_POSITION,disabled:!1,required:!1,readOnly:!1,openDirection:_.OPEN_DOWN,noBorder:!1,block:!1,small:!1,regular:!1,verticalSpacing:void 0,keepOpenOnDateSelect:!1,reopenPickerOnClearDate:!1,isOutsideRange:function(e){return!(0,h.default)(e,(0,u.default)())},displayFormat:function(){return u.default.localeData().longDateFormat("L")},onClose:function(){},onKeyDownArrowDown:function(){},onKeyDownQuestionMark:function(){},customInputIcon:null,customCloseIcon:null,isFocused:!1,phrases:l.SingleDatePickerInputPhrases,isRTL:!1},p=function(e){(0,i.default)(n,e);var t=n.prototype;function n(t){var n;return(n=e.call(this,t)||this).onChange=n.onChange.bind((0,o.default)(n)),n.onFocus=n.onFocus.bind((0,o.default)(n)),n.onClearFocus=n.onClearFocus.bind((0,o.default)(n)),n.clearDate=n.clearDate.bind((0,o.default)(n)),n}return t[!s.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.onChange=function(e){var t=this.props,n=t.isOutsideRange,r=t.keepOpenOnDateSelect,a=t.onDateChange,o=t.onFocusChange,i=t.onClose,s=(0,c.default)(e,this.getDisplayFormat());s&&!n(s)?(a(s),r||(o({focused:!1}),i({date:s}))):a(null)},t.onFocus=function(){var e=this.props,t=e.onFocusChange;e.disabled||t({focused:!0})},t.onClearFocus=function(){var e=this.props,t=e.focused,n=e.onFocusChange,r=e.onClose,a=e.date;t&&(n({focused:!1}),r({date:a}))},t.getDisplayFormat=function(){var e=this.props.displayFormat;return"string"==typeof e?e:e()},t.getDateString=function(e){var t=this.getDisplayFormat();return e&&t?e&&e.format(t):(0,f.default)(e)},t.clearDate=function(){var e=this.props,t=e.onDateChange,n=e.reopenPickerOnClearDate,r=e.onFocusChange;t(null),n&&r({focused:!0})},t.render=function(){var e=this.props,t=e.children,n=e.id,r=e.placeholder,a=e.ariaLabel,o=e.disabled,i=e.focused,u=e.isFocused,l=e.required,c=e.readOnly,f=e.openDirection,h=e.showClearDate,_=e.showCaret,m=e.showDefaultInputIcon,p=e.inputIconPosition,y=e.customCloseIcon,v=e.customInputIcon,b=e.date,g=e.phrases,M=e.onKeyDownArrowDown,k=e.onKeyDownQuestionMark,D=e.screenReaderMessage,L=e.isRTL,w=e.noBorder,T=e.block,S=e.small,Y=e.regular,P=e.verticalSpacing,O=this.getDateString(b);return s.default.createElement(d.default,{id:n,placeholder:r,ariaLabel:a,focused:i,isFocused:u,disabled:o,required:l,readOnly:c,openDirection:f,showCaret:_,onClearDate:this.clearDate,showClearDate:h,showDefaultInputIcon:m,inputIconPosition:p,customCloseIcon:y,customInputIcon:v,displayValue:O,onChange:this.onChange,onFocus:this.onFocus,onKeyDownShiftTab:this.onClearFocus,onKeyDownArrowDown:M,onKeyDownQuestionMark:k,screenReaderMessage:D,phrases:g,isRTL:L,noBorder:w,block:T,small:S,regular:Y,verticalSpacing:P},t)},n}(s.default.PureComponent||s.default.Component);t.default=p,p.propTypes={},p.defaultProps=m},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!a.default.isMoment(e)||!a.default.isMoment(t))&&!(0,o.default)(e,t)};var a=r(n(1)),o=r(n(41))},function(e,t,n){n(321)},function(e,t,n){"use strict";(0,n(2)(n(322)).default)()},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){(0,o.default)(a.default)};var a=r(n(323)),o=r(n(333))},function(e,t,n){e.exports=n(324).default},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=u(n(325)),a=u(n(329)),o=n(330),i=u(n(331)),s=u(n(332));function u(e){return e&&e.__esModule?e:{default:e}}t.default={create:function(e){var t={},n=Object.keys(e),r=(a.default.get(o.GLOBAL_CACHE_KEY)||{}).namespace,s=void 0===r?"":r;return n.forEach(function(e){var n=(0,i.default)(s,e);t[e]=n}),t},resolve:function(e){var t=(0,r.default)(e,1/0),n=(0,s.default)(t),a=n.classNames,o=n.hasInlineStyles,i=n.inlineStyles,u={className:a.map(function(e,t){return String(e)+" "+String(e)+"_"+String(t+1)}).join(" ")};return o&&(u.style=i),u}}},function(e,t,n){"use strict";var r=n(16),a=n(19),o=n(237),i=n(238),s=i(),u=n(328),l=a.call(Function.call,s);r(l,{getPolyfill:i,implementation:o,shim:u}),e.exports=l},function(e,t,n){"use strict";var r=n(19),a=n(201),o=n(51),i=n(327),s=n(40),u=s("%TypeError%"),l=r.call(Function.call,s("%ObjectPrototype%").propertyIsEnumerable),d=r.call(Function.apply,s("%ArrayPrototype%").push),c=o(o({},a),{ToIndex:function(e){if(void 0===e)return 0;var t=this.ToInteger(e);if(t<0)throw new RangeError("index must be >= 0");var n=this.ToLength(t);if(!this.SameValueZero(t,n))throw new RangeError("index must be >= 0 and < 2 ** 53 - 1");return n},EnumerableOwnProperties:function(e,t){var n=a.EnumerableOwnNames(e);if("key"===t)return n;if("value"===t||"key+value"===t){var r=[];return i(n,function(n){l(e,n)&&d(r,["value"===t?e[n]:[n,e[n]]])}),r}throw new u('Assertion failed: "kind" is not "key", "value", or "key+value": '+t)}});delete c.EnumerableOwnNames,e.exports=c},function(e,t,n){"use strict";e.exports=function(e,t){for(var n=0;n<e.length;n+=1)t(e[n],n,e)}},function(e,t,n){"use strict";var r=n(16),a=n(238);e.exports=function(){var e=a();return r(Array.prototype,{flat:e},{flat:function(){return Array.prototype.flat!==e}}),e}},function(e,t,n){"use strict";(function(t){var r=n(16),a=n(203),o="__ global cache key __";"function"==typeof Symbol&&a(Symbol("foo"))&&"function"==typeof Symbol.for&&(o=Symbol.for(o));var i=function(){return!0},s=function(){if(!t[o]){var e={};e[o]={};var n={};n[o]=i,r(t,e,n)}return t[o]},u=s(),l=function(e){return a(e)?Symbol.prototype.valueOf.call(e):typeof e+" | "+String(e)},d=function(e){if(!function(e){return null===e||"object"!=typeof e&&"function"!=typeof e}(e))throw new TypeError("key must not be an object")},c={clear:function(){delete t[o],u=s()},delete:function(e){return d(e),delete u[l(e)],!c.has(e)},get:function(e){return d(e),u[l(e)]},has:function(e){return d(e),l(e)in u},set:function(e,t){d(e);var n=l(e),a={};a[n]=t;var o={};return o[n]=i,r(u,a,o),c.has(e)},setIfMissingThenGet:function(e,t){if(c.has(e))return c.get(e);var n=t();return c.set(e,n),n}};e.exports=c}).call(this,n(22))},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.GLOBAL_CACHE_KEY="reactWithStylesInterfaceCSS",t.MAX_SPECIFICITY=20},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(e.length>0?String(e)+"__":"")+String(t)}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=[],n=!1,r={},a=0;a<e.length;a++){var o=e[a];o&&("string"==typeof o?t.push(o):(Object.assign(r,o),n=!0))}return{classNames:t,hasInlineStyles:n,inlineStyles:r}}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){a.default.registerInterface(e),a.default.registerTheme(o.default)};var a=r(n(191)),o=r(n(195))},function(e,t,n){var r,a,o=n(239),i=n(240),s=0,u=0;e.exports=function(e,t,n){var l=t&&n||0,d=t||[],c=(e=e||{}).node||r,f=void 0!==e.clockseq?e.clockseq:a;if(null==c||null==f){var h=o();null==c&&(c=r=[1|h[0],h[1],h[2],h[3],h[4],h[5]]),null==f&&(f=a=16383&(h[6]<<8|h[7]))}var _=void 0!==e.msecs?e.msecs:(new Date).getTime(),m=void 0!==e.nsecs?e.nsecs:u+1,p=_-s+(m-u)/1e4;if(p<0&&void 0===e.clockseq&&(f=f+1&16383),(p<0||_>s)&&void 0===e.nsecs&&(m=0),m>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");s=_,u=m,a=f;var y=(1e4*(268435455&(_+=122192928e5))+m)%4294967296;d[l++]=y>>>24&255,d[l++]=y>>>16&255,d[l++]=y>>>8&255,d[l++]=255&y;var v=_/4294967296*1e4&268435455;d[l++]=v>>>8&255,d[l++]=255&v,d[l++]=v>>>24&15|16,d[l++]=v>>>16&255,d[l++]=f>>>8|128,d[l++]=255&f;for(var b=0;b<6;++b)d[l+b]=c[b];return t||i(d)}},function(e,t,n){var r=n(239),a=n(240);e.exports=function(e,t,n){var o=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var i=(e=e||{}).random||(e.rng||r)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t)for(var s=0;s<16;++s)t[o+s]=i[s];return t||a(i)}},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),o=n(14),i=n.n(o),s=n(3),u=n.n(s),l=a.a.createContext(null);var d=function(e){e()},c=function(){return d},f=null,h={notify:function(){}};var _=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=h,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){var e,t,n;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=(e=c(),t=[],n=[],{clear:function(){n=f,t=f},notify:function(){var r=t=n;e(function(){for(var e=0;e<r.length;e++)r[e]()})},get:function(){return n},subscribe:function(e){var r=!0;return n===t&&(n=t.slice()),n.push(e),function(){r&&t!==f&&(r=!1,n===t&&(n=t.slice()),n.splice(n.indexOf(e),1))}}}))},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=h)},e}();function m(e){var t=e.store,n=e.context,o=e.children,i=Object(r.useMemo)(function(){var e=new _(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}},[t]),s=Object(r.useMemo)(function(){return t.getState()},[t]);Object(r.useEffect)(function(){var e=i.subscription;return e.trySubscribe(),s!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}},[i,s]);var u=n||l;return a.a.createElement(u.Provider,{value:i},o)}m.propTypes={store:u.a.shape({subscribe:u.a.func.isRequired,dispatch:u.a.func.isRequired,getState:u.a.func.isRequired}),context:u.a.object,children:u.a.any};var p=m;function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function v(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}var b=n(30),g=n.n(b),M=n(17),k=n.n(M),D=n(42),L=[],w=[null,null];function T(e,t){var n=e[1];return[t.payload,n+1]}var S=function(){return[null,0]},Y="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;function P(e,t){void 0===t&&(t={});var n=t,o=n.getDisplayName,i=void 0===o?function(e){return"ConnectAdvanced("+e+")"}:o,s=n.methodName,u=void 0===s?"connectAdvanced":s,d=n.renderCountProp,c=void 0===d?void 0:d,f=n.shouldHandleStateChanges,h=void 0===f||f,m=n.storeKey,p=void 0===m?"store":m,b=n.withRef,M=void 0!==b&&b,P=n.forwardRef,O=void 0!==P&&P,E=n.context,x=void 0===E?l:E,C=v(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);k()(void 0===c,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),k()(!M,"withRef is removed. To access the wrapped instance, use a ref on the connected component");k()("store"===p,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var j=x;return function(t){var n=t.displayName||t.name||"Component",o=i(n),s=y({},C,{getDisplayName:i,methodName:u,renderCountProp:c,shouldHandleStateChanges:h,storeKey:p,displayName:o,wrappedComponentName:n,WrappedComponent:t}),l=C.pure;var d=l?r.useMemo:function(e){return e()};function f(n){var i=Object(r.useMemo)(function(){var e=n.forwardedRef,t=v(n,["forwardedRef"]);return[n.context,e,t]},[n]),u=i[0],l=i[1],c=i[2],f=Object(r.useMemo)(function(){return u&&u.Consumer&&Object(D.isContextConsumer)(a.a.createElement(u.Consumer,null))?u:j},[u,j]),m=Object(r.useContext)(f),p=Boolean(n.store),b=Boolean(m)&&Boolean(m.store);k()(p||b,'Could not find "store" in the context of "'+o+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+o+" in connect options.");var g=n.store||m.store,M=Object(r.useMemo)(function(){return function(t){return e(t.dispatch,s)}(g)},[g]),P=Object(r.useMemo)(function(){if(!h)return w;var e=new _(g,p?null:m.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]},[g,p,m]),O=P[0],E=P[1],x=Object(r.useMemo)(function(){return p?m:y({},m,{subscription:O})},[p,m,O]),C=Object(r.useReducer)(T,L,S),H=C[0][0],I=C[1];if(H&&H.error)throw H.error;var A=Object(r.useRef)(),F=Object(r.useRef)(c),R=Object(r.useRef)(),N=Object(r.useRef)(!1),W=d(function(){return R.current&&c===F.current?R.current:M(g.getState(),c)},[g,H,c]);Y(function(){F.current=c,A.current=W,N.current=!1,R.current&&(R.current=null,E())}),Y(function(){if(h){var e=!1,t=null,n=function(){if(!e){var n,r,a=g.getState();try{n=M(a,F.current)}catch(e){r=e,t=e}r||(t=null),n===A.current?N.current||E():(A.current=n,R.current=n,N.current=!0,I({type:"STORE_UPDATED",payload:{latestStoreState:a,error:r}}))}};O.onStateChange=n,O.trySubscribe(),n();return function(){if(e=!0,O.tryUnsubscribe(),O.onStateChange=null,t)throw t}}},[g,O,M]);var z=Object(r.useMemo)(function(){return a.a.createElement(t,y({},W,{ref:l}))},[l,t,W]);return Object(r.useMemo)(function(){return h?a.a.createElement(f.Provider,{value:x},z):z},[f,z,x])}var m=l?a.a.memo(f):f;if(m.WrappedComponent=t,m.displayName=o,O){var b=a.a.forwardRef(function(e,t){return a.a.createElement(m,y({},e,{forwardedRef:t}))});return b.displayName=o,b.WrappedComponent=t,g()(b,t)}return g()(m,t)}}var O=Object.prototype.hasOwnProperty;function E(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function x(e,t){if(E(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0;a<n.length;a++)if(!O.call(t,n[a])||!E(e[n[a]],t[n[a]]))return!1;return!0}var C=n(57),j=function(){return Math.random().toString(36).substring(7).split("").join(".")},H={INIT:"@@redux/INIT"+j(),REPLACE:"@@redux/REPLACE"+j(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+j()}};function I(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function A(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(A)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var a=e,o=t,i=[],s=i,u=!1;function l(){s===i&&(s=i.slice())}function d(){if(u)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return o}function c(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(u)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return l(),s.push(e),function(){if(t){if(u)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,l();var n=s.indexOf(e);s.splice(n,1)}}}function f(e){if(!I(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(u)throw new Error("Reducers may not dispatch actions.");try{u=!0,o=a(o,e)}finally{u=!1}for(var t=i=s,n=0;n<t.length;n++){(0,t[n])()}return e}return f({type:H.INIT}),(r={dispatch:f,subscribe:c,getState:d,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");a=e,f({type:H.REPLACE})}})[C.a]=function(){var e,t=c;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(d())}return n(),{unsubscribe:t(n)}}})[C.a]=function(){return this},e},r}function F(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function R(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var a=t[r];0,"function"==typeof e[a]&&(n[a]=e[a])}var o,i=Object.keys(n);try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:H.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:H.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+H.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){o=e}return function(e,t){if(void 0===e&&(e={}),o)throw o;for(var r=!1,a={},s=0;s<i.length;s++){var u=i[s],l=n[u],d=e[u],c=l(d,t);if(void 0===c){var f=F(u,t);throw new Error(f)}a[u]=c,r=r||c!==d}return r?a:e}}function N(e,t){return function(){return t(e.apply(this,arguments))}}function W(e){return function(t,n){var r=e(t,n);function a(){return r}return a.dependsOnOwnProps=!1,a}}function z(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function B(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=z(e);var a=r(t,n);return"function"==typeof a&&(r.mapToProps=a,r.dependsOnOwnProps=z(a),a=r(t,n)),a},r}}var U=[function(e){return"function"==typeof e?B(e):void 0},function(e){return e?void 0:W(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?W(function(t){return function(e,t){if("function"==typeof e)return N(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var a=e[r];"function"==typeof a&&(n[r]=N(a,t))}return n}(e,t)}):void 0}];var K=[function(e){return"function"==typeof e?B(e):void 0},function(e){return e?void 0:W(function(){return{}})}];function V(e,t,n){return y({},n,{},e,{},t)}var $=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,a=n.pure,o=n.areMergedPropsEqual,i=!1;return function(t,n,s){var u=e(t,n,s);return i?a&&o(u,r)||(r=u):(i=!0,r=u),r}}}(e):void 0},function(e){return e?void 0:function(){return V}}];function G(e,t,n,r){return function(a,o){return n(e(a,o),t(r,o),o)}}function J(e,t,n,r,a){var o,i,s,u,l,d=a.areStatesEqual,c=a.areOwnPropsEqual,f=a.areStatePropsEqual,h=!1;function _(a,h){var _,m,p=!c(h,i),y=!d(a,o);return o=a,i=h,p&&y?(s=e(o,i),t.dependsOnOwnProps&&(u=t(r,i)),l=n(s,u,i)):p?(e.dependsOnOwnProps&&(s=e(o,i)),t.dependsOnOwnProps&&(u=t(r,i)),l=n(s,u,i)):y?(_=e(o,i),m=!f(_,s),s=_,m&&(l=n(s,u,i)),l):l}return function(a,d){return h?_(a,d):(s=e(o=a,i=d),u=t(r,i),l=n(s,u,i),h=!0,l)}}function q(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,a=t.initMergeProps,o=v(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,o),s=r(e,o),u=a(e,o);return(o.pure?J:G)(i,s,u,e,o)}function Q(e,t,n){for(var r=t.length-1;r>=0;r--){var a=t[r](e);if(a)return a}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function Z(e,t){return e===t}var X,ee,te,ne,re,ae,oe,ie,se,ue,le,de,ce=(te=(ee=void 0===X?{}:X).connectHOC,ne=void 0===te?P:te,re=ee.mapStateToPropsFactories,ae=void 0===re?K:re,oe=ee.mapDispatchToPropsFactories,ie=void 0===oe?U:oe,se=ee.mergePropsFactories,ue=void 0===se?$:se,le=ee.selectorFactory,de=void 0===le?q:le,function(e,t,n,r){void 0===r&&(r={});var a=r,o=a.pure,i=void 0===o||o,s=a.areStatesEqual,u=void 0===s?Z:s,l=a.areOwnPropsEqual,d=void 0===l?x:l,c=a.areStatePropsEqual,f=void 0===c?x:c,h=a.areMergedPropsEqual,_=void 0===h?x:h,m=v(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),p=Q(e,ae,"mapStateToProps"),b=Q(t,ie,"mapDispatchToProps"),g=Q(n,ue,"mergeProps");return ne(de,y({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:p,initMapDispatchToProps:b,initMergeProps:g,pure:i,areStatesEqual:u,areOwnPropsEqual:d,areStatePropsEqual:f,areMergedPropsEqual:_},m))});function fe(){var e=Object(r.useContext)(l);return k()(e,"could not find react-redux context value; please ensure the component is wrapped in a <Provider>"),e}function he(e){void 0===e&&(e=l);var t=e===l?fe:function(){return Object(r.useContext)(e)};return function(){return t().store}}var _e=he();!function(e){void 0===e&&(e=l);var t=e===l?_e:he(e)}();var me="undefined"!=typeof window?r.useLayoutEffect:r.useEffect,pe=function(e,t){return e===t};var ye;!function(e){void 0===e&&(e=l);var t=e===l?fe:function(){return Object(r.useContext)(e)}}();function ve(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}ye=o.unstable_batchedUpdates,d=ye;var be=n(8),ge=n.n(be),Me=n(243),ke=n.n(Me),De=1073741823;var Le=a.a.createContext||function(e,t){var n,a,o="__create-react-context-"+ke()()+"__",i=function(e){function n(){var t,n,r;return(t=e.apply(this,arguments)||this).emitter=(n=t.props.value,r=[],{on:function(e){r.push(e)},off:function(e){r=r.filter(function(t){return t!==e})},get:function(){return n},set:function(e,t){n=e,r.forEach(function(e){return e(n,t)})}}),t}ge()(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[o]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,a=e.value;((o=r)===(i=a)?0!==o||1/o==1/i:o!=o&&i!=i)?n=0:(n="function"==typeof t?t(r,a):De,0!==(n|=0)&&this.emitter.set(e.value,n))}var o,i},r.render=function(){return this.props.children},n}(r.Component);i.childContextTypes=((n={})[o]=u.a.object.isRequired,n);var s=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}ge()(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?De:t},r.componentDidMount=function(){this.context[o]&&this.context[o].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?De:e},r.componentWillUnmount=function(){this.context[o]&&this.context[o].off(this.onUpdate)},r.getValue=function(){return this.context[o]?this.context[o].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return s.contextTypes=((a={})[o]=u.a.object,a),{Provider:i,Consumer:s}};function we(e){return"/"===e.charAt(0)}function Te(e,t){for(var n=t,r=n+1,a=e.length;r<a;n+=1,r+=1)e[n]=e[r];e.pop()}var Se=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],a=e&&we(e),o=t&&we(t),i=a||o;if(e&&we(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var s=void 0;if(r.length){var u=r[r.length-1];s="."===u||".."===u||""===u}else s=!1;for(var l=0,d=r.length;d>=0;d--){var c=r[d];"."===c?Te(r,d):".."===c?(Te(r,d),l++):l&&(Te(r,d),l--)}if(!i)for(;l--;l)r.unshift("..");!i||""===r[0]||r[0]&&we(r[0])||r.unshift("");var f=r.join("/");return s&&"/"!==f.substr(-1)&&(f+="/"),f},Ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var Pe=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var r=void 0===t?"undefined":Ye(t);if(r!==(void 0===n?"undefined":Ye(n)))return!1;if("object"===r){var a=t.valueOf(),o=n.valueOf();if(a!==t||o!==n)return e(a,o);var i=Object.keys(t),s=Object.keys(n);return i.length===s.length&&i.every(function(r){return e(t[r],n[r])})}return!1},Oe=!0,Ee="Invariant failed";var xe=function(e,t){if(!e)throw Oe?new Error(Ee):new Error(Ee+": "+(t||""))};function Ce(e){return"/"===e.charAt(0)?e:"/"+e}function je(e){return"/"===e.charAt(0)?e.substr(1):e}function He(e,t){return function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)}(e,t)?e.substr(t.length):e}function Ie(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function Ae(e){var t=e.pathname,n=e.search,r=e.hash,a=t||"/";return n&&"?"!==n&&(a+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(a+="#"===r.charAt(0)?r:"#"+r),a}function Fe(e,t,n,r){var a;"string"==typeof e?(a=function(e){var t=e||"/",n="",r="",a=t.indexOf("#");-1!==a&&(r=t.substr(a),t=t.substr(0,a));var o=t.indexOf("?");return-1!==o&&(n=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(a=y({},e)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==t&&void 0===a.state&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(a.key=n),r?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=Se(a.pathname,r.pathname)):a.pathname=r.pathname:a.pathname||(a.pathname="/"),a}function Re(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&Pe(e.state,t.state)}function Ne(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,a){if(null!=e){var o="function"==typeof e?e(t,n):e;"string"==typeof o?"function"==typeof r?r(o,a):a(!0):a(!1!==o)}else a(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}var We=!("undefined"==typeof window||!window.document||!window.document.createElement);function ze(e,t){t(window.confirm(e))}var Be="popstate",Ue="hashchange";function Ke(){try{return window.history.state||{}}catch(e){return{}}}function Ve(e){void 0===e&&(e={}),We||xe(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,a=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e,i=o.forceRefresh,s=void 0!==i&&i,u=o.getUserConfirmation,l=void 0===u?ze:u,d=o.keyLength,c=void 0===d?6:d,f=e.basename?Ie(Ce(e.basename)):"";function h(e){var t=e||{},n=t.key,r=t.state,a=window.location,o=a.pathname+a.search+a.hash;return f&&(o=He(o,f)),Fe(o,r,n)}function _(){return Math.random().toString(36).substr(2,c)}var m=Ne();function p(e){y(P,e),P.length=n.length,m.notifyListeners(P.location,P.action)}function v(e){(function(e){void 0===e.state&&navigator.userAgent.indexOf("CriOS")})(e)||M(h(e.state))}function b(){M(h(Ke()))}var g=!1;function M(e){if(g)g=!1,p();else{m.confirmTransitionTo(e,"POP",l,function(t){t?p({action:"POP",location:e}):function(e){var t=P.location,n=D.indexOf(t.key);-1===n&&(n=0);var r=D.indexOf(e.key);-1===r&&(r=0);var a=n-r;a&&(g=!0,w(a))}(e)})}}var k=h(Ke()),D=[k.key];function L(e){return f+Ae(e)}function w(e){n.go(e)}var T=0;function S(e){1===(T+=e)&&1===e?(window.addEventListener(Be,v),a&&window.addEventListener(Ue,b)):0===T&&(window.removeEventListener(Be,v),a&&window.removeEventListener(Ue,b))}var Y=!1;var P={length:n.length,action:"POP",location:k,createHref:L,push:function(e,t){var a=Fe(e,t,_(),P.location);m.confirmTransitionTo(a,"PUSH",l,function(e){if(e){var t=L(a),o=a.key,i=a.state;if(r)if(n.pushState({key:o,state:i},null,t),s)window.location.href=t;else{var u=D.indexOf(P.location.key),l=D.slice(0,-1===u?0:u+1);l.push(a.key),D=l,p({action:"PUSH",location:a})}else window.location.href=t}})},replace:function(e,t){var a=Fe(e,t,_(),P.location);m.confirmTransitionTo(a,"REPLACE",l,function(e){if(e){var t=L(a),o=a.key,i=a.state;if(r)if(n.replaceState({key:o,state:i},null,t),s)window.location.replace(t);else{var u=D.indexOf(P.location.key);-1!==u&&(D[u]=a.key),p({action:"REPLACE",location:a})}else window.location.replace(t)}})},go:w,goBack:function(){w(-1)},goForward:function(){w(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return Y||(S(1),Y=!0),function(){return Y&&(Y=!1,S(-1)),t()}},listen:function(e){var t=m.appendListener(e);return S(1),function(){S(-1),t()}}};return P}var $e="hashchange",Ge={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+je(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:je,decodePath:Ce},slash:{encodePath:Ce,decodePath:Ce}};function Je(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function qe(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)}function Qe(e){void 0===e&&(e={}),We||xe(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,a=void 0===r?ze:r,o=n.hashType,i=void 0===o?"slash":o,s=e.basename?Ie(Ce(e.basename)):"",u=Ge[i],l=u.encodePath,d=u.decodePath;function c(){var e=d(Je());return s&&(e=He(e,s)),Fe(e)}var f=Ne();function h(e){y(T,e),T.length=t.length,f.notifyListeners(T.location,T.action)}var _=!1,m=null;function p(){var e=Je(),t=l(e);if(e!==t)qe(t);else{var n=c(),r=T.location;if(!_&&Re(r,n))return;if(m===Ae(n))return;m=null,function(e){if(_)_=!1,h();else{f.confirmTransitionTo(e,"POP",a,function(t){t?h({action:"POP",location:e}):function(e){var t=T.location,n=M.lastIndexOf(Ae(t));-1===n&&(n=0);var r=M.lastIndexOf(Ae(e));-1===r&&(r=0);var a=n-r;a&&(_=!0,k(a))}(e)})}}(n)}}var v=Je(),b=l(v);v!==b&&qe(b);var g=c(),M=[Ae(g)];function k(e){t.go(e)}var D=0;function L(e){1===(D+=e)&&1===e?window.addEventListener($e,p):0===D&&window.removeEventListener($e,p)}var w=!1;var T={length:t.length,action:"POP",location:g,createHref:function(e){return"#"+l(s+Ae(e))},push:function(e,t){var n=Fe(e,void 0,void 0,T.location);f.confirmTransitionTo(n,"PUSH",a,function(e){if(e){var t=Ae(n),r=l(s+t);if(Je()!==r){m=t,function(e){window.location.hash=e}(r);var a=M.lastIndexOf(Ae(T.location)),o=M.slice(0,-1===a?0:a+1);o.push(t),M=o,h({action:"PUSH",location:n})}else h()}})},replace:function(e,t){var n=Fe(e,void 0,void 0,T.location);f.confirmTransitionTo(n,"REPLACE",a,function(e){if(e){var t=Ae(n),r=l(s+t);Je()!==r&&(m=t,qe(r));var a=M.indexOf(Ae(T.location));-1!==a&&(M[a]=t),h({action:"REPLACE",location:n})}})},go:k,goBack:function(){k(-1)},goForward:function(){k(1)},block:function(e){void 0===e&&(e=!1);var t=f.setPrompt(e);return w||(L(1),w=!0),function(){return w&&(w=!1,L(-1)),t()}},listen:function(e){var t=f.appendListener(e);return L(1),function(){L(-1),t()}}};return T}function Ze(e,t,n){return Math.min(Math.max(e,t),n)}var Xe=n(58),et=n.n(Xe),tt=function(e){var t=Le();return t.displayName=e,t}("Router"),nt=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen(function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e})),n}ve(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return a.a.createElement(tt.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(a.a.Component);a.a.Component;a.a.Component;var rt={},at=1e4,ot=0;function it(e,t){void 0===t&&(t={}),"string"==typeof t&&(t={path:t});var n=t,r=n.path,a=n.exact,o=void 0!==a&&a,i=n.strict,s=void 0!==i&&i,u=n.sensitive,l=void 0!==u&&u;return[].concat(r).reduce(function(t,n){if(!n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=rt[n]||(rt[n]={});if(r[e])return r[e];var a=[],o={regexp:et()(e,a,t),keys:a};return ot<at&&(r[e]=o,ot++),o}(n,{end:o,strict:s,sensitive:l}),a=r.regexp,i=r.keys,u=a.exec(e);if(!u)return null;var d=u[0],c=u.slice(1),f=e===d;return o&&!f?null:{path:n,url:"/"===n&&""===d?"/":d,isExact:f,params:i.reduce(function(e,t,n){return e[t.name]=c[n],e},{})}},null)}var st=function(e){function t(){return e.apply(this,arguments)||this}return ve(t,e),t.prototype.render=function(){var e=this;return a.a.createElement(tt.Consumer,null,function(t){t||xe(!1);var n=e.props.location||t.location,r=y({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?it(n.pathname,e.props):t.match}),o=e.props,i=o.children,s=o.component,u=o.render;(Array.isArray(i)&&0===i.length&&(i=null),"function"==typeof i)&&(void 0===(i=i(r))&&(i=null));return a.a.createElement(tt.Provider,{value:r},i&&!function(e){return 0===a.a.Children.count(e)}(i)?i:r.match?s?a.a.createElement(s,r):u?u(r):null:null)})},t}(a.a.Component);function ut(e){return"/"===e.charAt(0)?e:"/"+e}function lt(e,t){if(!e)return t;var n=ut(e);return 0!==t.pathname.indexOf(n)?t:y({},t,{pathname:t.pathname.substr(n.length)})}function dt(e){return"string"==typeof e?e:Ae(e)}function ct(e){return function(){xe(!1)}}function ft(){}a.a.Component;var ht=function(e){function t(){return e.apply(this,arguments)||this}return ve(t,e),t.prototype.render=function(){var e=this;return a.a.createElement(tt.Consumer,null,function(t){t||xe(!1);var n,r,o=e.props.location||t.location;return a.a.Children.forEach(e.props.children,function(e){if(null==r&&a.a.isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?it(o.pathname,y({},e.props,{path:i})):t.match}}),r?a.a.cloneElement(n,{location:o,computedMatch:r}):null})},t}(a.a.Component);var _t=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return(t=e.call.apply(e,[this].concat(r))||this).history=Ve(t.props),t}return ve(t,e),t.prototype.render=function(){return a.a.createElement(nt,{history:this.history,children:this.props.children})},t}(a.a.Component);a.a.Component;var mt=function(e){function t(){return e.apply(this,arguments)||this}ve(t,e);var n=t.prototype;return n.handleClick=function(e,t){try{this.props.onClick&&this.props.onClick(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||this.props.target&&"_self"!==this.props.target||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),(this.props.replace?t.replace:t.push)(this.props.to))},n.render=function(){var e=this,t=this.props,n=t.innerRef,r=(t.replace,t.to),o=v(t,["innerRef","replace","to"]);return a.a.createElement(tt.Consumer,null,function(t){t||xe(!1);var i="string"==typeof r?Fe(r,null,null,t.location):r,s=i?t.history.createHref(i):"";return a.a.createElement("a",y({},o,{onClick:function(n){return e.handleClick(n,t.history)},href:s,ref:n}))})},t}(a.a.Component);function pt(e){var t=e["aria-current"],n=void 0===t?"page":t,r=e.activeClassName,o=void 0===r?"active":r,i=e.activeStyle,s=e.className,u=e.exact,l=e.isActive,d=e.location,c=e.strict,f=e.style,h=e.to,_=v(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","strict","style","to"]),m="object"==typeof h?h.pathname:h,p=m&&m.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1");return a.a.createElement(tt.Consumer,null,function(e){e||xe(!1);var t=d?d.pathname:e.location.pathname,r=p?it(t,{path:p,exact:u,strict:c}):null,m=!!(l?l(r,e.location):r),v=m?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter(function(e){return e}).join(" ")}(s,o):s,b=m?y({},f,i):f;return a.a.createElement(mt,y({"aria-current":m&&n||null,className:v,style:b,to:h},_))})}var yt=function(e){e.history,e.push,e.dispatch;var t=e.id,n=e.description,r=e.note,o=e.amount,i=e.createdAt;return a.a.createElement("div",null,a.a.createElement("ul",null,a.a.createElement("li",null,"Description: ",n),a.a.createElement("li",null,"Note: ",r),a.a.createElement("li",null,"Amount: ",o),a.a.createElement("li",null,"Date: ",i)),a.a.createElement(mt,{to:"edit/".concat(t)},a.a.createElement("button",null,"Edit")))},vt=n(1),bt=n.n(vt),gt=function(e,t){var n=t.text,r=t.sortBy,a=t.startDate,o=t.endDate;return e.filter(function(e){var t=bt()(e.createdAt),r=!a||a.isSameOrBefore(t,"day"),i=!o||o.isSameOrBefore(t,"day"),s=e.description.toLowerCase().includes(n.toLowerCase())||e.note.toLowerCase().includes(n.toLowerCase());return r&&i&&s}).sort(function(e,t){return"date"===r?e.createdAt<t.createdAt?1:-1:"amount"===r?e.amount<t.amount?1:-1:void 0})};function Mt(){return(Mt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var kt=ce(function(e){return{expenses:gt(e.expenses,e.filters)}})(function(e){return a.a.createElement("div",null,0===e.expenses.length?a.a.createElement("p",null,"No expenses"):e.expenses.map(function(e,t){return a.a.createElement(yt,Mt({},e,{key:e.id}))}))}),Dt=function(){return{type:"SORT_BY_DATE"}},Lt=function(){return{type:"SORT_BY_AMOUNT"}},wt=n(43);function Tt(e){return(Tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function St(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Yt(e){return(Yt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Pt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ot(e,t){return(Ot=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Et(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var xt=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return n=function(e,t){return!t||"object"!==Tt(t)&&"function"!=typeof t?Pt(e):t}(this,(e=Yt(t)).call.apply(e,[this].concat(a))),Et(Pt(n),"state",{focused:null}),Et(Pt(n),"onDatesChange",function(e){var t=e.startDate,r=e.endDate;n.props.setStartDate(t),n.props.setEndDate(r)}),Et(Pt(n),"onFocusChange",function(e){n.setState(function(){return{focused:e}})}),Et(Pt(n),"onTextChange",function(e){n.props.setTextFilter(e.target.value)}),Et(Pt(n),"onSortChange",function(e){var t=e.target.value;"date"===t?n.props.sortByDate():"amount"===t&&n.props.sortByAmount()}),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ot(e,t)}(t,a.a.Component),n=t,(r=[{key:"render",value:function(){return a.a.createElement("div",null,a.a.createElement("input",{type:"text",value:this.props.filters.text,onChange:this.onTextChange}),a.a.createElement("select",{value:this.props.filters.sortBy,onChange:this.onSortChange},a.a.createElement("option",{value:"date"},"Date"),a.a.createElement("option",{value:"amount"},"Amount")),a.a.createElement(wt.DateRangePicker,{id:"datePicker",startDate:this.props.filters.startDate,startDateId:"lbsfblsdkfn",endDate:this.props.filters.endDate,endDateId:"fsdnlnfd",onDatesChange:this.onDatesChange,focusedInput:this.state.focused,onFocusChange:this.onFocusChange,numberOfMonths:1,showClearDates:!0,isOutsideRange:function(){return!1}}))}}])&&St(n.prototype,r),o&&St(n,o),t}(),Ct=ce(function(e){return{filters:e.filters}},function(e){return{setStartDate:function(t){return e({type:"SET_START_DATE",startDate:t})},setEndDate:function(t){return e({type:"SET_END_DATE",endDate:t})},setTextFilter:function(t){return e(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return{type:"SET_TEXT_FILTER",text:e}}(t))},sortByDate:function(){return e(Dt)},sortByAmount:function(){return e(Lt)}}})(xt),jt=function(){return a.a.createElement("div",null,a.a.createElement(Ct,null),a.a.createElement(kt,null))};n(320);function Ht(e){return(Ht="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function It(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function At(e){return(At=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ft(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Rt(e,t){return(Rt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Nt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Wt=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==Ht(t)&&"function"!=typeof t?Ft(e):t}(this,At(t).call(this,e)),Nt(Ft(n),"onDescriptionChange",function(e){var t=e.target.value;n.setState(function(){return{description:t}})}),Nt(Ft(n),"onNoteChange",function(e){var t=e.target.value;n.setState(function(){return{note:t}})}),Nt(Ft(n),"onAmountChange",function(e){var t=e.target.value;t&&!t.match(/^\d{1,}(\.\d{0,2})?$/)||n.setState(function(){return{amount:t}})}),Nt(Ft(n),"onDateChange",function(e){e&&n.setState(function(){return{createdAt:e}})}),Nt(Ft(n),"onFocusChange",function(e){var t=e.focused;n.setState(function(){return{focused:t}})}),Nt(Ft(n),"onSubmit",function(e){e.preventDefault(),n.state.description&&n.state.amount?(n.setState(function(){return{error:""}}),n.props.onSubmit({description:n.state.description,amount:100*parseFloat(n.state.amount,10),createdAt:n.state.createdAt.valueOf(),note:n.state.note})):n.setState(function(){return{error:"you must add description and amount"}})}),n.state={description:e.expense?e.expense.description:"",note:e.expense?e.expense.note:"",amount:e.expense?(e.expense.amount/100).toString():"",createdAt:e.expense?bt()(e.expense.createdAt):bt()(),focused:!1,error:""},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Rt(e,t)}(t,a.a.Component),n=t,(r=[{key:"render",value:function(){return a.a.createElement("div",null,this.state.error&&a.a.createElement("p",null,this.state.error),a.a.createElement("form",{onSubmit:this.onSubmit},a.a.createElement("input",{type:"text",placeholder:"Description",autoFocus:!0,value:this.state.description,onChange:this.onDescriptionChange}),a.a.createElement("input",{type:"text",placeholder:"Amount",value:this.state.amount,onChange:this.onAmountChange}),a.a.createElement(wt.SingleDatePicker,{date:this.state.createdAt,onDateChange:this.onDateChange,focused:this.state.focused,onFocusChange:this.onFocusChange,numberOfMonths:1,isOutsideRange:function(){return!1}}),a.a.createElement("textarea",{placeholder:"Add a note for your expense",value:this.state.note,onChange:this.onNoteChange}),a.a.createElement("button",null,"Add Expense")))}}])&&It(n.prototype,r),o&&It(n,o),t}(),zt=n(244),Bt=n.n(zt);function Ut(e){return(Ut="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Kt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Vt(e){return(Vt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function $t(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Gt(e,t){return(Gt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Jt=function(e){function t(){var e,n,r,a,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,s=new Array(i),u=0;u<i;u++)s[u]=arguments[u];return n=function(e,t){return!t||"object"!==Ut(t)&&"function"!=typeof t?$t(e):t}(this,(e=Vt(t)).call.apply(e,[this].concat(s))),r=$t(n),o=function(e){n.props.addExpense(e),n.props.history.push("/")},(a="onSubmit")in r?Object.defineProperty(r,a,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[a]=o,n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Gt(e,t)}(t,a.a.Component),n=t,(r=[{key:"render",value:function(){return a.a.createElement("div",null,a.a.createElement("h1",null,"Add Expense"),a.a.createElement(Wt,{onSubmit:this.onSubmit}))}}])&&Kt(n.prototype,r),o&&Kt(n,o),t}(),qt=ce(void 0,function(e){return{addExpense:function(t){return e(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.description,n=void 0===t?"":t,r=e.note,a=void 0===r?"":r,o=e.amount,i=void 0===o?0:o,s=e.createdAt,u=void 0===s?0:s;return{type:"ADD_EXPENSE",expense:{id:Bt()(),description:n,note:a,amount:i,createdAt:u}}}(t))}}})(Jt);function Qt(e){return(Qt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Zt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Xt(e){return(Xt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function en(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function tn(e,t){return(tn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function nn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var rn=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return n=function(e,t){return!t||"object"!==Qt(t)&&"function"!=typeof t?en(e):t}(this,(e=Xt(t)).call.apply(e,[this].concat(a))),nn(en(n),"onSubmit",function(e){n.props.editExpense(n.props.expense.id,e),n.props.history.push("/")}),nn(en(n),"onRemove",function(){n.props.removeExpense({id:n.props.expense.id}),n.props.history.push("/")}),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&tn(e,t)}(t,a.a.Component),n=t,(r=[{key:"render",value:function(){return a.a.createElement("div",null,a.a.createElement(Wt,{expense:this.props.expense,onSubmit:this.onSubmit}),a.a.createElement("button",{onClick:this.onRemove},"Remove"))}}])&&Zt(n.prototype,r),o&&Zt(n,o),t}(),an=ce(function(e,t){return{expense:e.expenses.find(function(e){return e.id===t.match.params.id})}},function(e,t){return{editExpense:function(t,n){return e(function(e,t){return{type:"EDIT_EXPENSE",id:e,updates:t}}(t,n))},removeExpense:function(t){return e(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.id;return{type:"REMOVE_EXPENSE",id:t}}(t))}}})(rn),on=function(){return a.a.createElement("p",null,"Help")},sn=function(){return a.a.createElement("div",null,a.a.createElement("p",null,"404 Page Not Found"),a.a.createElement(mt,{to:"/"},"Go Home"))},un=function(){return a.a.createElement("header",null,a.a.createElement("h1",null,"Expensify"),a.a.createElement(pt,{activeClassName:"is-active",to:"/",exact:!0},"Home "),a.a.createElement(pt,{activeClassName:"is-active",to:"/create"},"Create "))},ln=function(){return a.a.createElement(_t,null,a.a.createElement("div",null,a.a.createElement(un,null),a.a.createElement(ht,null,a.a.createElement(st,{path:"/",component:jt,exact:!0}),a.a.createElement(st,{path:"/create",component:qt}),a.a.createElement(st,{path:"/edit/:id",component:an}),a.a.createElement(st,{path:"/help",component:on}),a.a.createElement(st,{component:sn}))))};function dn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function cn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dn(n,!0).forEach(function(t){fn(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dn(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function fn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function hn(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var _n=[],mn=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:_n,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"ADD_EXPENSE":return[].concat(hn(e),[t.expense]);case"REMOVE_EXPENSE":return e.filter(function(e){return t.id!==e.id});case"EDIT_EXPENSE":return e.map(function(e){return e.id===t.id?cn({},e,{},t.updates):e});default:return e}};function pn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function yn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?pn(n,!0).forEach(function(t){vn(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):pn(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function vn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var bn={text:"",sortBy:"date",startDate:bt()().startOf("month"),endDate:bt()().endOf("month")},gn=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:bn,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_TEXT_FILTER":return yn({},e,{text:t.text});case"SORT_BY_DATE":return yn({},e,{sortBy:"date"});case"SORT_BY_AMOUNT":return yn({},e,{sortBy:"amount"});case"SET_START_DATE":return yn({},e,{startDate:t.startDate});case"SET_END_DATE":return yn({},e,{endDate:t.endDate});default:return e}};n(336),n(337),n(338);console.log("test");var Mn=A(R({expenses:mn,filters:gn}),window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__()),kn=a.a.createElement(p,{store:Mn},a.a.createElement(ln,null));i.a.render(kn,document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbW9tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyYm5iLXByb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvZGVmYXVsdFBocmFzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2dldFBocmFzZVByb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW56eW1lLXNoYWxsb3ctZXF1YWwvYnVpbGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXdpdGgtc3R5bGVzL2xpYi93aXRoU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW1vbWVudC1wcm9wdHlwZXMvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWZpbmUtcHJvcGVydGllcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9ub2ZsaXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9zaGFwZXMvRGF5T2ZXZWVrU2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9zaGFwZXMvT3BlbkRpcmVjdGlvblNoYXBlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9pc1NhbWVEYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy90b01vbWVudE9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3NoYXBlcy9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtdG91Y2gtZGV2aWNlL2J1aWxkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvc2hhcGVzL0ljb25Qb3NpdGlvblNoYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvaXNJbmNsdXNpdmVseUFmdGVyRGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL3RvSVNPRGF0ZVN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3NoYXBlcy9EaXNhYmxlZFNoYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvc2hhcGVzL0NhbGVuZGFySW5mb1Bvc2l0aW9uU2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9pc0JlZm9yZURheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvQ2xvc2VCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9zaGFwZXMvTW9kaWZpZXJzU2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnNvbGlkYXRlZC1ldmVudHMvbGliL2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL3RvSVNPTW9udGhTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L0dldEludHJpbnNpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2lzQWZ0ZXJEYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvQ2FsZW5kYXJEYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdXRzaWRlLWNsaWNrLWhhbmRsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC52YWx1ZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWNhbGxhYmxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2Fzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2dldElucHV0SGVpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy90b0xvY2FsaXplZERhdGVTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9pc0RheVZpc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9jb21wb25lbnRzL0RheVBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYWYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItZHouanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXIta3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItbWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItc2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItdG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXouanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYnIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUtY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZHYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tU0cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tYXUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tY2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tZ2IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4taWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4taWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tbnouanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtZG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtdXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnItY2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnItY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ29tLWxhdG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ3UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHktYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXQtY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvamEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvanYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva28uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva3UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva3kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbGIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbHYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXMtbXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmwtYmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcGEtaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcHQtYnIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3ItY3lybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGwtcGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGxoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90em0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHptLWxhdG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdWctY24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXouanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXotbGF0bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS92aS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS94LXBzZXVkby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS95by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC1jbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC1oay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC10dy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5hc3NpZ24vaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL3NoYW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QuYXNzaWduL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC13aXRoLXN0eWxlcy9saWIvVGhlbWVkU3R5bGVTaGVldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFmL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvZ2V0Q2FsZW5kYXJEYXlTZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvQ2FsZW5kYXJNb250aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3RoZW1lL0RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2NhbGN1bGF0ZURpbWVuc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvQ2FsZW5kYXJNb250aEdyaWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9nZXRDYWxlbmRhck1vbnRoV2lkdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9pc1NhbWVNb250aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvZXMyMDE2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy10by1wcmltaXRpdmUvaGVscGVycy9pc1ByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtc3ltYm9sL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2Fzc2VydFJlY29yZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9pc05hTi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9pc0Zpbml0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL21vZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9jdW1lbnQuY29udGFpbnMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvY3VtZW50LmNvbnRhaW5zL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvc2hhcGVzL0RhdGVSYW5nZVBpY2tlclNoYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvc2hhcGVzL0ZvY3VzZWRJbnB1dFNoYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvc2hhcGVzL09yaWVudGF0aW9uU2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9zaGFwZXMvQW5jaG9yRGlyZWN0aW9uU2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9nZXRSZXNwb25zaXZlQ29udGFpbmVyU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvZ2V0RGV0YWNoZWRDb250YWluZXJTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9kaXNhYmxlU2Nyb2xsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9EYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9jb21wb25lbnRzL0RhdGVSYW5nZVBpY2tlcklucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9EYXRlSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvUmlnaHRBcnJvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvTGVmdEFycm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9DYWxlbmRhckljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9jb21wb25lbnRzL0RheVBpY2tlclJhbmdlQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvaXNOZXh0RGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvZ2V0VmlzaWJsZURheXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9tb2RpZmllcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9nZXRQb29sZWRNb21lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9jb21wb25lbnRzL0RheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvc2hhcGVzL1NpbmdsZURhdGVQaWNrZXJTaGFwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvU2luZ2xlRGF0ZVBpY2tlcklucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmxhdC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLmZsYXQvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvbGliL3JuZy1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2xpYi9ieXRlc1RvVXVpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9ydGFsL2VzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wb3J0YWwvZXMvUG9ydGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wb3J0YWwvZXMvTGVnYWN5UG9ydGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wb3J0YWwvZXMvUG9ydGFsQ29tcGF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wb3J0YWwvZXMvUG9ydGFsV2l0aFN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wb3J0YWwvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ndWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUgc3luYyBeXFwuXFwvLiokIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9tZW50LXByb3B0eXBlcy9zcmMvbW9tZW50LXZhbGlkYXRpb24td3JhcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9tZW50LXByb3B0eXBlcy9zcmMvY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyYm5iLXByb3AtdHlwZXMvYnVpbGQvbW9ja3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QuYXNzaWduL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXdpdGgtZGlyZWN0aW9uL2Rpc3QvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC13aXRoLWRpcmVjdGlvbi9kaXN0L3Byb3B0eXBlcy9icmNhc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BlcmZvcm1hbmNlLW5vdy9saWIvcGVyZm9ybWFuY2Utbm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9nZXRQaHJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9DYWxlbmRhcldlZWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9jb21wb25lbnRzL0N1c3RvbWl6YWJsZUNhbGVuZGFyRGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvZ2V0Q2FsZW5kYXJNb250aFdlZWtzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvaXNUcmFuc2l0aW9uRW5kU3VwcG9ydGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvZ2V0VHJhbnNmb3JtU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvaXNQcmV2TW9udGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9pc05leHRNb250aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvRGF0ZVJhbmdlUGlja2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdXRzaWRlLWNsaWNrLWhhbmRsZXIvYnVpbGQvT3V0c2lkZUNsaWNrSGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvZXM3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9lczIwMTUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLXRvLXByaW1pdGl2ZS9lczYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLXRvLXByaW1pdGl2ZS9lczIwMTUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWRhdGUtb2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9pc1ByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvZXM1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy10by1wcmltaXRpdmUvZXM1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1yZWdleC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb2N1bWVudC5jb250YWlucy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9jdW1lbnQuY29udGFpbnMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2RlYm91bmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlUmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2dldFNlbGVjdGVkRGF0ZU9mZnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2dldFByZXZpb3VzTW9udGhNZW1vTGFzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9EYXlQaWNrZXJOYXZpZ2F0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9DaGV2cm9uVXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9jb21wb25lbnRzL0NoZXZyb25Eb3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvS2V5Ym9hcmRTaG9ydGN1dFJvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2dldE51bWJlck9mQ2FsZW5kYXJNb250aFdlZWtzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvZ2V0QWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvU2luZ2xlRGF0ZVBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvU2luZ2xlRGF0ZVBpY2tlcklucHV0Q29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2lzSW5jbHVzaXZlbHlCZWZvcmVEYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2luaXRpYWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9pbml0aWFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvcmVnaXN0ZXJDU1NJbnRlcmZhY2VXaXRoRGVmYXVsdFRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC13aXRoLXN0eWxlcy1pbnRlcmZhY2UtY3NzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC13aXRoLXN0eWxlcy1pbnRlcmZhY2UtY3NzL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5LnByb3RvdHlwZS5mbGF0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9lczIwMTcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvZm9yRWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLmZsYXQvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2xvYmFsLWNhY2hlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC13aXRoLXN0eWxlcy1pbnRlcmZhY2UtY3NzL2Rpc3QvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC13aXRoLXN0eWxlcy1pbnRlcmZhY2UtY3NzL2Rpc3QvdXRpbHMvZ2V0Q2xhc3NOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC13aXRoLXN0eWxlcy1pbnRlcmZhY2UtY3NzL2Rpc3QvdXRpbHMvc2VwYXJhdGVTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9yZWdpc3RlckludGVyZmFjZVdpdGhEZWZhdWx0VGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvdjEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvdjQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VSZWR1eENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VEaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXNtL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lc20vcmVhY3Qtcm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzbS9yZWFjdC1yb3V0ZXItZG9tLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0V4cGVuc2VMaXN0SXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VsZWN0b3JzL2V4cGVuc2VzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0V4cGVuc2VMaXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL2ZpbHRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRXhwZW5zZUxpc3RGaWx0ZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0V4cGVuc2VEYXNoYm9hcmRQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0V4cGVuc2VGb3JtLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0FkZEV4cGVuc2VQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL2V4cGVuc2VzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0VkaXRFeHBlbnNlUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IZWxwUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob3RGb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JvdXRlcnMvQXBwUm91dGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy9leHBlbnNlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVkdWNlcnMvZmlsdGVycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9jb25maWd1cmVTdG9yZS5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImhvb2tDYWxsYmFjayIsInNvbWUiLCJob29rcyIsImFwcGx5IiwiYXJndW1lbnRzIiwiaXNBcnJheSIsImlucHV0IiwiQXJyYXkiLCJ0b1N0cmluZyIsImlzT2JqZWN0IiwiaXNVbmRlZmluZWQiLCJpc051bWJlciIsImlzRGF0ZSIsIkRhdGUiLCJtYXAiLCJhcnIiLCJmbiIsInJlcyIsImxlbmd0aCIsInB1c2giLCJoYXNPd25Qcm9wIiwiYSIsImIiLCJleHRlbmQiLCJ2YWx1ZU9mIiwiY3JlYXRlVVRDIiwiZm9ybWF0IiwibG9jYWxlIiwic3RyaWN0IiwiY3JlYXRlTG9jYWxPclVUQyIsInV0YyIsImdldFBhcnNpbmdGbGFncyIsIl9wZiIsImVtcHR5IiwidW51c2VkVG9rZW5zIiwidW51c2VkSW5wdXQiLCJvdmVyZmxvdyIsImNoYXJzTGVmdE92ZXIiLCJudWxsSW5wdXQiLCJpbnZhbGlkTW9udGgiLCJpbnZhbGlkRm9ybWF0IiwidXNlckludmFsaWRhdGVkIiwiaXNvIiwicGFyc2VkRGF0ZVBhcnRzIiwibWVyaWRpZW0iLCJyZmMyODIyIiwid2Vla2RheU1pc21hdGNoIiwiaXNWYWxpZCIsIl9pc1ZhbGlkIiwiZmxhZ3MiLCJwYXJzZWRQYXJ0cyIsImlzTm93VmFsaWQiLCJpc05hTiIsIl9kIiwiZ2V0VGltZSIsImludmFsaWRXZWVrZGF5IiwiX3N0cmljdCIsInVuZGVmaW5lZCIsImJpZ0hvdXIiLCJpc0Zyb3plbiIsImNyZWF0ZUludmFsaWQiLCJOYU4iLCJmdW4iLCJ0aGlzIiwibGVuIiwibW9tZW50UHJvcGVydGllcyIsImNvcHlDb25maWciLCJ0byIsImZyb20iLCJwcm9wIiwidmFsIiwiX2lzQU1vbWVudE9iamVjdCIsIl9pIiwiX2YiLCJfbCIsIl90em0iLCJfaXNVVEMiLCJfb2Zmc2V0IiwiX2xvY2FsZSIsInVwZGF0ZUluUHJvZ3Jlc3MiLCJNb21lbnQiLCJjb25maWciLCJ1cGRhdGVPZmZzZXQiLCJpc01vbWVudCIsIm9iaiIsImFic0Zsb29yIiwibnVtYmVyIiwiTWF0aCIsImNlaWwiLCJmbG9vciIsInRvSW50IiwiYXJndW1lbnRGb3JDb2VyY2lvbiIsImNvZXJjZWROdW1iZXIiLCJpc0Zpbml0ZSIsImNvbXBhcmVBcnJheXMiLCJhcnJheTEiLCJhcnJheTIiLCJkb250Q29udmVydCIsIm1pbiIsImxlbmd0aERpZmYiLCJhYnMiLCJkaWZmcyIsIndhcm4iLCJtc2ciLCJzdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MiLCJjb25zb2xlIiwiZGVwcmVjYXRlIiwiZmlyc3RUaW1lIiwiZGVwcmVjYXRpb25IYW5kbGVyIiwiYXJnIiwiYXJncyIsInNsaWNlIiwiam9pbiIsIkVycm9yIiwic3RhY2siLCJrZXlzIiwiZGVwcmVjYXRpb25zIiwiZGVwcmVjYXRlU2ltcGxlIiwiaXNGdW5jdGlvbiIsIkZ1bmN0aW9uIiwibWVyZ2VDb25maWdzIiwicGFyZW50Q29uZmlnIiwiY2hpbGRDb25maWciLCJMb2NhbGUiLCJzZXQiLCJhbGlhc2VzIiwiYWRkVW5pdEFsaWFzIiwidW5pdCIsInNob3J0aGFuZCIsImxvd2VyQ2FzZSIsInRvTG93ZXJDYXNlIiwibm9ybWFsaXplVW5pdHMiLCJ1bml0cyIsIm5vcm1hbGl6ZU9iamVjdFVuaXRzIiwiaW5wdXRPYmplY3QiLCJub3JtYWxpemVkUHJvcCIsIm5vcm1hbGl6ZWRJbnB1dCIsInByaW9yaXRpZXMiLCJhZGRVbml0UHJpb3JpdHkiLCJwcmlvcml0eSIsInplcm9GaWxsIiwidGFyZ2V0TGVuZ3RoIiwiZm9yY2VTaWduIiwiYWJzTnVtYmVyIiwiemVyb3NUb0ZpbGwiLCJwb3ciLCJtYXgiLCJzdWJzdHIiLCJmb3JtYXR0aW5nVG9rZW5zIiwibG9jYWxGb3JtYXR0aW5nVG9rZW5zIiwiZm9ybWF0RnVuY3Rpb25zIiwiZm9ybWF0VG9rZW5GdW5jdGlvbnMiLCJhZGRGb3JtYXRUb2tlbiIsInRva2VuIiwicGFkZGVkIiwib3JkaW5hbCIsImNhbGxiYWNrIiwiZnVuYyIsImxvY2FsZURhdGEiLCJmb3JtYXRNb21lbnQiLCJleHBhbmRGb3JtYXQiLCJhcnJheSIsIm1hdGNoIiwicmVwbGFjZSIsIm1vbSIsIm91dHB1dCIsIm1ha2VGb3JtYXRGdW5jdGlvbiIsImludmFsaWREYXRlIiwicmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zIiwibG9uZ0RhdGVGb3JtYXQiLCJsYXN0SW5kZXgiLCJ0ZXN0IiwibWF0Y2gxIiwibWF0Y2gyIiwibWF0Y2gzIiwibWF0Y2g0IiwibWF0Y2g2IiwibWF0Y2gxdG8yIiwibWF0Y2gzdG80IiwibWF0Y2g1dG82IiwibWF0Y2gxdG8zIiwibWF0Y2gxdG80IiwibWF0Y2gxdG82IiwibWF0Y2hVbnNpZ25lZCIsIm1hdGNoU2lnbmVkIiwibWF0Y2hPZmZzZXQiLCJtYXRjaFNob3J0T2Zmc2V0IiwibWF0Y2hXb3JkIiwicmVnZXhlcyIsImFkZFJlZ2V4VG9rZW4iLCJyZWdleCIsInN0cmljdFJlZ2V4IiwiaXNTdHJpY3QiLCJnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4iLCJSZWdFeHAiLCJyZWdleEVzY2FwZSIsIm1hdGNoZWQiLCJwMSIsInAyIiwicDMiLCJwNCIsInRva2VucyIsImFkZFBhcnNlVG9rZW4iLCJhZGRXZWVrUGFyc2VUb2tlbiIsIl93IiwiYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4iLCJfYSIsIllFQVIiLCJNT05USCIsIkRBVEUiLCJIT1VSIiwiTUlOVVRFIiwiU0VDT05EIiwiTUlMTElTRUNPTkQiLCJXRUVLIiwiV0VFS0RBWSIsImRheXNJblllYXIiLCJ5ZWFyIiwiaXNMZWFwWWVhciIsInkiLCJwYXJzZVR3b0RpZ2l0WWVhciIsInBhcnNlSW50IiwiaW5kZXhPZiIsImdldFNldFllYXIiLCJtYWtlR2V0U2V0Iiwia2VlcFRpbWUiLCJzZXQkMSIsIm1vbnRoIiwiZGF0ZSIsImRheXNJbk1vbnRoIiwieCIsIm1vZE1vbnRoIiwibW9udGhzU2hvcnQiLCJtb250aHMiLCJtb250aHNTaG9ydFJlZ2V4IiwibW9udGhzUmVnZXgiLCJtb250aHNQYXJzZSIsIk1PTlRIU19JTl9GT1JNQVQiLCJkZWZhdWx0TG9jYWxlTW9udGhzIiwic3BsaXQiLCJkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQiLCJzZXRNb250aCIsImRheU9mTW9udGgiLCJnZXRTZXRNb250aCIsImRlZmF1bHRNb250aHNTaG9ydFJlZ2V4IiwiZGVmYXVsdE1vbnRoc1JlZ2V4IiwiY29tcHV0ZU1vbnRoc1BhcnNlIiwiY21wTGVuUmV2Iiwic2hvcnRQaWVjZXMiLCJsb25nUGllY2VzIiwibWl4ZWRQaWVjZXMiLCJzb3J0IiwiX21vbnRoc1JlZ2V4IiwiX21vbnRoc1Nob3J0UmVnZXgiLCJfbW9udGhzU3RyaWN0UmVnZXgiLCJfbW9udGhzU2hvcnRTdHJpY3RSZWdleCIsImNyZWF0ZVVUQ0RhdGUiLCJVVEMiLCJnZXRVVENGdWxsWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwiZmlyc3RXZWVrT2Zmc2V0IiwiZG93IiwiZG95IiwiZndkIiwiZ2V0VVRDRGF5IiwiZGF5T2ZZZWFyRnJvbVdlZWtzIiwid2VlayIsIndlZWtkYXkiLCJyZXNZZWFyIiwicmVzRGF5T2ZZZWFyIiwiZGF5T2ZZZWFyIiwid2Vla09mWWVhciIsInJlc1dlZWsiLCJ3ZWVrT2Zmc2V0Iiwid2Vla3NJblllYXIiLCJ3ZWVrT2Zmc2V0TmV4dCIsInNoaWZ0V2Vla2RheXMiLCJ3cyIsImNvbmNhdCIsIndlZWtkYXlzTWluIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzIiwid2Vla2RheXNNaW5SZWdleCIsIndlZWtkYXlzU2hvcnRSZWdleCIsIndlZWtkYXlzUmVnZXgiLCJ3ZWVrZGF5c1BhcnNlIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4iLCJkZWZhdWx0V2Vla2RheXNSZWdleCIsImRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXgiLCJkZWZhdWx0V2Vla2RheXNNaW5SZWdleCIsImNvbXB1dGVXZWVrZGF5c1BhcnNlIiwibWlucCIsInNob3J0cCIsImxvbmdwIiwibWluUGllY2VzIiwiZGF5IiwiX3dlZWtkYXlzUmVnZXgiLCJfd2Vla2RheXNTaG9ydFJlZ2V4IiwiX3dlZWtkYXlzTWluUmVnZXgiLCJfd2Vla2RheXNTdHJpY3RSZWdleCIsIl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXgiLCJfd2Vla2RheXNNaW5TdHJpY3RSZWdleCIsImhGb3JtYXQiLCJob3VycyIsImxvd2VyY2FzZSIsIm1pbnV0ZXMiLCJtYXRjaE1lcmlkaWVtIiwiX21lcmlkaWVtUGFyc2UiLCJzZWNvbmRzIiwia0lucHV0IiwiX2lzUG0iLCJpc1BNIiwiX21lcmlkaWVtIiwicG9zIiwicG9zMSIsInBvczIiLCJnbG9iYWxMb2NhbGUiLCJnZXRTZXRIb3VyIiwiYmFzZUNvbmZpZyIsImNhbGVuZGFyIiwic2FtZURheSIsIm5leHREYXkiLCJuZXh0V2VlayIsImxhc3REYXkiLCJsYXN0V2VlayIsInNhbWVFbHNlIiwiTFRTIiwiTFQiLCJMIiwiTEwiLCJMTEwiLCJMTExMIiwiZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsInJlbGF0aXZlVGltZSIsImZ1dHVyZSIsInBhc3QiLCJzcyIsIm1tIiwiaCIsImhoIiwiZGQiLCJNIiwiTU0iLCJ5eSIsIm1lcmlkaWVtUGFyc2UiLCJsb2NhbGVzIiwibG9jYWxlRmFtaWxpZXMiLCJub3JtYWxpemVMb2NhbGUiLCJsb2FkTG9jYWxlIiwib2xkTG9jYWxlIiwiX2FiYnIiLCJnZXRTZXRHbG9iYWxMb2NhbGUiLCJlIiwidmFsdWVzIiwiZGF0YSIsImdldExvY2FsZSIsImRlZmluZUxvY2FsZSIsImFiYnIiLCJfY29uZmlnIiwicGFyZW50TG9jYWxlIiwiZm9yRWFjaCIsIm5hbWVzIiwiaiIsIm5leHQiLCJjaG9vc2VMb2NhbGUiLCJjaGVja092ZXJmbG93IiwiX292ZXJmbG93RGF5T2ZZZWFyIiwiX292ZXJmbG93V2Vla3MiLCJfb3ZlcmZsb3dXZWVrZGF5IiwiZGVmYXVsdHMiLCJjb25maWdGcm9tQXJyYXkiLCJjdXJyZW50RGF0ZSIsImV4cGVjdGVkV2Vla2RheSIsInllYXJUb1VzZSIsIm5vd1ZhbHVlIiwibm93IiwiX3VzZVVUQyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiY3VycmVudERhdGVBcnJheSIsInciLCJ3ZWVrWWVhciIsInRlbXAiLCJ3ZWVrZGF5T3ZlcmZsb3ciLCJHRyIsIlciLCJFIiwiY3JlYXRlTG9jYWwiLCJfd2VlayIsImN1cldlZWsiLCJnZyIsIl9kYXlPZlllYXIiLCJkYXlPZlllYXJGcm9tV2Vla0luZm8iLCJfbmV4dERheSIsIm1zIiwic2V0RnVsbFllYXIiLCJnZXREYXkiLCJzZXRVVENNaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsImV4dGVuZGVkSXNvUmVnZXgiLCJiYXNpY0lzb1JlZ2V4IiwidHpSZWdleCIsImlzb0RhdGVzIiwiaXNvVGltZXMiLCJhc3BOZXRKc29uUmVnZXgiLCJjb25maWdGcm9tSVNPIiwiYWxsb3dUaW1lIiwiZGF0ZUZvcm1hdCIsInRpbWVGb3JtYXQiLCJ0ekZvcm1hdCIsInN0cmluZyIsImV4ZWMiLCJjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0IiwidW50cnVuY2F0ZVllYXIiLCJ5ZWFyU3RyIiwib2JzT2Zmc2V0cyIsIlVUIiwiR01UIiwiRURUIiwiRVNUIiwiQ0RUIiwiQ1NUIiwiTURUIiwiTVNUIiwiUERUIiwiUFNUIiwiY29uZmlnRnJvbVJGQzI4MjIiLCJtb250aFN0ciIsImRheVN0ciIsImhvdXJTdHIiLCJtaW51dGVTdHIiLCJzZWNvbmRTdHIiLCJyZXN1bHQiLCJwYXJzZWRBcnJheSIsIndlZWtkYXlTdHIiLCJwYXJzZWRJbnB1dCIsImNoZWNrV2Vla2RheSIsIm9ic09mZnNldCIsIm1pbGl0YXJ5T2Zmc2V0IiwibnVtT2Zmc2V0IiwiaG0iLCJjYWxjdWxhdGVPZmZzZXQiLCJJU09fODYwMSIsIlJGQ18yODIyIiwic2tpcHBlZCIsInN0cmluZ0xlbmd0aCIsInRvdGFsUGFyc2VkSW5wdXRMZW5ndGgiLCJob3VyIiwiaXNQbSIsIm1lcmlkaWVtSG91ciIsIm1lcmlkaWVtRml4V3JhcCIsInByZXBhcmVDb25maWciLCJwcmVwYXJzZSIsInRlbXBDb25maWciLCJiZXN0TW9tZW50Iiwic2NvcmVUb0JlYXQiLCJjdXJyZW50U2NvcmUiLCJzY29yZSIsImNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheSIsImNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrIiwiY29uZmlnRnJvbVN0cmluZyIsIm1pbnV0ZSIsInNlY29uZCIsIm1pbGxpc2Vjb25kIiwiY29uZmlnRnJvbU9iamVjdCIsImNvbmZpZ0Zyb21JbnB1dCIsImlzVVRDIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImsiLCJpc09iamVjdEVtcHR5IiwiYWRkIiwicHJvdG90eXBlTWluIiwib3RoZXIiLCJwcm90b3R5cGVNYXgiLCJwaWNrQnkiLCJtb21lbnRzIiwib3JkZXJpbmciLCJEdXJhdGlvbiIsImR1cmF0aW9uIiwieWVhcnMiLCJxdWFydGVycyIsInF1YXJ0ZXIiLCJ3ZWVrcyIsImlzb1dlZWsiLCJkYXlzIiwibWlsbGlzZWNvbmRzIiwidW5pdEhhc0RlY2ltYWwiLCJwYXJzZUZsb2F0IiwiaXNEdXJhdGlvblZhbGlkIiwiX21pbGxpc2Vjb25kcyIsIl9kYXlzIiwiX21vbnRocyIsIl9kYXRhIiwiX2J1YmJsZSIsImlzRHVyYXRpb24iLCJhYnNSb3VuZCIsInJvdW5kIiwib2Zmc2V0Iiwic2VwYXJhdG9yIiwidXRjT2Zmc2V0Iiwic2lnbiIsIm9mZnNldEZyb21TdHJpbmciLCJjaHVua09mZnNldCIsIm1hdGNoZXIiLCJtYXRjaGVzIiwicGFydHMiLCJjbG9uZVdpdGhPZmZzZXQiLCJtb2RlbCIsImRpZmYiLCJjbG9uZSIsInNldFRpbWUiLCJsb2NhbCIsImdldERhdGVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsImlzVXRjIiwiYXNwTmV0UmVnZXgiLCJpc29SZWdleCIsImNyZWF0ZUR1cmF0aW9uIiwicmV0IiwiZGlmZlJlcyIsImJhc2UiLCJwYXJzZUlzbyIsImlzQmVmb3JlIiwicG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZSIsImlucCIsImlzQWZ0ZXIiLCJjcmVhdGVBZGRlciIsImRpcmVjdGlvbiIsInBlcmlvZCIsInRtcCIsImFkZFN1YnRyYWN0IiwiaXNBZGRpbmciLCJpbnZhbGlkIiwic3VidHJhY3QiLCJtb250aERpZmYiLCJ3aG9sZU1vbnRoRGlmZiIsImFuY2hvciIsIm5ld0xvY2FsZURhdGEiLCJkZWZhdWx0Rm9ybWF0IiwiZGVmYXVsdEZvcm1hdFV0YyIsImxhbmciLCJNU19QRVJfU0VDT05EIiwiTVNfUEVSX01JTlVURSIsIk1TX1BFUl9IT1VSIiwiTVNfUEVSXzQwMF9ZRUFSUyIsIm1vZCQxIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibG9jYWxTdGFydE9mRGF0ZSIsInV0Y1N0YXJ0T2ZEYXRlIiwiYWRkV2Vla1llYXJGb3JtYXRUb2tlbiIsImdldFNldFdlZWtZZWFySGVscGVyIiwid2Vla3NUYXJnZXQiLCJkYXlPZlllYXJEYXRhIiwiaXNvV2Vla1llYXIiLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIl9vcmRpbmFsUGFyc2UiLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQiLCJnZXRTZXREYXlPZk1vbnRoIiwiZ2V0U2V0TWludXRlIiwiZ2V0U2V0U2Vjb25kIiwicGFyc2VNcyIsImdldFNldE1pbGxpc2Vjb25kIiwicHJvdG8iLCJwcmVQYXJzZVBvc3RGb3JtYXQiLCJ0aW1lIiwiZm9ybWF0cyIsInNvZCIsInN0YXJ0T2YiLCJjYWxlbmRhckZvcm1hdCIsImFzRmxvYXQiLCJ0aGF0Iiwiem9uZURlbHRhIiwiZW5kT2YiLCJzdGFydE9mRGF0ZSIsImlzb1dlZWtkYXkiLCJpbnB1dFN0cmluZyIsInBvc3Rmb3JtYXQiLCJ3aXRob3V0U3VmZml4IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJpbnZhbGlkQXQiLCJsb2NhbElucHV0IiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJsb2NhbEZyb20iLCJsb2NhbFRvIiwiaXNTYW1lIiwiaW5wdXRNcyIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsInBhcnNpbmdGbGFncyIsInByaW9yaXRpemVkIiwidW5pdHNPYmoiLCJ1IiwiZ2V0UHJpb3JpdGl6ZWRVbml0cyIsInRvQXJyYXkiLCJ0b09iamVjdCIsInRvRGF0ZSIsInRvSVNPU3RyaW5nIiwia2VlcE9mZnNldCIsImluc3BlY3QiLCJ6b25lIiwiaXNMb2NhbCIsInByZWZpeCIsInN1ZmZpeCIsInRvSlNPTiIsInVuaXgiLCJjcmVhdGlvbkRhdGEiLCJpc29XZWVrcyIsIndlZWtJbmZvIiwiaXNvV2Vla3NJblllYXIiLCJwYXJzZVdlZWtkYXkiLCJwYXJzZUlzb1dlZWtkYXkiLCJrZWVwTG9jYWxUaW1lIiwia2VlcE1pbnV0ZXMiLCJsb2NhbEFkanVzdCIsIl9jaGFuZ2VJblByb2dyZXNzIiwicGFyc2Vab25lIiwidFpvbmUiLCJoYXNBbGlnbmVkSG91ck9mZnNldCIsImlzRFNUIiwiaXNVdGNPZmZzZXQiLCJ6b25lQWJiciIsInpvbmVOYW1lIiwiZGF0ZXMiLCJpc0RTVFNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwicHJvdG8kMSIsImdldCQxIiwiaW5kZXgiLCJmaWVsZCIsInNldHRlciIsImxpc3RNb250aHNJbXBsIiwib3V0IiwibGlzdFdlZWtkYXlzSW1wbCIsImxvY2FsZVNvcnRlZCIsInNoaWZ0IiwiX2NhbGVuZGFyIiwiX2xvbmdEYXRlRm9ybWF0IiwiZm9ybWF0VXBwZXIiLCJ0b1VwcGVyQ2FzZSIsIl9pbnZhbGlkRGF0ZSIsIl9vcmRpbmFsIiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsInNvdXJjZSIsImlzRm9ybWF0IiwiX21vbnRoc1Nob3J0IiwibW9udGhOYW1lIiwiX21vbnRoc1BhcnNlRXhhY3QiLCJpaSIsImxsYyIsInRvTG9jYWxlTG93ZXJDYXNlIiwiX21vbnRoc1BhcnNlIiwiX2xvbmdNb250aHNQYXJzZSIsIl9zaG9ydE1vbnRoc1BhcnNlIiwiZmlyc3REYXlPZlllYXIiLCJmaXJzdERheU9mV2VlayIsIl93ZWVrZGF5cyIsIl93ZWVrZGF5c01pbiIsIl93ZWVrZGF5c1Nob3J0Iiwid2Vla2RheU5hbWUiLCJfd2Vla2RheXNQYXJzZUV4YWN0IiwiX3dlZWtkYXlzUGFyc2UiLCJfc2hvcnRXZWVrZGF5c1BhcnNlIiwiX21pbldlZWtkYXlzUGFyc2UiLCJfZnVsbFdlZWtkYXlzUGFyc2UiLCJjaGFyQXQiLCJpc0xvd2VyIiwibGFuZ0RhdGEiLCJtYXRoQWJzIiwiYWRkU3VidHJhY3QkMSIsImFic0NlaWwiLCJkYXlzVG9Nb250aHMiLCJtb250aHNUb0RheXMiLCJtYWtlQXMiLCJhbGlhcyIsImFzIiwiYXNNaWxsaXNlY29uZHMiLCJhc1NlY29uZHMiLCJhc01pbnV0ZXMiLCJhc0hvdXJzIiwiYXNEYXlzIiwiYXNXZWVrcyIsImFzTW9udGhzIiwiYXNRdWFydGVycyIsImFzWWVhcnMiLCJtYWtlR2V0dGVyIiwidGhyZXNob2xkcyIsImFicyQxIiwidG9JU09TdHJpbmckMSIsIlkiLCJEIiwidG9GaXhlZCIsInRvdGFsIiwidG90YWxTaWduIiwieW1TaWduIiwiZGF5c1NpZ24iLCJobXNTaWduIiwicHJvdG8kMiIsIm1vbnRoc0Zyb21EYXlzIiwid2l0aFN1ZmZpeCIsInBvc05lZ0R1cmF0aW9uIiwicmVsYXRpdmVUaW1lJDEiLCJ0b0lzb1N0cmluZyIsInZlcnNpb24iLCJ1cGRhdGVMb2NhbGUiLCJ0bXBMb2NhbGUiLCJyZWxhdGl2ZVRpbWVSb3VuZGluZyIsInJvdW5kaW5nRnVuY3Rpb24iLCJyZWxhdGl2ZVRpbWVUaHJlc2hvbGQiLCJ0aHJlc2hvbGQiLCJsaW1pdCIsIm15TW9tZW50IiwiSFRNTDVfRk1UIiwiREFURVRJTUVfTE9DQUwiLCJEQVRFVElNRV9MT0NBTF9TRUNPTkRTIiwiREFURVRJTUVfTE9DQUxfTVMiLCJUSU1FIiwiVElNRV9TRUNPTkRTIiwiVElNRV9NUyIsImZhY3RvcnkiLCJNT0RJRklFUl9LRVlfTkFNRVMiLCJERUZBVUxUX1ZFUlRJQ0FMX1NQQUNJTkciLCJGQU5HX0hFSUdIVF9QWCIsIkZBTkdfV0lEVEhfUFgiLCJXRUVLREFZUyIsIkJMT0NLRURfTU9ESUZJRVIiLCJEQVlfU0laRSIsIk9QRU5fVVAiLCJPUEVOX0RPV04iLCJBTkNIT1JfUklHSFQiLCJBTkNIT1JfTEVGVCIsIklORk9fUE9TSVRJT05fQUZURVIiLCJJTkZPX1BPU0lUSU9OX0JFRk9SRSIsIklORk9fUE9TSVRJT05fQk9UVE9NIiwiSU5GT19QT1NJVElPTl9UT1AiLCJJQ09OX0FGVEVSX1BPU0lUSU9OIiwiSUNPTl9CRUZPUkVfUE9TSVRJT04iLCJWRVJUSUNBTF9TQ1JPTExBQkxFIiwiVkVSVElDQUxfT1JJRU5UQVRJT04iLCJIT1JJWk9OVEFMX09SSUVOVEFUSU9OIiwiRU5EX0RBVEUiLCJTVEFSVF9EQVRFIiwiSVNPX01PTlRIX0ZPUk1BVCIsIklTT19GT1JNQVQiLCJESVNQTEFZX0ZPUk1BVCIsIlNldCIsInRhcmdldCIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJDYWxlbmRhckRheVBocmFzZXMiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uUGhyYXNlcyIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzUGhyYXNlcyIsIkRheVBpY2tlclBocmFzZXMiLCJTaW5nbGVEYXRlUGlja2VySW5wdXRQaHJhc2VzIiwiU2luZ2xlRGF0ZVBpY2tlclBocmFzZXMiLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXMiLCJEYXRlUmFuZ2VQaWNrZXJQaHJhc2VzIiwiZm9jdXNTdGFydERhdGUiLCJqdW1wVG9QcmV2TW9udGgiLCJqdW1wVG9OZXh0TW9udGgiLCJwYWdlVXBQYWdlRG93biIsImhvbWVFbmQiLCJlc2NhcGUiLCJzZWxlY3RGb2N1c2VkRGF0ZSIsIm1vdmVGb2N1c0J5T25lRGF5IiwibW92ZUZvY3VzQnlPbmVXZWVrIiwicmV0dXJuRm9jdXNUb0lucHV0Iiwia2V5Ym9hcmRGb3J3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9ucyIsImtleWJvYXJkQmFja3dhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zIiwiY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlIiwiX3JlZiIsImNob29zZUF2YWlsYWJsZUVuZERhdGUiLCJfcmVmMiIsImNob29zZUF2YWlsYWJsZURhdGUiLCJfcmVmMyIsImRhdGVJc1VuYXZhaWxhYmxlIiwiX3JlZjQiLCJkYXRlSXNTZWxlY3RlZCIsIl9yZWY1IiwiZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZSIsIl9yZWY2IiwiZGF0ZUlzU2VsZWN0ZWRBc0VuZERhdGUiLCJfcmVmNyIsIl9kZWZhdWx0IiwiY2FsZW5kYXJMYWJlbCIsInJvbGVEZXNjcmlwdGlvbiIsImNsb3NlRGF0ZVBpY2tlciIsImNsZWFyRGF0ZSIsImNsZWFyRGF0ZXMiLCJrZXlib2FyZFNob3J0Y3V0cyIsInNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsIiwiaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwiLCJvcGVuVGhpc1BhbmVsIiwiZW50ZXJLZXkiLCJsZWZ0QXJyb3dSaWdodEFycm93IiwidXBBcnJvd0Rvd25BcnJvdyIsInF1ZXN0aW9uTWFyayIsIm1vdmVGb2N1c0J5T25lTW9udGgiLCJtb3ZlRm9jdXN0b1N0YXJ0QW5kRW5kT2ZXZWVrIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiZGVmYXVsdFBocmFzZXMiLCJyZWR1Y2UiLCJwaHJhc2VzIiwiX29iamVjdFNwcmVhZDQiLCJfZGVmaW5lUHJvcGVydHkyIiwiX3Byb3BUeXBlcyIsIm9uZU9mVHlwZSIsIm5vZGUiLCJfdHlwZW9mIiwiaXRlcmF0b3IiLCJvYmpBIiwib2JqQiIsIl9vYmplY3RJczIiLCJrZXlzQSIsImtleXNCIiwiX2hhczIiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIndpdGhTdHlsZXNQcm9wVHlwZXMiLCJjc3MiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIndpdGhTdHlsZXMiLCJzdHlsZUZuIiwiX3JlZiRzdHlsZXNQcm9wTmFtZSIsInN0eWxlc1Byb3BOYW1lIiwiX3JlZiR0aGVtZVByb3BOYW1lIiwidGhlbWVQcm9wTmFtZSIsIl9yZWYkY3NzUHJvcE5hbWUiLCJjc3NQcm9wTmFtZSIsIl9yZWYkZmx1c2hCZWZvcmUiLCJmbHVzaEJlZm9yZSIsIl9yZWYkcHVyZUNvbXBvbmVudCIsInB1cmVDb21wb25lbnQiLCJzdHlsZURlZkxUUiIsInN0eWxlRGVmUlRMIiwiY3VycmVudFRoZW1lTFRSIiwiY3VycmVudFRoZW1lUlRMIiwiQmFzZUNsYXNzIiwiX3JlYWN0MiIsIlB1cmVDb21wb25lbnQiLCJDb21wb25lbnQiLCJiYXNlQ2xhc3MiLCJnZXRSZXNvbHZlTWV0aG9kIiwiX2NvbnN0YW50cyIsIkRJUkVDVElPTlMiLCJMVFIiLCJfVGhlbWVkU3R5bGVTaGVldDIiLCJyZXNvbHZlTFRSIiwicmVzb2x2ZVJUTCIsImdldFN0eWxlRGVmIiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJjdXJyZW50VGhlbWUiLCJnZXRDdXJyZW50VGhlbWUiLCJzdHlsZURlZiIsInJlZ2lzdGVyZWRUaGVtZSIsIlJUTCIsImNyZWF0ZVJUTCIsIkVNUFRZX1NUWUxFU19GTiIsImNyZWF0ZUxUUiIsImdldFN0YXRlIiwicmVzb2x2ZU1ldGhvZCIsIldyYXBwZWRDb21wb25lbnQiLCJkaXNwbGF5TmFtZSIsIldpdGhTdHlsZXMiLCJfQmFzZUNsYXNzIiwiY29udGV4dCIsImluc3RhbmNlIiwiVHlwZUVycm9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiX3RoaXMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImdldFByb3RvdHlwZU9mIiwiQ0hBTk5FTCIsImRlZmF1bHREaXJlY3Rpb24iLCJzdGF0ZSIsInNldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzIiwiX3RoaXMyIiwiY2hhbm5lbFVuc3Vic2NyaWJlIiwic3Vic2NyaWJlIiwic2V0U3RhdGUiLCJmbHVzaCIsIl9zdGF0ZSIsImNyZWF0ZUVsZW1lbnQiLCJfZGVmaW5lUHJvcGVydHkiLCJTdHJpbmciLCJjb250ZXh0VHlwZXMiLCJwcm9wVHlwZXMiLCJfb2JqZWN0MiIsImRlZmF1bHRQcm9wcyIsIl9ob2lzdE5vblJlYWN0U3RhdGljczIiLCJfcHJvcFR5cGVzMiIsIl9icmNhc3QyIiwic3R5bGVzIiwiaXNSZXF1aXJlZCIsInRoZW1lIiwiRU1QVFlfU1RZTEVTIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJlcnIiLCJlcnJvciIsIm1vbWVudCIsIm1vbWVudFZhbGlkYXRpb25XcmFwcGVyIiwiY29yZSIsIm1vbWVudE9iaiIsImNyZWF0ZU1vbWVudENoZWNrZXIiLCJpc1ZhbGlkTW9tZW50IiwibW9tZW50U3RyaW5nIiwic3RyIiwibW9tZW50RHVyYXRpb25PYmoiLCJoYXNTeW1ib2xzIiwidG9TdHIiLCJvcmlnRGVmaW5lUHJvcGVydHkiLCJzdXBwb3J0c0Rlc2NyaXB0b3JzIiwiXyIsImFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQiLCJwcmVkaWNhdGUiLCJwcmVkaWNhdGVzIiwiY29uZGl0aW9uIiwiZiIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJOT0ZMSVAiLCJpbXBsZW1lbnRhdGlvbiIsIm9uZU9mIiwiZyIsIndpbmRvdyIsIl9tb21lbnQiLCJkYXRlU3RyaW5nIiwiY3VzdG9tRm9ybWF0IiwiZGF0ZUZvcm1hdHMiLCJEb2N1bWVudFRvdWNoIiwiZG9jdW1lbnQiLCJuYXZpZ2F0b3IiLCJtYXhUb3VjaFBvaW50cyIsIm1zTWF4VG91Y2hQb2ludHMiLCJfaXNCZWZvcmVEYXkiLCJSZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImN1cnJlbnRGb3JtYXQiLCJkYXRlT2JqIiwiX3RvTW9tZW50T2JqZWN0IiwicGFkU3RhcnQiLCJib29sIiwiYVllYXIiLCJhTW9udGgiLCJiWWVhciIsImJNb250aCIsImlzU2FtZVllYXIiLCJpc1NhbWVNb250aCIsIl9yZWFjdCIsIkNsb3NlQnV0dG9uIiwiZmlsbFJ1bGUiLCJmb2N1c2FibGUiLCJ2aWV3Qm94IiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsImFuZCIsImluc3RhbmNlT2YiLCJwcm9wTmFtZSIsIl9sZW4iLCJyZXN0IiwiX2tleSIsImZpcnN0RXJyb3IiLCJwcm9wVmFsdWUiLCJ2IiwiX1Byb3BUeXBlcyRzdHJpbmciLCJmYWtlUHJvcE5hbWUiLCJDQU5fVVNFX0RPTSIsIm1lbW9pemVkIiwiY2FuVXNlUGFzc2l2ZUV2ZW50TGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzdXBwb3J0c1Bhc3NpdmVPcHRpb24iLCJvcHRzIiwibm9vcCIsInRlc3RQYXNzaXZlRXZlbnRMaXN0ZW5lcnMiLCJlbnN1cmVDYW5NdXRhdGVOZXh0RXZlbnRIYW5kbGVycyIsImV2ZW50SGFuZGxlcnMiLCJoYW5kbGVycyIsIm5leHRIYW5kbGVycyIsIlRhcmdldEV2ZW50SGFuZGxlcnMiLCJldmVudHMiLCJnZXRFdmVudEhhbmRsZXJzIiwiZXZlbnROYW1lIiwib3B0aW9ucyIsIm5vcm1hbGl6ZWRFdmVudE9wdGlvbnMiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIm9uY2UiLCJoYW5kbGVFdmVudCIsImV2ZW50IiwiaGFuZGxlciIsImxpc3RlbmVyIiwiaXNTdWJzY3JpYmVkIiwic3BsaWNlIiwiRVZFTlRfSEFORExFUlNfS0VZIiwiZXZlbnRPcHRpb25zIiwibm9ybWFsaXplRXZlbnRPcHRpb25zIiwiVGhyb3dUeXBlRXJyb3IiLCJnZXRQcm90byIsImFzeW5jR2VuSXRlcmF0b3IiLCJUeXBlZEFycmF5IiwiVWludDhBcnJheSIsIklOVFJJTlNJQ1MiLCJBcnJheUJ1ZmZlciIsImVudHJpZXMiLCJhc3luY0l0ZXJhdG9yIiwiQXRvbWljcyIsIkJvb2xlYW4iLCJEYXRhVmlldyIsImRlY29kZVVSSSIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuY29kZVVSSSIsImVuY29kZVVSSUNvbXBvbmVudCIsImV2YWwiLCJFdmFsRXJyb3IiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIkpTT04iLCJwYXJzZSIsIk1hcCIsIk51bWJlciIsIlByb21pc2UiLCJ0aGVuIiwiYWxsIiwicmVqZWN0IiwicmVzb2x2ZSIsIlByb3h5IiwiUmFuZ2VFcnJvciIsIlJlZmxlY3QiLCJTaGFyZWRBcnJheUJ1ZmZlciIsIlN5bnRheEVycm9yIiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiVVJJRXJyb3IiLCJXZWFrTWFwIiwiV2Vha1NldCIsImFsbG93TWlzc2luZyIsIl9pc1NhbWVEYXkiLCJQdXJlQ2FsZW5kYXJEYXkiLCJfZW56eW1lU2hhbGxvd0VxdWFsIiwiX2V4dGVuZHMyIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZDIiLCJfaW5oZXJpdHNMb29zZTIiLCJfcmVhY3RXaXRoU3R5bGVzIiwiX3JhZiIsIl9kZWZhdWx0UGhyYXNlcyIsIl9nZXRDYWxlbmRhckRheVNldHRpbmdzIiwiZGF5U2l6ZSIsImlzT3V0c2lkZURheSIsIm1vZGlmaWVycyIsImlzRm9jdXNlZCIsInRhYkluZGV4Iiwib25EYXlDbGljayIsIm9uRGF5TW91c2VFbnRlciIsIm9uRGF5TW91c2VMZWF2ZSIsInJlbmRlckRheUNvbnRlbnRzIiwiYXJpYUxhYmVsRm9ybWF0IiwiQ2FsZW5kYXJEYXkiLCJfcHJvdG8iLCJzZXRCdXR0b25SZWYiLCJuZXh0UHJvcHMiLCJuZXh0U3RhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJfdGhpcyRwcm9wcyIsImJ1dHRvblJlZiIsImZvY3VzIiwib25LZXlEb3duIiwicmVmIiwiX3RoaXMzIiwiX3RoaXMkcHJvcHMyIiwiX2dldENhbGVuZGFyRGF5U2V0dGluIiwiZGF5U2l6ZVN0eWxlcyIsInVzZURlZmF1bHRDdXJzb3IiLCJzZWxlY3RlZCIsImhvdmVyZWRTcGFuIiwiaXNPdXRzaWRlUmFuZ2UiLCJhcmlhTGFiZWwiLCJDYWxlbmRhckRheV9fZGVmYXVsdEN1cnNvciIsIkNhbGVuZGFyRGF5X19kZWZhdWx0IiwiQ2FsZW5kYXJEYXlfX291dHNpZGUiLCJoYXMiLCJDYWxlbmRhckRheV9fdG9kYXkiLCJDYWxlbmRhckRheV9fZmlyc3REYXlPZldlZWsiLCJDYWxlbmRhckRheV9fbGFzdERheU9mV2VlayIsIkNhbGVuZGFyRGF5X19ob3ZlcmVkX29mZnNldCIsIkNhbGVuZGFyRGF5X19ob3ZlcmVkX3N0YXJ0X2ZpcnN0X3Bvc3NpYmxlX2VuZCIsIkNhbGVuZGFyRGF5X19ob3ZlcmVkX3N0YXJ0X2Jsb2NrZWRfbWluX25pZ2h0cyIsIkNhbGVuZGFyRGF5X19oaWdobGlnaHRlZF9jYWxlbmRhciIsIkNhbGVuZGFyRGF5X19ibG9ja2VkX21pbmltdW1fbmlnaHRzIiwiQ2FsZW5kYXJEYXlfX2Jsb2NrZWRfY2FsZW5kYXIiLCJDYWxlbmRhckRheV9faG92ZXJlZF9zcGFuIiwiQ2FsZW5kYXJEYXlfX3NlbGVjdGVkX3NwYW4iLCJDYWxlbmRhckRheV9fc2VsZWN0ZWRfc3RhcnQiLCJDYWxlbmRhckRheV9fc2VsZWN0ZWRfZW5kIiwiQ2FsZW5kYXJEYXlfX3NlbGVjdGVkIiwiQ2FsZW5kYXJEYXlfX2Jsb2NrZWRfb3V0X29mX3JhbmdlIiwicm9sZSIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsIm9uTW91c2VVcCIsImN1cnJlbnRUYXJnZXQiLCJibHVyIiwib25DbGljayIsIl9yZWYyJHJlYWN0RGF0ZXMiLCJyZWFjdERhdGVzIiwiY29sb3IiLCJib3hTaXppbmciLCJjdXJzb3IiLCJmb250U2l6ZSIsImZvbnQiLCJzaXplIiwidGV4dEFsaWduIiwib3V0bGluZSIsImJvcmRlciIsImJvcmRlckxpZ2h0IiwidGV4dCIsImJhY2tncm91bmQiLCJib3JkZXJCcmlnaHQiLCJvdXRzaWRlIiwiYmFja2dyb3VuZENvbG9yIiwibWluaW11bU5pZ2h0cyIsImJvcmRlckNvbG9yIiwiYmFja2dyb3VuZENvbG9yX2hvdmVyIiwiY29sb3JfYWN0aXZlIiwiYmFja2dyb3VuZENvbG9yX2FjdGl2ZSIsImhpZ2hsaWdodGVkIiwic2VsZWN0ZWRTcGFuIiwiYmxvY2tlZF9jYWxlbmRhciIsImJsb2NrZWRfb3V0X29mX3JhbmdlIiwiYm9yZGVyTGlnaHRlciIsImlzQXJncyIsIm9yaWdLZXlzIiwia2V5c1NoaW0iLCJvcmlnaW5hbEtleXMiLCJzaGltIiwiYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVNwcmVhZCIsImRlZmluZSIsImdldFBvbHlmaWxsIiwicG9seWZpbGwiLCJmblRvU3RyIiwiY29uc3RydWN0b3JSZWdleCIsImlzRVM2Q2xhc3NGbiIsImZuU3RyIiwiaGFzVG9TdHJpbmdUYWciLCJ0cnlGdW5jdGlvbk9iamVjdCIsInN0ckNsYXNzIiwiJGFzc2lnbiIsImdldFBhZGRpbmciLCJ2ZXJ0aWNhbCIsInRvcCIsImJvdHRvbSIsImlzVG9wRGVmaW5lZCIsImlzQm90dG9tRGVmaW5lZCIsImlzVmVydGljYWxEZWZpbmVkIiwic21hbGwiLCJfcmVmJGZvbnQkaW5wdXQiLCJsaW5lSGVpZ2h0IiwibGluZUhlaWdodF9zbWFsbCIsIl9yZWYkc3BhY2luZyIsInNwYWNpbmciLCJpbnB1dFBhZGRpbmciLCJkaXNwbGF5VGV4dFBhZGRpbmdWZXJ0aWNhbCIsImRpc3BsYXlUZXh0UGFkZGluZ1RvcCIsImRpc3BsYXlUZXh0UGFkZGluZ0JvdHRvbSIsImRpc3BsYXlUZXh0UGFkZGluZ1ZlcnRpY2FsX3NtYWxsIiwiZGlzcGxheVRleHRQYWRkaW5nVG9wX3NtYWxsIiwiZGlzcGxheVRleHRQYWRkaW5nQm90dG9tX3NtYWxsIiwiY2FsY0xpbmVIZWlnaHQiLCJwYWRkaW5nIiwibnVtYmVyT2ZNb250aHMiLCJlbmFibGVPdXRzaWRlRGF5cyIsInN0YXJ0S2V5IiwiX3RvSVNPTW9udGhTdHJpbmciLCJlbmRLZXkiLCJzdGFydENhY2hlT3V0c2lkZURheXMiLCJlbmRDYWNoZU91dHNpZGVEYXlzIiwiX2lzQWZ0ZXJEYXkiLCJzdGFydENhY2hlSW5zaWRlRGF5cyIsImVuZENhY2hlSW5zaWRlRGF5cyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiUHVyZURheVBpY2tlciIsIl90aHJvdHRsZSIsIl9pc1RvdWNoRGV2aWNlIiwiX3JlYWN0T3V0c2lkZUNsaWNrSGFuZGxlciIsIl9ub2ZsaXAiLCJfQ2FsZW5kYXJNb250aEdyaWQiLCJfRGF5UGlja2VyTmF2aWdhdGlvbiIsIl9EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cyIsIl9nZXROdW1iZXJPZkNhbGVuZGFyTW9udGhXZWVrcyIsIl9nZXRDYWxlbmRhck1vbnRoV2lkdGgiLCJfY2FsY3VsYXRlRGltZW5zaW9uIiwiX2dldEFjdGl2ZUVsZW1lbnQiLCJfaXNEYXlWaXNpYmxlIiwib3JpZW50YXRpb24iLCJ3aXRoUG9ydGFsIiwib25PdXRzaWRlQ2xpY2siLCJoaWRkZW4iLCJpbml0aWFsVmlzaWJsZU1vbnRoIiwicmVuZGVyQ2FsZW5kYXJJbmZvIiwiY2FsZW5kYXJJbmZvUG9zaXRpb24iLCJpc1JUTCIsInZlcnRpY2FsSGVpZ2h0Iiwibm9Cb3JkZXIiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ2ZXJ0aWNhbEJvcmRlclNwYWNpbmciLCJob3Jpem9udGFsTW9udGhQYWRkaW5nIiwicmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b24iLCJkaXNhYmxlUHJldiIsImRpc2FibGVOZXh0IiwibmF2UHJldiIsIm5hdk5leHQiLCJub05hdkJ1dHRvbnMiLCJvblByZXZNb250aENsaWNrIiwib25OZXh0TW9udGhDbGljayIsIm9uTW9udGhDaGFuZ2UiLCJvblllYXJDaGFuZ2UiLCJvbk11bHRpcGx5U2Nyb2xsYWJsZU1vbnRocyIsInJlbmRlck1vbnRoVGV4dCIsInJlbmRlck1vbnRoRWxlbWVudCIsInJlbmRlckNhbGVuZGFyRGF5IiwiZ2V0Rmlyc3RGb2N1c2FibGVEYXkiLCJvbkJsdXIiLCJzaG93S2V5Ym9hcmRTaG9ydGN1dHMiLCJvblRhYiIsIm9uU2hpZnRUYWIiLCJtb250aEZvcm1hdCIsIndlZWtEYXlGb3JtYXQiLCJkYXlBcmlhTGFiZWxGb3JtYXQiLCJEYXlQaWNrZXIiLCJjdXJyZW50TW9udGgiLCJmb2N1c2VkRGF0ZSIsInRyYW5zbGF0aW9uVmFsdWUiLCJpc0hvcml6b250YWwiLCJoYXNTZXRJbml0aWFsVmlzaWJsZU1vbnRoIiwibW9udGhUcmFuc2l0aW9uIiwic2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGUiLCJjYWxlbmRhck1vbnRoV2lkdGgiLCJuZXh0Rm9jdXNlZERhdGUiLCJvbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZSIsImlzVG91Y2hEZXZpY2UiLCJ3aXRoTW91c2VJbnRlcmFjdGlvbnMiLCJjYWxlbmRhckluZm9XaWR0aCIsIm1vbnRoVGl0bGVIZWlnaHQiLCJoYXNTZXRIZWlnaHQiLCJzZXRDYWxlbmRhck1vbnRoV2Vla3MiLCJjYWxlbmRhck1vbnRoR3JpZEhlaWdodCIsInNldENhbGVuZGFySW5mb1dpZHRoVGltZW91dCIsInNldENhbGVuZGFyTW9udGhHcmlkSGVpZ2h0VGltZW91dCIsInRocm90dGxlZEtleURvd24iLCJvbkZpbmFsS2V5RG93biIsInRyYWlsaW5nIiwib25QcmV2TW9udGhUcmFuc2l0aW9uIiwib25OZXh0TW9udGhUcmFuc2l0aW9uIiwibXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzIiwidXBkYXRlU3RhdGVBZnRlck1vbnRoVHJhbnNpdGlvbiIsIm9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsIiwiY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsIiwic2V0Q2FsZW5kYXJJbmZvUmVmIiwic2V0Q29udGFpbmVyUmVmIiwic2V0VHJhbnNpdGlvbkNvbnRhaW5lclJlZiIsInNldE1vbnRoVGl0bGVIZWlnaHQiLCJjb21wb25lbnREaWRNb3VudCIsImNhbGVuZGFySW5mbyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJwcmV2SXNGb2N1c2VkIiwicHJldlJlbmRlck1vbnRoVGV4dCIsImdldEZvY3VzZWREYXkiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwic2V0VGltZW91dCIsImNhbGVuZGFySW5mb1BhbmVsV2lkdGgiLCJfdGhpcyRzdGF0ZSIsInZpc2libGVDYWxlbmRhcldlZWtzIiwiY2FsZW5kYXJNb250aFdlZWtzIiwibmV3TW9udGhIZWlnaHQiLCJhZGp1c3REYXlQaWNrZXJIZWlnaHQiLCJjb250YWluZXIiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNsZWFyVGltZW91dCIsInN0b3BQcm9wYWdhdGlvbiIsIl90aGlzJHByb3BzMyIsIl90aGlzJHN0YXRlMiIsIm5ld0ZvY3VzZWREYXRlIiwiZGlkVHJhbnNpdGlvbk1vbnRoIiwiYWN0aXZlRWxlbWVudCIsInByZXZlbnREZWZhdWx0IiwibWF5YmVUcmFuc2l0aW9uUHJldk1vbnRoIiwibWF5YmVUcmFuc2l0aW9uTmV4dE1vbnRoIiwic2hpZnRLZXkiLCJfdGhpcyRwcm9wczQiLCJfdGhpcyRzdGF0ZTMiLCJpc1ZlcnRpY2FsIiwiY2FsY3VsYXRlQW5kU2V0RGF5UGlja2VySGVpZ2h0IiwiX3RoaXMkcHJvcHM1IiwiX3RoaXMkc3RhdGU0IiwiZ2V0Rmlyc3REYXlPZldlZWsiLCJnZXRGaXJzdFZpc2libGVJbmRleCIsImZpcnN0VmlzaWJsZU1vbnRoSW5kZXgiLCJuZXdNb250aCIsIl90aGlzJHByb3BzNiIsIm51bWJlck9mV2Vla3MiLCJ0cmFuc2l0aW9uQ29udGFpbmVyIiwiX3RoaXMkc3RhdGU1IiwibmV3Rm9jdXNlZERhdGVNb250aCIsImZvY3VzZWREYXRlTW9udGgiLCJpc05ld0ZvY3VzZWREYXRlVmlzaWJsZSIsIl90aGlzJHN0YXRlNiIsIl90aGlzNCIsIl90aGlzJHByb3BzNyIsIl90aGlzJHN0YXRlNyIsIm5ld0ludmlzaWJsZU1vbnRoIiwiX25ld0ludmlzaWJsZU1vbnRoIiwiX251bWJlck9mV2Vla3MiLCJib2R5IiwiY29udGFpbnMiLCJfdGhpczUiLCJtb250aEhlaWdodCIsInN0eWxlIiwiaGVpZ2h0IiwiX3RoaXMkcHJvcHM4Iiwib25DbG9zZUNhbGxCYWNrIiwicmVuZGVyTmF2aWdhdGlvbiIsIl90aGlzJHByb3BzOSIsInJlbmRlcldlZWtIZWFkZXIiLCJfdGhpcyRwcm9wczEwIiwidmVydGljYWxTY3JvbGxhYmxlIiwiaG9yaXpvbnRhbFN0eWxlIiwibGVmdCIsInZlcnRpY2FsU3R5bGUiLCJtYXJnaW5MZWZ0Iiwid2Vla0hlYWRlclN0eWxlIiwiaGVhZGVyIiwiRGF5UGlja2VyX3dlZWtIZWFkZXJfbGkiLCJ3aWR0aCIsIkRheVBpY2tlcl93ZWVrSGVhZGVyIiwiRGF5UGlja2VyX3dlZWtIZWFkZXJfX3ZlcnRpY2FsIiwiRGF5UGlja2VyX3dlZWtIZWFkZXJfX3ZlcnRpY2FsU2Nyb2xsYWJsZSIsIkRheVBpY2tlcl93ZWVrSGVhZGVyX3VsIiwiX3RoaXM2IiwiX3RoaXMkc3RhdGU4IiwiaXNUb3VjaCIsIl90aGlzJHByb3BzMTEiLCJkYXlQaWNrZXJIb3Jpem9udGFsUGFkZGluZyIsIm51bU9mV2Vla0hlYWRlcnMiLCJ3ZWVrSGVhZGVycyIsImlzQ2FsZW5kYXJNb250aEdyaWRBbmltYXRpbmciLCJzaG91bGRGb2N1c0RhdGUiLCJrZXlib2FyZFNob3J0Y3V0QnV0dG9uTG9jYXRpb24iLCJCT1RUT01fUklHSFQiLCJUT1BfTEVGVCIsIlRPUF9SSUdIVCIsInNob3VsZEFuaW1hdGVIZWlnaHQiLCJjYWxlbmRhckluZm9Qb3NpdGlvblRvcCIsImNhbGVuZGFySW5mb1Bvc2l0aW9uQm90dG9tIiwiY2FsZW5kYXJJbmZvUG9zaXRpb25CZWZvcmUiLCJjYWxlbmRhckluZm9Qb3NpdGlvbkFmdGVyIiwiY2FsZW5kYXJJbmZvSXNJbmxpbmUiLCJEYXlQaWNrZXJfY2FsZW5kYXJJbmZvX19ob3Jpem9udGFsIiwid3JhcHBlckhvcml6b250YWxXaWR0aCIsImZ1bGxIb3Jpem9udGFsV2lkdGgiLCJ0cmFuc2l0aW9uQ29udGFpbmVyU3R5bGUiLCJkYXlQaWNrZXJXcmFwcGVyU3R5bGUiLCJkYXlQaWNrZXJTdHlsZSIsIm1hcmdpblRvcCIsIkRheVBpY2tlcl9faG9yaXpvbnRhbCIsIkRheVBpY2tlcl9fdmVydGljYWxTY3JvbGxhYmxlIiwiRGF5UGlja2VyX3BvcnRhbF9faG9yaXpvbnRhbCIsIkRheVBpY2tlcl9wb3J0YWxfX3ZlcnRpY2FsIiwiRGF5UGlja2VyX19oaWRkZW4iLCJEYXlQaWNrZXJfX3dpdGhCb3JkZXIiLCJEYXlQaWNrZXJfd3JhcHBlcl9faG9yaXpvbnRhbCIsIkRheVBpY2tlcl93ZWVrSGVhZGVycyIsIkRheVBpY2tlcl93ZWVrSGVhZGVyc19faG9yaXpvbnRhbCIsIkRheVBpY2tlcl9mb2N1c1JlZ2lvbiIsIkRheVBpY2tlcl90cmFuc2l0aW9uQ29udGFpbmVyIiwiRGF5UGlja2VyX3RyYW5zaXRpb25Db250YWluZXJfX2hvcml6b250YWwiLCJEYXlQaWNrZXJfdHJhbnNpdGlvbkNvbnRhaW5lcl9fdmVydGljYWwiLCJEYXlQaWNrZXJfdHJhbnNpdGlvbkNvbnRhaW5lcl9fdmVydGljYWxTY3JvbGxhYmxlIiwiaW5pdGlhbE1vbnRoIiwiaXNBbmltYXRpbmciLCJvbk1vbnRoVHJhbnNpdGlvbkVuZCIsImJsb2NrIiwiYnV0dG9uTG9jYXRpb24iLCJfcmVmMyRyZWFjdERhdGVzIiwibm9TY3JvbGxCYXJPblZlcnRpY2FsU2Nyb2xsYWJsZSIsInpJbmRleCIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsImJveFNoYWRvdyIsImJvcmRlclJhZGl1cyIsImRpc3BsYXkiLCJ2ZXJ0aWNhbEFsaWduIiwicGxhY2Vob2xkZXJUZXh0IiwiYm9yZGVyQm90dG9tIiwibGlzdFN0eWxlIiwibWFyZ2luIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJ0cmFuc2l0aW9uIiwicGFkZGluZ1RvcCIsInJpZ2h0Iiwib3ZlcmZsb3dZIiwicm9vdCIsImdsb2JhbCIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJjb21waWxlIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJwYXRoIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImVzY2FwZWQiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJwYXR0ZXJuIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJjaGFyQ29kZUF0IiwiZW5jb2RlIiwicHJldHR5Iiwic2VnbWVudCIsInN0cmluZ2lmeSIsImF0dGFjaEtleXMiLCJyZSIsInNlbnNpdGl2ZSIsImVuZCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJyZWdleHBUb1JlZ2V4cCIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJzeW1ib2xNYXAiLCJudW1iZXJNYXAiLCJwbHVyYWxGb3JtIiwicGx1cmFscyIsInBsdXJhbGl6ZSIsIndlZWtkYXlzUGFyc2VFeGFjdCIsInN1ZmZpeGVzIiwiMSIsIjUiLCI4IiwiNzAiLCI4MCIsIjIiLCI3IiwiMjAiLCI1MCIsIjMiLCI0IiwiMTAwIiwiNiIsIjkiLCIxMCIsIjMwIiwiNjAiLCI5MCIsInJlbGF0aXZlVGltZVdpdGhQbHVyYWwiLCJudW0iLCJmb3JtcyIsInN0YW5kYWxvbmUiLCJsYXN0RGlnaXQiLCJsYXN0MkRpZ2l0cyIsInJlbGF0aXZlVGltZVdpdGhNdXRhdGlvbiIsIm11dGF0aW9uVGFibGUiLCJzdWJzdHJpbmciLCJzb2Z0TXV0YXRpb24iLCJtdXRhdGlvbiIsImxhc3ROdW1iZXIiLCJ0cmFuc2xhdGUiLCJtb250aHNQYXJzZUV4YWN0IiwibGwiLCJsbGwiLCJsbGxsIiwicGx1cmFsIiwibW9udGhzU3RyaWN0UmVnZXgiLCJtb250aHNTaG9ydFN0cmljdFJlZ2V4IiwibG9uZ01vbnRoc1BhcnNlIiwic2hvcnRNb250aHNQYXJzZSIsInByb2Nlc3NSZWxhdGl2ZVRpbWUiLCJtb250aHNOb21pbmF0aXZlRWwiLCJtb250aHNHZW5pdGl2ZUVsIiwibW9tZW50VG9Gb3JtYXQiLCJfbW9udGhzR2VuaXRpdmVFbCIsIl9tb250aHNOb21pbmF0aXZlRWwiLCJjYWxlbmRhckVsIiwiX2NhbGVuZGFyRWwiLCJtb250aHNTaG9ydERvdCIsIm51bWJlcnNQYXN0IiwibnVtYmVyc0Z1dHVyZSIsInZlcmJhbE51bWJlciIsIm1vbnRoc1Nob3J0V2l0aERvdHMiLCJtb250aHNTaG9ydFdpdGhvdXREb3RzIiwid2Vla0VuZGluZ3MiLCIwIiwiNDAiLCJpc1VwcGVyIiwiZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyIiwidHJhbnNsYXRlU2luZ3VsYXIiLCJzcGVjaWFsIiwicmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyIiwidHJhbnNsYXRvciIsIndvcmRzIiwiY29ycmVjdEdyYW1tYXRpY2FsQ2FzZSIsIndvcmRLZXkiLCJyZWxhdGl2ZVRpbWVNciIsIm1vbnRoc05vbWluYXRpdmUiLCJtb250aHNTdWJqZWN0aXZlIiwiMTIiLCIxMyIsIm51bWJlcnNOb3VucyIsIm51bWJlck5vdW4iLCJodW5kcmVkIiwidGVuIiwib25lIiwid29yZCIsIm51bWJlckFzTm91biIsInByb2Nlc3NIb3Vyc0Z1bmN0aW9uIiwiY2FuQmVPYmplY3QiLCJvcmlnaW5hbEdldFN5bWJvbHMiLCJzb3VyY2UxIiwic3ltcyIsIm9ialRhcmdldCIsImdldFN5bWJvbHMiLCJzeW1PYmoiLCJsZXR0ZXJzIiwiYWN0dWFsIiwibGFja3NQcm9wZXJFbnVtZXJhdGlvbk9yZGVyIiwicHJldmVudEV4dGVuc2lvbnMiLCJ0aHJvd2VyIiwiYXNzaWduSGFzUGVuZGluZ0V4Y2VwdGlvbnMiLCJzdHlsZUludGVyZmFjZSIsInN0eWxlVGhlbWUiLCJtYWtlRnJvbVRoZW1lIiwiY3JlYXRlV2l0aERpcmVjdGlvbiIsIl9sZW4yIiwiX2tleTIiLCJyZWdpc3RlclRoZW1lIiwicmVnaXN0ZXJJbnRlcmZhY2UiLCJpbnRlcmZhY2VUb1JlZ2lzdGVyIiwiX2xlbjMiLCJfa2V5MyIsInZlbmRvcnMiLCJyYWYiLCJjYWYiLCJsYXN0IiwiaWQiLCJxdWV1ZSIsIl9ub3ciLCJjcCIsImNhbmNlbGxlZCIsImhhbmRsZSIsImNhbmNlbCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiZ2V0QXJpYUxhYmVsIiwiaXNIb3ZlcmVkU3BhbiIsImlzU2VsZWN0ZWQiLCJzaG91bGRVc2VEZWZhdWx0Q3Vyc29yIiwiX2dldFBocmFzZSIsImZvcm1hdHRlZERhdGUiLCJfQ2FsZW5kYXJXZWVrIiwiX0NhbGVuZGFyRGF5IiwiX2dldENhbGVuZGFyTW9udGhXZWVrcyIsIl90b0lTT0RhdGVTdHJpbmciLCJpc1Zpc2libGUiLCJvbk1vbnRoU2VsZWN0Iiwib25ZZWFyU2VsZWN0IiwiQ2FsZW5kYXJNb250aCIsInNldENhcHRpb25SZWYiLCJzZXRNb250aFRpdGxlSGVpZ2h0VGltZW91dCIsInByZXZNb250aCIsInByZXZFbmFibGVPdXRzaWRlRGF5cyIsInByZXZGaXJzdERheU9mV2VlayIsImNhcHRpb25SZWYiLCJtb250aFRpdGxlIiwiQ2FsZW5kYXJNb250aF9jYXB0aW9uIiwiQ2FsZW5kYXJNb250aF9jYXB0aW9uX192ZXJ0aWNhbFNjcm9sbGFibGUiLCJDYWxlbmRhck1vbnRoX3RhYmxlIiwiQ2FsZW5kYXJNb250aF92ZXJ0aWNhbFNwYWNpbmciLCJib3JkZXJTcGFjaW5nIiwiZGF5T2ZXZWVrIiwidXNlclNlbGVjdCIsImJvcmRlckNvbGxhcHNlIiwiY2FwdGlvblNpemUiLCJjYXB0aW9uUGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJjYXB0aW9uUGFkZGluZ0JvdHRvbSIsImNhcHRpb25TaWRlIiwid2hpdGUiLCJncmF5IiwiZ3JheUxpZ2h0IiwiZ3JheUxpZ2h0ZXIiLCJncmF5TGlnaHRlc3QiLCJib3JkZXJNZWRpdW0iLCJwcmltYXJ5IiwicHJpbWFyeVNoYWRlXzEiLCJwcmltYXJ5U2hhZGVfMiIsInByaW1hcnlTaGFkZV8zIiwicHJpbWFyeVNoYWRlXzQiLCJwcmltYXJ5X2RhcmsiLCJzZWNvbmRhcnkiLCJ5ZWxsb3ciLCJ5ZWxsb3dfZGFyayIsImJvcmRlclRvcCIsImJvcmRlclJpZ2h0IiwiYm9yZGVyTGVmdCIsIm91dGxpbmVGb2N1c2VkIiwiYm9yZGVyRm9jdXNlZCIsImJvcmRlclRvcEZvY3VzZWQiLCJib3JkZXJMZWZ0Rm9jdXNlZCIsImJvcmRlckJvdHRvbUZvY3VzZWQiLCJib3JkZXJSaWdodEZvY3VzZWQiLCJwaWNrZXJJbnB1dCIsImJvcmRlcldpZHRoIiwiYm9yZGVyU3R5bGUiLCJkaXNhYmxlZCIsImJhY2tncm91bmREYXJrIiwiYmFja2dyb3VuZEZvY3VzZWQiLCJ0ZXh0RGlzYWJsZWQiLCJ0ZXh0Rm9jdXNlZCIsImNvbG9yX2hvdmVyIiwiYm9yZGVyQ29sb3JfYWN0aXZlIiwiYm9yZGVyQ29sb3JfaG92ZXIiLCJkaXNwbGF5VGV4dFBhZGRpbmdIb3Jpem9udGFsIiwiZGlzcGxheVRleHRQYWRkaW5nTGVmdCIsImRpc3BsYXlUZXh0UGFkZGluZ1JpZ2h0IiwiZGlzcGxheVRleHRQYWRkaW5nSG9yaXpvbnRhbF9zbWFsbCIsImRpc3BsYXlUZXh0UGFkZGluZ0xlZnRfc21hbGwiLCJkaXNwbGF5VGV4dFBhZGRpbmdSaWdodF9zbWFsbCIsInNpemluZyIsImlucHV0V2lkdGgiLCJpbnB1dFdpZHRoX3NtYWxsIiwiYXJyb3dXaWR0aCIsInNpemVfc21hbGwiLCJsZXR0ZXJTcGFjaW5nX3NtYWxsIiwic3R5bGVEaXNhYmxlZCIsImVsIiwiYXhpcyIsImJvcmRlckJveCIsIndpdGhNYXJnaW4iLCJheGlzU3RhcnQiLCJheGlzRW5kIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiX29iamVjdFNwcmVhZDUiLCJfY29uc29saWRhdGVkRXZlbnRzIiwiX0NhbGVuZGFyTW9udGgiLCJfaXNUcmFuc2l0aW9uRW5kU3VwcG9ydGVkIiwiX2dldFRyYW5zZm9ybVN0eWxlcyIsIl9pc1ByZXZNb250aCIsIl9pc05leHRNb250aCIsImdldE1vbnRocyIsIndpdGhvdXRUcmFuc2l0aW9uTW9udGhzIiwiQ2FsZW5kYXJNb250aEdyaWQiLCJpc1RyYW5zaXRpb25FbmRTdXBwb3J0ZWQiLCJvblRyYW5zaXRpb25FbmQiLCJwcmV2SW5pdGlhbE1vbnRoIiwiaGFzTnVtYmVyT2ZNb250aHNDaGFuZ2VkIiwibmV3TW9udGhzIiwidW5zaGlmdCIsIm1vbWVudExvY2FsZSIsIm5ld01vbnRoVmFsIiwiaW5pdGlhbE1vbnRoU3VidHJhY3Rpb24iLCJuZXdZZWFyVmFsIiwiaXNWZXJ0aWNhbFNjcm9sbGFibGUiLCJ0cmFuc2Zvcm1WYWx1ZSIsIkNhbGVuZGFyTW9udGhHcmlkX19ob3Jpem9udGFsIiwiQ2FsZW5kYXJNb250aEdyaWRfX3ZlcnRpY2FsIiwiQ2FsZW5kYXJNb250aEdyaWRfX3ZlcnRpY2FsX3Njcm9sbGFibGUiLCJDYWxlbmRhck1vbnRoR3JpZF9fYW5pbWF0aW5nIiwiaGlkZUZvckFuaW1hdGlvbiIsInNob3dGb3JBbmltYXRpb24iLCJtb250aFN0cmluZyIsIkNhbGVuZGFyTW9udGhHcmlkX21vbnRoX19ob3Jpem9udGFsIiwiQ2FsZW5kYXJNb250aEdyaWRfbW9udGhfX2hpZGVGb3JBbmltYXRpb24iLCJDYWxlbmRhck1vbnRoR3JpZF9tb250aF9faGlkZGVuIiwibWluSGVpZ2h0Iiwib3BhY2l0eSIsInBvaW50ZXJFdmVudHMiLCJjYWxlbmRhck1vbnRoUGFkZGluZyIsIkVTIiwiaXNFbnVtZXJhYmxlIiwiTyIsIlJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJ2YWxzIiwiRVMyMDE1IiwiRVMyMDE2IiwiU2FtZVZhbHVlTm9uTnVtYmVyIiwiU2FtZVZhbHVlIiwic3ltVG9TdHIiLCJzeW1TdHJpbmdSZWdleCIsImlzU3ltYm9sT2JqZWN0IiwiR2V0SW50cmluc2ljIiwiJFR5cGVFcnJvciIsIiRTeW50YXhFcnJvciIsIkRlc2MiLCJUeXBlIiwiYWxsb3dlZCIsImlzRGF0YSIsIklzQWNjZXNzb3IiLCJyZWNvcmRUeXBlIiwiYXJndW1lbnROYW1lIiwibG9nIiwiJGlzTmFOIiwiSW5maW5pdHkiLCJtb2R1bG8iLCJyZW1haW4iLCJwYXJlbnROb2RlIiwiX3JlYWN0TW9tZW50UHJvcHR5cGVzIiwiX2FpcmJuYlByb3BUeXBlcyIsIl9nZXRQaHJhc2VQcm9wVHlwZXMiLCJfRm9jdXNlZElucHV0U2hhcGUiLCJfSWNvblBvc2l0aW9uU2hhcGUiLCJfT3JpZW50YXRpb25TaGFwZSIsIl9EaXNhYmxlZFNoYXBlIiwiX0FuY2hvckRpcmVjdGlvblNoYXBlIiwiX09wZW5EaXJlY3Rpb25TaGFwZSIsIl9EYXlPZldlZWtTaGFwZSIsIl9DYWxlbmRhckluZm9Qb3NpdGlvblNoYXBlIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsIm9uRGF0ZXNDaGFuZ2UiLCJmb2N1c2VkSW5wdXQiLCJvbkZvY3VzQ2hhbmdlIiwib25DbG9zZSIsInN0YXJ0RGF0ZUlkIiwic3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0Iiwic3RhcnREYXRlT2Zmc2V0IiwiZW5kRGF0ZU9mZnNldCIsImVuZERhdGVJZCIsImVuZERhdGVQbGFjZWhvbGRlclRleHQiLCJzdGFydERhdGVBcmlhTGFiZWwiLCJlbmREYXRlQXJpYUxhYmVsIiwicmVxdWlyZWQiLCJyZWFkT25seSIsInNjcmVlblJlYWRlcklucHV0TWVzc2FnZSIsInNob3dDbGVhckRhdGVzIiwic2hvd0RlZmF1bHRJbnB1dEljb24iLCJpbnB1dEljb25Qb3NpdGlvbiIsImN1c3RvbUlucHV0SWNvbiIsImN1c3RvbUFycm93SWNvbiIsImN1c3RvbUNsb3NlSWNvbiIsInJlZ3VsYXIiLCJrZWVwRm9jdXNPbklucHV0IiwibXV0dWFsbHlFeGNsdXNpdmVQcm9wcyIsImFuY2hvckRpcmVjdGlvbiIsIm9wZW5EaXJlY3Rpb24iLCJob3Jpem9udGFsTWFyZ2luIiwid2l0aEZ1bGxTY3JlZW5Qb3J0YWwiLCJhcHBlbmRUb0JvZHkiLCJkaXNhYmxlU2Nyb2xsIiwibm9uTmVnYXRpdmVJbnRlZ2VyIiwia2VlcE9wZW5PbkRhdGVTZWxlY3QiLCJyZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZXMiLCJ2ZXJ0aWNhbFNwYWNpbmciLCJpc0RheUJsb2NrZWQiLCJpc0RheUhpZ2hsaWdodGVkIiwiZGlzcGxheUZvcm1hdCIsInNoYXBlIiwiY3VycmVudE9mZnNldCIsImNvbnRhaW5lckVkZ2UiLCJ3aW5kb3dXaWR0aCIsImlubmVyV2lkdGgiLCJjYWxjdWxhdGVkT2Zmc2V0IiwiY2FsY3VsYXRlZE1hcmdpbiIsInJlZmVyZW5jZUVsIiwicmVmZXJlbmNlUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiaW5uZXJIZWlnaHQiLCJ0cmFuc2Zvcm0iLCJnZXRTY3JvbGxQYXJlbnQiLCJnZXRTY3JvbGxBbmNlc3RvcnNPdmVyZmxvd1kiLCJzY3JvbGxBbmNlc3RvcnNPdmVyZmxvd1kiLCJ0b2dnbGUiLCJvbiIsImFuY2VzdG9yIiwic2V0UHJvcGVydHkiLCJnZXRTY3JvbGxpbmdSb290Iiwic2Nyb2xsaW5nRWxlbWVudCIsImRvY3VtZW50RWxlbWVudCIsInBhcmVudCIsInBhcmVudEVsZW1lbnQiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJhY2MiLCJzY3JvbGxpbmdSb290Iiwic2Nyb2xsUGFyZW50IiwiX0RhdGVSYW5nZVBpY2tlcklucHV0IiwiX3RvTG9jYWxpemVkRGF0ZVN0cmluZyIsIl9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkiLCJjaGlsZHJlbiIsImlzU3RhcnREYXRlRm9jdXNlZCIsImlzRW5kRGF0ZUZvY3VzZWQiLCJzY3JlZW5SZWFkZXJNZXNzYWdlIiwic2hvd0NhcmV0Iiwib25LZXlEb3duQXJyb3dEb3duIiwib25LZXlEb3duUXVlc3Rpb25NYXJrIiwiRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyIiwib25DbGVhckZvY3VzIiwib25TdGFydERhdGVDaGFuZ2UiLCJvblN0YXJ0RGF0ZUZvY3VzIiwib25FbmREYXRlQ2hhbmdlIiwib25FbmREYXRlRm9jdXMiLCJlbmREYXRlU3RyaW5nIiwiZ2V0RGlzcGxheUZvcm1hdCIsInN0YXJ0RGF0ZVN0cmluZyIsImlzRW5kRGF0ZUJlZm9yZVN0YXJ0RGF0ZSIsImdldERhdGVTdHJpbmciLCJvblN0YXJ0RGF0ZVNoaWZ0VGFiIiwib25DbGVhckRhdGVzIiwiX0RhdGVJbnB1dCIsIl9SaWdodEFycm93IiwiX0xlZnRBcnJvdyIsIl9DbG9zZUJ1dHRvbiIsIl9DYWxlbmRhckljb24iLCJvbkVuZERhdGVUYWIiLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dCIsImNhbGVuZGFySWNvbiIsIkRhdGVSYW5nZVBpY2tlcklucHV0X2NhbGVuZGFySWNvbl9zdmciLCJhcnJvd0ljb24iLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dF9hcnJvd19zdmciLCJjbG9zZUljb24iLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dF9jbGVhckRhdGVzX3N2ZyIsIkRhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXNfc3ZnX19zbWFsbCIsInNjcmVlblJlYWRlclN0YXJ0RGF0ZVRleHQiLCJzY3JlZW5SZWFkZXJFbmREYXRlVGV4dCIsImlucHV0SWNvbiIsIkRhdGVSYW5nZVBpY2tlcklucHV0X2NhbGVuZGFySWNvbiIsInN0YXJ0RGF0ZURpc2FibGVkIiwiZW5kRGF0ZURpc2FibGVkIiwiRGF0ZVJhbmdlUGlja2VySW5wdXRfX2Rpc2FibGVkIiwiRGF0ZVJhbmdlUGlja2VySW5wdXRfX3J0bCIsIkRhdGVSYW5nZVBpY2tlcklucHV0X193aXRoQm9yZGVyIiwiRGF0ZVJhbmdlUGlja2VySW5wdXRfX2Jsb2NrIiwiRGF0ZVJhbmdlUGlja2VySW5wdXRfX3Nob3dDbGVhckRhdGVzIiwicGxhY2Vob2xkZXIiLCJkaXNwbGF5VmFsdWUiLCJmb2N1c2VkIiwib25DaGFuZ2UiLCJvbkZvY3VzIiwib25LZXlEb3duU2hpZnRUYWIiLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dF9hcnJvdyIsIm9uS2V5RG93blRhYiIsIkRhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXMiLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dF9jbGVhckRhdGVzX19zbWFsbCIsIkRhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXNfZGVmYXVsdCIsIkRhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXNfX2hpZGUiLCJmaWxsIiwiX2dldElucHV0SGVpZ2h0IiwiRkFOR19QQVRIX1RPUCIsIkZBTkdfU1RST0tFX1RPUCIsIkZBTkdfUEFUSF9CT1RUT00iLCJGQU5HX1NUUk9LRV9CT1RUT00iLCJEYXRlSW5wdXQiLCJzZXRJbnB1dFJlZiIsImlucHV0UmVmIiwic2NyZWVuUmVhZGVyTWVzc2FnZUlkIiwid2l0aEZhbmciLCJpbnB1dEhlaWdodCIsIkRhdGVJbnB1dF9fc21hbGwiLCJEYXRlSW5wdXRfX2Jsb2NrIiwiRGF0ZUlucHV0X193aXRoRmFuZyIsIkRhdGVJbnB1dF9fZGlzYWJsZWQiLCJEYXRlSW5wdXRfX29wZW5Eb3duIiwiRGF0ZUlucHV0X19vcGVuVXAiLCJEYXRlSW5wdXRfaW5wdXQiLCJEYXRlSW5wdXRfaW5wdXRfX3NtYWxsIiwiRGF0ZUlucHV0X2lucHV0X19yZWd1bGFyIiwiRGF0ZUlucHV0X2lucHV0X19yZWFkT25seSIsIkRhdGVJbnB1dF9pbnB1dF9fZm9jdXNlZCIsIkRhdGVJbnB1dF9pbnB1dF9fZGlzYWJsZWQiLCJhdXRvQ29tcGxldGUiLCJEYXRlSW5wdXRfZmFuZyIsIkRhdGVJbnB1dF9mYW5nU2hhcGUiLCJEYXRlSW5wdXRfZmFuZ1N0cm9rZSIsIkRhdGVJbnB1dF9zY3JlZW5SZWFkZXJNZXNzYWdlIiwiZm9udFdlaWdodCIsImxldHRlclNwYWNpbmciLCJmb250U3R5bGUiLCJjbGlwIiwic3Ryb2tlIiwiZGVib3VuY2UiLCJGVU5DX0VSUk9SX1RFWFQiLCJ3YWl0IiwibGVhZGluZyIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsIlJpZ2h0QXJyb3ciLCJMZWZ0QXJyb3ciLCJDYWxlbmRhckljb24iLCJfc2xpY2VkVG9BcnJheTIiLCJfb2JqZWN0U3ByZWFkMTAiLCJfb2JqZWN0IiwiX2lzTmV4dERheSIsIl9nZXRWaXNpYmxlRGF5cyIsIl9nZXRTZWxlY3RlZERhdGVPZmZzZXQiLCJfbW9kaWZpZXJzIiwiX0RheVBpY2tlciIsIl9nZXRQb29sZWRNb21lbnQiLCJtaW5EYXRlIiwibWF4RGF0ZSIsImdldE1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSIsImdldENob29zZUF2YWlsYWJsZURhdGVQaHJhc2UiLCJEYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXIiLCJ0b2RheSIsImlzVG9kYXkiLCJibG9ja2VkIiwiaXNCbG9ja2VkIiwidmFsaWQiLCJpc1N0YXJ0RGF0ZSIsImlzRW5kRGF0ZSIsImRvZXNOb3RNZWV0TWluaW11bU5pZ2h0cyIsImlzSW5TZWxlY3RlZFNwYW4iLCJpc0xhc3RJblJhbmdlIiwiaG92ZXJlZCIsImlzSG92ZXJlZCIsImlzSW5Ib3ZlcmVkU3BhbiIsImlzRGF5QWZ0ZXJIb3ZlcmVkU3RhcnREYXRlIiwiaXNGaXJzdERheU9mV2VlayIsImlzTGFzdERheU9mV2VlayIsImhvdmVyRGF0ZSIsImlzRmlyc3RQb3NzaWJsZUVuZERhdGVGb3JIb3ZlcmVkU3RhcnREYXRlIiwiZG9lc05vdE1lZXRNaW5OaWdodHNGb3JIb3ZlcmVkU3RhcnREYXRlIiwiX3RoaXMkZ2V0U3RhdGVGb3JOZXdNIiwiZ2V0U3RhdGVGb3JOZXdNb250aCIsInZpc2libGVEYXlzIiwic2hvdWxkRGlzYWJsZU1vbnRoTmF2aWdhdGlvbiIsInByZXZTdGFydERhdGUiLCJwcmV2RW5kRGF0ZSIsInByZXZGb2N1c2VkSW5wdXQiLCJwcmV2TWluaW11bU5pZ2h0cyIsInByZXZJc091dHNpZGVSYW5nZSIsInByZXZJc0RheUJsb2NrZWQiLCJwcmV2SXNEYXlIaWdobGlnaHRlZCIsInByZXZQaHJhc2VzIiwicHJldkluaXRpYWxWaXNpYmxlTW9udGgiLCJwcmV2TnVtYmVyT2ZNb250aHMiLCJyZWNvbXB1dGVPdXRzaWRlUmFuZ2UiLCJyZWNvbXB1dGVEYXlCbG9ja2VkIiwicmVjb21wdXRlRGF5SGlnaGxpZ2h0ZWQiLCJyZWNvbXB1dGVQcm9wTW9kaWZpZXJzIiwiZGlkU3RhcnREYXRlQ2hhbmdlIiwiZGlkRW5kRGF0ZUNoYW5nZSIsImRpZEZvY3VzQ2hhbmdlIiwibmV3TW9udGhTdGF0ZSIsImRlbGV0ZU1vZGlmaWVyIiwiYWRkTW9kaWZpZXIiLCJzdGFydFNwYW4iLCJlbmRTcGFuIiwiZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UiLCJhZGRNb2RpZmllclRvUmFuZ2UiLCJfc3RhcnRTcGFuIiwiX2VuZFNwYW4iLCJfc3RhcnRTcGFuMiIsIm1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSIsImxhc3RBbGxvd2VkU3RhcnREYXRlIiwiaXNTdGFydERhdGVBZnRlckVuZERhdGUiLCJpc0VuZERhdGVEaXNhYmxlZCIsImZpcnN0QWxsb3dlZEVuZERhdGUiLCJkYXRlT2Zmc2V0IiwibmV4dERhdGVPZmZzZXQiLCJoYXNPZmZzZXQiLCJzdGFydCIsInJhbmdlRGF5IiwiX2VuZFNwYW4yIiwiX2VuZFNwYW4zIiwibmV3U3RhcnRTcGFuIiwibmV3RW5kU3BhbiIsIm1pbk5pZ2h0c0ZvclByZXZIb3ZlckRhdGUiLCJfZW5kU3BhbjQiLCJuZXdWaXNpYmxlRGF5cyIsInByZXZNb250aFZpc2libGVEYXlzIiwibmV3Q3VycmVudE1vbnRoIiwiZ2V0TW9kaWZpZXJzIiwibmV4dE1vbnRoIiwibmV4dE1vbnRoVmlzaWJsZURheXMiLCJudW1iZXJPZlZpc2libGVNb250aHMiLCJsYXN0VmlzaWJsZURheSIsImN1cnJlbnREYXkiLCJ2aWFibGVEYXlzIiwiZ2V0TW9kaWZpZXJzRm9yRGF5IiwidmlzaWJsZU1vbnRoIiwiX3RoaXMkcHJvcHMxMiIsInVwZGF0ZWREYXlzIiwic3BhblN0YXJ0IiwiX3RoaXMkcHJvcHMxMyIsImRheURpZmYiLCJfdGhpcyRwcm9wczE0IiwibWluTmlnaHRzIiwiX3RoaXMkcHJvcHMxNSIsIl90aGlzJHByb3BzMTYiLCJpc0ZvcndhcmRSYW5nZSIsImlzQmFja3dhcmRSYW5nZSIsImlzVmFsaWREYXlIb3ZlcmVkIiwiX3RoaXMkcHJvcHMxNyIsIl90aGlzJHByb3BzMTgiLCJfdGhpcyRwcm9wczE5IiwiZmlyc3RBdmFpbGFibGVFbmREYXRlIiwiX3RoaXMkcHJvcHMyMCIsImFycmF5V2l0aEhvbGVzIiwiaXRlcmFibGVUb0FycmF5TGltaXQiLCJub25JdGVyYWJsZVJlc3QiLCJ2aXNpYmxlRGF5c0J5TW9udGgiLCJiYXNlRGF0ZSIsImZpcnN0T2ZNb250aCIsImxhc3RPZk1vbnRoIiwicHJldkRheSIsImNvdW50IiwiZmlyc3RWaXNpYmxlTW9udGgiLCJfZ2V0UHJldmlvdXNNb250aE1lbW9MYXN0IiwidXBkYXRlZERheXNBZnRlckFkZGl0aW9uIiwiX29iamVjdFNwcmVhZDEyIiwibW9udGhzVG9VcGRhdGUiLCJtb250aEtleSIsIm1vbnRoSXNvIiwidXBkYXRlZERheXNBZnRlckRlbGV0aW9uIiwiZGF5U3RyaW5nIiwibW9tZW50UG9vbCIsIl9vYmplY3RTcHJlYWQ3Iiwib25EYXRlQ2hhbmdlIiwiRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXIiLCJwcmV2Rm9jdXNlZCIsInByZXZEYXRlIiwiX3ZpYWJsZURheXMiLCJzaG93Q2xlYXJEYXRlIiwicmVvcGVuUGlja2VyT25DbGVhckRhdGUiLCJvbkNsZWFyRGF0ZSIsIlNpbmdsZURhdGVQaWNrZXJJbnB1dCIsIlNpbmdsZURhdGVQaWNrZXJJbnB1dF9jYWxlbmRhckljb25fc3ZnIiwiU2luZ2xlRGF0ZVBpY2tlcklucHV0X2NsZWFyRGF0ZV9zdmciLCJTaW5nbGVEYXRlUGlja2VySW5wdXRfY2xlYXJEYXRlX3N2Z19fc21hbGwiLCJzY3JlZW5SZWFkZXJUZXh0IiwiU2luZ2xlRGF0ZVBpY2tlcklucHV0X2NhbGVuZGFySWNvbiIsIlNpbmdsZURhdGVQaWNrZXJJbnB1dF9fZGlzYWJsZWQiLCJTaW5nbGVEYXRlUGlja2VySW5wdXRfX3J0bCIsIlNpbmdsZURhdGVQaWNrZXJJbnB1dF9fd2l0aEJvcmRlciIsIlNpbmdsZURhdGVQaWNrZXJJbnB1dF9fYmxvY2siLCJTaW5nbGVEYXRlUGlja2VySW5wdXRfX3Nob3dDbGVhckRhdGUiLCJTaW5nbGVEYXRlUGlja2VySW5wdXRfY2xlYXJEYXRlIiwiU2luZ2xlRGF0ZVBpY2tlcklucHV0X2NsZWFyRGF0ZV9fc21hbGwiLCJTaW5nbGVEYXRlUGlja2VySW5wdXRfY2xlYXJEYXRlX19kZWZhdWx0IiwiU2luZ2xlRGF0ZVBpY2tlcklucHV0X2NsZWFyRGF0ZV9faGlkZSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJGbGF0dGVuSW50b0FycmF5Iiwic291cmNlTGVuIiwiZGVwdGgiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwiUCIsIlRvU3RyaW5nIiwiSGFzUHJvcGVydHkiLCJlbGVtZW50IiwiR2V0Iiwic2hvdWxkRmxhdHRlbiIsIklzQXJyYXkiLCJUb0xlbmd0aCIsIkNyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3ciLCJUb09iamVjdCIsImRlcHRoTnVtIiwiVG9JbnRlZ2VyIiwiQSIsIkFycmF5U3BlY2llc0NyZWF0ZSIsImZsYXQiLCJnZXRSYW5kb21WYWx1ZXMiLCJjcnlwdG8iLCJtc0NyeXB0byIsInJuZHM4Iiwicm5kcyIsInJhbmRvbSIsImJ5dGVUb0hleCIsImJ1ZiIsImJ0aCIsImNhblVzZURPTSIsIl9SZWFjdCRDb21wb25lbnQiLCJQb3J0YWwiLCJkZWZhdWx0Tm9kZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVQb3J0YWwiLCJhbnkiLCJyZW5kZXJQb3J0YWwiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwicG9ydGFsIiwiY2xvbmVFbGVtZW50IiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJMZWdhY3lQb3J0YWwiLCJLRVlDT0RFUyIsIlBvcnRhbFdpdGhTdGF0ZSIsInBvcnRhbE5vZGUiLCJhY3RpdmUiLCJkZWZhdWx0T3BlbiIsIm9wZW5Qb3J0YWwiLCJjbG9zZVBvcnRhbCIsIndyYXBXaXRoUG9ydGFsIiwiaGFuZGxlT3V0c2lkZU1vdXNlQ2xpY2siLCJoYW5kbGVLZXlkb3duIiwiY2xvc2VPbkVzYyIsImNsb3NlT25PdXRzaWRlQ2xpY2siLCJuYXRpdmVFdmVudCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm9uT3BlbiIsImJ1dHRvbiIsImtleUNvZGUiLCJpc09wZW4iLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwidjEiLCJ2NCIsInV1aWQiLCJmb3IiLCJxIiwiYWEiLCJiYSIsImNhIiwieiIsIm1lc3NhZ2UiLCJCIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkMiLCJyZWZzIiwidXBkYXRlciIsIkYiLCJpc1JlYWN0Q29tcG9uZW50IiwiZm9yY2VVcGRhdGUiLCJHIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJIIiwiY3VycmVudCIsIkkiLCJzdXNwZW5zZSIsIkoiLCJLIiwiX19zZWxmIiwiX19zb3VyY2UiLCIkJHR5cGVvZiIsIl9vd25lciIsIk4iLCJRIiwicG9wIiwia2V5UHJlZml4IiwiUiIsIlUiLCJTIiwiVCIsImRvbmUiLCJlYSIsImZhIiwiViIsImRhIiwiWCIsIkNoaWxkcmVuIiwib25seSIsImNyZWF0ZVJlZiIsImNyZWF0ZUNvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2NvbnRleHQiLCJmb3J3YXJkUmVmIiwibGF6eSIsIl9jdG9yIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJtZW1vIiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsInVuc3RhYmxlX1N1c3BlbnNlTGlzdCIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsInVuc3RhYmxlX3dpdGhTdXNwZW5zZUNvbmZpZyIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsImRlZmF1bHQiLCJaIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsImhhIiwicmVnaXN0cmF0aW9uTmFtZSIsImlhIiwiamEiLCJkZXBlbmRlbmNpZXMiLCJsYSIsIm1hIiwibmEiLCJvYSIsInBhIiwib25FcnJvciIsInFhIiwic2EiLCJ0YSIsInZhIiwid2EiLCJyYSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiQmEiLCJDYSIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJEYSIsInN0YXRlTm9kZSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwidGFnIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJyZXR1cm4iLCJNYSIsImRpc3BhdGNoQ29uZmlnIiwiTmEiLCJfdGFyZ2V0SW5zdCIsIk9hIiwiUGEiLCJRYSIsIlJhIiwiU2EiLCJUYSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlVhIiwiVmEiLCJXYSIsImFuaW1hdGlvbiIsIlhhIiwiWWEiLCJaYSIsImFiIiwiYmIiLCJjYiIsImRiIiwiZWIiLCJmYiIsInRleHRDb250ZW50IiwiZ2IiLCJoYiIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImpiIiwiZXZlbnRQb29sIiwia2IiLCJkZXN0cnVjdG9yIiwiaWIiLCJnZXRQb29sZWQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwibGIiLCJtYiIsIm5iIiwib2IiLCJwYiIsImRvY3VtZW50TW9kZSIsInFiIiwic2IiLCJ0YiIsInViIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsInZiIiwid2IiLCJ4YiIsImRldGFpbCIsInliIiwiQ2IiLCJ3aGljaCIsIkFiIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwiQmIiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk5iIiwiT2IiLCJQYiIsImRhdGV0aW1lIiwiZW1haWwiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidXJsIiwiUWIiLCJub2RlTmFtZSIsIlJiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50Iiwibm9kZVR5cGUiLCJTYiIsInNldEF0dHJpYnV0ZSIsIlRiIiwiVmIiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlViIiwiV2IiLCJjaGVja2VkIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm9jIiwicGMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInFjIiwicmMiLCJzYyIsInRjIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwieGMiLCJ5YyIsInpjIiwidmMiLCJ3YyIsInVjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJBYyIsIkJjIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJDYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIm93bmVyRG9jdW1lbnQiLCJ4bGlua0hyZWYiLCJIYyIsImNoYW5nZSIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJkZXRhY2hFdmVudCIsIlFjIiwiUmMiLCJhdHRhY2hFdmVudCIsIlNjIiwiVGMiLCJVYyIsIlZjIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsIldjIiwidmlldyIsIlhjIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlljIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJlZCIsInBvaW50ZXJJZCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJmZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiZ2QiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsImFsdGVybmF0ZSIsImhkIiwiamQiLCJrZCIsInJlc3BvbmRlciIsImxkIiwiZWZmZWN0VGFnIiwib2QiLCJxZCIsImNoaWxkIiwic2libGluZyIsInBkIiwicmQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50Iiwic2QiLCJjbGlwYm9hcmREYXRhIiwidGQiLCJ1ZCIsImNoYXJDb2RlIiwidmQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5Iiwid2QiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJ4ZCIsImxvY2F0aW9uIiwieWQiLCJkYXRhVHJhbnNmZXIiLCJ6ZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJBZCIsIkJkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJDZCIsIkRkIiwiRWQiLCJGZCIsIkdkIiwiSGQiLCJJZCIsIkpkIiwiS2QiLCJMZCIsImV2ZW50UHJpb3JpdHkiLCJNZCIsImdldEV2ZW50UHJpb3JpdHkiLCJOZCIsIk9kIiwiUGQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIlFkIiwiUmQiLCJVZCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiZmlyc3RDaGlsZCIsIlpkIiwibmV4dFNpYmxpbmciLCJhZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJiZSIsImNvbnRlbnRFZGl0YWJsZSIsImNlIiwiZGUiLCJzZWxlY3QiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJqZSIsIm9uU2VsZWN0IiwibGUiLCJrZSIsIm1lIiwiZGVmYXVsdFNlbGVjdGVkIiwibmUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIm9lIiwicGUiLCJxZSIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJodG1sIiwibWF0aG1sIiwic3ZnIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwid2UiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJ4ZSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImxpbmVDbGFtcCIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwieWUiLCJ6ZSIsInRyaW0iLCJBZSIsIkNlIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwiRGUiLCJFZSIsImlzIiwiRmUiLCJHZSIsIkhlIiwiSWUiLCJKZSIsImF1dG9Gb2N1cyIsIktlIiwiX19odG1sIiwiTGUiLCJNZSIsIk5lIiwiT2UiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIlRlIiwiVWUiLCJWZSIsIldlIiwiZ2V0Q2hpbGRDb250ZXh0IiwiWGUiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIlllIiwiWmUiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCIkZSIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJhZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiYmYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsImNmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiZGYiLCJ1bnN0YWJsZV9ub3ciLCJlZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmYiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImhmIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJqZiIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5Iiwia2YiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImxmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwibWYiLCJuZiIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ0ZiIsInVmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQ2YiLCJEZiIsIkVmIiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJKZiIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJLZiIsImZpcnN0Q29udGV4dCIsImV4cGlyYXRpb25UaW1lIiwiTGYiLCJNZiIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJOZiIsIk9mIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0RWZmZWN0IiwibGFzdEVmZmVjdCIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJQZiIsIlFmIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwibmV4dEVmZmVjdCIsIlJmIiwiU2YiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkU3RhdGUiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImZnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsImNnIiwiZGciLCJlZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImhnIiwiaWciLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsImpnIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50Iiwia2ciLCJsZyIsIl9zdHJpbmdSZWYiLCJtZyIsIm5nIiwib2ciLCJwZyIsImVsZW1lbnRUeXBlIiwicWciLCJyZyIsInNnIiwicmIiLCJkZWxldGUiLCJCZSIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJ5ZyIsInpnIiwiQWciLCJ0YWdOYW1lIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkdnIiwiSGciLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIlNnIiwiVGciLCJVZyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJmaCIsImloIiwiamgiLCJiYXNlVXBkYXRlIiwia2giLCJsaCIsIm1oIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImRpc3BhdGNoIiwiYWN0aW9uIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibmgiLCJkZXN0cm95IiwiZGVwcyIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJyZWFkQ29udGV4dCIsInVzZVJlc3BvbmRlciIsInRoIiwidWgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsInBlbmRpbmdQcm9wcyIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsIkxoIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJNaCIsIk5oIiwicGVuZGluZ0NvbnRleHQiLCJPaCIsIlBoIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsIlFoIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJ0YWlsIiwidGFpbEV4cGlyYXRpb24iLCJ0YWlsTW9kZSIsIlJoIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIiRoIiwiYWkiLCJiaSIsIm9uY2xpY2siLCJjaSIsImRpIiwiZ2kiLCJmaSIsImhpIiwiamkiLCJlaSIsImtpIiwibGkiLCJtaSIsIm5pIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIm9pIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInBpIiwicWkiLCJZaSIsIlppIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsImNvbXBvbmVudERpZENhdGNoIiwieGkiLCJjb21wb25lbnRTdGFjayIsInlpIiwiemkiLCJBaSIsIkJpIiwiQ2kiLCJEaSIsIkVpIiwiRmkiLCJHaSIsIkhpIiwiSWkiLCJKaSIsIktpIiwiTGkiLCJNaSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiUmkiLCJTaSIsIlRpIiwiVWkiLCJWaSIsIldpIiwidGltZW91dE1zIiwiWGkiLCJwaW5nVGltZSIsImZpcnN0UGVuZGluZ1RpbWUiLCJsYXN0UGVuZGluZ1RpbWUiLCJjYWxsYmFja0V4cGlyYXRpb25UaW1lIiwiY2FsbGJhY2tOb2RlIiwiJGkiLCJ0aW1lb3V0IiwiYWoiLCJiaiIsImNqIiwiZWoiLCJmaiIsImdqIiwiaGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZEV4cGlyYXRpb25UaW1lIiwidGltZW91dEhhbmRsZSIsImlqIiwiamoiLCJwaW5nQ2FjaGUiLCJraiIsImxqIiwiZmlyc3RCYXRjaCIsIl9kZWZlciIsIl9leHBpcmF0aW9uVGltZSIsIl9vbkNvbXBsZXRlIiwiZGoiLCJidXN5TWluRHVyYXRpb25NcyIsImJ1c3lEZWxheU1zIiwibWoiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsInJhbmdlQ291bnQiLCJ6YiIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJ1YSIsImdoIiwib2oiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIiRkIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiJGEiLCJuYyIsIm1kIiwiRmoiLCJYaCIsIlloIiwiR2oiLCJuZCIsIlpoIiwiZ2YiLCJwaiIsInJqIiwiQmYiLCJzaiIsImh5ZHJhdGUiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJ1aiIsInBlbmRpbmdDaGlsZHJlbiIsInZqIiwid2oiLCJ4aiIsInlqIiwiemoiLCJCaiIsIl9yb290IiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwiQ2oiLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwiRGoiLCJfaW50ZXJuYWxSb290IiwiRWoiLCJIaiIsIkpqIiwiaGFzQXR0cmlidXRlIiwiSWoiLCJLaiIsIkFqIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJOaiIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXMiLCJ1bnN0YWJsZV9kaXNjcmV0ZVVwZGF0ZXMiLCJ1bnN0YWJsZV9mbHVzaERpc2NyZXRlVXBkYXRlcyIsImZsdXNoU3luYyIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9jcmVhdGVTeW5jUm9vdCIsInVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZCIsIkV2ZW50cyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJ0aiIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVQcm9wcyIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiT2oiLCJQaiIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJwZXJmb3JtYW5jZSIsInBvc3RNZXNzYWdlIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInByZXZpb3VzIiwicHJpb3JpdHlMZXZlbCIsInN0YXJ0VGltZSIsInVuc3RhYmxlX25leHQiLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJzeW1ib2wiLCJhcnJheU9mIiwib2JqZWN0T2YiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwidHlwZU9mIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiTGF6eSIsIk1lbW8iLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJvcmlnaW5hbE1vZHVsZSIsIndlYnBhY2tQb2x5ZmlsbCIsInBhdGhzIiwid2VicGFja0NvbnRleHQiLCJyZXEiLCJ3ZWJwYWNrQ29udGV4dFJlc29sdmUiLCJjb2RlIiwiX0RhdGVSYW5nZVBpY2tlciIsIl9EYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXIiLCJfRGF0ZVJhbmdlUGlja2VyU2hhcGUiLCJfRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyIiwiX0RheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyIiwiX1NpbmdsZURhdGVQaWNrZXIiLCJfU2luZ2xlRGF0ZVBpY2tlcklucHV0IiwiX1NpbmdsZURhdGVQaWNrZXJTaGFwZSIsIl9pc0luY2x1c2l2ZWx5QmVmb3JlRGF5IiwiTnVtYmVySXNOYU4iLCJFUlJPUl9NRVNTQUdFIiwiYm91bmQiLCJiaW5kZXIiLCJib3VuZExlbmd0aCIsImJvdW5kQXJncyIsIkVtcHR5IiwidGVzdE1vbWVudCIsIm1lc3NhZ2VzIiwiaW52YWxpZFByZWRpY2F0ZSIsImludmFsaWRQcm9wVmFsaWRhdG9yIiwicmVxdWlyZWRDb3JlIiwiaW52YWxpZFR5cGVDb3JlIiwicHJlZGljYXRlRmFpbHVyZUNvcmUiLCJhbm9ueW1vdXNNZXNzYWdlIiwiYmFzZUludmFsaWRNZXNzYWdlIiwiY29uc3RydWN0UHJvcFZhbGlkYXRvclZhcmlhdGlvbnMiLCJwcm9wVmFsaWRhdG9yIiwicmVxdWlyZWRQcm9wVmFsaWRhdG9yIiwid2l0aFByZWRpY2F0ZSIsImJhc2VQcm9wVmFsaWRhdG9yIiwiY3JlYXRlSW52YWxpZFJlcXVpcmVkRXJyb3JNZXNzYWdlIiwiaW5kZXBlbmRlbnRHdWFyZGlhblZhbHVlIiwidHlwZVZhbGlkYXRvciIsInZhbGlkYXRvciIsIm1vbWVudFR5cGUiLCJwcm9wVHlwZSIsInByZVZhbGlkYXRpb25SZXF1aXJlQ2hlY2tWYWx1ZSIsImlzUHJvcFZhbHVlVW5kZWZpbmVkIiwiaXNQcm9wVmFsdWVOdWxsIiwicHJlVmFsaWRhdGlvblJlcXVpcmVDaGVjayIsInByZWRpY2F0ZU5hbWUiLCJub29wVGh1bmsiLCJiZXR3ZWVuIiwiYm9vbGVhblNvbWUiLCJjaGlsZHJlbkhhdmVQcm9wWG9yQ2hpbGRyZW4iLCJjaGlsZHJlbk9mIiwiY2hpbGRyZW5PZlR5cGUiLCJjaGlsZHJlblNlcXVlbmNlT2YiLCJjb21wb25lbnRXaXRoTmFtZSIsImRpc2FsbG93ZWRJZiIsImV4cGxpY2l0TnVsbCIsImZvcmJpZEV4dHJhUHJvcHMiLCJpbnRlZ2VyIiwia2V5c09mIiwibXV0dWFsbHlFeGNsdXNpdmVUcnVlUHJvcHMiLCJuQ2hpbGRyZW4iLCJub25OZWdhdGl2ZU51bWJlciIsIm51bWVyaWNTdHJpbmciLCJvciIsInJlcXVpcmVkQnkiLCJyZXN0cmljdGVkUHJvcCIsInNlcXVlbmNlT2YiLCJzdHJpbmdFbmRzV2l0aCIsInN0cmluZ1N0YXJ0c1dpdGgiLCJ1bmlxdWVBcnJheSIsInVuaXF1ZUFycmF5T2YiLCJ2YWx1ZXNPZiIsIndpdGhTaGFwZSIsImhhc0RvbnRFbnVtQnVnIiwiaGFzUHJvdG9FbnVtQnVnIiwiZG9udEVudW1zIiwiZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUiLCJjdG9yIiwiZXhjbHVkZWRLZXlzIiwiJGFwcGxpY2F0aW9uQ2FjaGUiLCIkY29uc29sZSIsIiRleHRlcm5hbCIsIiRmcmFtZSIsIiRmcmFtZUVsZW1lbnQiLCIkZnJhbWVzIiwiJGlubmVySGVpZ2h0IiwiJGlubmVyV2lkdGgiLCIkb25tb3pmdWxsc2NyZWVuY2hhbmdlIiwiJG9ubW96ZnVsbHNjcmVlbmVycm9yIiwiJG91dGVySGVpZ2h0IiwiJG91dGVyV2lkdGgiLCIkcGFnZVhPZmZzZXQiLCIkcGFnZVlPZmZzZXQiLCIkcGFyZW50IiwiJHNjcm9sbExlZnQiLCIkc2Nyb2xsVG9wIiwiJHNjcm9sbFgiLCIkc2Nyb2xsWSIsIiRzZWxmIiwiJHdlYmtpdEluZGV4ZWREQiIsIiR3ZWJraXRTdG9yYWdlSW5mbyIsIiR3aW5kb3ciLCJoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWciLCJpc0FyZ3VtZW50cyIsImlzU3RyaW5nIiwidGhlS2V5cyIsInNraXBQcm90byIsInNraXBDb25zdHJ1Y3RvciIsImVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSIsImdldE5hbm9TZWNvbmRzIiwiaHJ0aW1lIiwibG9hZFRpbWUiLCJtb2R1bGVMb2FkVGltZSIsIm5vZGVMb2FkVGltZSIsInVwVGltZSIsInByb2Nlc3MiLCJ1cHRpbWUiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwicGhyYXNlIiwiYXJyMiIsIml0ZXIiLCJDYWxlbmRhcldlZWsiLCJQdXJlQ3VzdG9taXphYmxlQ2FsZW5kYXJEYXkiLCJzZWxlY3RlZFN0eWxlcyIsImxhc3RJblJhbmdlU3R5bGVzIiwic2VsZWN0ZWRTcGFuU3R5bGVzIiwiaG92ZXJlZFNwYW5TdHlsZXMiLCJibG9ja2VkT3V0T2ZSYW5nZVN0eWxlcyIsImJsb2NrZWRDYWxlbmRhclN0eWxlcyIsImJsb2NrZWRNaW5OaWdodHNTdHlsZXMiLCJoaWdobGlnaHRlZENhbGVuZGFyU3R5bGVzIiwib3V0c2lkZVN0eWxlcyIsImRlZmF1bHRTdHlsZXMiLCJnZXRTdHlsZXMiLCJzdHlsZXNPYmoiLCJob3ZlciIsInRvZGF5U3R5bGVzIiwic2VsZWN0ZWRTdGFydFN0eWxlcyIsInNlbGVjdGVkRW5kU3R5bGVzIiwiYWZ0ZXJIb3ZlcmVkU3RhcnRTdHlsZXMiLCJmaXJzdERheU9mV2Vla1N0eWxlcyIsImxhc3REYXlPZldlZWtTdHlsZXMiLCJob3ZlcmVkU3RhcnRGaXJzdFBvc3NpYmxlRW5kU3R5bGVzIiwiaG92ZXJlZFN0YXJ0QmxvY2tlZE1pbk5pZ2h0c1N0eWxlcyIsIkN1c3RvbWl6YWJsZUNhbGVuZGFyRGF5IiwiZGVmYXVsdFN0eWxlc1dpdGhIb3ZlciIsIm91dHNpZGVTdHlsZXNXaXRoSG92ZXIiLCJ0b2RheVN0eWxlc1dpdGhIb3ZlciIsImZpcnN0RGF5T2ZXZWVrU3R5bGVzV2l0aEhvdmVyIiwibGFzdERheU9mV2Vla1N0eWxlc1dpdGhIb3ZlciIsImhpZ2hsaWdodGVkQ2FsZW5kYXJTdHlsZXNXaXRoSG92ZXIiLCJibG9ja2VkTWluTmlnaHRzU3R5bGVzV2l0aEhvdmVyIiwiYmxvY2tlZENhbGVuZGFyU3R5bGVzV2l0aEhvdmVyIiwiYmxvY2tlZE91dE9mUmFuZ2VTdHlsZXNXaXRoSG92ZXIiLCJob3ZlcmVkU3BhblN0eWxlc1dpdGhIb3ZlciIsInNlbGVjdGVkU3BhblN0eWxlc1dpdGhIb3ZlciIsImxhc3RJblJhbmdlU3R5bGVzV2l0aEhvdmVyIiwic2VsZWN0ZWRTdHlsZXNXaXRoSG92ZXIiLCJzZWxlY3RlZFN0YXJ0U3R5bGVzV2l0aEhvdmVyIiwic2VsZWN0ZWRFbmRTdHlsZXNXaXRoSG92ZXIiLCJhZnRlckhvdmVyZWRTdGFydFN0eWxlc1dpdGhIb3ZlciIsImhvdmVyZWRTdGFydEZpcnN0UG9zc2libGVFbmRTdHlsZXNXaXRoSG92ZXIiLCJob3ZlcmVkU3RhcnRCbG9ja2VkTWluTmlnaHRzU3R5bGVzV2l0aEhvdmVyIiwicHJldkRheXMiLCJuZXh0RGF5cyIsImZpcnN0RGF5IiwidG90YWxEYXlzIiwid2Vla3NJbk1vbnRoIiwibXNUcmFuc2Zvcm0iLCJNb3pUcmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJfaXNTYW1lTW9udGgiLCJQdXJlRGF0ZVJhbmdlUGlja2VyIiwiX3JlYWN0UG9ydGFsIiwiX2dldFJlc3BvbnNpdmVDb250YWluZXJTdHlsZXMiLCJfZ2V0RGV0YWNoZWRDb250YWluZXJTdHlsZXMiLCJfZGlzYWJsZVNjcm9sbDIiLCJEYXRlUmFuZ2VQaWNrZXIiLCJkYXlQaWNrZXJDb250YWluZXJTdHlsZXMiLCJpc0RhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXNlZCIsImlzRGF5UGlja2VyRm9jdXNlZCIsIm9uRGF0ZVJhbmdlUGlja2VySW5wdXRGb2N1cyIsIm9uRGF5UGlja2VyRm9jdXMiLCJvbkRheVBpY2tlckZvY3VzT3V0Iiwib25EYXlQaWNrZXJCbHVyIiwicmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb24iLCJzZXREYXlQaWNrZXJDb250YWluZXJSZWYiLCJpc09wZW5lZCIsImVuYWJsZVNjcm9sbCIsInJlbW92ZURheVBpY2tlckV2ZW50TGlzdGVuZXJzIiwiZGF5UGlja2VyQ29udGFpbmVyIiwiYWRkRGF5UGlja2VyRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVEYXlQaWNrZXJGb2N1c091dCIsInByb3BEaXNhYmxlU2Nyb2xsIiwiaXNBbmNob3JlZExlZnQiLCJjb250YWluZXJSZWN0IiwibWF5YmVSZW5kZXJEYXlQaWNrZXJXaXRoUG9ydGFsIiwicmVuZGVyRGF5UGlja2VyIiwiaW5pdGlhbFZpc2libGVNb250aFRodW5rIiwiRGF0ZVJhbmdlUGlja2VyX2Nsb3NlQnV0dG9uX3N2ZyIsIndpdGhBbnlQb3J0YWwiLCJEYXRlUmFuZ2VQaWNrZXJfcGlja2VyIiwiRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9fZGlyZWN0aW9uTGVmdCIsIkRhdGVSYW5nZVBpY2tlcl9waWNrZXJfX2RpcmVjdGlvblJpZ2h0IiwiRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9faG9yaXpvbnRhbCIsIkRhdGVSYW5nZVBpY2tlcl9waWNrZXJfX3ZlcnRpY2FsIiwiRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9fcG9ydGFsIiwiRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9fZnVsbFNjcmVlblBvcnRhbCIsIkRhdGVSYW5nZVBpY2tlcl9waWNrZXJfX3J0bCIsIkRhdGVSYW5nZVBpY2tlcl9jbG9zZUJ1dHRvbiIsImVuYWJsZU91dHNpZGVDbGljayIsImhpZGVGYW5nIiwiRGF0ZVJhbmdlUGlja2VyX19ibG9jayIsInRleHREZWNvcmF0aW9uIiwiX2RvY3VtZW50MiIsIkRJU1BMQVkiLCJCTE9DSyIsIkZMRVgiLCJJTkxJTkVfQkxPQ0siLCJ1c2VDYXB0dXJlIiwiT3V0c2lkZUNsaWNrSGFuZGxlciIsIm9uTW91c2VEb3duIiwic2V0Q2hpbGROb2RlUmVmIiwiX3Byb3BzIiwiYWRkTW91c2VEb3duRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwiY2hpbGROb2RlIiwicmVtb3ZlTW91c2VVcCIsImlzRGVzY2VuZGFudE9mUm9vdCIsInJlbW92ZU1vdXNlRG93biIsIl9wcm9wczIiLCJpbmNsdWRlcyIsInRvUHJpbWl0aXZlIiwiJEFycmF5IiwiJFN0cmluZyIsIiRPYmplY3QiLCIkTnVtYmVyIiwiJFN5bWJvbCIsIiRSZWdFeHAiLCJhc3NlcnRSZWNvcmQiLCIkaXNGaW5pdGUiLCJtb2QiLCJpc1ByaW1pdGl2ZSIsInBhcnNlSW50ZWdlciIsImFycmF5U2xpY2UiLCJzdHJTbGljZSIsImlzQmluYXJ5IiwiaXNPY3RhbCIsInJlZ2V4RXhlYyIsIm5vbldTcmVnZXgiLCJoYXNOb25XUyIsImlzSW52YWxpZEhleExpdGVyYWwiLCIkY2hhckNvZGVBdCIsIiROdW1iZXJWYWx1ZU9mIiwiJEJvb2xlYW5WYWx1ZU9mIiwiJFN0cmluZ1ZhbHVlT2YiLCIkRGF0ZVZhbHVlT2YiLCIkZmxvb3IiLCIkYWJzIiwiJE9iamVjdENyZWF0ZSIsIiRnT1BEIiwiJGlzRXh0ZW5zaWJsZSIsImlzRXh0ZW5zaWJsZSIsIiRkZWZpbmVQcm9wZXJ0eSIsInRyaW1SZWdleCIsIkVTNSIsImhhc1JlZ0V4cE1hdGNoZXIiLCJFUzYiLCJDYWxsIiwiSXNDYWxsYWJsZSIsIlRvUHJpbWl0aXZlIiwiVG9OdW1iZXIiLCJhcmd1bWVudCIsInRyaW1tZWQiLCJUb0ludDE2IiwiaW50MTZiaXQiLCJUb1VpbnQxNiIsIlRvSW50OCIsImludDhiaXQiLCJUb1VpbnQ4IiwicG9zSW50IiwiVG9VaW50OENsYW1wIiwiVG9Qcm9wZXJ0eUtleSIsIkNhbm9uaWNhbE51bWVyaWNJbmRleFN0cmluZyIsIkNoZWNrT2JqZWN0Q29lcmNpYmxlIiwiSXNDb25zdHJ1Y3RvciIsIklzRXh0ZW5zaWJsZSIsIklzSW50ZWdlciIsIklzUHJvcGVydHlLZXkiLCJJc1JlZ0V4cCIsImlzUmVnRXhwIiwiVG9Cb29sZWFuIiwiU2FtZVZhbHVlWmVybyIsIkdldFYiLCJHZXRNZXRob2QiLCJTcGVjaWVzQ29uc3RydWN0b3IiLCJkZWZhdWx0Q29uc3RydWN0b3IiLCJzcGVjaWVzIiwiQ29tcGxldGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJJc0dlbmVyaWNEZXNjcmlwdG9yIiwiSXNEYXRhRGVzY3JpcHRvciIsIlRocm93IiwiSGFzT3duUHJvcGVydHkiLCJJc0NvbmNhdFNwcmVhZGFibGUiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzcHJlYWRhYmxlIiwiSW52b2tlIiwiYXJndW1lbnRzTGlzdCIsIkdldEl0ZXJhdG9yIiwibWV0aG9kIiwiYWN0dWFsTWV0aG9kIiwiSXRlcmF0b3JOZXh0IiwiSXRlcmF0b3JDb21wbGV0ZSIsIml0ZXJSZXN1bHQiLCJJdGVyYXRvclZhbHVlIiwiSXRlcmF0b3JTdGVwIiwiSXRlcmF0b3JDbG9zZSIsImNvbXBsZXRpb24iLCJjb21wbGV0aW9uUmVjb3JkIiwiY29tcGxldGlvblRodW5rIiwiaXRlcmF0b3JSZXR1cm4iLCJpbm5lclJlc3VsdCIsIkNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QiLCJSZWdFeHBFeGVjIiwib3JpZ2luYWxBcnJheSIsIkNyZWF0ZURhdGFQcm9wZXJ0eSIsIm9sZERlc2MiLCJleHRlbnNpYmxlIiwic3VjY2VzcyIsIk9iamVjdENyZWF0ZSIsImludGVybmFsU2xvdHNMaXN0Iiwic2xvdHMiLCJBZHZhbmNlU3RyaW5nSW5kZXgiLCJ1bmljb2RlIiwiZmlyc3QiLCJDcmVhdGVNZXRob2RQcm9wZXJ0eSIsIkRlZmluZVByb3BlcnR5T3JUaHJvdyIsImRlc2MiLCJEZWxldGVQcm9wZXJ0eU9yVGhyb3ciLCJFbnVtZXJhYmxlT3duTmFtZXMiLCJ0aGlzTnVtYmVyVmFsdWUiLCJ0aGlzQm9vbGVhblZhbHVlIiwidGhpc1N0cmluZ1ZhbHVlIiwidGhpc1RpbWVWYWx1ZSIsImlzQ2FsbGFibGUiLCJpc1N5bWJvbCIsIm9yZGluYXJ5VG9QcmltaXRpdmUiLCJoaW50IiwibWV0aG9kTmFtZXMiLCJleG90aWNUb1ByaW0iLCJ0cnlEYXRlT2JqZWN0Iiwib3JpZ1N5bWJvbCIsImhhc1N5bWJvbFNoYW0iLCJUb0ludDMyIiwiVG9VaW50MzIiLCJvcHRNZXNzYWdlIiwiSXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJJc0FjY2Vzc29yRGVzY3JpcHRvciIsIkZyb21Qcm9wZXJ0eURlc2NyaXB0b3IiLCJUb1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iaiIsIkVTNWludGVybmFsU2xvdHMiLCJhY3R1YWxIaW50IiwibWV0aG9kcyIsImdPUEQiLCJ0cnlSZWdleEV4ZWNDYWxsIiwiYm91bmRDb250YWlucyIsInRvTnVtYmVyIiwibmF0aXZlTWF4IiwibmF0aXZlTWluIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJtYXhpbmciLCJpbnZva2VGdW5jIiwidGhpc0FyZyIsInNob3VsZEludm9rZSIsInRpbWVTaW5jZUxhc3RDYWxsIiwidGltZXJFeHBpcmVkIiwidHJhaWxpbmdFZGdlIiwidGltZVdhaXRpbmciLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImxlYWRpbmdFZGdlIiwiTkFOIiwicmVUcmltIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzT2N0YWwiLCJmcmVlUGFyc2VJbnQiLCJiYXNlR2V0VGFnIiwiaXNPYmplY3RMaWtlIiwic3ltYm9sVGFnIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJudWxsVGFnIiwidW5kZWZpbmVkVGFnIiwic3ltVG9TdHJpbmdUYWciLCJvYmplY3RQcm90byIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwiaXNPd24iLCJ1bm1hc2tlZCIsIl9hcnIiLCJfbiIsIl9lIiwiX3MiLCJkZWZhdWx0TW9kaWZpZXIiLCJnZXRQcmV2aW91c01vbnRoTWVtb0tleSIsImdldFByZXZpb3VzTW9udGhNZW1vVmFsdWUiLCJuZXdPYmoiLCJfQ2hldnJvblVwIiwiX0NoZXZyb25Eb3duIiwiRGF5UGlja2VyTmF2aWdhdGlvbiIsIm5hdlByZXZJY29uIiwibmF2TmV4dEljb24iLCJpc0RlZmF1bHROYXZQcmV2IiwiaXNEZWZhdWx0TmF2TmV4dCIsIm5hdlByZXZUYWJJbmRleCIsIm5hdk5leHRUYWJJbmRleCIsIkljb24iLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX3N2Z19faG9yaXpvbnRhbCIsIkRheVBpY2tlck5hdmlnYXRpb25fc3ZnX192ZXJ0aWNhbCIsIkRheVBpY2tlck5hdmlnYXRpb25fc3ZnX19kaXNhYmxlZCIsIl9JY29uIiwiaXNEZWZhdWx0TmF2IiwiRGF5UGlja2VyTmF2aWdhdGlvbl9faG9yaXpvbnRhbCIsIkRheVBpY2tlck5hdmlnYXRpb25fX3ZlcnRpY2FsIiwiRGF5UGlja2VyTmF2aWdhdGlvbl9fdmVydGljYWxEZWZhdWx0IiwiRGF5UGlja2VyTmF2aWdhdGlvbl9fdmVydGljYWxTY3JvbGxhYmxlIiwiRGF5UGlja2VyTmF2aWdhdGlvbl9fdmVydGljYWxTY3JvbGxhYmxlRGVmYXVsdCIsIkRheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uIiwiRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX2RlZmF1bHQiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9fZGlzYWJsZWQiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9faG9yaXpvbnRhbCIsIkRheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uX19ob3Jpem9udGFsRGVmYXVsdCIsIkRheVBpY2tlck5hdmlnYXRpb25fbGVmdEJ1dHRvbl9faG9yaXpvbnRhbERlZmF1bHQiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX3JpZ2h0QnV0dG9uX19ob3Jpem9udGFsRGVmYXVsdCIsIkRheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uX192ZXJ0aWNhbCIsIkRheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uX192ZXJ0aWNhbERlZmF1bHQiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX3ByZXZCdXR0b25fX3ZlcnRpY2FsRGVmYXVsdCIsIm9uS2V5VXAiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX25leHRCdXR0b25fX3ZlcnRpY2FsIiwiRGF5UGlja2VyTmF2aWdhdGlvbl9uZXh0QnV0dG9uX192ZXJ0aWNhbERlZmF1bHQiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX25leHRCdXR0b25fX3ZlcnRpY2FsU2Nyb2xsYWJsZURlZmF1bHQiLCJDaGV2cm9uVXAiLCJDaGV2cm9uRG93biIsIl9LZXlib2FyZFNob3J0Y3V0Um93IiwiZ2V0S2V5Ym9hcmRTaG9ydGN1dHMiLCJsYWJlbCIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzIiwib25TaG93S2V5Ym9hcmRTaG9ydGN1dHNCdXR0b25DbGljayIsInNldFNob3dLZXlib2FyZFNob3J0Y3V0c0J1dHRvblJlZiIsInNldEhpZGVLZXlib2FyZFNob3J0Y3V0c0J1dHRvblJlZiIsImhhbmRsZUZvY3VzIiwic2hvd0tleWJvYXJkU2hvcnRjdXRzQnV0dG9uIiwiaGlkZUtleWJvYXJkU2hvcnRjdXRzQnV0dG9uIiwidG9nZ2xlQnV0dG9uVGV4dCIsImJvdHRvbVJpZ2h0IiwidG9wUmlnaHQiLCJ0b3BMZWZ0IiwiRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfYnV0dG9uUmVzZXQiLCJEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93IiwiRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfc2hvd19fYm90dG9tUmlnaHQiLCJEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93X190b3BSaWdodCIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dfX3RvcExlZnQiLCJEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93U3BhbiIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dTcGFuX19ib3R0b21SaWdodCIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dTcGFuX190b3BSaWdodCIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dTcGFuX190b3BMZWZ0IiwiRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfcGFuZWwiLCJEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c190aXRsZSIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX2Nsb3NlIiwiRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfY2xvc2VTdmciLCJEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19saXN0IiwiY29udGVudCIsIktleWJvYXJkU2hvcnRjdXRSb3ciLCJLZXlib2FyZFNob3J0Y3V0Um93X19ibG9jayIsIktleWJvYXJkU2hvcnRjdXRSb3dfa2V5Q29udGFpbmVyIiwiS2V5Ym9hcmRTaG9ydGN1dFJvd19rZXlDb250YWluZXJfX2Jsb2NrIiwiS2V5Ym9hcmRTaG9ydGN1dFJvd19rZXkiLCJLZXlib2FyZFNob3J0Y3V0Um93X2FjdGlvbiIsIm1hcmdpbkJvdHRvbSIsIndoaXRlU3BhY2UiLCJtYXJnaW5SaWdodCIsImZvbnRGYW1pbHkiLCJ0ZXh0VHJhbnNmb3JtIiwid29yZEJyZWFrIiwibnVtQmxhbmtEYXlzIiwiZmlyc3REYXlPZk1vbnRoIiwiZ2V0QmxhbmtEYXlzQmVmb3JlRmlyc3REYXkiLCJQdXJlU2luZ2xlRGF0ZVBpY2tlciIsIl9TaW5nbGVEYXRlUGlja2VySW5wdXRDb250cm9sbGVyIiwiU2luZ2xlRGF0ZVBpY2tlciIsImlzSW5wdXRGb2N1c2VkIiwib25Gb2N1c091dCIsIm9uSW5wdXRGb2N1cyIsInJlbW92ZVJlc2l6ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVGb2N1c091dEV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVycyIsIlNpbmdsZURhdGVQaWNrZXJfcGlja2VyIiwiU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX2RpcmVjdGlvbkxlZnQiLCJTaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fZGlyZWN0aW9uUmlnaHQiLCJTaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fb3BlbkRvd24iLCJTaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fb3BlblVwIiwiU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX2hvcml6b250YWwiLCJTaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fdmVydGljYWwiLCJTaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fcG9ydGFsIiwiU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX2Z1bGxTY3JlZW5Qb3J0YWwiLCJTaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fcnRsIiwiU2luZ2xlRGF0ZVBpY2tlcl9jbG9zZUJ1dHRvbiIsIlNpbmdsZURhdGVQaWNrZXJfY2xvc2VCdXR0b25fc3ZnIiwiU2luZ2xlRGF0ZVBpY2tlcl9fYmxvY2siLCJTaW5nbGVEYXRlUGlja2VySW5wdXRDb250cm9sbGVyIiwibmV3RGF0ZSIsIl9yZWdpc3RlckludGVyZmFjZVdpdGhEZWZhdWx0VGhlbWUiLCJfcmVhY3RXaXRoU3R5bGVzSW50ZXJmYWNlQ3NzIiwiX2FycmF5UHJvdG90eXBlMiIsIl9nbG9iYWxDYWNoZTIiLCJfZ2V0Q2xhc3NOYW1lMiIsIl9zZXBhcmF0ZVN0eWxlczMiLCJzdHlsZXNPYmplY3QiLCJzdHlsZXNUb0NsYXNzZXMiLCJzdHlsZU5hbWVzIiwiX3NoYXJlZFN0YXRlJG5hbWVzcGFjIiwiR0xPQkFMX0NBQ0hFX0tFWSIsIm5hbWVzcGFjZSIsInN0eWxlTmFtZSIsImNsYXNzTmFtZSIsInN0eWxlc0FycmF5IiwiZmxhdHRlbmVkU3R5bGVzIiwiX3NlcGFyYXRlU3R5bGVzIiwiY2xhc3NOYW1lcyIsImhhc0lubGluZVN0eWxlcyIsImlubGluZVN0eWxlcyIsImJvdW5kRmxhdCIsIiRpc0VudW1lcmFibGUiLCIkcHVzaEFwcGx5IiwiRVMyMDE3IiwiVG9JbmRleCIsImludGVnZXJJbmRleCIsIkVudW1lcmFibGVPd25Qcm9wZXJ0aWVzIiwia2luZCIsInJlc3VsdHMiLCJnbG9iYWxLZXkiLCJ0cnVlVGh1bmsiLCJlbnN1cmVDYWNoZSIsInByb3BlcnRpZXMiLCJjYWNoZSIsImdldFByaW1pdGl2ZUtleSIsInJlcXVpcmVQcmltaXRpdmVLZXkiLCJnbG9iYWxDYWNoZSIsImNsZWFyIiwicHJpbWl0aXZlS2V5Iiwic2V0SWZNaXNzaW5nVGhlbkdldCIsInZhbHVlVGh1bmsiLCJpdGVtIiwiTUFYX1NQRUNJRklDSVRZIiwicmVhY3RXaXRoU3R5bGVzSW50ZXJmYWNlIiwiX1RoZW1lZFN0eWxlU2hlZXQiLCJfRGVmYXVsdFRoZW1lIiwiX25vZGVJZCIsIl9jbG9ja3NlcSIsInJuZyIsImJ5dGVzVG9VdWlkIiwiX2xhc3RNU2VjcyIsIl9sYXN0TlNlY3MiLCJjbG9ja3NlcSIsInNlZWRCeXRlcyIsIm1zZWNzIiwibnNlY3MiLCJkdCIsInRsIiwidG1oIiwiUmVhY3RSZWR1eENvbnRleHQiLCJnZXRCYXRjaCIsIkNMRUFSRUQiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiU3Vic2NyaXB0aW9uIiwic3RvcmUiLCJwYXJlbnRTdWIiLCJ1bnN1YnNjcmliZSIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJhZGROZXN0ZWRTdWIiLCJ0cnlTdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwib25TdGF0ZUNoYW5nZSIsImJhdGNoIiwidHJ5VW5zdWJzY3JpYmUiLCJjb250ZXh0VmFsdWUiLCJzdWJzY3JpcHRpb24iLCJwcmV2aW91c1N0YXRlIiwiQ29udGV4dCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiRU1QVFlfQVJSQVkiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIiLCJ1cGRhdGVDb3VudCIsImluaXRTdGF0ZVVwZGF0ZXMiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZjIkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZjIkc2hvdWxkSGFuZGxlU3RhIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiX3JlZjIkc3RvcmVLZXkiLCJzdG9yZUtleSIsIl9yZWYyJHdpdGhSZWYiLCJ3aXRoUmVmIiwiX3JlZjIkZm9yd2FyZFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJwdXJlIiwidXNlUHVyZU9ubHlNZW1vIiwiQ29ubmVjdEZ1bmN0aW9uIiwiX3VzZU1lbW8iLCJmb3J3YXJkZWRSZWYiLCJ3cmFwcGVyUHJvcHMiLCJwcm9wc0NvbnRleHQiLCJDb250ZXh0VG9Vc2UiLCJkaWRTdG9yZUNvbWVGcm9tUHJvcHMiLCJkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCIsImNoaWxkUHJvcHNTZWxlY3RvciIsImNyZWF0ZUNoaWxkU2VsZWN0b3IiLCJfdXNlTWVtbzIiLCJvdmVycmlkZGVuQ29udGV4dFZhbHVlIiwiX3VzZVJlZHVjZXIiLCJwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0IiwiZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCIsImxhc3RDaGlsZFByb3BzIiwibGFzdFdyYXBwZXJQcm9wcyIsImNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUiLCJyZW5kZXJJc1NjaGVkdWxlZCIsImFjdHVhbENoaWxkUHJvcHMiLCJkaWRVbnN1YnNjcmliZSIsImxhc3RUaHJvd25FcnJvciIsImNoZWNrRm9yVXBkYXRlcyIsIm5ld0NoaWxkUHJvcHMiLCJsYXRlc3RTdG9yZVN0YXRlIiwicmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50IiwiQ29ubmVjdCIsImZvcndhcmRlZCIsImhhc093biIsInNoYWxsb3dFcXVhbCIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJjb21iaW5lUmVkdWNlcnMiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJmaW5hbFJlZHVjZXJLZXlzIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaGFzQ2hhbmdlZCIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJjb25zdGFudCIsImNvbnN0YW50U2VsZWN0b3IiLCJkZXBlbmRzT25Pd25Qcm9wcyIsImdldERlcGVuZHNPbk93blByb3BzIiwibWFwVG9Qcm9wcyIsIndyYXBNYXBUb1Byb3BzRnVuYyIsInByb3h5Iiwic3RhdGVPckRpc3BhdGNoIiwib3duUHJvcHMiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJkZWZhdWx0TWVyZ2VQcm9wcyIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwibWVyZ2VQcm9wcyIsIm1lcmdlZFByb3BzIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImhhc1J1bk9uY2UiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRPd25Qcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsImZhY3RvcmllcyIsInN0cmljdEVxdWFsIiwiX3RlbXAiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjMkcHVyZSIsIl9yZWYzJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjMkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjMkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjMkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwiY3JlYXRlU3RvcmVIb29rIiwidXNlUmVkdXhDb250ZXh0IiwidXNlU3RvcmUiLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJyZWZFcXVhbGl0eSIsIm5ld0JhdGNoIiwiY3JlYXRlU2VsZWN0b3JIb29rIiwiX2luaGVyaXRzTG9vc2UiLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiX0NvbXBvbmVudCIsImVtaXR0ZXIiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwib2xkVmFsdWUiLCJfQ29tcG9uZW50MiIsIm9uVXBkYXRlIiwiX3Byb3RvMiIsImlzQWJzb2x1dGUiLCJwYXRobmFtZSIsInNwbGljZU9uZSIsImxpc3QiLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJoYXNUcmFpbGluZ1NsYXNoIiwidXAiLCJwYXJ0IiwidmFsdWVFcXVhbCIsImV2ZXJ5IiwiYVR5cGUiLCJhVmFsdWUiLCJiVmFsdWUiLCJhS2V5cyIsImJLZXlzIiwiaXNQcm9kdWN0aW9uIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwiaGFzaCIsImNyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJsb2NhdGlvbnNBcmVFcXVhbCIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0Iiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsIm5vdGlmeUxpc3RlbmVycyIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJ1c2VyQWdlbnQiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJ0cmFuc2l0aW9uTWFuYWdlciIsImhhbmRsZVBvcFN0YXRlIiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJvayIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImRlbHRhIiwiZ28iLCJyZXZlcnRQb3AiLCJpbml0aWFsTG9jYXRpb24iLCJjcmVhdGVIcmVmIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJIYXNoQ2hhbmdlRXZlbnQkMSIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsImdldEhhc2hQYXRoIiwicmVwbGFjZUhhc2hQYXRoIiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJwdXNoSGFzaFBhdGgiLCJuZXh0UGF0aHMiLCJjbGFtcCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwiUm91dGVyIiwiX2lzTW91bnRlZCIsIl9wZW5kaW5nTG9jYXRpb24iLCJzdGF0aWNDb250ZXh0IiwiY29tcHV0ZVJvb3RNYXRjaCIsInBhcmFtcyIsImlzRXhhY3QiLCJjYWNoZSQxIiwiY2FjaGVMaW1pdCQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIl9jb21waWxlUGF0aCIsImNhY2hlS2V5IiwicGF0aENhY2hlIiwicmVnZXhwIiwiY29tcGlsZVBhdGgkMSIsIlJvdXRlIiwiY29udGV4dCQkMSIsImNvbXB1dGVkTWF0Y2giLCJpc0VtcHR5Q2hpbGRyZW4iLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwiU3dpdGNoIiwiQnJvd3NlclJvdXRlciIsIkxpbmsiLCJoYW5kbGVDbGljayIsImV4IiwiaXNNb2RpZmllZEV2ZW50IiwiaW5uZXJSZWYiLCJOYXZMaW5rIiwiX3JlZiRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50IiwiX3JlZiRhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZVByb3AiLCJlc2NhcGVkUGF0aCIsInBhdGhUb01hdGNoIiwiY2xhc3NuYW1lcyIsImpvaW5DbGFzc25hbWVzIiwiRXhwZW5zZUxpc3RJdGVtIiwiZGVzY3JpcHRpb24iLCJub3RlIiwiYW1vdW50IiwiY3JlYXRlZEF0IiwiZ2V0VmlzaWJsZUV4cGVuc2VzIiwiZXhwZW5zZXMiLCJzb3J0QnkiLCJleHBlbnNlIiwiY3JlYXRlZEF0TW9tZW50Iiwic3RhcnREYXRlTWF0Y2giLCJlbmREYXRlTWF0Y2giLCJ0ZXh0TWF0Y2giLCJjb25uZWN0IiwiZmlsdGVycyIsImlkeCIsInNvcnRCeURhdGUiLCJzb3J0QnlBbW91bnQiLCJFeHBlbnNlTGlzdEZpbHRlcnMiLCJzZXRTdGFydERhdGUiLCJzZXRFbmREYXRlIiwic2V0VGV4dEZpbHRlciIsIlJlYWN0Iiwib25UZXh0Q2hhbmdlIiwib25Tb3J0Q2hhbmdlIiwiRXhwZW5zZURhc2hib2FyZFBhZ2UiLCJFeHBlbnNlRm9ybSIsIm9uU3VibWl0Iiwib25EZXNjcmlwdGlvbkNoYW5nZSIsIm9uQW1vdW50Q2hhbmdlIiwib25Ob3RlQ2hhbmdlIiwiQWRkRXhwZW5zZVBhZ2UiLCJhZGRFeHBlbnNlIiwiRWRpdEV4cGVuc2VQYWdlIiwiZWRpdEV4cGVuc2UiLCJyZW1vdmVFeHBlbnNlIiwib25SZW1vdmUiLCJmaW5kIiwidXBkYXRlcyIsIkhlbHBQYWdlIiwiTm90Rm91bmQiLCJIZWFkZXIiLCJBcHBSb3V0ZXIiLCJleHBlbnNlc1JlZHVjZXJEZWZhdWx0U3RhdGUiLCJleHBlbnNlc1JlZHVjZXIiLCJleHAiLCJmaWx0ZXJzUmVkdWNlckRlZmF1bHRTdGF0ZSIsImZpbHRlcnNSZWR1Y2VyIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyIsImpzeCIsIlJlYWN0RE9NIiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIs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QUMsRUFBRCxDQUFVL1ksTUFBT0EsSUFDYixrQkFBQyxHQUFELE9BS1JnWixJQUFTNXRHLE9BQU8ydEcsR0FBS3B2RyxTQUFTc3ZHLGVBQWUiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDMzOSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8vISBtb21lbnQuanNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgZ2xvYmFsLm1vbWVudCA9IGZhY3RvcnkoKVxufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgaG9va0NhbGxiYWNrO1xuXG4gICAgZnVuY3Rpb24gaG9va3MgKCkge1xuICAgICAgICByZXR1cm4gaG9va0NhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyBkb25lIHRvIHJlZ2lzdGVyIHRoZSBtZXRob2QgY2FsbGVkIHdpdGggbW9tZW50KClcbiAgICAvLyB3aXRob3V0IGNyZWF0aW5nIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cbiAgICBmdW5jdGlvbiBzZXRIb29rQ2FsbGJhY2sgKGNhbGxiYWNrKSB7XG4gICAgICAgIGhvb2tDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQXJyYXkoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgQXJyYXkgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdChpbnB1dCkge1xuICAgICAgICAvLyBJRTggd2lsbCB0cmVhdCB1bmRlZmluZWQgYW5kIG51bGwgYXMgb2JqZWN0IGlmIGl0IHdhc24ndCBmb3JcbiAgICAgICAgLy8gaW5wdXQgIT0gbnVsbFxuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICAgICAgICAgIHJldHVybiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggPT09IDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGs7XG4gICAgICAgICAgICBmb3IgKGsgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT09IHZvaWQgMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWJlcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBOdW1iZXJdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RhdGUoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRGF0ZSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBEYXRlXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFwKGFyciwgZm4pIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdLCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICByZXMucHVzaChmbihhcnJbaV0sIGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc093blByb3AoYSwgYikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gYikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoYiwgaSkpIHtcbiAgICAgICAgICAgICAgICBhW2ldID0gYltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd0b1N0cmluZycpKSB7XG4gICAgICAgICAgICBhLnRvU3RyaW5nID0gYi50b1N0cmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd2YWx1ZU9mJykpIHtcbiAgICAgICAgICAgIGEudmFsdWVPZiA9IGIudmFsdWVPZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIHRydWUpLnV0YygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZGVlcCBjbG9uZSB0aGlzIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVtcHR5ICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgdW51c2VkVG9rZW5zICAgIDogW10sXG4gICAgICAgICAgICB1bnVzZWRJbnB1dCAgICAgOiBbXSxcbiAgICAgICAgICAgIG92ZXJmbG93ICAgICAgICA6IC0yLFxuICAgICAgICAgICAgY2hhcnNMZWZ0T3ZlciAgIDogMCxcbiAgICAgICAgICAgIG51bGxJbnB1dCAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgaW52YWxpZE1vbnRoICAgIDogbnVsbCxcbiAgICAgICAgICAgIGludmFsaWRGb3JtYXQgICA6IGZhbHNlLFxuICAgICAgICAgICAgdXNlckludmFsaWRhdGVkIDogZmFsc2UsXG4gICAgICAgICAgICBpc28gICAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHBhcnNlZERhdGVQYXJ0cyA6IFtdLFxuICAgICAgICAgICAgbWVyaWRpZW0gICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgIHJmYzI4MjIgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgd2Vla2RheU1pc21hdGNoIDogZmFsc2VcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzaW5nRmxhZ3MobSkge1xuICAgICAgICBpZiAobS5fcGYgPT0gbnVsbCkge1xuICAgICAgICAgICAgbS5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX3BmO1xuICAgIH1cblxuICAgIHZhciBzb21lO1xuICAgIGlmIChBcnJheS5wcm90b3R5cGUuc29tZSkge1xuICAgICAgICBzb21lID0gQXJyYXkucHJvdG90eXBlLnNvbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc29tZSA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICAgICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIGxlbiA9IHQubGVuZ3RoID4+PiAwO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gdCAmJiBmdW4uY2FsbCh0aGlzLCB0W2ldLCBpLCB0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkKG0pIHtcbiAgICAgICAgaWYgKG0uX2lzVmFsaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGZsYWdzID0gZ2V0UGFyc2luZ0ZsYWdzKG0pO1xuICAgICAgICAgICAgdmFyIHBhcnNlZFBhcnRzID0gc29tZS5jYWxsKGZsYWdzLnBhcnNlZERhdGVQYXJ0cywgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSAhPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgaXNOb3dWYWxpZCA9ICFpc05hTihtLl9kLmdldFRpbWUoKSkgJiZcbiAgICAgICAgICAgICAgICBmbGFncy5vdmVyZmxvdyA8IDAgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuZW1wdHkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZE1vbnRoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRXZWVrZGF5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLndlZWtkYXlNaXNtYXRjaCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5udWxsSW5wdXQgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEZvcm1hdCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy51c2VySW52YWxpZGF0ZWQgJiZcbiAgICAgICAgICAgICAgICAoIWZsYWdzLm1lcmlkaWVtIHx8IChmbGFncy5tZXJpZGllbSAmJiBwYXJzZWRQYXJ0cykpO1xuXG4gICAgICAgICAgICBpZiAobS5fc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgaXNOb3dWYWxpZCA9IGlzTm93VmFsaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuY2hhcnNMZWZ0T3ZlciA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy51bnVzZWRUb2tlbnMubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmJpZ0hvdXIgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbiA9PSBudWxsIHx8ICFPYmplY3QuaXNGcm96ZW4obSkpIHtcbiAgICAgICAgICAgICAgICBtLl9pc1ZhbGlkID0gaXNOb3dWYWxpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc05vd1ZhbGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtLl9pc1ZhbGlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWQgKGZsYWdzKSB7XG4gICAgICAgIHZhciBtID0gY3JlYXRlVVRDKE5hTik7XG4gICAgICAgIGlmIChmbGFncyAhPSBudWxsKSB7XG4gICAgICAgICAgICBleHRlbmQoZ2V0UGFyc2luZ0ZsYWdzKG0pLCBmbGFncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkudXNlckludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIC8vIFBsdWdpbnMgdGhhdCBhZGQgcHJvcGVydGllcyBzaG91bGQgYWxzbyBhZGQgdGhlIGtleSBoZXJlIChudWxsIHZhbHVlKSxcbiAgICAvLyBzbyB3ZSBjYW4gcHJvcGVybHkgY2xvbmUgb3Vyc2VsdmVzLlxuICAgIHZhciBtb21lbnRQcm9wZXJ0aWVzID0gaG9va3MubW9tZW50UHJvcGVydGllcyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gY29weUNvbmZpZyh0bywgZnJvbSkge1xuICAgICAgICB2YXIgaSwgcHJvcCwgdmFsO1xuXG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNBTW9tZW50T2JqZWN0KSkge1xuICAgICAgICAgICAgdG8uX2lzQU1vbWVudE9iamVjdCA9IGZyb20uX2lzQU1vbWVudE9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2kpKSB7XG4gICAgICAgICAgICB0by5faSA9IGZyb20uX2k7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9mKSkge1xuICAgICAgICAgICAgdG8uX2YgPSBmcm9tLl9mO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbCkpIHtcbiAgICAgICAgICAgIHRvLl9sID0gZnJvbS5fbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3N0cmljdCkpIHtcbiAgICAgICAgICAgIHRvLl9zdHJpY3QgPSBmcm9tLl9zdHJpY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl90em0pKSB7XG4gICAgICAgICAgICB0by5fdHptID0gZnJvbS5fdHptO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNVVEMpKSB7XG4gICAgICAgICAgICB0by5faXNVVEMgPSBmcm9tLl9pc1VUQztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX29mZnNldCkpIHtcbiAgICAgICAgICAgIHRvLl9vZmZzZXQgPSBmcm9tLl9vZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9wZikpIHtcbiAgICAgICAgICAgIHRvLl9wZiA9IGdldFBhcnNpbmdGbGFncyhmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2xvY2FsZSkpIHtcbiAgICAgICAgICAgIHRvLl9sb2NhbGUgPSBmcm9tLl9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9tZW50UHJvcGVydGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9tZW50UHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHByb3AgPSBtb21lbnRQcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgICAgIHZhbCA9IGZyb21bcHJvcF07XG4gICAgICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvW3Byb3BdID0gdmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG5cbiAgICB2YXIgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gICAgLy8gTW9tZW50IHByb3RvdHlwZSBvYmplY3RcbiAgICBmdW5jdGlvbiBNb21lbnQoY29uZmlnKSB7XG4gICAgICAgIGNvcHlDb25maWcodGhpcywgY29uZmlnKTtcbiAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5fZCAhPSBudWxsID8gY29uZmlnLl9kLmdldFRpbWUoKSA6IE5hTik7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcCBpbiBjYXNlIHVwZGF0ZU9mZnNldCBjcmVhdGVzIG5ldyBtb21lbnRcbiAgICAgICAgLy8gb2JqZWN0cy5cbiAgICAgICAgaWYgKHVwZGF0ZUluUHJvZ3Jlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTW9tZW50IChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fCAob2JqICE9IG51bGwgJiYgb2JqLl9pc0FNb21lbnRPYmplY3QgIT0gbnVsbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzRmxvb3IgKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgLy8gLTAgLT4gMFxuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpIHx8IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JbnQoYXJndW1lbnRGb3JDb2VyY2lvbikge1xuICAgICAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLFxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgICAgIGlmIChjb2VyY2VkTnVtYmVyICE9PSAwICYmIGlzRmluaXRlKGNvZXJjZWROdW1iZXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGFic0Zsb29yKGNvZXJjZWROdW1iZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8vIGNvbXBhcmUgdHdvIGFycmF5cywgcmV0dXJuIHRoZSBudW1iZXIgb2YgZGlmZmVyZW5jZXNcbiAgICBmdW5jdGlvbiBjb21wYXJlQXJyYXlzKGFycmF5MSwgYXJyYXkyLCBkb250Q29udmVydCkge1xuICAgICAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyYXkxLmxlbmd0aCwgYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgZGlmZnMgPSAwLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoKGRvbnRDb252ZXJ0ICYmIGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB8fFxuICAgICAgICAgICAgICAgICghZG9udENvbnZlcnQgJiYgdG9JbnQoYXJyYXkxW2ldKSAhPT0gdG9JbnQoYXJyYXkyW2ldKSkpIHtcbiAgICAgICAgICAgICAgICBkaWZmcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmY7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgICAgICAgaWYgKGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIGNvbnNvbGUgIT09ICAndW5kZWZpbmVkJykgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0aW9uIHdhcm5pbmc6ICcgKyBtc2cpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlKG1zZywgZm4pIHtcbiAgICAgICAgdmFyIGZpcnN0VGltZSA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobnVsbCwgbXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBhcmc7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9ICdcXG5bJyArIGkgKyAnXSAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSBrZXkgKyAnOiAnICsgYXJndW1lbnRzWzBdW2tleV0gKyAnLCAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDAsIC0yKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbW1hIGFuZCBzcGFjZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3YXJuKG1zZyArICdcXG5Bcmd1bWVudHM6ICcgKyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcnKSArICdcXG4nICsgKG5ldyBFcnJvcigpKS5zdGFjayk7XG4gICAgICAgICAgICAgICAgZmlyc3RUaW1lID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSwgZm4pO1xuICAgIH1cblxuICAgIHZhciBkZXByZWNhdGlvbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCBtc2cpIHtcbiAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobmFtZSwgbXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlcHJlY2F0aW9uc1tuYW1lXSkge1xuICAgICAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICAgICAgZGVwcmVjYXRpb25zW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9IGZhbHNlO1xuICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIEZ1bmN0aW9uIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0IChjb25maWcpIHtcbiAgICAgICAgdmFyIHByb3AsIGk7XG4gICAgICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgICAgIHByb3AgPSBjb25maWdbaV07XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihwcm9wKSkge1xuICAgICAgICAgICAgICAgIHRoaXNbaV0gPSBwcm9wO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzWydfJyArIGldID0gcHJvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgICAgIC8vIExlbmllbnQgb3JkaW5hbCBwYXJzaW5nIGFjY2VwdHMganVzdCBhIG51bWJlciBpbiBhZGRpdGlvbiB0b1xuICAgICAgICAvLyBudW1iZXIgKyAocG9zc2libHkpIHN0dWZmIGNvbWluZyBmcm9tIF9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLlxuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgICAgIHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICh0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLnNvdXJjZSB8fCB0aGlzLl9vcmRpbmFsUGFyc2Uuc291cmNlKSArXG4gICAgICAgICAgICAgICAgJ3wnICsgKC9cXGR7MSwyfS8pLnNvdXJjZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY2hpbGRDb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IGV4dGVuZCh7fSwgcGFyZW50Q29uZmlnKSwgcHJvcDtcbiAgICAgICAgZm9yIChwcm9wIGluIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSAmJiBpc09iamVjdChjaGlsZENvbmZpZ1twcm9wXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW3Byb3BdID0ge307XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIHBhcmVudENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIGNoaWxkQ29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkQ29uZmlnW3Byb3BdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gY2hpbGRDb25maWdbcHJvcF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlc1twcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChwcm9wIGluIHBhcmVudENvbmZpZykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AocGFyZW50Q29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgICAgICAhaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBjaGFuZ2VzIHRvIHByb3BlcnRpZXMgZG9uJ3QgbW9kaWZ5IHBhcmVudCBjb25maWdcbiAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBleHRlbmQoe30sIHJlc1twcm9wXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBMb2NhbGUoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKSB7XG4gICAgICAgIGtleXMgPSBPYmplY3Qua2V5cztcbiAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgdmFyIGksIHJlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKG9iaiwgaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdENhbGVuZGFyID0ge1xuICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNhbGVuZGFyIChrZXksIG1vbSwgbm93KSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldIHx8IHRoaXMuX2NhbGVuZGFyWydzYW1lRWxzZSddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpID8gb3V0cHV0LmNhbGwobW9tLCBub3cpIDogb3V0cHV0O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQgPSB7XG4gICAgICAgIExUUyAgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgTFQgICA6ICdoOm1tIEEnLFxuICAgICAgICBMICAgIDogJ01NL0REL1lZWVknLFxuICAgICAgICBMTCAgIDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgIExMTCAgOiAnTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQSdcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9uZ0RhdGVGb3JtYXQgKGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgICAgIGZvcm1hdFVwcGVyID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChmb3JtYXQgfHwgIWZvcm1hdFVwcGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSA9IGZvcm1hdFVwcGVyLnJlcGxhY2UoL01NTU18TU18RER8ZGRkZC9nLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsLnNsaWNlKDEpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdEludmFsaWREYXRlID0gJ0ludmFsaWQgZGF0ZSc7XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkRGF0ZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZhbGlkRGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE9yZGluYWwgPSAnJWQnO1xuICAgIHZhciBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSA9IC9cXGR7MSwyfS87XG5cbiAgICBmdW5jdGlvbiBvcmRpbmFsIChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29yZGluYWwucmVwbGFjZSgnJWQnLCBudW1iZXIpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0UmVsYXRpdmVUaW1lID0ge1xuICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICBwYXN0ICAgOiAnJXMgYWdvJyxcbiAgICAgICAgcyAgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgIHNzIDogJyVkIHNlY29uZHMnLFxuICAgICAgICBtICA6ICdhIG1pbnV0ZScsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICBoICA6ICdhbiBob3VyJyxcbiAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICBkICA6ICdhIGRheScsXG4gICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICBNICA6ICdhIG1vbnRoJyxcbiAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgeSAgOiAnYSB5ZWFyJyxcbiAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZSAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbc3RyaW5nXTtcbiAgICAgICAgcmV0dXJuIChpc0Z1bmN0aW9uKG91dHB1dCkpID9cbiAgICAgICAgICAgIG91dHB1dChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIDpcbiAgICAgICAgICAgIG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhc3RGdXR1cmUgKGRpZmYsIG91dHB1dCkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW2RpZmYgPiAwID8gJ2Z1dHVyZScgOiAncGFzdCddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihmb3JtYXQpID8gZm9ybWF0KG91dHB1dCkgOiBmb3JtYXQucmVwbGFjZSgvJXMvaSwgb3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgYWxpYXNlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkVW5pdEFsaWFzICh1bml0LCBzaG9ydGhhbmQpIHtcbiAgICAgICAgdmFyIGxvd2VyQ2FzZSA9IHVuaXQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgYWxpYXNlc1tsb3dlckNhc2VdID0gYWxpYXNlc1tsb3dlckNhc2UgKyAncyddID0gYWxpYXNlc1tzaG9ydGhhbmRdID0gdW5pdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVVbml0cyh1bml0cykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHVuaXRzID09PSAnc3RyaW5nJyA/IGFsaWFzZXNbdW5pdHNdIHx8IGFsaWFzZXNbdW5pdHMudG9Mb3dlckNhc2UoKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplT2JqZWN0VW5pdHMoaW5wdXRPYmplY3QpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IHt9LFxuICAgICAgICAgICAgbm9ybWFsaXplZFByb3AsXG4gICAgICAgICAgICBwcm9wO1xuXG4gICAgICAgIGZvciAocHJvcCBpbiBpbnB1dE9iamVjdCkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoaW5wdXRPYmplY3QsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFByb3AgPSBub3JtYWxpemVVbml0cyhwcm9wKTtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZElucHV0W25vcm1hbGl6ZWRQcm9wXSA9IGlucHV0T2JqZWN0W3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub3JtYWxpemVkSW5wdXQ7XG4gICAgfVxuXG4gICAgdmFyIHByaW9yaXRpZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFVuaXRQcmlvcml0eSh1bml0LCBwcmlvcml0eSkge1xuICAgICAgICBwcmlvcml0aWVzW3VuaXRdID0gcHJpb3JpdHk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0c09iaikge1xuICAgICAgICB2YXIgdW5pdHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgdSBpbiB1bml0c09iaikge1xuICAgICAgICAgICAgdW5pdHMucHVzaCh7dW5pdDogdSwgcHJpb3JpdHk6IHByaW9yaXRpZXNbdV19KTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdW5pdHM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gemVyb0ZpbGwobnVtYmVyLCB0YXJnZXRMZW5ndGgsIGZvcmNlU2lnbikge1xuICAgICAgICB2YXIgYWJzTnVtYmVyID0gJycgKyBNYXRoLmFicyhudW1iZXIpLFxuICAgICAgICAgICAgemVyb3NUb0ZpbGwgPSB0YXJnZXRMZW5ndGggLSBhYnNOdW1iZXIubGVuZ3RoLFxuICAgICAgICAgICAgc2lnbiA9IG51bWJlciA+PSAwO1xuICAgICAgICByZXR1cm4gKHNpZ24gPyAoZm9yY2VTaWduID8gJysnIDogJycpIDogJy0nKSArXG4gICAgICAgICAgICBNYXRoLnBvdygxMCwgTWF0aC5tYXgoMCwgemVyb3NUb0ZpbGwpKS50b1N0cmluZygpLnN1YnN0cigxKSArIGFic051bWJlcjtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98WVlZWVlZfFlZWVlZfFlZWVl8WVl8Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98a2s/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2c7XG5cbiAgICB2YXIgbG9jYWxGb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUU3xMVHxMTD9MP0w/fGx7MSw0fSkvZztcblxuICAgIHZhciBmb3JtYXRGdW5jdGlvbnMgPSB7fTtcblxuICAgIHZhciBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgLy8gdG9rZW46ICAgICdNJ1xuICAgIC8vIHBhZGRlZDogICBbJ01NJywgMl1cbiAgICAvLyBvcmRpbmFsOiAgJ01vJ1xuICAgIC8vIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7IHRoaXMubW9udGgoKSArIDEgfVxuICAgIGZ1bmN0aW9uIGFkZEZvcm1hdFRva2VuICh0b2tlbiwgcGFkZGVkLCBvcmRpbmFsLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZnVuYyA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1tjYWxsYmFja10oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWRkZWQpIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3BhZGRlZFswXV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHplcm9GaWxsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgcGFkZGVkWzFdLCBwYWRkZWRbMl0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkaW5hbCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbb3JkaW5hbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm9yZGluYWwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0b2tlbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQubWF0Y2goL1xcW1tcXHNcXFNdLykpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eXFxbfFxcXSQvZywgJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgICAgIHZhciBhcnJheSA9IGZvcm1hdC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSwgaSwgbGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dKSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSBmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhhcnJheVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1vbSkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9ICcnLCBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IGlzRnVuY3Rpb24oYXJyYXlbaV0pID8gYXJyYXlbaV0uY2FsbChtb20sIGZvcm1hdCkgOiBhcnJheVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gZm9ybWF0IGRhdGUgdXNpbmcgbmF0aXZlIGRhdGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gZm9ybWF0TW9tZW50KG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbS5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGV4cGFuZEZvcm1hdChmb3JtYXQsIG0ubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gPSBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSB8fCBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KTtcblxuICAgICAgICByZXR1cm4gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0obSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbG9jYWxlKSB7XG4gICAgICAgIHZhciBpID0gNTtcblxuICAgICAgICBmdW5jdGlvbiByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubG9uZ0RhdGVGb3JtYXQoaW5wdXQpIHx8IGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIHdoaWxlIChpID49IDAgJiYgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UobG9jYWxGb3JtYXR0aW5nVG9rZW5zLCByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMpO1xuICAgICAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICBpIC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIHZhciBtYXRjaDEgICAgICAgICA9IC9cXGQvOyAgICAgICAgICAgIC8vICAgICAgIDAgLSA5XG4gICAgdmFyIG1hdGNoMiAgICAgICAgID0gL1xcZFxcZC87ICAgICAgICAgIC8vICAgICAgMDAgLSA5OVxuICAgIHZhciBtYXRjaDMgICAgICAgICA9IC9cXGR7M30vOyAgICAgICAgIC8vICAgICAwMDAgLSA5OTlcbiAgICB2YXIgbWF0Y2g0ICAgICAgICAgPSAvXFxkezR9LzsgICAgICAgICAvLyAgICAwMDAwIC0gOTk5OVxuICAgIHZhciBtYXRjaDYgICAgICAgICA9IC9bKy1dP1xcZHs2fS87ICAgIC8vIC05OTk5OTkgLSA5OTk5OTlcbiAgICB2YXIgbWF0Y2gxdG8yICAgICAgPSAvXFxkXFxkPy87ICAgICAgICAgLy8gICAgICAgMCAtIDk5XG4gICAgdmFyIG1hdGNoM3RvNCAgICAgID0gL1xcZFxcZFxcZFxcZD8vOyAgICAgLy8gICAgIDk5OSAtIDk5OTlcbiAgICB2YXIgbWF0Y2g1dG82ICAgICAgPSAvXFxkXFxkXFxkXFxkXFxkXFxkPy87IC8vICAgOTk5OTkgLSA5OTk5OTlcbiAgICB2YXIgbWF0Y2gxdG8zICAgICAgPSAvXFxkezEsM30vOyAgICAgICAvLyAgICAgICAwIC0gOTk5XG4gICAgdmFyIG1hdGNoMXRvNCAgICAgID0gL1xcZHsxLDR9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OTlcbiAgICB2YXIgbWF0Y2gxdG82ICAgICAgPSAvWystXT9cXGR7MSw2fS87ICAvLyAtOTk5OTk5IC0gOTk5OTk5XG5cbiAgICB2YXIgbWF0Y2hVbnNpZ25lZCAgPSAvXFxkKy87ICAgICAgICAgICAvLyAgICAgICAwIC0gaW5mXG4gICAgdmFyIG1hdGNoU2lnbmVkICAgID0gL1srLV0/XFxkKy87ICAgICAgLy8gICAgLWluZiAtIGluZlxuXG4gICAgdmFyIG1hdGNoT2Zmc2V0ICAgID0gL1p8WystXVxcZFxcZDo/XFxkXFxkL2dpOyAvLyArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbiAgICB2YXIgbWF0Y2hTaG9ydE9mZnNldCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/L2dpOyAvLyArMDAgLTAwICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuXG4gICAgdmFyIG1hdGNoVGltZXN0YW1wID0gL1srLV0/XFxkKyhcXC5cXGR7MSwzfSk/LzsgLy8gMTIzNDU2Nzg5IDEyMzQ1Njc4OS4xMjNcblxuICAgIC8vIGFueSB3b3JkIChvciB0d28pIGNoYXJhY3RlcnMgb3IgbnVtYmVycyBpbmNsdWRpbmcgdHdvL3RocmVlIHdvcmQgbW9udGggaW4gYXJhYmljLlxuICAgIC8vIGluY2x1ZGVzIHNjb3R0aXNoIGdhZWxpYyB0d28gd29yZCBhbmQgaHlwaGVuYXRlZCBtb250aHNcbiAgICB2YXIgbWF0Y2hXb3JkID0gL1swLTldezAsMjU2fVsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRjA3XFx1RkYxMC1cXHVGRkVGXXsxLDI1Nn18W1xcdTA2MDAtXFx1MDZGRlxcL117MSwyNTZ9KFxccyo/W1xcdTA2MDAtXFx1MDZGRl17MSwyNTZ9KXsxLDJ9L2k7XG5cbiAgICB2YXIgcmVnZXhlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUmVnZXhUb2tlbiAodG9rZW4sIHJlZ2V4LCBzdHJpY3RSZWdleCkge1xuICAgICAgICByZWdleGVzW3Rva2VuXSA9IGlzRnVuY3Rpb24ocmVnZXgpID8gcmVnZXggOiBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZURhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiAoaXNTdHJpY3QgJiYgc3RyaWN0UmVnZXgpID8gc3RyaWN0UmVnZXggOiByZWdleDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4gKHRva2VuLCBjb25maWcpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHJlZ2V4ZXMsIHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodW5lc2NhcGVGb3JtYXQodG9rZW4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWdleGVzW3Rva2VuXShjb25maWcuX3N0cmljdCwgY29uZmlnLl9sb2NhbGUpO1xuICAgIH1cblxuICAgIC8vIENvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHRcbiAgICBmdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7XG4gICAgICAgIHJldHVybiByZWdleEVzY2FwZShzLnJlcGxhY2UoJ1xcXFwnLCAnJykucmVwbGFjZSgvXFxcXChcXFspfFxcXFwoXFxdKXxcXFsoW15cXF1cXFtdKilcXF18XFxcXCguKS9nLCBmdW5jdGlvbiAobWF0Y2hlZCwgcDEsIHAyLCBwMywgcDQpIHtcbiAgICAgICAgICAgIHJldHVybiBwMSB8fCBwMiB8fCBwMyB8fCBwNDtcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZ2V4RXNjYXBlKHMpIHtcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG4gICAgfVxuXG4gICAgdmFyIHRva2VucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBpLCBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTnVtYmVyKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtjYWxsYmFja10gPSB0b0ludChpbnB1dCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuW2ldXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIGNvbmZpZy5fdyA9IGNvbmZpZy5fdyB8fCB7fTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGlucHV0LCBjb25maWcuX3csIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgaW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBoYXNPd25Qcm9wKHRva2VucywgdG9rZW4pKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5dKGlucHV0LCBjb25maWcuX2EsIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIFlFQVIgPSAwO1xuICAgIHZhciBNT05USCA9IDE7XG4gICAgdmFyIERBVEUgPSAyO1xuICAgIHZhciBIT1VSID0gMztcbiAgICB2YXIgTUlOVVRFID0gNDtcbiAgICB2YXIgU0VDT05EID0gNTtcbiAgICB2YXIgTUlMTElTRUNPTkQgPSA2O1xuICAgIHZhciBXRUVLID0gNztcbiAgICB2YXIgV0VFS0RBWSA9IDg7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHkgPSB0aGlzLnllYXIoKTtcbiAgICAgICAgcmV0dXJuIHkgPD0gOTk5OSA/ICcnICsgeSA6ICcrJyArIHk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZJywgICA0XSwgICAgICAgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZJywgIDVdLCAgICAgICAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVlZJywgNiwgdHJ1ZV0sIDAsICd5ZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3llYXInLCAneScpO1xuXG4gICAgLy8gUFJJT1JJVElFU1xuXG4gICAgYWRkVW5pdFByaW9yaXR5KCd5ZWFyJywgMSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdZJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVknLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVknLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWScsICBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ1lZWVlZJywgJ1lZWVlZWSddLCBZRUFSKTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWVlZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IGlucHV0Lmxlbmd0aCA9PT0gMiA/IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KSA6IHRvSW50KGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDApIHx8IHllYXIgJSA0MDAgPT09IDA7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0b0ludChpbnB1dCkgKyAodG9JbnQoaW5wdXQpID4gNjggPyAxOTAwIDogMjAwMCk7XG4gICAgfTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRZZWFyID0gbWFrZUdldFNldCgnRnVsbFllYXInLCB0cnVlKTtcblxuICAgIGZ1bmN0aW9uIGdldElzTGVhcFllYXIgKCkge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUdldFNldCAodW5pdCwga2VlcFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzZXQkMSh0aGlzLCB1bml0LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIGtlZXBUaW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQgKG1vbSwgdW5pdCkge1xuICAgICAgICByZXR1cm4gbW9tLmlzVmFsaWQoKSA/XG4gICAgICAgICAgICBtb20uX2RbJ2dldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0oKSA6IE5hTjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXQkMSAobW9tLCB1bml0LCB2YWx1ZSkge1xuICAgICAgICBpZiAobW9tLmlzVmFsaWQoKSAmJiAhaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodW5pdCA9PT0gJ0Z1bGxZZWFyJyAmJiBpc0xlYXBZZWFyKG1vbS55ZWFyKCkpICYmIG1vbS5tb250aCgpID09PSAxICYmIG1vbS5kYXRlKCkgPT09IDI5KSB7XG4gICAgICAgICAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlLCBtb20ubW9udGgoKSwgZGF5c0luTW9udGgodmFsdWUsIG1vbS5tb250aCgpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gc3RyaW5nR2V0ICh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHN0cmluZ1NldCAodW5pdHMsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdW5pdHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIHZhciBwcmlvcml0aXplZCA9IGdldFByaW9yaXRpemVkVW5pdHModW5pdHMpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmlvcml0aXplZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXNbcHJpb3JpdGl6ZWRbaV0udW5pdF0odW5pdHNbcHJpb3JpdGl6ZWRbaV0udW5pdF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vZChuLCB4KSB7XG4gICAgICAgIHJldHVybiAoKG4gJSB4KSArIHgpICUgeDtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXhPZjtcblxuICAgIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgICAgICBpbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2Y7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZXhPZiA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAvLyBJIGtub3dcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gbykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICAgICAgaWYgKGlzTmFOKHllYXIpIHx8IGlzTmFOKG1vbnRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbW9kTW9udGggPSBtb2QobW9udGgsIDEyKTtcbiAgICAgICAgeWVhciArPSAobW9udGggLSBtb2RNb250aCkgLyAxMjtcbiAgICAgICAgcmV0dXJuIG1vZE1vbnRoID09PSAxID8gKGlzTGVhcFllYXIoeWVhcikgPyAyOSA6IDI4KSA6ICgzMSAtIG1vZE1vbnRoICUgNyAlIDIpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNJywgWydNTScsIDJdLCAnTW8nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbnRoKCkgKyAxO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRocyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtb250aCcsICdNJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdtb250aCcsIDgpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignTScsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU0nLCAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU0nLCAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTScsICdNTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9IHRvSW50KGlucHV0KSAtIDE7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTU1NJywgJ01NTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgbW9udGggPSBjb25maWcuX2xvY2FsZS5tb250aHNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuXG4gICAgICAgIGlmIChtb250aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhcnJheVtNT05USF0gPSBtb250aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRNb250aCA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICB2YXIgTU9OVEhTX0lOX0ZPUk1BVCA9IC9EW29EXT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK01NTU0/LztcbiAgICB2YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRocyAobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRocyA6XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzWydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRoc1ttLm1vbnRoKCldIDpcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1sodGhpcy5fbW9udGhzLmlzRm9ybWF0IHx8IE1PTlRIU19JTl9GT1JNQVQpLnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQgPSAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzU2hvcnQgKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0IDpcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFsnc3RhbmRhbG9uZSddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0W20ubW9udGgoKV0gOlxuICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRbTU9OVEhTX0lOX0ZPUk1BVC50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZShtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBpaSwgbW9tLCBsbGMgPSBtb250aE5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3QgdXNlZFxuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyArK2kpIHtcbiAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHNTaG9ydChtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlIChtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UuY2FsbCh0aGlzLCBtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE86IGFkZCBzb3J0aW5nXG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXJcbiAgICAgICAgLy8gc2VlIHNvcnRpbmcgaW4gY29tcHV0ZU1vbnRoc1BhcnNlXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICF0aGlzLl9tb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykgKyAnfF4nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTU0nICYmIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTScgJiYgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl9tb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHNldE1vbnRoIChtb20sIHZhbHVlKSB7XG4gICAgICAgIHZhciBkYXlPZk1vbnRoO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbW9tLmxvY2FsZURhdGEoKS5tb250aHNQYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogQW5vdGhlciBzaWxlbnQgZmFpbHVyZT9cbiAgICAgICAgICAgICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRheU9mTW9udGggPSBNYXRoLm1pbihtb20uZGF0ZSgpLCBkYXlzSW5Nb250aChtb20ueWVhcigpLCB2YWx1ZSkpO1xuICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgJ01vbnRoJ10odmFsdWUsIGRheU9mTW9udGgpO1xuICAgICAgICByZXR1cm4gbW9tO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldE1vbnRoICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0TW9udGgodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsICdNb250aCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF5c0luTW9udGggKCkge1xuICAgICAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIG1vbnRoc1Nob3J0UmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA6IHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE1vbnRoc1JlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIG1vbnRoc1JlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBkZWZhdWx0TW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4IDogdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlTW9udGhzUGFyc2UgKCkge1xuICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hvcnRQaWVjZXMgPSBbXSwgbG9uZ1BpZWNlcyA9IFtdLCBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSwgbW9tO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIHNob3J0UGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgICAgICBsb25nUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAgICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgICAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICBzaG9ydFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKHNob3J0UGllY2VzW2ldKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXNbaV0gPSByZWdleEVzY2FwZShsb25nUGllY2VzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURhdGUgKHksIG0sIGQsIGgsIE0sIHMsIG1zKSB7XG4gICAgICAgIC8vIGNhbid0IGp1c3QgYXBwbHkoKSB0byBjcmVhdGUgYSBkYXRlOlxuICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMTgxMzQ4XG4gICAgICAgIHZhciBkYXRlO1xuICAgICAgICAvLyB0aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHkgKyA0MDAsIG0sIGQsIGgsIE0sIHMsIG1zKTtcbiAgICAgICAgICAgIGlmIChpc0Zpbml0ZShkYXRlLmdldEZ1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVVENEYXRlICh5KSB7XG4gICAgICAgIHZhciBkYXRlO1xuICAgICAgICAvLyB0aGUgRGF0ZS5VVEMgZnVuY3Rpb24gcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIGFyZ3NbMF0gPSB5ICsgNDAwO1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3MpKTtcbiAgICAgICAgICAgIGlmIChpc0Zpbml0ZShkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIC8vIHN0YXJ0LW9mLWZpcnN0LXdlZWsgLSBzdGFydC1vZi15ZWFyXG4gICAgZnVuY3Rpb24gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHZhciAvLyBmaXJzdC13ZWVrIGRheSAtLSB3aGljaCBqYW51YXJ5IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayAoNCBmb3IgaXNvLCAxIGZvciBvdGhlcilcbiAgICAgICAgICAgIGZ3ZCA9IDcgKyBkb3cgLSBkb3ksXG4gICAgICAgICAgICAvLyBmaXJzdC13ZWVrIGRheSBsb2NhbCB3ZWVrZGF5IC0tIHdoaWNoIGxvY2FsIHdlZWtkYXkgaXMgZndkXG4gICAgICAgICAgICBmd2RsdyA9ICg3ICsgY3JlYXRlVVRDRGF0ZSh5ZWFyLCAwLCBmd2QpLmdldFVUQ0RheSgpIC0gZG93KSAlIDc7XG5cbiAgICAgICAgcmV0dXJuIC1md2RsdyArIGZ3ZCAtIDE7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZSNDYWxjdWxhdGluZ19hX2RhdGVfZ2l2ZW5fdGhlX3llYXIuMkNfd2Vla19udW1iZXJfYW5kX3dlZWtkYXlcbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla3MoeWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGxvY2FsV2Vla2RheSA9ICg3ICsgd2Vla2RheSAtIGRvdykgJSA3LFxuICAgICAgICAgICAgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXlPZlllYXIgPSAxICsgNyAqICh3ZWVrIC0gMSkgKyBsb2NhbFdlZWtkYXkgKyB3ZWVrT2Zmc2V0LFxuICAgICAgICAgICAgcmVzWWVhciwgcmVzRGF5T2ZZZWFyO1xuXG4gICAgICAgIGlmIChkYXlPZlllYXIgPD0gMCkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgLSAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5c0luWWVhcihyZXNZZWFyKSArIGRheU9mWWVhcjtcbiAgICAgICAgfSBlbHNlIGlmIChkYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXIpKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciArIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXIgLSBkYXlzSW5ZZWFyKHllYXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXI7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgICAgIGRheU9mWWVhcjogcmVzRGF5T2ZZZWFyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla09mWWVhcihtb20sIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KG1vbS55ZWFyKCksIGRvdywgZG95KSxcbiAgICAgICAgICAgIHdlZWsgPSBNYXRoLmZsb29yKChtb20uZGF5T2ZZZWFyKCkgLSB3ZWVrT2Zmc2V0IC0gMSkgLyA3KSArIDEsXG4gICAgICAgICAgICByZXNXZWVrLCByZXNZZWFyO1xuXG4gICAgICAgIGlmICh3ZWVrIDwgMSkge1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgLSAxO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgKyB3ZWVrc0luWWVhcihyZXNZZWFyLCBkb3csIGRveSk7XG4gICAgICAgIH0gZWxzZSBpZiAod2VlayA+IHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KSkge1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgLSB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSk7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKTtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdlZWs6IHJlc1dlZWssXG4gICAgICAgICAgICB5ZWFyOiByZXNZZWFyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciArIDEsIGRvdywgZG95KTtcbiAgICAgICAgcmV0dXJuIChkYXlzSW5ZZWFyKHllYXIpIC0gd2Vla09mZnNldCArIHdlZWtPZmZzZXROZXh0KSAvIDc7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3cnLCBbJ3d3JywgMl0sICd3bycsICd3ZWVrJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ1cnLCBbJ1dXJywgMl0sICdXbycsICdpc29XZWVrJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3dlZWsnLCAndycpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2VlaycsICdXJyk7XG5cbiAgICAvLyBQUklPUklUSUVTXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWsnLCA1KTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWsnLCA1KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3cnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCd3dycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdXJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignV1cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ3cnLCAnd3cnLCAnVycsICdXVyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMSldID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2VlayAobW9tKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKG1vbSwgdGhpcy5fd2Vlay5kb3csIHRoaXMuX3dlZWsuZG95KS53ZWVrO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2VlayA9IHtcbiAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZldlZWsgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZlllYXIgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3k7XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2VlayAoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB0aGlzLmxvY2FsZURhdGEoKS53ZWVrKHRoaXMpO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2VlayAoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB3ZWVrT2ZZZWFyKHRoaXMsIDEsIDQpLndlZWs7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignZCcsIDAsICdkbycsICdkYXknKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5cyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2UnLCAwLCAwLCAnd2Vla2RheScpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdFJywgMCwgMCwgJ2lzb1dlZWtkYXknKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF5JywgJ2QnKTtcbiAgICBhZGRVbml0QWxpYXMoJ3dlZWtkYXknLCAnZScpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla2RheScsICdFJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF5JywgMTEpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnd2Vla2RheScsIDExKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtkYXknLCAxMSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdkJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdlJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdFJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c01pblJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGRkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkZCcsICdkZGQnLCAnZGRkZCddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIHdlZWtkYXkgPSBjb25maWcuX2xvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZ2V0IGEgd2Vla2RheSBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWRcbiAgICAgICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgd2Vlay5kID0gd2Vla2RheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRXZWVrZGF5ID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZCcsICdlJywgJ0UnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0ID0gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpO1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VJc29XZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCkgJSA3IHx8IDc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzTmFOKGlucHV0KSA/IG51bGwgOiBpbnB1dDtcbiAgICB9XG5cbiAgICAvLyBMT0NBTEVTXG4gICAgZnVuY3Rpb24gc2hpZnRXZWVrZGF5cyAod3MsIG4pIHtcbiAgICAgICAgcmV0dXJuIHdzLnNsaWNlKG4sIDcpLmNvbmNhdCh3cy5zbGljZSgwLCBuKSk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5cyA9ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5cyAobSwgZm9ybWF0KSB7XG4gICAgICAgIHZhciB3ZWVrZGF5cyA9IGlzQXJyYXkodGhpcy5fd2Vla2RheXMpID8gdGhpcy5fd2Vla2RheXMgOlxuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNbKG0gJiYgbSAhPT0gdHJ1ZSAmJiB0aGlzLl93ZWVrZGF5cy5pc0Zvcm1hdC50ZXN0KGZvcm1hdCkpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddO1xuICAgICAgICByZXR1cm4gKG0gPT09IHRydWUpID8gc2hpZnRXZWVrZGF5cyh3ZWVrZGF5cywgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IChtKSA/IHdlZWtkYXlzW20uZGF5KCldIDogd2Vla2RheXM7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0ID0gJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1Nob3J0IChtKSB7XG4gICAgICAgIHJldHVybiAobSA9PT0gdHJ1ZSkgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzU2hvcnQsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiAobSkgPyB0aGlzLl93ZWVrZGF5c1Nob3J0W20uZGF5KCldIDogdGhpcy5fd2Vla2RheXNTaG9ydDtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluID0gJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzTWluIChtKSB7XG4gICAgICAgIHJldHVybiAobSA9PT0gdHJ1ZSkgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzTWluLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogKG0pID8gdGhpcy5fd2Vla2RheXNNaW5bbS5kYXkoKV0gOiB0aGlzLl93ZWVrZGF5c01pbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZSQxKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgaWksIG1vbSwgbGxjID0gd2Vla2RheU5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1BhcnNlICh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlJDEuY2FsbCh0aGlzLCB3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcblxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPSAnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKSArICd8XicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZGRkJyAmJiB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGRkJyAmJiB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkJyAmJiB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fd2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRheSA9IHRoaXMuX2lzVVRDID8gdGhpcy5fZC5nZXRVVENEYXkoKSA6IHRoaXMuX2QuZ2V0RGF5KCk7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpbnB1dCA9IHBhcnNlV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGlucHV0IC0gZGF5LCAnZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRheTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldExvY2FsZURheU9mV2VlayAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gKHRoaXMuZGF5KCkgKyA3IC0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93KSAlIDc7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2Vla2RheSA6IHRoaXMuYWRkKGlucHV0IC0gd2Vla2RheSwgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09EYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJlaGF2ZXMgdGhlIHNhbWUgYXMgbW9tZW50I2RheSBleGNlcHRcbiAgICAgICAgLy8gYXMgYSBnZXR0ZXIsIHJldHVybnMgNyBpbnN0ZWFkIG9mIDAgKDEtNyByYW5nZSBpbnN0ZWFkIG9mIDAtNilcbiAgICAgICAgLy8gYXMgYSBzZXR0ZXIsIHN1bmRheSBzaG91bGQgYmVsb25nIHRvIHRoZSBwcmV2aW91cyB3ZWVrLlxuXG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgd2Vla2RheSA9IHBhcnNlSXNvV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KHRoaXMuZGF5KCkgJSA3ID8gd2Vla2RheSA6IHdlZWtkYXkgLSA3KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSgpIHx8IDc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFdlZWtkYXlzUmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gd2Vla2RheXNSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBkZWZhdWx0V2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIHdlZWtkYXlzU2hvcnRSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFdlZWtkYXlzTWluUmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gd2Vla2RheXNNaW5SZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzTWluUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSBkZWZhdWx0V2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZVdlZWtkYXlzUGFyc2UgKCkge1xuICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWluUGllY2VzID0gW10sIHNob3J0UGllY2VzID0gW10sIGxvbmdQaWVjZXMgPSBbXSwgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksIG1vbSwgbWlucCwgc2hvcnRwLCBsb25ncDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBtaW5wID0gdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgICAgIHNob3J0cCA9IHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgIGxvbmdwID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKTtcbiAgICAgICAgICAgIG1pblBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIHdlZWtkYXkgKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAgICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgICAgICBtaW5QaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcblxuICAgICAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1pblBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgZnVuY3Rpb24gaEZvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSAlIDEyIHx8IDEyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgfHwgMjQ7XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0gnLCBbJ0hIJywgMl0sIDAsICdob3VyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2gnLCBbJ2hoJywgMl0sIDAsIGhGb3JtYXQpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdrJywgWydraycsIDJdLCAwLCBrRm9ybWF0KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignaG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbWVyaWRpZW0gKHRva2VuLCBsb3dlcmNhc2UpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tZXJpZGllbSh0aGlzLmhvdXJzKCksIHRoaXMubWludXRlcygpLCBsb3dlcmNhc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtZXJpZGllbSgnYScsIHRydWUpO1xuICAgIG1lcmlkaWVtKCdBJywgZmFsc2UpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdob3VyJywgJ2gnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdob3VyJywgMTMpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgZnVuY3Rpb24gbWF0Y2hNZXJpZGllbSAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLl9tZXJpZGllbVBhcnNlO1xuICAgIH1cblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2EnLCAgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignQScsICBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdIJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignaCcsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2snLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdISCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdoaCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdraycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignaG1tc3MnLCBtYXRjaDV0bzYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tc3MnLCBtYXRjaDV0bzYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0gnLCAnSEgnXSwgSE9VUik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2snLCAna2snXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBrSW5wdXQgPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGFycmF5W0hPVVJdID0ga0lucHV0ID09PSAyNCA/IDAgOiBrSW5wdXQ7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2EnLCAnQSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9pc1BtID0gY29uZmlnLl9sb2NhbGUuaXNQTShpbnB1dCk7XG4gICAgICAgIGNvbmZpZy5fbWVyaWRpZW0gPSBpbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaCcsICdoaCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNDtcbiAgICAgICAgdmFyIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignSG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQ7XG4gICAgICAgIHZhciBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVJc1BNIChpbnB1dCkge1xuICAgICAgICAvLyBJRTggUXVpcmtzIE1vZGUgJiBJRTcgU3RhbmRhcmRzIE1vZGUgZG8gbm90IGFsbG93IGFjY2Vzc2luZyBzdHJpbmdzIGxpa2UgYXJyYXlzXG4gICAgICAgIC8vIFVzaW5nIGNoYXJBdCBzaG91bGQgYmUgbW9yZSBjb21wYXRpYmxlLlxuICAgICAgICByZXR1cm4gKChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpLmNoYXJBdCgwKSA9PT0gJ3AnKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UgPSAvW2FwXVxcLj9tP1xcLj8vaTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNZXJpZGllbSAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3BtJyA6ICdQTSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhbScgOiAnQU0nO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICAvLyBTZXR0aW5nIHRoZSBob3VyIHNob3VsZCBrZWVwIHRoZSB0aW1lLCBiZWNhdXNlIHRoZSB1c2VyIGV4cGxpY2l0bHlcbiAgICAvLyBzcGVjaWZpZWQgd2hpY2ggaG91ciB0aGV5IHdhbnQuIFNvIHRyeWluZyB0byBtYWludGFpbiB0aGUgc2FtZSBob3VyIChpblxuICAgIC8vIGEgbmV3IHRpbWV6b25lKSBtYWtlcyBzZW5zZS4gQWRkaW5nL3N1YnRyYWN0aW5nIGhvdXJzIGRvZXMgbm90IGZvbGxvd1xuICAgIC8vIHRoaXMgcnVsZS5cbiAgICB2YXIgZ2V0U2V0SG91ciA9IG1ha2VHZXRTZXQoJ0hvdXJzJywgdHJ1ZSk7XG5cbiAgICB2YXIgYmFzZUNvbmZpZyA9IHtcbiAgICAgICAgY2FsZW5kYXI6IGRlZmF1bHRDYWxlbmRhcixcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IGRlZmF1bHRMb25nRGF0ZUZvcm1hdCxcbiAgICAgICAgaW52YWxpZERhdGU6IGRlZmF1bHRJbnZhbGlkRGF0ZSxcbiAgICAgICAgb3JkaW5hbDogZGVmYXVsdE9yZGluYWwsXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlLFxuICAgICAgICByZWxhdGl2ZVRpbWU6IGRlZmF1bHRSZWxhdGl2ZVRpbWUsXG5cbiAgICAgICAgbW9udGhzOiBkZWZhdWx0TG9jYWxlTW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LFxuXG4gICAgICAgIHdlZWs6IGRlZmF1bHRMb2NhbGVXZWVrLFxuXG4gICAgICAgIHdlZWtkYXlzOiBkZWZhdWx0TG9jYWxlV2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzTWluOiBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LFxuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlXG4gICAgfTtcblxuICAgIC8vIGludGVybmFsIHN0b3JhZ2UgZm9yIGxvY2FsZSBjb25maWcgZmlsZXNcbiAgICB2YXIgbG9jYWxlcyA9IHt9O1xuICAgIHZhciBsb2NhbGVGYW1pbGllcyA9IHt9O1xuICAgIHZhciBnbG9iYWxMb2NhbGU7XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVMb2NhbGUoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkgPyBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdfJywgJy0nKSA6IGtleTtcbiAgICB9XG5cbiAgICAvLyBwaWNrIHRoZSBsb2NhbGUgZnJvbSB0aGUgYXJyYXlcbiAgICAvLyB0cnkgWydlbi1hdScsICdlbi1nYiddIGFzICdlbi1hdScsICdlbi1nYicsICdlbicsIGFzIGluIG1vdmUgdGhyb3VnaCB0aGUgbGlzdCB0cnlpbmcgZWFjaFxuICAgIC8vIHN1YnN0cmluZyBmcm9tIG1vc3Qgc3BlY2lmaWMgdG8gbGVhc3QsIGJ1dCBtb3ZlIHRvIHRoZSBuZXh0IGFycmF5IGl0ZW0gaWYgaXQncyBhIG1vcmUgc3BlY2lmaWMgdmFyaWFudCB0aGFuIHRoZSBjdXJyZW50IHJvb3RcbiAgICBmdW5jdGlvbiBjaG9vc2VMb2NhbGUobmFtZXMpIHtcbiAgICAgICAgdmFyIGkgPSAwLCBqLCBuZXh0LCBsb2NhbGUsIHNwbGl0O1xuXG4gICAgICAgIHdoaWxlIChpIDwgbmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBzcGxpdCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpXSkuc3BsaXQoJy0nKTtcbiAgICAgICAgICAgIGogPSBzcGxpdC5sZW5ndGg7XG4gICAgICAgICAgICBuZXh0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2kgKyAxXSk7XG4gICAgICAgICAgICBuZXh0ID0gbmV4dCA/IG5leHQuc3BsaXQoJy0nKSA6IG51bGw7XG4gICAgICAgICAgICB3aGlsZSAoaiA+IDApIHtcbiAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKHNwbGl0LnNsaWNlKDAsIGopLmpvaW4oJy0nKSk7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmV4dCAmJiBuZXh0Lmxlbmd0aCA+PSBqICYmIGNvbXBhcmVBcnJheXMoc3BsaXQsIG5leHQsIHRydWUpID49IGogLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIG5leHQgYXJyYXkgaXRlbSBpcyBiZXR0ZXIgdGhhbiBhIHNoYWxsb3dlciBzdWJzdHJpbmcgb2YgdGhpcyBvbmVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRMb2NhbGUobmFtZSkge1xuICAgICAgICB2YXIgb2xkTG9jYWxlID0gbnVsbDtcbiAgICAgICAgLy8gVE9ETzogRmluZCBhIGJldHRlciB3YXkgdG8gcmVnaXN0ZXIgYW5kIGxvYWQgYWxsIHRoZSBsb2NhbGVzIGluIE5vZGVcbiAgICAgICAgaWYgKCFsb2NhbGVzW25hbWVdICYmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICAgICBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgb2xkTG9jYWxlID0gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgICAgICAgICAgICAgIHZhciBhbGlhc2VkUmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmUoJy4vbG9jYWxlLycgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUob2xkTG9jYWxlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGxvYWQgbG9jYWxlIGFuZCB0aGVuIHNldCB0aGUgZ2xvYmFsIGxvY2FsZS4gIElmXG4gICAgLy8gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWQgaW4sIGl0IHdpbGwgc2ltcGx5IHJldHVybiB0aGUgY3VycmVudCBnbG9iYWxcbiAgICAvLyBsb2NhbGUga2V5LlxuICAgIGZ1bmN0aW9uIGdldFNldEdsb2JhbExvY2FsZSAoa2V5LCB2YWx1ZXMpIHtcbiAgICAgICAgdmFyIGRhdGE7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGRlZmluZUxvY2FsZShrZXksIHZhbHVlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gbW9tZW50LmR1cmF0aW9uLl9sb2NhbGUgPSBtb21lbnQuX2xvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZ2xvYmFsTG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgodHlwZW9mIGNvbnNvbGUgIT09ICAndW5kZWZpbmVkJykgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vd2FybiB1c2VyIGlmIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGJ1dCB0aGUgbG9jYWxlIGNvdWxkIG5vdCBiZSBzZXRcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdMb2NhbGUgJyArIGtleSArICAnIG5vdCBmb3VuZC4gRGlkIHlvdSBmb3JnZXQgdG8gbG9hZCBpdD8nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmluZUxvY2FsZSAobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbGUsIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKCdkZWZpbmVMb2NhbGVPdmVycmlkZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAndXNlIG1vbWVudC51cGRhdGVMb2NhbGUobG9jYWxlTmFtZSwgY29uZmlnKSB0byBjaGFuZ2UgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnYW4gZXhpc3RpbmcgbG9jYWxlLiBtb21lbnQuZGVmaW5lTG9jYWxlKGxvY2FsZU5hbWUsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZykgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RlZmluZS1sb2NhbGUvIGZvciBtb3JlIGluZm8uJyk7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGNvbmZpZy5wYXJlbnRMb2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZS5fY29uZmlnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IG5ldyBMb2NhbGUobWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKSk7XG5cbiAgICAgICAgICAgIGlmIChsb2NhbGVGYW1pbGllc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lTG9jYWxlKHgubmFtZSwgeC5jb25maWcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGxvY2FsZSBBRlRFUiBhbGwgY2hpbGQgbG9jYWxlcyBoYXZlIGJlZW5cbiAgICAgICAgICAgIC8vIGNyZWF0ZWQsIHNvIHdlIHdvbid0IGVuZCB1cCB3aXRoIHRoZSBjaGlsZCBsb2NhbGUgc2V0LlxuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuXG5cbiAgICAgICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdXNlZnVsIGZvciB0ZXN0aW5nXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbGUsIHRtcExvY2FsZSwgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgICAgIC8vIE1FUkdFXG4gICAgICAgICAgICB0bXBMb2NhbGUgPSBsb2FkTG9jYWxlKG5hbWUpO1xuICAgICAgICAgICAgaWYgKHRtcExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gdG1wTG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWcgPSBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpO1xuICAgICAgICAgICAgbG9jYWxlID0gbmV3IExvY2FsZShjb25maWcpO1xuICAgICAgICAgICAgbG9jYWxlLnBhcmVudExvY2FsZSA9IGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlO1xuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHBhc3MgbnVsbCBmb3IgY29uZmlnIHRvIHVudXBkYXRlLCB1c2VmdWwgZm9yIHRlc3RzXG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyByZXR1cm5zIGxvY2FsZSBkYXRhXG4gICAgZnVuY3Rpb24gZ2V0TG9jYWxlIChrZXkpIHtcbiAgICAgICAgdmFyIGxvY2FsZTtcblxuICAgICAgICBpZiAoa2V5ICYmIGtleS5fbG9jYWxlICYmIGtleS5fbG9jYWxlLl9hYmJyKSB7XG4gICAgICAgICAgICBrZXkgPSBrZXkuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0FycmF5KGtleSkpIHtcbiAgICAgICAgICAgIC8vc2hvcnQtY2lyY3VpdCBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5ID0gW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hvb3NlTG9jYWxlKGtleSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdExvY2FsZXMoKSB7XG4gICAgICAgIHJldHVybiBrZXlzKGxvY2FsZXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3cgKG0pIHtcbiAgICAgICAgdmFyIG92ZXJmbG93O1xuICAgICAgICB2YXIgYSA9IG0uX2E7XG5cbiAgICAgICAgaWYgKGEgJiYgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID09PSAtMikge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPVxuICAgICAgICAgICAgICAgIGFbTU9OVEhdICAgICAgIDwgMCB8fCBhW01PTlRIXSAgICAgICA+IDExICA/IE1PTlRIIDpcbiAgICAgICAgICAgICAgICBhW0RBVEVdICAgICAgICA8IDEgfHwgYVtEQVRFXSAgICAgICAgPiBkYXlzSW5Nb250aChhW1lFQVJdLCBhW01PTlRIXSkgPyBEQVRFIDpcbiAgICAgICAgICAgICAgICBhW0hPVVJdICAgICAgICA8IDAgfHwgYVtIT1VSXSAgICAgICAgPiAyNCB8fCAoYVtIT1VSXSA9PT0gMjQgJiYgKGFbTUlOVVRFXSAhPT0gMCB8fCBhW1NFQ09ORF0gIT09IDAgfHwgYVtNSUxMSVNFQ09ORF0gIT09IDApKSA/IEhPVVIgOlxuICAgICAgICAgICAgICAgIGFbTUlOVVRFXSAgICAgIDwgMCB8fCBhW01JTlVURV0gICAgICA+IDU5ICA/IE1JTlVURSA6XG4gICAgICAgICAgICAgICAgYVtTRUNPTkRdICAgICAgPCAwIHx8IGFbU0VDT05EXSAgICAgID4gNTkgID8gU0VDT05EIDpcbiAgICAgICAgICAgICAgICBhW01JTExJU0VDT05EXSA8IDAgfHwgYVtNSUxMSVNFQ09ORF0gPiA5OTkgPyBNSUxMSVNFQ09ORCA6XG4gICAgICAgICAgICAgICAgLTE7XG5cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93RGF5T2ZZZWFyICYmIChvdmVyZmxvdyA8IFlFQVIgfHwgb3ZlcmZsb3cgPiBEQVRFKSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gREFURTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla3MgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrZGF5ICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFS0RBWTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID0gb3ZlcmZsb3c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICAvLyBQaWNrIHRoZSBmaXJzdCBkZWZpbmVkIG9mIHR3byBvciB0aHJlZSBhcmd1bWVudHMuXG4gICAgZnVuY3Rpb24gZGVmYXVsdHMoYSwgYiwgYykge1xuICAgICAgICBpZiAoYSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykge1xuICAgICAgICAvLyBob29rcyBpcyBhY3R1YWxseSB0aGUgZXhwb3J0ZWQgbW9tZW50IG9iamVjdFxuICAgICAgICB2YXIgbm93VmFsdWUgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIGlmIChjb25maWcuX3VzZVVUQykge1xuICAgICAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRVVENGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRVVENNb250aCgpLCBub3dWYWx1ZS5nZXRVVENEYXRlKCldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbm93VmFsdWUuZ2V0RnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0TW9udGgoKSwgbm93VmFsdWUuZ2V0RGF0ZSgpXTtcbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IGFuIGFycmF5IHRvIGEgZGF0ZS5cbiAgICAvLyB0aGUgYXJyYXkgc2hvdWxkIG1pcnJvciB0aGUgcGFyYW1ldGVycyBiZWxvd1xuICAgIC8vIG5vdGU6IGFsbCB2YWx1ZXMgcGFzdCB0aGUgeWVhciBhcmUgb3B0aW9uYWwgYW5kIHdpbGwgZGVmYXVsdCB0byB0aGUgbG93ZXN0IHBvc3NpYmxlIHZhbHVlLlxuICAgIC8vIFt5ZWFyLCBtb250aCwgZGF5ICwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXVxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21BcnJheSAoY29uZmlnKSB7XG4gICAgICAgIHZhciBpLCBkYXRlLCBpbnB1dCA9IFtdLCBjdXJyZW50RGF0ZSwgZXhwZWN0ZWRXZWVrZGF5LCB5ZWFyVG9Vc2U7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudERhdGUgPSBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZyk7XG5cbiAgICAgICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5c1xuICAgICAgICBpZiAoY29uZmlnLl93ICYmIGNvbmZpZy5fYVtEQVRFXSA9PSBudWxsICYmIGNvbmZpZy5fYVtNT05USF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2lmIHRoZSBkYXkgb2YgdGhlIHllYXIgaXMgc2V0LCBmaWd1cmUgb3V0IHdoYXQgaXQgaXNcbiAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pO1xuXG4gICAgICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXJUb1VzZSkgfHwgY29uZmlnLl9kYXlPZlllYXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dEYXlPZlllYXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNT05USF0gPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgICBjb25maWcuX2FbREFURV0gPSBkYXRlLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCBkYXRlLlxuICAgICAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5XG4gICAgICAgIC8vICogaWYgZGF5IG9mIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG1vbnRoIGFuZCB5ZWFyXG4gICAgICAgIC8vICogaWYgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgb25seSB5ZWFyXG4gICAgICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZ1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMyAmJiBjb25maWcuX2FbaV0gPT0gbnVsbDsgKytpKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IGN1cnJlbnREYXRlW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWmVybyBvdXQgd2hhdGV2ZXIgd2FzIG5vdCBkZWZhdWx0ZWQsIGluY2x1ZGluZyB0aW1lXG4gICAgICAgIGZvciAoOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IChjb25maWcuX2FbaV0gPT0gbnVsbCkgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciAyNDowMDowMC4wMDBcbiAgICAgICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbTUlOVVRFXSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtTRUNPTkRdID09PSAwICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW01JTExJU0VDT05EXSA9PT0gMCkge1xuICAgICAgICAgICAgY29uZmlnLl9uZXh0RGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcuX2QgPSAoY29uZmlnLl91c2VVVEMgPyBjcmVhdGVVVENEYXRlIDogY3JlYXRlRGF0ZSkuYXBwbHkobnVsbCwgaW5wdXQpO1xuICAgICAgICBleHBlY3RlZFdlZWtkYXkgPSBjb25maWcuX3VzZVVUQyA/IGNvbmZpZy5fZC5nZXRVVENEYXkoKSA6IGNvbmZpZy5fZC5nZXREYXkoKTtcblxuICAgICAgICAvLyBBcHBseSB0aW1lem9uZSBvZmZzZXQgZnJvbSBpbnB1dC4gVGhlIGFjdHVhbCB1dGNPZmZzZXQgY2FuIGJlIGNoYW5nZWRcbiAgICAgICAgLy8gd2l0aCBwYXJzZVpvbmUuXG4gICAgICAgIGlmIChjb25maWcuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fbmV4dERheSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMjQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGVjayBmb3IgbWlzbWF0Y2hpbmcgZGF5IG9mIHdlZWtcbiAgICAgICAgaWYgKGNvbmZpZy5fdyAmJiB0eXBlb2YgY29uZmlnLl93LmQgIT09ICd1bmRlZmluZWQnICYmIGNvbmZpZy5fdy5kICE9PSBleHBlY3RlZFdlZWtkYXkpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKSB7XG4gICAgICAgIHZhciB3LCB3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3ksIHRlbXAsIHdlZWtkYXlPdmVyZmxvdztcblxuICAgICAgICB3ID0gY29uZmlnLl93O1xuICAgICAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7XG4gICAgICAgICAgICBkb3cgPSAxO1xuICAgICAgICAgICAgZG95ID0gNDtcblxuICAgICAgICAgICAgLy8gVE9ETzogV2UgbmVlZCB0byB0YWtlIHRoZSBjdXJyZW50IGlzb1dlZWtZZWFyLCBidXQgdGhhdCBkZXBlbmRzIG9uXG4gICAgICAgICAgICAvLyBob3cgd2UgaW50ZXJwcmV0IG5vdyAobG9jYWwsIHV0YywgZml4ZWQgb2Zmc2V0KS4gU28gY3JlYXRlXG4gICAgICAgICAgICAvLyBhIG5vdyB2ZXJzaW9uIG9mIGN1cnJlbnQgY29uZmlnICh0YWtlIGxvY2FsL3V0Yy9vZmZzZXQgZmxhZ3MsIGFuZFxuICAgICAgICAgICAgLy8gY3JlYXRlIG5vdykuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuR0csIGNvbmZpZy5fYVtZRUFSXSwgd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCAxLCA0KS55ZWFyKTtcbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LlcsIDEpO1xuICAgICAgICAgICAgd2Vla2RheSA9IGRlZmF1bHRzKHcuRSwgMSk7XG4gICAgICAgICAgICBpZiAod2Vla2RheSA8IDEgfHwgd2Vla2RheSA+IDcpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG93ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG93O1xuICAgICAgICAgICAgZG95ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG95O1xuXG4gICAgICAgICAgICB2YXIgY3VyV2VlayA9IHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgZG93LCBkb3kpO1xuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuZ2csIGNvbmZpZy5fYVtZRUFSXSwgY3VyV2Vlay55ZWFyKTtcblxuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IHdlZWsuXG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody53LCBjdXJXZWVrLndlZWspO1xuXG4gICAgICAgICAgICBpZiAody5kICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZWVrZGF5IC0tIGxvdyBkYXkgbnVtYmVycyBhcmUgY29uc2lkZXJlZCBuZXh0IHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5kO1xuICAgICAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMCB8fCB3ZWVrZGF5ID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAody5lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBsb2NhbCB3ZWVrZGF5IC0tIGNvdW50aW5nIHN0YXJ0cyBmcm9tIGJlZ2lubmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZSArIGRvdztcbiAgICAgICAgICAgICAgICBpZiAody5lIDwgMCB8fCB3LmUgPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IHRvIGJlZ2lubmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IGRvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAod2VlayA8IDEgfHwgd2VlayA+IHdlZWtzSW5ZZWFyKHdlZWtZZWFyLCBkb3csIGRveSkpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtzID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrZGF5T3ZlcmZsb3cgIT0gbnVsbCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla2RheSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZW1wID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgICAgICBjb25maWcuX2FbWUVBUl0gPSB0ZW1wLnllYXI7XG4gICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRlbXAuZGF5T2ZZZWFyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gaXNvIDg2MDEgcmVnZXhcbiAgICAvLyAwMDAwLTAwLTAwIDAwMDAtVzAwIG9yIDAwMDAtVzAwLTAgKyBUICsgMDAgb3IgMDA6MDAgb3IgMDA6MDA6MDAgb3IgMDA6MDA6MDAuMDAwICsgKzAwOjAwIG9yICswMDAwIG9yICswMClcbiAgICB2YXIgZXh0ZW5kZWRJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcbiAgICB2YXIgYmFzaWNJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSkoPzpcXGRcXGRcXGRcXGR8V1xcZFxcZFxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OlxcZFxcZCg/OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbXFwrXFwtXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC87XG5cbiAgICB2YXIgdHpSZWdleCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/LztcblxuICAgIHZhciBpc29EYXRlcyA9IFtcbiAgICAgICAgWydZWVlZWVktTU0tREQnLCAvWystXVxcZHs2fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgIFsnWVlZWS1NTS1ERCcsIC9cXGR7NH0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICBbJ0dHR0ctW1ddV1ctRScsIC9cXGR7NH0tV1xcZFxcZC1cXGQvXSxcbiAgICAgICAgWydHR0dHLVtXXVdXJywgL1xcZHs0fS1XXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVktREREJywgL1xcZHs0fS1cXGR7M30vXSxcbiAgICAgICAgWydZWVlZLU1NJywgL1xcZHs0fS1cXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgIFsnWVlZWVlZTU1ERCcsIC9bKy1dXFxkezEwfS9dLFxuICAgICAgICBbJ1lZWVlNTUREJywgL1xcZHs4fS9dLFxuICAgICAgICAvLyBZWVlZTU0gaXMgTk9UIGFsbG93ZWQgYnkgdGhlIHN0YW5kYXJkXG4gICAgICAgIFsnR0dHR1tXXVdXRScsIC9cXGR7NH1XXFxkezN9L10sXG4gICAgICAgIFsnR0dHR1tXXVdXJywgL1xcZHs0fVdcXGR7Mn0vLCBmYWxzZV0sXG4gICAgICAgIFsnWVlZWURERCcsIC9cXGR7N30vXVxuICAgIF07XG5cbiAgICAvLyBpc28gdGltZSBmb3JtYXRzIGFuZCByZWdleGVzXG4gICAgdmFyIGlzb1RpbWVzID0gW1xuICAgICAgICBbJ0hIOm1tOnNzLlNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgIFsnSEg6bW06c3MsU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZCxcXGQrL10sXG4gICAgICAgIFsnSEg6bW06c3MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgWydISDptbScsIC9cXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgIFsnSEhtbXNzLlNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICBbJ0hIbW1zcyxTU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZCxcXGQrL10sXG4gICAgICAgIFsnSEhtbXNzJywgL1xcZFxcZFxcZFxcZFxcZFxcZC9dLFxuICAgICAgICBbJ0hIbW0nLCAvXFxkXFxkXFxkXFxkL10sXG4gICAgICAgIFsnSEgnLCAvXFxkXFxkL11cbiAgICBdO1xuXG4gICAgdmFyIGFzcE5ldEpzb25SZWdleCA9IC9eXFwvP0RhdGVcXCgoXFwtP1xcZCspL2k7XG5cbiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JU08oY29uZmlnKSB7XG4gICAgICAgIHZhciBpLCBsLFxuICAgICAgICAgICAgc3RyaW5nID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgbWF0Y2ggPSBleHRlbmRlZElzb1JlZ2V4LmV4ZWMoc3RyaW5nKSB8fCBiYXNpY0lzb1JlZ2V4LmV4ZWMoc3RyaW5nKSxcbiAgICAgICAgICAgIGFsbG93VGltZSwgZGF0ZUZvcm1hdCwgdGltZUZvcm1hdCwgdHpGb3JtYXQ7XG5cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pc28gPSB0cnVlO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvRGF0ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb0RhdGVzW2ldWzFdLmV4ZWMobWF0Y2hbMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQgPSBpc29EYXRlc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dUaW1lID0gaXNvRGF0ZXNbaV1bMl0gIT09IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0ZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoWzNdKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb1RpbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNvVGltZXNbaV1bMV0uZXhlYyhtYXRjaFszXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoWzJdIHNob3VsZCBiZSAnVCcgb3Igc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQgPSAobWF0Y2hbMl0gfHwgJyAnKSArIGlzb1RpbWVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYWxsb3dUaW1lICYmIHRpbWVGb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgICAgIGlmICh0elJlZ2V4LmV4ZWMobWF0Y2hbNF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHR6Rm9ybWF0ID0gJ1onO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnLl9mID0gZGF0ZUZvcm1hdCArICh0aW1lRm9ybWF0IHx8ICcnKSArICh0ekZvcm1hdCB8fCAnJyk7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJGQyAyODIyIHJlZ2V4OiBGb3IgZGV0YWlscyBzZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI4MjIjc2VjdGlvbi0zLjNcbiAgICB2YXIgcmZjMjgyMiA9IC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksP1xccyk/KFxcZHsxLDJ9KVxccyhKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYylcXHMoXFxkezIsNH0pXFxzKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkpP1xccyg/OihVVHxHTVR8W0VDTVBdW1NEXVQpfChbWnpdKXwoWystXVxcZHs0fSkpJC87XG5cbiAgICBmdW5jdGlvbiBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXG4gICAgICAgICAgICB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSxcbiAgICAgICAgICAgIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydC5pbmRleE9mKG1vbnRoU3RyKSxcbiAgICAgICAgICAgIHBhcnNlSW50KGRheVN0ciwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQoaG91clN0ciwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQobWludXRlU3RyLCAxMClcbiAgICAgICAgXTtcblxuICAgICAgICBpZiAoc2Vjb25kU3RyKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChwYXJzZUludChzZWNvbmRTdHIsIDEwKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpIHtcbiAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludCh5ZWFyU3RyLCAxMCk7XG4gICAgICAgIGlmICh5ZWFyIDw9IDQ5KSB7XG4gICAgICAgICAgICByZXR1cm4gMjAwMCArIHllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoeWVhciA8PSA5OTkpIHtcbiAgICAgICAgICAgIHJldHVybiAxOTAwICsgeWVhcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geWVhcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwcm9jZXNzUkZDMjgyMihzKSB7XG4gICAgICAgIC8vIFJlbW92ZSBjb21tZW50cyBhbmQgZm9sZGluZyB3aGl0ZXNwYWNlIGFuZCByZXBsYWNlIG11bHRpcGxlLXNwYWNlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1xcKFteKV0qXFwpfFtcXG5cXHRdL2csICcgJykucmVwbGFjZSgvKFxcc1xccyspL2csICcgJykucmVwbGFjZSgvXlxcc1xccyovLCAnJykucmVwbGFjZSgvXFxzXFxzKiQvLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tXZWVrZGF5KHdlZWtkYXlTdHIsIHBhcnNlZElucHV0LCBjb25maWcpIHtcbiAgICAgICAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IFJlcGxhY2UgdGhlIHZhbmlsbGEgSlMgRGF0ZSBvYmplY3Qgd2l0aCBhbiBpbmRlcGVudGVudCBkYXktb2Ytd2VlayBjaGVjay5cbiAgICAgICAgICAgIHZhciB3ZWVrZGF5UHJvdmlkZWQgPSBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydC5pbmRleE9mKHdlZWtkYXlTdHIpLFxuICAgICAgICAgICAgICAgIHdlZWtkYXlBY3R1YWwgPSBuZXcgRGF0ZShwYXJzZWRJbnB1dFswXSwgcGFyc2VkSW5wdXRbMV0sIHBhcnNlZElucHV0WzJdKS5nZXREYXkoKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5UHJvdmlkZWQgIT09IHdlZWtkYXlBY3R1YWwpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgb2JzT2Zmc2V0cyA9IHtcbiAgICAgICAgVVQ6IDAsXG4gICAgICAgIEdNVDogMCxcbiAgICAgICAgRURUOiAtNCAqIDYwLFxuICAgICAgICBFU1Q6IC01ICogNjAsXG4gICAgICAgIENEVDogLTUgKiA2MCxcbiAgICAgICAgQ1NUOiAtNiAqIDYwLFxuICAgICAgICBNRFQ6IC02ICogNjAsXG4gICAgICAgIE1TVDogLTcgKiA2MCxcbiAgICAgICAgUERUOiAtNyAqIDYwLFxuICAgICAgICBQU1Q6IC04ICogNjBcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlT2Zmc2V0KG9ic09mZnNldCwgbWlsaXRhcnlPZmZzZXQsIG51bU9mZnNldCkge1xuICAgICAgICBpZiAob2JzT2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzT2Zmc2V0c1tvYnNPZmZzZXRdO1xuICAgICAgICB9IGVsc2UgaWYgKG1pbGl0YXJ5T2Zmc2V0KSB7XG4gICAgICAgICAgICAvLyB0aGUgb25seSBhbGxvd2VkIG1pbGl0YXJ5IHR6IGlzIFpcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGhtID0gcGFyc2VJbnQobnVtT2Zmc2V0LCAxMCk7XG4gICAgICAgICAgICB2YXIgbSA9IGhtICUgMTAwLCBoID0gKGhtIC0gbSkgLyAxMDA7XG4gICAgICAgICAgICByZXR1cm4gaCAqIDYwICsgbTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgYW5kIHRpbWUgZnJvbSByZWYgMjgyMiBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tUkZDMjgyMihjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcmZjMjgyMi5leGVjKHByZXByb2Nlc3NSRkMyODIyKGNvbmZpZy5faSkpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHZhciBwYXJzZWRBcnJheSA9IGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MobWF0Y2hbNF0sIG1hdGNoWzNdLCBtYXRjaFsyXSwgbWF0Y2hbNV0sIG1hdGNoWzZdLCBtYXRjaFs3XSk7XG4gICAgICAgICAgICBpZiAoIWNoZWNrV2Vla2RheShtYXRjaFsxXSwgcGFyc2VkQXJyYXksIGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IHBhcnNlZEFycmF5O1xuICAgICAgICAgICAgY29uZmlnLl90em0gPSBjYWxjdWxhdGVPZmZzZXQobWF0Y2hbOF0sIG1hdGNoWzldLCBtYXRjaFsxMF0pO1xuXG4gICAgICAgICAgICBjb25maWcuX2QgPSBjcmVhdGVVVENEYXRlLmFwcGx5KG51bGwsIGNvbmZpZy5fYSk7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5yZmMyODIyID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXQgb3IgZmFsbGJhY2tcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nKGNvbmZpZykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IGFzcE5ldEpzb25SZWdleC5leGVjKGNvbmZpZy5faSk7XG5cbiAgICAgICAgaWYgKG1hdGNoZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKCttYXRjaGVkWzFdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbmFsIGF0dGVtcHQsIHVzZSBJbnB1dCBGYWxsYmFja1xuICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgIH1cblxuICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICAgICAndmFsdWUgcHJvdmlkZWQgaXMgbm90IGluIGEgcmVjb2duaXplZCBSRkMyODIyIG9yIElTTyBmb3JtYXQuIG1vbWVudCBjb25zdHJ1Y3Rpb24gZmFsbHMgYmFjayB0byBqcyBEYXRlKCksICcgK1xuICAgICAgICAnd2hpY2ggaXMgbm90IHJlbGlhYmxlIGFjcm9zcyBhbGwgYnJvd3NlcnMgYW5kIHZlcnNpb25zLiBOb24gUkZDMjgyMi9JU08gZGF0ZSBmb3JtYXRzIGFyZSAnICtcbiAgICAgICAgJ2Rpc2NvdXJhZ2VkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYW4gdXBjb21pbmcgbWFqb3IgcmVsZWFzZS4gUGxlYXNlIHJlZmVyIHRvICcgK1xuICAgICAgICAnaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9qcy1kYXRlLyBmb3IgbW9yZSBpbmZvLicsXG4gICAgICAgIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5faSArIChjb25maWcuX3VzZVVUQyA/ICcgVVRDJyA6ICcnKSk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIElTTyBzdGFuZGFyZFxuICAgIGhvb2tzLklTT184NjAxID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgUkZDIDI4MjIgZm9ybVxuICAgIGhvb2tzLlJGQ18yODIyID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpIHtcbiAgICAgICAgLy8gVE9ETzogTW92ZSB0aGlzIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgY3JlYXRpb24gZmxvdyB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcHNcbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuSVNPXzg2MDEpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5SRkNfMjgyMikge1xuICAgICAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25maWcuX2EgPSBbXTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSB0cnVlO1xuXG4gICAgICAgIC8vIFRoaXMgYXJyYXkgaXMgdXNlZCB0byBtYWtlIGEgRGF0ZSwgZWl0aGVyIHdpdGggYG5ldyBEYXRlYCBvciBgRGF0ZS5VVENgXG4gICAgICAgIHZhciBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSxcbiAgICAgICAgICAgIGksIHBhcnNlZElucHV0LCB0b2tlbnMsIHRva2VuLCBza2lwcGVkLFxuICAgICAgICAgICAgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggPSAwO1xuXG4gICAgICAgIHRva2VucyA9IGV4cGFuZEZvcm1hdChjb25maWcuX2YsIGNvbmZpZy5fbG9jYWxlKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSB8fCBbXTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgICAgIHBhcnNlZElucHV0ID0gKHN0cmluZy5tYXRjaChnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpIHx8IFtdKVswXTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd0b2tlbicsIHRva2VuLCAncGFyc2VkSW5wdXQnLCBwYXJzZWRJbnB1dCxcbiAgICAgICAgICAgIC8vICAgICAgICAgJ3JlZ2V4JywgZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKTtcbiAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIHNraXBwZWQgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSk7XG4gICAgICAgICAgICAgICAgaWYgKHNraXBwZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHNraXBwZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2Uoc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpICsgcGFyc2VkSW5wdXQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoICs9IHBhcnNlZElucHV0Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRvbid0IHBhcnNlIGlmIGl0J3Mgbm90IGEga25vd24gdG9rZW5cbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0pIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIHBhcnNlZElucHV0LCBjb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29uZmlnLl9zdHJpY3QgJiYgIXBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHJlbWFpbmluZyB1bnBhcnNlZCBpbnB1dCBsZW5ndGggdG8gdGhlIHN0cmluZ1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID0gc3RyaW5nTGVuZ3RoIC0gdG90YWxQYXJzZWRJbnB1dExlbmd0aDtcbiAgICAgICAgaWYgKHN0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHN0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjbGVhciBfMTJoIGZsYWcgaWYgaG91ciBpcyA8PSAxMlxuICAgICAgICBpZiAoY29uZmlnLl9hW0hPVVJdIDw9IDEyICYmXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID09PSB0cnVlICYmXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPiAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucGFyc2VkRGF0ZVBhcnRzID0gY29uZmlnLl9hLnNsaWNlKDApO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5tZXJpZGllbSA9IGNvbmZpZy5fbWVyaWRpZW07XG4gICAgICAgIC8vIGhhbmRsZSBtZXJpZGllbVxuICAgICAgICBjb25maWcuX2FbSE9VUl0gPSBtZXJpZGllbUZpeFdyYXAoY29uZmlnLl9sb2NhbGUsIGNvbmZpZy5fYVtIT1VSXSwgY29uZmlnLl9tZXJpZGllbSk7XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtRml4V3JhcCAobG9jYWxlLCBob3VyLCBtZXJpZGllbSkge1xuICAgICAgICB2YXIgaXNQbTtcblxuICAgICAgICBpZiAobWVyaWRpZW0gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2FsZS5tZXJpZGllbUhvdXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0pO1xuICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZS5pc1BNICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrXG4gICAgICAgICAgICBpc1BtID0gbG9jYWxlLmlzUE0obWVyaWRpZW0pO1xuICAgICAgICAgICAgaWYgKGlzUG0gJiYgaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciArPSAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNQbSAmJiBob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCBzdXBwb3NlZCB0byBoYXBwZW5cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgYXJyYXkgb2YgZm9ybWF0IHN0cmluZ3NcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIHZhciB0ZW1wQ29uZmlnLFxuICAgICAgICAgICAgYmVzdE1vbWVudCxcblxuICAgICAgICAgICAgc2NvcmVUb0JlYXQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgY3VycmVudFNjb3JlO1xuXG4gICAgICAgIGlmIChjb25maWcuX2YubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29uZmlnLl9mLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgPSAwO1xuICAgICAgICAgICAgdGVtcENvbmZpZyA9IGNvcHlDb25maWcoe30sIGNvbmZpZyk7XG4gICAgICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRlbXBDb25maWcuX3VzZVVUQyA9IGNvbmZpZy5fdXNlVVRDO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVtcENvbmZpZy5fZiA9IGNvbmZpZy5fZltpXTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQodGVtcENvbmZpZyk7XG5cbiAgICAgICAgICAgIGlmICghaXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgaW5wdXQgdGhhdCB3YXMgbm90IHBhcnNlZCBhZGQgYSBwZW5hbHR5IGZvciB0aGF0IGZvcm1hdFxuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5jaGFyc0xlZnRPdmVyO1xuXG4gICAgICAgICAgICAvL29yIHRva2Vuc1xuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS51bnVzZWRUb2tlbnMubGVuZ3RoICogMTA7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5zY29yZSA9IGN1cnJlbnRTY29yZTtcblxuICAgICAgICAgICAgaWYgKHNjb3JlVG9CZWF0ID09IG51bGwgfHwgY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQpIHtcbiAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4dGVuZChjb25maWcsIGJlc3RNb21lbnQgfHwgdGVtcENvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSBub3JtYWxpemVPYmplY3RVbml0cyhjb25maWcuX2kpO1xuICAgICAgICBjb25maWcuX2EgPSBtYXAoW2kueWVhciwgaS5tb250aCwgaS5kYXkgfHwgaS5kYXRlLCBpLmhvdXIsIGkubWludXRlLCBpLnNlY29uZCwgaS5taWxsaXNlY29uZF0sIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmogJiYgcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZyb21Db25maWcgKGNvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gbmV3IE1vbWVudChjaGVja092ZXJmbG93KHByZXBhcmVDb25maWcoY29uZmlnKSkpO1xuICAgICAgICBpZiAocmVzLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICAvLyBBZGRpbmcgaXMgc21hcnQgZW5vdWdoIGFyb3VuZCBEU1RcbiAgICAgICAgICAgIHJlcy5hZGQoMSwgJ2QnKTtcbiAgICAgICAgICAgIHJlcy5fbmV4dERheSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGFyZUNvbmZpZyAoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjtcblxuICAgICAgICBjb25maWcuX2xvY2FsZSA9IGNvbmZpZy5fbG9jYWxlIHx8IGdldExvY2FsZShjb25maWcuX2wpO1xuXG4gICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCB8fCAoZm9ybWF0ID09PSB1bmRlZmluZWQgJiYgaW5wdXQgPT09ICcnKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoe251bGxJbnB1dDogdHJ1ZX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTW9tZW50KGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhpbnB1dCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGlucHV0O1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm9ybWF0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0KSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gIGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlucHV0KGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzVmFsaWQoY29uZmlnKSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0KGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2k7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dC52YWx1ZU9mKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9hID0gbWFwKGlucHV0LnNsaWNlKDApLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIC8vIGZyb20gbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWxPclVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGlzVVRDKSB7XG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgaWYgKGxvY2FsZSA9PT0gdHJ1ZSB8fCBsb2NhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdHJpY3QgPSBsb2NhbGU7XG4gICAgICAgICAgICBsb2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKGlzT2JqZWN0KGlucHV0KSAmJiBpc09iamVjdEVtcHR5KGlucHV0KSkgfHxcbiAgICAgICAgICAgICAgICAoaXNBcnJheShpbnB1dCkgJiYgaW5wdXQubGVuZ3RoID09PSAwKSkge1xuICAgICAgICAgICAgaW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb2JqZWN0IGNvbnN0cnVjdGlvbiBtdXN0IGJlIGRvbmUgdGhpcyB3YXkuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNDIzXG4gICAgICAgIGMuX2lzQU1vbWVudE9iamVjdCA9IHRydWU7XG4gICAgICAgIGMuX3VzZVVUQyA9IGMuX2lzVVRDID0gaXNVVEM7XG4gICAgICAgIGMuX2wgPSBsb2NhbGU7XG4gICAgICAgIGMuX2kgPSBpbnB1dDtcbiAgICAgICAgYy5fZiA9IGZvcm1hdDtcbiAgICAgICAgYy5fc3RyaWN0ID0gc3RyaWN0O1xuXG4gICAgICAgIHJldHVybiBjcmVhdGVGcm9tQ29uZmlnKGMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5taW4gaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5tYXggaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyIDwgdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICB2YXIgcHJvdG90eXBlTWF4ID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA+IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gUGljayBhIG1vbWVudCBtIGZyb20gbW9tZW50cyBzbyB0aGF0IG1bZm5dKG90aGVyKSBpcyB0cnVlIGZvciBhbGxcbiAgICAvLyBvdGhlci4gVGhpcyByZWxpZXMgb24gdGhlIGZ1bmN0aW9uIGZuIHRvIGJlIHRyYW5zaXRpdmUuXG4gICAgLy9cbiAgICAvLyBtb21lbnRzIHNob3VsZCBlaXRoZXIgYmUgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMgb3IgYW4gYXJyYXksIHdob3NlXG4gICAgLy8gZmlyc3QgZWxlbWVudCBpcyBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cy5cbiAgICBmdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICAgICAgdmFyIHJlcywgaTtcbiAgICAgICAgaWYgKG1vbWVudHMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobW9tZW50c1swXSkpIHtcbiAgICAgICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbW9tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcyA9IG1vbWVudHNbMF07XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoIW1vbWVudHNbaV0uaXNWYWxpZCgpIHx8IG1vbWVudHNbaV1bZm5dKHJlcykpIHtcbiAgICAgICAgICAgICAgICByZXMgPSBtb21lbnRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogVXNlIFtdLnNvcnQgaW5zdGVhZD9cbiAgICBmdW5jdGlvbiBtaW4gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0JlZm9yZScsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1heCAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQWZ0ZXInLCBhcmdzKTtcbiAgICB9XG5cbiAgICB2YXIgbm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gRGF0ZS5ub3cgPyBEYXRlLm5vdygpIDogKyhuZXcgRGF0ZSgpKTtcbiAgICB9O1xuXG4gICAgdmFyIG9yZGVyaW5nID0gWyd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJywgJ21pbGxpc2Vjb25kJ107XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uVmFsaWQobSkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gbSkge1xuICAgICAgICAgICAgaWYgKCEoaW5kZXhPZi5jYWxsKG9yZGVyaW5nLCBrZXkpICE9PSAtMSAmJiAobVtrZXldID09IG51bGwgfHwgIWlzTmFOKG1ba2V5XSkpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB1bml0SGFzRGVjaW1hbCA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9yZGVyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAobVtvcmRlcmluZ1tpXV0pIHtcbiAgICAgICAgICAgICAgICBpZiAodW5pdEhhc0RlY2ltYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBvbmx5IGFsbG93IG5vbi1pbnRlZ2VycyBmb3Igc21hbGxlc3QgdW5pdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VGbG9hdChtW29yZGVyaW5nW2ldXSkgIT09IHRvSW50KG1bb3JkZXJpbmdbaV1dKSkge1xuICAgICAgICAgICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNWYWxpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkJDEoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihOYU4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIER1cmF0aW9uIChkdXJhdGlvbikge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoZHVyYXRpb24pLFxuICAgICAgICAgICAgeWVhcnMgPSBub3JtYWxpemVkSW5wdXQueWVhciB8fCAwLFxuICAgICAgICAgICAgcXVhcnRlcnMgPSBub3JtYWxpemVkSW5wdXQucXVhcnRlciB8fCAwLFxuICAgICAgICAgICAgbW9udGhzID0gbm9ybWFsaXplZElucHV0Lm1vbnRoIHx8IDAsXG4gICAgICAgICAgICB3ZWVrcyA9IG5vcm1hbGl6ZWRJbnB1dC53ZWVrIHx8IG5vcm1hbGl6ZWRJbnB1dC5pc29XZWVrIHx8IDAsXG4gICAgICAgICAgICBkYXlzID0gbm9ybWFsaXplZElucHV0LmRheSB8fCAwLFxuICAgICAgICAgICAgaG91cnMgPSBub3JtYWxpemVkSW5wdXQuaG91ciB8fCAwLFxuICAgICAgICAgICAgbWludXRlcyA9IG5vcm1hbGl6ZWRJbnB1dC5taW51dGUgfHwgMCxcbiAgICAgICAgICAgIHNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQuc2Vjb25kIHx8IDAsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQubWlsbGlzZWNvbmQgfHwgMDtcblxuICAgICAgICB0aGlzLl9pc1ZhbGlkID0gaXNEdXJhdGlvblZhbGlkKG5vcm1hbGl6ZWRJbnB1dCk7XG5cbiAgICAgICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gK21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICBzZWNvbmRzICogMWUzICsgLy8gMTAwMFxuICAgICAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgaG91cnMgKiAxMDAwICogNjAgKiA2MDsgLy91c2luZyAxMDAwICogNjAgKiA2MCBpbnN0ZWFkIG9mIDM2ZTUgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yOTc4XG4gICAgICAgIC8vIEJlY2F1c2Ugb2YgZGF0ZUFkZFJlbW92ZSB0cmVhdHMgMjQgaG91cnMgYXMgZGlmZmVyZW50IGZyb20gYVxuICAgICAgICAvLyBkYXkgd2hlbiB3b3JraW5nIGFyb3VuZCBEU1QsIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBzZXBhcmF0ZWx5XG4gICAgICAgIHRoaXMuX2RheXMgPSArZGF5cyArXG4gICAgICAgICAgICB3ZWVrcyAqIDc7XG4gICAgICAgIC8vIEl0IGlzIGltcG9zc2libGUgdG8gdHJhbnNsYXRlIG1vbnRocyBpbnRvIGRheXMgd2l0aG91dCBrbm93aW5nXG4gICAgICAgIC8vIHdoaWNoIG1vbnRocyB5b3UgYXJlIGFyZSB0YWxraW5nIGFib3V0LCBzbyB3ZSBoYXZlIHRvIHN0b3JlXG4gICAgICAgIC8vIGl0IHNlcGFyYXRlbHkuXG4gICAgICAgIHRoaXMuX21vbnRocyA9ICttb250aHMgK1xuICAgICAgICAgICAgcXVhcnRlcnMgKiAzICtcbiAgICAgICAgICAgIHllYXJzICogMTI7XG5cbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuXG4gICAgICAgIHRoaXMuX2xvY2FsZSA9IGdldExvY2FsZSgpO1xuXG4gICAgICAgIHRoaXMuX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRHVyYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzUm91bmQgKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoLTEgKiBudW1iZXIpICogLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0ICh0b2tlbiwgc2VwYXJhdG9yKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy51dGNPZmZzZXQoKTtcbiAgICAgICAgICAgIHZhciBzaWduID0gJysnO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAtb2Zmc2V0O1xuICAgICAgICAgICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2lnbiArIHplcm9GaWxsKH5+KG9mZnNldCAvIDYwKSwgMikgKyBzZXBhcmF0b3IgKyB6ZXJvRmlsbCh+fihvZmZzZXQpICUgNjAsIDIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvZmZzZXQoJ1onLCAnOicpO1xuICAgIG9mZnNldCgnWlonLCAnJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdaJywgIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1paJywgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ1onLCAnWlonXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fdXNlVVRDID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl90em0gPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIHRpbWV6b25lIGNodW5rZXJcbiAgICAvLyAnKzEwOjAwJyA+IFsnMTAnLCAgJzAwJ11cbiAgICAvLyAnLTE1MzAnICA+IFsnLTE1JywgJzMwJ11cbiAgICB2YXIgY2h1bmtPZmZzZXQgPSAvKFtcXCtcXC1dfFxcZFxcZCkvZ2k7XG5cbiAgICBmdW5jdGlvbiBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoZXIsIHN0cmluZykge1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IChzdHJpbmcgfHwgJycpLm1hdGNoKG1hdGNoZXIpO1xuXG4gICAgICAgIGlmIChtYXRjaGVzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjaHVuayAgID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdIHx8IFtdO1xuICAgICAgICB2YXIgcGFydHMgICA9IChjaHVuayArICcnKS5tYXRjaChjaHVua09mZnNldCkgfHwgWyctJywgMCwgMF07XG4gICAgICAgIHZhciBtaW51dGVzID0gKyhwYXJ0c1sxXSAqIDYwKSArIHRvSW50KHBhcnRzWzJdKTtcblxuICAgICAgICByZXR1cm4gbWludXRlcyA9PT0gMCA/XG4gICAgICAgICAgMCA6XG4gICAgICAgICAgcGFydHNbMF0gPT09ICcrJyA/IG1pbnV0ZXMgOiAtbWludXRlcztcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYSBtb21lbnQgZnJvbSBpbnB1dCwgdGhhdCBpcyBsb2NhbC91dGMvem9uZSBlcXVpdmFsZW50IHRvIG1vZGVsLlxuICAgIGZ1bmN0aW9uIGNsb25lV2l0aE9mZnNldChpbnB1dCwgbW9kZWwpIHtcbiAgICAgICAgdmFyIHJlcywgZGlmZjtcbiAgICAgICAgaWYgKG1vZGVsLl9pc1VUQykge1xuICAgICAgICAgICAgcmVzID0gbW9kZWwuY2xvbmUoKTtcbiAgICAgICAgICAgIGRpZmYgPSAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dCkgPyBpbnB1dC52YWx1ZU9mKCkgOiBjcmVhdGVMb2NhbChpbnB1dCkudmFsdWVPZigpKSAtIHJlcy52YWx1ZU9mKCk7XG4gICAgICAgICAgICAvLyBVc2UgbG93LWxldmVsIGFwaSwgYmVjYXVzZSB0aGlzIGZuIGlzIGxvdy1sZXZlbCBhcGkuXG4gICAgICAgICAgICByZXMuX2Quc2V0VGltZShyZXMuX2QudmFsdWVPZigpICsgZGlmZik7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQocmVzLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0KS5sb2NhbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF0ZU9mZnNldCAobSkge1xuICAgICAgICAvLyBPbiBGaXJlZm94LjI0IERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyBhIGZsb2F0aW5nIHBvaW50LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9wdWxsLzE4NzFcbiAgICAgICAgcmV0dXJuIC1NYXRoLnJvdW5kKG0uX2QuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDE1KSAqIDE1O1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIGEgbW9tZW50IGlzIG11dGF0ZWQuXG4gICAgLy8gSXQgaXMgaW50ZW5kZWQgdG8ga2VlcCB0aGUgb2Zmc2V0IGluIHN5bmMgd2l0aCB0aGUgdGltZXpvbmUuXG4gICAgaG9va3MudXBkYXRlT2Zmc2V0ID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICAvLyBrZWVwTG9jYWxUaW1lID0gdHJ1ZSBtZWFucyBvbmx5IGNoYW5nZSB0aGUgdGltZXpvbmUsIHdpdGhvdXRcbiAgICAvLyBhZmZlY3RpbmcgdGhlIGxvY2FsIGhvdXIuIFNvIDU6MzE6MjYgKzAzMDAgLS1bdXRjT2Zmc2V0KDIsIHRydWUpXS0tPlxuICAgIC8vIDU6MzE6MjYgKzAyMDAgSXQgaXMgcG9zc2libGUgdGhhdCA1OjMxOjI2IGRvZXNuJ3QgZXhpc3Qgd2l0aCBvZmZzZXRcbiAgICAvLyArMDIwMCwgc28gd2UgYWRqdXN0IHRoZSB0aW1lIGFzIG5lZWRlZCwgdG8gYmUgdmFsaWQuXG4gICAgLy9cbiAgICAvLyBLZWVwaW5nIHRoZSB0aW1lIGFjdHVhbGx5IGFkZHMvc3VidHJhY3RzIChvbmUgaG91cilcbiAgICAvLyBmcm9tIHRoZSBhY3R1YWwgcmVwcmVzZW50ZWQgdGltZS4gVGhhdCBpcyB3aHkgd2UgY2FsbCB1cGRhdGVPZmZzZXRcbiAgICAvLyBhIHNlY29uZCB0aW1lLiBJbiBjYXNlIGl0IHdhbnRzIHVzIHRvIGNoYW5nZSB0aGUgb2Zmc2V0IGFnYWluXG4gICAgLy8gX2NoYW5nZUluUHJvZ3Jlc3MgPT0gdHJ1ZSBjYXNlLCB0aGVuIHdlIGhhdmUgdG8gYWRqdXN0LCBiZWNhdXNlXG4gICAgLy8gdGhlcmUgaXMgbm8gc3VjaCB0aW1lIGluIHRoZSBnaXZlbiB0aW1lem9uZS5cbiAgICBmdW5jdGlvbiBnZXRTZXRPZmZzZXQgKGlucHV0LCBrZWVwTG9jYWxUaW1lLCBrZWVwTWludXRlcykge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0IHx8IDAsXG4gICAgICAgICAgICBsb2NhbEFkanVzdDtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoaW5wdXQpIDwgMTYgJiYgIWtlZXBNaW51dGVzKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCAqIDYwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1VUQyAmJiBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxBZGp1c3QgPSBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gaW5wdXQ7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IHRydWU7XG4gICAgICAgICAgICBpZiAobG9jYWxBZGp1c3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkKGxvY2FsQWRqdXN0LCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9mZnNldCAhPT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWtlZXBMb2NhbFRpbWUgfHwgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBjcmVhdGVEdXJhdGlvbihpbnB1dCAtIG9mZnNldCwgJ20nKSwgMSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyBvZmZzZXQgOiBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0Wm9uZSAoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSAtaW5wdXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gLXRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1VUQyAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9Mb2NhbCAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAodGhpcy5faXNVVEMpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnRyYWN0KGdldERhdGVPZmZzZXQodGhpcyksICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQgKCkge1xuICAgICAgICBpZiAodGhpcy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRoaXMuX3R6bSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIHRab25lID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaE9mZnNldCwgdGhpcy5faSk7XG4gICAgICAgICAgICBpZiAodFpvbmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRab25lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0FsaWduZWRIb3VyT2Zmc2V0IChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQgPSBpbnB1dCA/IGNyZWF0ZUxvY2FsKGlucHV0KS51dGNPZmZzZXQoKSA6IDA7XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLnV0Y09mZnNldCgpIC0gaW5wdXQpICUgNjAgPT09IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWUgKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCgwKS51dGNPZmZzZXQoKSB8fFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCAoKSB7XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5faXNEU1RTaGlmdGVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgY29weUNvbmZpZyhjLCB0aGlzKTtcbiAgICAgICAgYyA9IHByZXBhcmVDb25maWcoYyk7XG5cbiAgICAgICAgaWYgKGMuX2EpIHtcbiAgICAgICAgICAgIHZhciBvdGhlciA9IGMuX2lzVVRDID8gY3JlYXRlVVRDKGMuX2EpIDogY3JlYXRlTG9jYWwoYy5fYSk7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgIGNvbXBhcmVBcnJheXMoYy5fYSwgb3RoZXIudG9BcnJheSgpKSA+IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMb2NhbCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/ICF0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjT2Zmc2V0ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0YyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDICYmIHRoaXMuX29mZnNldCA9PT0gMCA6IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEFTUC5ORVQganNvbiBkYXRlIGZvcm1hdCByZWdleFxuICAgIHZhciBhc3BOZXRSZWdleCA9IC9eKFxcLXxcXCspPyg/OihcXGQqKVsuIF0pPyhcXGQrKVxcOihcXGQrKSg/OlxcOihcXGQrKShcXC5cXGQqKT8pPyQvO1xuXG4gICAgLy8gZnJvbSBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19kYXRlX2RhdGUuanMuc291cmNlLmh0bWxcbiAgICAvLyBzb21ld2hhdCBtb3JlIGluIGxpbmUgd2l0aCA0LjQuMy4yIDIwMDQgc3BlYywgYnV0IGFsbG93cyBkZWNpbWFsIGFueXdoZXJlXG4gICAgLy8gYW5kIGZ1cnRoZXIgbW9kaWZpZWQgdG8gYWxsb3cgZm9yIHN0cmluZ3MgY29udGFpbmluZyBib3RoIHdlZWsgYW5kIGRheVxuICAgIHZhciBpc29SZWdleCA9IC9eKC18XFwrKT9QKD86KFstK10/WzAtOSwuXSopWSk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopVyk/KD86KFstK10/WzAtOSwuXSopRCk/KD86VCg/OihbLStdP1swLTksLl0qKUgpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVMpPyk/JC87XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEdXJhdGlvbiAoaW5wdXQsIGtleSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBpbnB1dCxcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kXG4gICAgICAgICAgICBtYXRjaCA9IG51bGwsXG4gICAgICAgICAgICBzaWduLFxuICAgICAgICAgICAgcmV0LFxuICAgICAgICAgICAgZGlmZlJlcztcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIG1zIDogaW5wdXQuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgICAgICBkICA6IGlucHV0Ll9kYXlzLFxuICAgICAgICAgICAgICAgIE0gIDogaW5wdXQuX21vbnRoc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb25ba2V5XSA9IGlucHV0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbi5taWxsaXNlY29uZHMgPSBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGFzcE5ldFJlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IChtYXRjaFsxXSA9PT0gJy0nKSA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHkgIDogMCxcbiAgICAgICAgICAgICAgICBkICA6IHRvSW50KG1hdGNoW0RBVEVdKSAgICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgaCAgOiB0b0ludChtYXRjaFtIT1VSXSkgICAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIG0gIDogdG9JbnQobWF0Y2hbTUlOVVRFXSkgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBzICA6IHRvSW50KG1hdGNoW1NFQ09ORF0pICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbXMgOiB0b0ludChhYnNSb3VuZChtYXRjaFtNSUxMSVNFQ09ORF0gKiAxMDAwKSkgKiBzaWduIC8vIHRoZSBtaWxsaXNlY29uZCBkZWNpbWFsIHBvaW50IGlzIGluY2x1ZGVkIGluIHRoZSBtYXRjaFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGlzb1JlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IChtYXRjaFsxXSA9PT0gJy0nKSA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHkgOiBwYXJzZUlzbyhtYXRjaFsyXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgTSA6IHBhcnNlSXNvKG1hdGNoWzNdLCBzaWduKSxcbiAgICAgICAgICAgICAgICB3IDogcGFyc2VJc28obWF0Y2hbNF0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGQgOiBwYXJzZUlzbyhtYXRjaFs1XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgaCA6IHBhcnNlSXNvKG1hdGNoWzZdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBtIDogcGFyc2VJc28obWF0Y2hbN10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHMgOiBwYXJzZUlzbyhtYXRjaFs4XSwgc2lnbilcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoZHVyYXRpb24gPT0gbnVsbCkgey8vIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGR1cmF0aW9uID09PSAnb2JqZWN0JyAmJiAoJ2Zyb20nIGluIGR1cmF0aW9uIHx8ICd0bycgaW4gZHVyYXRpb24pKSB7XG4gICAgICAgICAgICBkaWZmUmVzID0gbW9tZW50c0RpZmZlcmVuY2UoY3JlYXRlTG9jYWwoZHVyYXRpb24uZnJvbSksIGNyZWF0ZUxvY2FsKGR1cmF0aW9uLnRvKSk7XG5cbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBkdXJhdGlvbi5tcyA9IGRpZmZSZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgZHVyYXRpb24uTSA9IGRpZmZSZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0ID0gbmV3IER1cmF0aW9uKGR1cmF0aW9uKTtcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19sb2NhbGUnKSkge1xuICAgICAgICAgICAgcmV0Ll9sb2NhbGUgPSBpbnB1dC5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBjcmVhdGVEdXJhdGlvbi5mbiA9IER1cmF0aW9uLnByb3RvdHlwZTtcbiAgICBjcmVhdGVEdXJhdGlvbi5pbnZhbGlkID0gY3JlYXRlSW52YWxpZCQxO1xuXG4gICAgZnVuY3Rpb24gcGFyc2VJc28gKGlucCwgc2lnbikge1xuICAgICAgICAvLyBXZSdkIG5vcm1hbGx5IHVzZSB+fmlucCBmb3IgdGhpcywgYnV0IHVuZm9ydHVuYXRlbHkgaXQgYWxzb1xuICAgICAgICAvLyBjb252ZXJ0cyBmbG9hdHMgdG8gaW50cy5cbiAgICAgICAgLy8gaW5wIG1heSBiZSB1bmRlZmluZWQsIHNvIGNhcmVmdWwgY2FsbGluZyByZXBsYWNlIG9uIGl0LlxuICAgICAgICB2YXIgcmVzID0gaW5wICYmIHBhcnNlRmxvYXQoaW5wLnJlcGxhY2UoJywnLCAnLicpKTtcbiAgICAgICAgLy8gYXBwbHkgc2lnbiB3aGlsZSB3ZSdyZSBhdCBpdFxuICAgICAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzID0ge307XG5cbiAgICAgICAgcmVzLm1vbnRocyA9IG90aGVyLm1vbnRoKCkgLSBiYXNlLm1vbnRoKCkgK1xuICAgICAgICAgICAgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyO1xuICAgICAgICBpZiAoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpLmlzQWZ0ZXIob3RoZXIpKSB7XG4gICAgICAgICAgICAtLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gK290aGVyIC0gKyhiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykpO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgaWYgKCEoYmFzZS5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHttaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMH07XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSk7XG4gICAgICAgIGlmIChiYXNlLmlzQmVmb3JlKG90aGVyKSkge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKG90aGVyLCBiYXNlKTtcbiAgICAgICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSAtcmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIHJlcy5tb250aHMgPSAtcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogcmVtb3ZlICduYW1lJyBhcmcgYWZ0ZXIgZGVwcmVjYXRpb24gaXMgcmVtb3ZlZFxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFkZGVyKGRpcmVjdGlvbiwgbmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgcGVyaW9kKSB7XG4gICAgICAgICAgICB2YXIgZHVyLCB0bXA7XG4gICAgICAgICAgICAvL2ludmVydCB0aGUgYXJndW1lbnRzLCBidXQgY29tcGxhaW4gYWJvdXQgaXRcbiAgICAgICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKG5hbWUsICdtb21lbnQoKS4nICsgbmFtZSAgKyAnKHBlcmlvZCwgbnVtYmVyKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIG1vbWVudCgpLicgKyBuYW1lICsgJyhudW1iZXIsIHBlcmlvZCkuICcgK1xuICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9hZGQtaW52ZXJ0ZWQtcGFyYW0vIGZvciBtb3JlIGluZm8uJyk7XG4gICAgICAgICAgICAgICAgdG1wID0gdmFsOyB2YWwgPSBwZXJpb2Q7IHBlcmlvZCA9IHRtcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyArdmFsIDogdmFsO1xuICAgICAgICAgICAgZHVyID0gY3JlYXRlRHVyYXRpb24odmFsLCBwZXJpb2QpO1xuICAgICAgICAgICAgYWRkU3VidHJhY3QodGhpcywgZHVyLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU3VidHJhY3QgKG1vbSwgZHVyYXRpb24sIGlzQWRkaW5nLCB1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkYXlzID0gYWJzUm91bmQoZHVyYXRpb24uX2RheXMpLFxuICAgICAgICAgICAgbW9udGhzID0gYWJzUm91bmQoZHVyYXRpb24uX21vbnRocyk7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlT2Zmc2V0ID0gdXBkYXRlT2Zmc2V0ID09IG51bGwgPyB0cnVlIDogdXBkYXRlT2Zmc2V0O1xuXG4gICAgICAgIGlmIChtb250aHMpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKG1vbSwgZ2V0KG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRheXMpIHtcbiAgICAgICAgICAgIHNldCQxKG1vbSwgJ0RhdGUnLCBnZXQobW9tLCAnRGF0ZScpICsgZGF5cyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgICAgICBtb20uX2Quc2V0VGltZShtb20uX2QudmFsdWVPZigpICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhZGQgICAgICA9IGNyZWF0ZUFkZGVyKDEsICdhZGQnKTtcbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVBZGRlcigtMSwgJ3N1YnRyYWN0Jyk7XG5cbiAgICBmdW5jdGlvbiBnZXRDYWxlbmRhckZvcm1hdChteU1vbWVudCwgbm93KSB7XG4gICAgICAgIHZhciBkaWZmID0gbXlNb21lbnQuZGlmZihub3csICdkYXlzJywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBkaWZmIDwgLTYgPyAnc2FtZUVsc2UnIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgLTEgPyAnbGFzdFdlZWsnIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgMCA/ICdsYXN0RGF5JyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDEgPyAnc2FtZURheScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAyID8gJ25leHREYXknIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgNyA/ICduZXh0V2VlaycgOiAnc2FtZUVsc2UnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGVuZGFyJDEgKHRpbWUsIGZvcm1hdHMpIHtcbiAgICAgICAgLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cbiAgICAgICAgLy8gR2V0dGluZyBzdGFydC1vZi10b2RheSBkZXBlbmRzIG9uIHdoZXRoZXIgd2UncmUgbG9jYWwvdXRjL29mZnNldCBvciBub3QuXG4gICAgICAgIHZhciBub3cgPSB0aW1lIHx8IGNyZWF0ZUxvY2FsKCksXG4gICAgICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGhvb2tzLmNhbGVuZGFyRm9ybWF0KHRoaXMsIHNvZCkgfHwgJ3NhbWVFbHNlJztcblxuICAgICAgICB2YXIgb3V0cHV0ID0gZm9ybWF0cyAmJiAoaXNGdW5jdGlvbihmb3JtYXRzW2Zvcm1hdF0pID8gZm9ybWF0c1tmb3JtYXRdLmNhbGwodGhpcywgbm93KSA6IGZvcm1hdHNbZm9ybWF0XSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KG91dHB1dCB8fCB0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmb3JtYXQsIHRoaXMsIGNyZWF0ZUxvY2FsKG5vdykpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTW9tZW50KHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQWZ0ZXIgKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsSW5wdXQudmFsdWVPZigpIDwgdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmVmb3JlIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZXR3ZWVuIChmcm9tLCB0bywgdW5pdHMsIGluY2x1c2l2aXR5KSB7XG4gICAgICAgIHZhciBsb2NhbEZyb20gPSBpc01vbWVudChmcm9tKSA/IGZyb20gOiBjcmVhdGVMb2NhbChmcm9tKSxcbiAgICAgICAgICAgIGxvY2FsVG8gPSBpc01vbWVudCh0bykgPyB0byA6IGNyZWF0ZUxvY2FsKHRvKTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxGcm9tLmlzVmFsaWQoKSAmJiBsb2NhbFRvLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbmNsdXNpdml0eSA9IGluY2x1c2l2aXR5IHx8ICcoKSc7XG4gICAgICAgIHJldHVybiAoaW5jbHVzaXZpdHlbMF0gPT09ICcoJyA/IHRoaXMuaXNBZnRlcihsb2NhbEZyb20sIHVuaXRzKSA6ICF0aGlzLmlzQmVmb3JlKGxvY2FsRnJvbSwgdW5pdHMpKSAmJlxuICAgICAgICAgICAgKGluY2x1c2l2aXR5WzFdID09PSAnKScgPyB0aGlzLmlzQmVmb3JlKGxvY2FsVG8sIHVuaXRzKSA6ICF0aGlzLmlzQWZ0ZXIobG9jYWxUbywgdW5pdHMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWUgKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpLFxuICAgICAgICAgICAgaW5wdXRNcztcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXRNcyA9IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCkgPD0gaW5wdXRNcyAmJiBpbnB1dE1zIDw9IHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JBZnRlciAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNBZnRlcihpbnB1dCwgdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQmVmb3JlIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0JlZm9yZShpbnB1dCwgdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpZmYgKGlucHV0LCB1bml0cywgYXNGbG9hdCkge1xuICAgICAgICB2YXIgdGhhdCxcbiAgICAgICAgICAgIHpvbmVEZWx0YSxcbiAgICAgICAgICAgIG91dHB1dDtcblxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhhdCA9IGNsb25lV2l0aE9mZnNldChpbnB1dCwgdGhpcyk7XG5cbiAgICAgICAgaWYgKCF0aGF0LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHpvbmVEZWx0YSA9ICh0aGF0LnV0Y09mZnNldCgpIC0gdGhpcy51dGNPZmZzZXQoKSkgKiA2ZTQ7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6IG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDEyOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzogb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOiBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAzOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAxZTM7IGJyZWFrOyAvLyAxMDAwXG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gNmU0OyBicmVhazsgLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICBjYXNlICdob3VyJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDM2ZTU7IGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MFxuICAgICAgICAgICAgY2FzZSAnZGF5Jzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDg2NGU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxuICAgICAgICAgICAgY2FzZSAnd2Vlayc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA2MDQ4ZTU7IGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0ICogNywgbmVnYXRlIGRzdFxuICAgICAgICAgICAgZGVmYXVsdDogb3V0cHV0ID0gdGhpcyAtIHRoYXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXNGbG9hdCA/IG91dHB1dCA6IGFic0Zsb29yKG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhEaWZmIChhLCBiKSB7XG4gICAgICAgIC8vIGRpZmZlcmVuY2UgaW4gbW9udGhzXG4gICAgICAgIHZhciB3aG9sZU1vbnRoRGlmZiA9ICgoYi55ZWFyKCkgLSBhLnllYXIoKSkgKiAxMikgKyAoYi5tb250aCgpIC0gYS5tb250aCgpKSxcbiAgICAgICAgICAgIC8vIGIgaXMgaW4gKGFuY2hvciAtIDEgbW9udGgsIGFuY2hvciArIDEgbW9udGgpXG4gICAgICAgICAgICBhbmNob3IgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmLCAnbW9udGhzJyksXG4gICAgICAgICAgICBhbmNob3IyLCBhZGp1c3Q7XG5cbiAgICAgICAgaWYgKGIgLSBhbmNob3IgPCAwKSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiAtIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yIC0gYW5jaG9yMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiArIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yMiAtIGFuY2hvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvL2NoZWNrIGZvciBuZWdhdGl2ZSB6ZXJvLCByZXR1cm4gemVybyBpZiBuZWdhdGl2ZSB6ZXJvXG4gICAgICAgIHJldHVybiAtKHdob2xlTW9udGhEaWZmICsgYWRqdXN0KSB8fCAwO1xuICAgIH1cblxuICAgIGhvb2tzLmRlZmF1bHRGb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onO1xuICAgIGhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgPSAnWVlZWS1NTS1ERFRISDptbTpzc1taXSc7XG5cbiAgICBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKCdlbicpLmZvcm1hdCgnZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlonKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyhrZWVwT2Zmc2V0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1dGMgPSBrZWVwT2Zmc2V0ICE9PSB0cnVlO1xuICAgICAgICB2YXIgbSA9IHV0YyA/IHRoaXMuY2xvbmUoKS51dGMoKSA6IHRoaXM7XG4gICAgICAgIGlmIChtLnllYXIoKSA8IDAgfHwgbS55ZWFyKCkgPiA5OTk5KSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sIHV0YyA/ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nIDogJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZykpIHtcbiAgICAgICAgICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBpcyB+NTB4IGZhc3RlciwgdXNlIGl0IHdoZW4gd2UgY2FuXG4gICAgICAgICAgICBpZiAodXRjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9EYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpICsgdGhpcy51dGNPZmZzZXQoKSAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKS5yZXBsYWNlKCdaJywgZm9ybWF0TW9tZW50KG0sICdaJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQobSwgdXRjID8gJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nIDogJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgaHVtYW4gcmVhZGFibGUgcmVwcmVzZW50YXRpb24gb2YgYSBtb21lbnQgdGhhdCBjYW5cbiAgICAgKiBhbHNvIGJlIGV2YWx1YXRlZCB0byBnZXQgYSBuZXcgbW9tZW50IHdoaWNoIGlzIHRoZSBzYW1lXG4gICAgICpcbiAgICAgKiBAbGluayBodHRwczovL25vZGVqcy5vcmcvZGlzdC9sYXRlc3QvZG9jcy9hcGkvdXRpbC5odG1sI3V0aWxfY3VzdG9tX2luc3BlY3RfZnVuY3Rpb25fb25fb2JqZWN0c1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ21vbWVudC5pbnZhbGlkKC8qICcgKyB0aGlzLl9pICsgJyAqLyknO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmdW5jID0gJ21vbWVudCc7XG4gICAgICAgIHZhciB6b25lID0gJyc7XG4gICAgICAgIGlmICghdGhpcy5pc0xvY2FsKCkpIHtcbiAgICAgICAgICAgIGZ1bmMgPSB0aGlzLnV0Y09mZnNldCgpID09PSAwID8gJ21vbWVudC51dGMnIDogJ21vbWVudC5wYXJzZVpvbmUnO1xuICAgICAgICAgICAgem9uZSA9ICdaJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJlZml4ID0gJ1snICsgZnVuYyArICcoXCJdJztcbiAgICAgICAgdmFyIHllYXIgPSAoMCA8PSB0aGlzLnllYXIoKSAmJiB0aGlzLnllYXIoKSA8PSA5OTk5KSA/ICdZWVlZJyA6ICdZWVlZWVknO1xuICAgICAgICB2YXIgZGF0ZXRpbWUgPSAnLU1NLUREW1RdSEg6bW06c3MuU1NTJztcbiAgICAgICAgdmFyIHN1ZmZpeCA9IHpvbmUgKyAnW1wiKV0nO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChwcmVmaXggKyB5ZWFyICsgZGF0ZXRpbWUgKyBzdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdCAoaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgaWYgKCFpbnB1dFN0cmluZykge1xuICAgICAgICAgICAgaW5wdXRTdHJpbmcgPSB0aGlzLmlzVXRjKCkgPyBob29rcy5kZWZhdWx0Rm9ybWF0VXRjIDogaG9va3MuZGVmYXVsdEZvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3V0cHV0ID0gZm9ybWF0TW9tZW50KHRoaXMsIGlucHV0U3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tICh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7dG86IHRoaXMsIGZyb206IHRpbWV9KS5sb2NhbGUodGhpcy5sb2NhbGUoKSkuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tTm93ICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb20oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG8gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHxcbiAgICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHtmcm9tOiB0aGlzLCB0bzogdGltZX0pLmxvY2FsZSh0aGlzLmxvY2FsZSgpKS5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvTm93ICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIC8vIElmIHBhc3NlZCBhIGxvY2FsZSBrZXksIGl0IHdpbGwgc2V0IHRoZSBsb2NhbGUgZm9yIHRoaXNcbiAgICAvLyBpbnN0YW5jZS4gIE90aGVyd2lzZSwgaXQgd2lsbCByZXR1cm4gdGhlIGxvY2FsZSBjb25maWd1cmF0aW9uXG4gICAgLy8gdmFyaWFibGVzIGZvciB0aGlzIGluc3RhbmNlLlxuICAgIGZ1bmN0aW9uIGxvY2FsZSAoa2V5KSB7XG4gICAgICAgIHZhciBuZXdMb2NhbGVEYXRhO1xuXG4gICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0xvY2FsZURhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChuZXdMb2NhbGVEYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbGUgPSBuZXdMb2NhbGVEYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGFuZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLmxhbmcoKSBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkLCB1c2UgbW9tZW50KCkubG9jYWxlRGF0YSgpIHRvIGdldCB0aGUgbGFuZ3VhZ2UgY29uZmlndXJhdGlvbi4gVXNlIG1vbWVudCgpLmxvY2FsZSgpIHRvIGNoYW5nZSBsYW5ndWFnZXMuJyxcbiAgICAgICAgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVEYXRhICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbiAgICB9XG5cbiAgICB2YXIgTVNfUEVSX1NFQ09ORCA9IDEwMDA7XG4gICAgdmFyIE1TX1BFUl9NSU5VVEUgPSA2MCAqIE1TX1BFUl9TRUNPTkQ7XG4gICAgdmFyIE1TX1BFUl9IT1VSID0gNjAgKiBNU19QRVJfTUlOVVRFO1xuICAgIHZhciBNU19QRVJfNDAwX1lFQVJTID0gKDM2NSAqIDQwMCArIDk3KSAqIDI0ICogTVNfUEVSX0hPVVI7XG5cbiAgICAvLyBhY3R1YWwgbW9kdWxvIC0gaGFuZGxlcyBuZWdhdGl2ZSBudW1iZXJzIChmb3IgZGF0ZXMgYmVmb3JlIDE5NzApOlxuICAgIGZ1bmN0aW9uIG1vZCQxKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICAgIHJldHVybiAoZGl2aWRlbmQgJSBkaXZpc29yICsgZGl2aXNvcikgJSBkaXZpc29yO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsU3RhcnRPZkRhdGUoeSwgbSwgZCkge1xuICAgICAgICAvLyB0aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5LCBtLCBkKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1dGNTdGFydE9mRGF0ZSh5LCBtLCBkKSB7XG4gICAgICAgIC8vIERhdGUuVVRDIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5VVEMoeSArIDQwMCwgbSwgZCkgLSBNU19QRVJfNDAwX1lFQVJTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIERhdGUuVVRDKHksIG0sIGQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhcnRPZiAodW5pdHMpIHtcbiAgICAgICAgdmFyIHRpbWU7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJyB8fCAhdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGU7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCAwLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpIC0gdGhpcy5tb250aCgpICUgMywgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpIC0gdGhpcy53ZWVrZGF5KCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpIC0gKHRoaXMuaXNvV2Vla2RheSgpIC0gMSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lICsgKHRoaXMuX2lzVVRDID8gMCA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSwgTVNfUEVSX0hPVVIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lLCBNU19QRVJfTUlOVVRFKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kLnNldFRpbWUodGltZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kT2YgKHVuaXRzKSB7XG4gICAgICAgIHZhciB0aW1lO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHwgIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSArIDEsIDAsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpIC0gdGhpcy5tb250aCgpICUgMyArIDMsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSArIDEsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpICsgNykgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpIC0gKHRoaXMuaXNvV2Vla2RheSgpIC0gMSkgKyA3KSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpICsgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX0hPVVIgLSBtb2QkMSh0aW1lICsgKHRoaXMuX2lzVVRDID8gMCA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSwgTVNfUEVSX0hPVVIpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX01JTlVURSAtIG1vZCQxKHRpbWUsIE1TX1BFUl9NSU5VVEUpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX1NFQ09ORCAtIG1vZCQxKHRpbWUsIE1TX1BFUl9TRUNPTkQpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2Quc2V0VGltZSh0aW1lKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWx1ZU9mICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2QudmFsdWVPZigpIC0gKCh0aGlzLl9vZmZzZXQgfHwgMCkgKiA2MDAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5peCAoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpIC8gMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9EYXRlICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0FycmF5ICgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gW20ueWVhcigpLCBtLm1vbnRoKCksIG0uZGF0ZSgpLCBtLmhvdXIoKSwgbS5taW51dGUoKSwgbS5zZWNvbmQoKSwgbS5taWxsaXNlY29uZCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b09iamVjdCAoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXJzOiBtLnllYXIoKSxcbiAgICAgICAgICAgIG1vbnRoczogbS5tb250aCgpLFxuICAgICAgICAgICAgZGF0ZTogbS5kYXRlKCksXG4gICAgICAgICAgICBob3VyczogbS5ob3VycygpLFxuICAgICAgICAgICAgbWludXRlczogbS5taW51dGVzKCksXG4gICAgICAgICAgICBzZWNvbmRzOiBtLnNlY29uZHMoKSxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kczogbS5taWxsaXNlY29uZHMoKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgICAgIC8vIG5ldyBEYXRlKE5hTikudG9KU09OKCkgPT09IG51bGxcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy50b0lTT1N0cmluZygpIDogbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkJDIgKCkge1xuICAgICAgICByZXR1cm4gaXNWYWxpZCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzaW5nRmxhZ3MgKCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBnZXRQYXJzaW5nRmxhZ3ModGhpcykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmFsaWRBdCAoKSB7XG4gICAgICAgIHJldHVybiBnZXRQYXJzaW5nRmxhZ3ModGhpcykub3ZlcmZsb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRpb25EYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5wdXQ6IHRoaXMuX2ksXG4gICAgICAgICAgICBmb3JtYXQ6IHRoaXMuX2YsXG4gICAgICAgICAgICBsb2NhbGU6IHRoaXMuX2xvY2FsZSxcbiAgICAgICAgICAgIGlzVVRDOiB0aGlzLl9pc1VUQyxcbiAgICAgICAgICAgIHN0cmljdDogdGhpcy5fc3RyaWN0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydnZycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ0dHJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNvV2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4gKHRva2VuLCBnZXR0ZXIpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgW3Rva2VuLCB0b2tlbi5sZW5ndGhdLCAwLCBnZXR0ZXIpO1xuICAgIH1cblxuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2cnLCAgICAgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZ2cnLCAgICAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHJywgICdpc29XZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3dlZWtZZWFyJywgJ2dnJyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrWWVhcicsICdHRycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnd2Vla1llYXInLCAxKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtZZWFyJywgMSk7XG5cblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0cnLCAgICAgIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdnJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0dHJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnZycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2dnZ2cnLCAnZ2dnZ2cnLCAnR0dHRycsICdHR0dHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMildID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZycsICdHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhciAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwodGhpcyxcbiAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICB0aGlzLndlZWsoKSxcbiAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXkoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrWWVhciAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwodGhpcyxcbiAgICAgICAgICAgICAgICBpbnB1dCwgdGhpcy5pc29XZWVrKCksIHRoaXMuaXNvV2Vla2RheSgpLCAxLCA0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJU09XZWVrc0luWWVhciAoKSB7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0V2Vla3NJblllYXIgKCkge1xuICAgICAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXJIZWxwZXIoaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrc1RhcmdldDtcbiAgICAgICAgaWYgKGlucHV0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKHRoaXMsIGRvdywgZG95KS55ZWFyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2Vla3NUYXJnZXQgPSB3ZWVrc0luWWVhcihpbnB1dCwgZG93LCBkb3kpO1xuICAgICAgICAgICAgaWYgKHdlZWsgPiB3ZWVrc1RhcmdldCkge1xuICAgICAgICAgICAgICAgIHdlZWsgPSB3ZWVrc1RhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXRXZWVrQWxsLmNhbGwodGhpcywgaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFdlZWtBbGwod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXJEYXRhID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZShkYXlPZlllYXJEYXRhLnllYXIsIDAsIGRheU9mWWVhckRhdGEuZGF5T2ZZZWFyKTtcblxuICAgICAgICB0aGlzLnllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpKTtcbiAgICAgICAgdGhpcy5tb250aChkYXRlLmdldFVUQ01vbnRoKCkpO1xuICAgICAgICB0aGlzLmRhdGUoZGF0ZS5nZXRVVENEYXRlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignUScsIDAsICdRbycsICdxdWFydGVyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3F1YXJ0ZXInLCAnUScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgncXVhcnRlcicsIDcpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUScsIG1hdGNoMSk7XG4gICAgYWRkUGFyc2VUb2tlbignUScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gKHRvSW50KGlucHV0KSAtIDEpICogMztcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFF1YXJ0ZXIgKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gTWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkgKyAxKSAvIDMpIDogdGhpcy5tb250aCgoaW5wdXQgLSAxKSAqIDMgKyB0aGlzLm1vbnRoKCkgJSAzKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignRCcsIFsnREQnLCAyXSwgJ0RvJywgJ2RhdGUnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF0ZScsICdEJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF0ZScsIDkpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRCcsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAgICByZXR1cm4gaXNTdHJpY3QgP1xuICAgICAgICAgIChsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2UgfHwgbG9jYWxlLl9vcmRpbmFsUGFyc2UpIDpcbiAgICAgICAgICBsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50O1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0QnLCAnREQnXSwgREFURSk7XG4gICAgYWRkUGFyc2VUb2tlbignRG8nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W0RBVEVdID0gdG9JbnQoaW5wdXQubWF0Y2gobWF0Y2gxdG8yKVswXSk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0RGF5T2ZNb250aCA9IG1ha2VHZXRTZXQoJ0RhdGUnLCB0cnVlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEREQnLCBbJ0REREQnLCAzXSwgJ0RERG8nLCAnZGF5T2ZZZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RheU9mWWVhcicsICdEREQnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdkYXlPZlllYXInLCA0KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0RERCcsICBtYXRjaDF0bzMpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REREQnLCBtYXRjaDMpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZlllYXIgKGlucHV0KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXIgPSBNYXRoLnJvdW5kKCh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1KSArIDE7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gZGF5T2ZZZWFyIDogdGhpcy5hZGQoKGlucHV0IC0gZGF5T2ZZZWFyKSwgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignbScsIFsnbW0nLCAyXSwgMCwgJ21pbnV0ZScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtaW51dGUnLCAnbScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbWludXRlJywgMTQpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignbScsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ21tJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0TWludXRlID0gbWFrZUdldFNldCgnTWludXRlcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdzJywgWydzcycsIDJdLCAwLCAnc2Vjb25kJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3NlY29uZCcsICdzJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdzZWNvbmQnLCAxNSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdzJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignc3MnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ3MnLCAnc3MnXSwgU0VDT05EKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRTZWNvbmQgPSBtYWtlR2V0U2V0KCdTZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMDApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTUycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTUycsIDNdLCAwLCAnbWlsbGlzZWNvbmQnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1MnLCA0XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTUycsIDVdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1MnLCA2XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1MnLCA3XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTUycsIDhdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTU1MnLCA5XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwMDtcbiAgICB9KTtcblxuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtaWxsaXNlY29uZCcsICdtcycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbWlsbGlzZWNvbmQnLCAxNik7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdTJywgICAgbWF0Y2gxdG8zLCBtYXRjaDEpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTJywgICBtYXRjaDF0bzMsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignU1NTJywgIG1hdGNoMXRvMywgbWF0Y2gzKTtcblxuICAgIHZhciB0b2tlbjtcbiAgICBmb3IgKHRva2VuID0gJ1NTU1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFJlZ2V4VG9rZW4odG9rZW4sIG1hdGNoVW5zaWduZWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTXMoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7XG4gICAgfVxuXG4gICAgZm9yICh0b2tlbiA9ICdTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKTtcbiAgICB9XG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldE1pbGxpc2Vjb25kID0gbWFrZUdldFNldCgnTWlsbGlzZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3onLCAgMCwgMCwgJ3pvbmVBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3p6JywgMCwgMCwgJ3pvbmVOYW1lJyk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRab25lQWJiciAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdVVEMnIDogJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZU5hbWUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJyc7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvID0gTW9tZW50LnByb3RvdHlwZTtcblxuICAgIHByb3RvLmFkZCAgICAgICAgICAgICAgID0gYWRkO1xuICAgIHByb3RvLmNhbGVuZGFyICAgICAgICAgID0gY2FsZW5kYXIkMTtcbiAgICBwcm90by5jbG9uZSAgICAgICAgICAgICA9IGNsb25lO1xuICAgIHByb3RvLmRpZmYgICAgICAgICAgICAgID0gZGlmZjtcbiAgICBwcm90by5lbmRPZiAgICAgICAgICAgICA9IGVuZE9mO1xuICAgIHByb3RvLmZvcm1hdCAgICAgICAgICAgID0gZm9ybWF0O1xuICAgIHByb3RvLmZyb20gICAgICAgICAgICAgID0gZnJvbTtcbiAgICBwcm90by5mcm9tTm93ICAgICAgICAgICA9IGZyb21Ob3c7XG4gICAgcHJvdG8udG8gICAgICAgICAgICAgICAgPSB0bztcbiAgICBwcm90by50b05vdyAgICAgICAgICAgICA9IHRvTm93O1xuICAgIHByb3RvLmdldCAgICAgICAgICAgICAgID0gc3RyaW5nR2V0O1xuICAgIHByb3RvLmludmFsaWRBdCAgICAgICAgID0gaW52YWxpZEF0O1xuICAgIHByb3RvLmlzQWZ0ZXIgICAgICAgICAgID0gaXNBZnRlcjtcbiAgICBwcm90by5pc0JlZm9yZSAgICAgICAgICA9IGlzQmVmb3JlO1xuICAgIHByb3RvLmlzQmV0d2VlbiAgICAgICAgID0gaXNCZXR3ZWVuO1xuICAgIHByb3RvLmlzU2FtZSAgICAgICAgICAgID0gaXNTYW1lO1xuICAgIHByb3RvLmlzU2FtZU9yQWZ0ZXIgICAgID0gaXNTYW1lT3JBZnRlcjtcbiAgICBwcm90by5pc1NhbWVPckJlZm9yZSAgICA9IGlzU2FtZU9yQmVmb3JlO1xuICAgIHByb3RvLmlzVmFsaWQgICAgICAgICAgID0gaXNWYWxpZCQyO1xuICAgIHByb3RvLmxhbmcgICAgICAgICAgICAgID0gbGFuZztcbiAgICBwcm90by5sb2NhbGUgICAgICAgICAgICA9IGxvY2FsZTtcbiAgICBwcm90by5sb2NhbGVEYXRhICAgICAgICA9IGxvY2FsZURhdGE7XG4gICAgcHJvdG8ubWF4ICAgICAgICAgICAgICAgPSBwcm90b3R5cGVNYXg7XG4gICAgcHJvdG8ubWluICAgICAgICAgICAgICAgPSBwcm90b3R5cGVNaW47XG4gICAgcHJvdG8ucGFyc2luZ0ZsYWdzICAgICAgPSBwYXJzaW5nRmxhZ3M7XG4gICAgcHJvdG8uc2V0ICAgICAgICAgICAgICAgPSBzdHJpbmdTZXQ7XG4gICAgcHJvdG8uc3RhcnRPZiAgICAgICAgICAgPSBzdGFydE9mO1xuICAgIHByb3RvLnN1YnRyYWN0ICAgICAgICAgID0gc3VidHJhY3Q7XG4gICAgcHJvdG8udG9BcnJheSAgICAgICAgICAgPSB0b0FycmF5O1xuICAgIHByb3RvLnRvT2JqZWN0ICAgICAgICAgID0gdG9PYmplY3Q7XG4gICAgcHJvdG8udG9EYXRlICAgICAgICAgICAgPSB0b0RhdGU7XG4gICAgcHJvdG8udG9JU09TdHJpbmcgICAgICAgPSB0b0lTT1N0cmluZztcbiAgICBwcm90by5pbnNwZWN0ICAgICAgICAgICA9IGluc3BlY3Q7XG4gICAgcHJvdG8udG9KU09OICAgICAgICAgICAgPSB0b0pTT047XG4gICAgcHJvdG8udG9TdHJpbmcgICAgICAgICAgPSB0b1N0cmluZztcbiAgICBwcm90by51bml4ICAgICAgICAgICAgICA9IHVuaXg7XG4gICAgcHJvdG8udmFsdWVPZiAgICAgICAgICAgPSB2YWx1ZU9mO1xuICAgIHByb3RvLmNyZWF0aW9uRGF0YSAgICAgID0gY3JlYXRpb25EYXRhO1xuICAgIHByb3RvLnllYXIgICAgICAgPSBnZXRTZXRZZWFyO1xuICAgIHByb3RvLmlzTGVhcFllYXIgPSBnZXRJc0xlYXBZZWFyO1xuICAgIHByb3RvLndlZWtZZWFyICAgID0gZ2V0U2V0V2Vla1llYXI7XG4gICAgcHJvdG8uaXNvV2Vla1llYXIgPSBnZXRTZXRJU09XZWVrWWVhcjtcbiAgICBwcm90by5xdWFydGVyID0gcHJvdG8ucXVhcnRlcnMgPSBnZXRTZXRRdWFydGVyO1xuICAgIHByb3RvLm1vbnRoICAgICAgID0gZ2V0U2V0TW9udGg7XG4gICAgcHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcbiAgICBwcm90by53ZWVrICAgICAgICAgICA9IHByb3RvLndlZWtzICAgICAgICA9IGdldFNldFdlZWs7XG4gICAgcHJvdG8uaXNvV2VlayAgICAgICAgPSBwcm90by5pc29XZWVrcyAgICAgPSBnZXRTZXRJU09XZWVrO1xuICAgIHByb3RvLndlZWtzSW5ZZWFyICAgID0gZ2V0V2Vla3NJblllYXI7XG4gICAgcHJvdG8uaXNvV2Vla3NJblllYXIgPSBnZXRJU09XZWVrc0luWWVhcjtcbiAgICBwcm90by5kYXRlICAgICAgID0gZ2V0U2V0RGF5T2ZNb250aDtcbiAgICBwcm90by5kYXkgICAgICAgID0gcHJvdG8uZGF5cyAgICAgICAgICAgICA9IGdldFNldERheU9mV2VlaztcbiAgICBwcm90by53ZWVrZGF5ICAgID0gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrO1xuICAgIHByb3RvLmlzb1dlZWtkYXkgPSBnZXRTZXRJU09EYXlPZldlZWs7XG4gICAgcHJvdG8uZGF5T2ZZZWFyICA9IGdldFNldERheU9mWWVhcjtcbiAgICBwcm90by5ob3VyID0gcHJvdG8uaG91cnMgPSBnZXRTZXRIb3VyO1xuICAgIHByb3RvLm1pbnV0ZSA9IHByb3RvLm1pbnV0ZXMgPSBnZXRTZXRNaW51dGU7XG4gICAgcHJvdG8uc2Vjb25kID0gcHJvdG8uc2Vjb25kcyA9IGdldFNldFNlY29uZDtcbiAgICBwcm90by5taWxsaXNlY29uZCA9IHByb3RvLm1pbGxpc2Vjb25kcyA9IGdldFNldE1pbGxpc2Vjb25kO1xuICAgIHByb3RvLnV0Y09mZnNldCAgICAgICAgICAgID0gZ2V0U2V0T2Zmc2V0O1xuICAgIHByb3RvLnV0YyAgICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9VVEM7XG4gICAgcHJvdG8ubG9jYWwgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb0xvY2FsO1xuICAgIHByb3RvLnBhcnNlWm9uZSAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQ7XG4gICAgcHJvdG8uaGFzQWxpZ25lZEhvdXJPZmZzZXQgPSBoYXNBbGlnbmVkSG91ck9mZnNldDtcbiAgICBwcm90by5pc0RTVCAgICAgICAgICAgICAgICA9IGlzRGF5bGlnaHRTYXZpbmdUaW1lO1xuICAgIHByb3RvLmlzTG9jYWwgICAgICAgICAgICAgID0gaXNMb2NhbDtcbiAgICBwcm90by5pc1V0Y09mZnNldCAgICAgICAgICA9IGlzVXRjT2Zmc2V0O1xuICAgIHByb3RvLmlzVXRjICAgICAgICAgICAgICAgID0gaXNVdGM7XG4gICAgcHJvdG8uaXNVVEMgICAgICAgICAgICAgICAgPSBpc1V0YztcbiAgICBwcm90by56b25lQWJiciA9IGdldFpvbmVBYmJyO1xuICAgIHByb3RvLnpvbmVOYW1lID0gZ2V0Wm9uZU5hbWU7XG4gICAgcHJvdG8uZGF0ZXMgID0gZGVwcmVjYXRlKCdkYXRlcyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgZGF0ZSBpbnN0ZWFkLicsIGdldFNldERheU9mTW9udGgpO1xuICAgIHByb3RvLm1vbnRocyA9IGRlcHJlY2F0ZSgnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJywgZ2V0U2V0TW9udGgpO1xuICAgIHByb3RvLnllYXJzICA9IGRlcHJlY2F0ZSgneWVhcnMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIHllYXIgaW5zdGVhZCcsIGdldFNldFllYXIpO1xuICAgIHByb3RvLnpvbmUgICA9IGRlcHJlY2F0ZSgnbW9tZW50KCkuem9uZSBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50KCkudXRjT2Zmc2V0IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3Mvem9uZS8nLCBnZXRTZXRab25lKTtcbiAgICBwcm90by5pc0RTVFNoaWZ0ZWQgPSBkZXByZWNhdGUoJ2lzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb24nLCBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQpO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlVW5peCAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0ICogMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW5ab25lICgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFyc2Vab25lKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlUGFyc2VQb3N0Rm9ybWF0IChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8kMSA9IExvY2FsZS5wcm90b3R5cGU7XG5cbiAgICBwcm90byQxLmNhbGVuZGFyICAgICAgICA9IGNhbGVuZGFyO1xuICAgIHByb3RvJDEubG9uZ0RhdGVGb3JtYXQgID0gbG9uZ0RhdGVGb3JtYXQ7XG4gICAgcHJvdG8kMS5pbnZhbGlkRGF0ZSAgICAgPSBpbnZhbGlkRGF0ZTtcbiAgICBwcm90byQxLm9yZGluYWwgICAgICAgICA9IG9yZGluYWw7XG4gICAgcHJvdG8kMS5wcmVwYXJzZSAgICAgICAgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG4gICAgcHJvdG8kMS5wb3N0Zm9ybWF0ICAgICAgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG4gICAgcHJvdG8kMS5yZWxhdGl2ZVRpbWUgICAgPSByZWxhdGl2ZVRpbWU7XG4gICAgcHJvdG8kMS5wYXN0RnV0dXJlICAgICAgPSBwYXN0RnV0dXJlO1xuICAgIHByb3RvJDEuc2V0ICAgICAgICAgICAgID0gc2V0O1xuXG4gICAgcHJvdG8kMS5tb250aHMgICAgICAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHM7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydCAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHNTaG9ydDtcbiAgICBwcm90byQxLm1vbnRoc1BhcnNlICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRoc1BhcnNlO1xuICAgIHByb3RvJDEubW9udGhzUmVnZXggICAgICAgPSBtb250aHNSZWdleDtcbiAgICBwcm90byQxLm1vbnRoc1Nob3J0UmVnZXggID0gbW9udGhzU2hvcnRSZWdleDtcbiAgICBwcm90byQxLndlZWsgPSBsb2NhbGVXZWVrO1xuICAgIHByb3RvJDEuZmlyc3REYXlPZlllYXIgPSBsb2NhbGVGaXJzdERheU9mWWVhcjtcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbiAgICBwcm90byQxLndlZWtkYXlzICAgICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzO1xuICAgIHByb3RvJDEud2Vla2RheXNNaW4gICAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNNaW47XG4gICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0ICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c1Nob3J0O1xuICAgIHByb3RvJDEud2Vla2RheXNQYXJzZSAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNQYXJzZTtcblxuICAgIHByb3RvJDEud2Vla2RheXNSZWdleCAgICAgICA9ICAgICAgICB3ZWVrZGF5c1JlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydFJlZ2V4ICA9ICAgICAgICB3ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrZGF5c01pblJlZ2V4ICAgID0gICAgICAgIHdlZWtkYXlzTWluUmVnZXg7XG5cbiAgICBwcm90byQxLmlzUE0gPSBsb2NhbGVJc1BNO1xuICAgIHByb3RvJDEubWVyaWRpZW0gPSBsb2NhbGVNZXJpZGllbTtcblxuICAgIGZ1bmN0aW9uIGdldCQxIChmb3JtYXQsIGluZGV4LCBmaWVsZCwgc2V0dGVyKSB7XG4gICAgICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKTtcbiAgICAgICAgdmFyIHV0YyA9IGNyZWF0ZVVUQygpLnNldChzZXR0ZXIsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIGxvY2FsZVtmaWVsZF0odXRjLCBmb3JtYXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHNJbXBsIChmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIGluZGV4LCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCBpLCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvLyAoKVxuICAgIC8vICg1KVxuICAgIC8vIChmbXQsIDUpXG4gICAgLy8gKGZtdClcbiAgICAvLyAodHJ1ZSlcbiAgICAvLyAodHJ1ZSwgNSlcbiAgICAvLyAodHJ1ZSwgZm10LCA1KVxuICAgIC8vICh0cnVlLCBmbXQpXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzSW1wbCAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAodHlwZW9mIGxvY2FsZVNvcnRlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9ybWF0ID0gbG9jYWxlU29ydGVkO1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBsb2NhbGVTb3J0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgICAgIHNoaWZ0ID0gbG9jYWxlU29ydGVkID8gbG9jYWxlLl93ZWVrLmRvdyA6IDA7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIChpbmRleCArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIChpICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHMgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzU2hvcnQgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5cyAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzU2hvcnQgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c1Nob3J0Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzTWluIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNNaW4nKTtcbiAgICB9XG5cbiAgICBnZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRvSW50KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuICAgIGhvb2tzLmxhbmcgPSBkZXByZWNhdGUoJ21vbWVudC5sYW5nIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlIGluc3RlYWQuJywgZ2V0U2V0R2xvYmFsTG9jYWxlKTtcbiAgICBob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsIGdldExvY2FsZSk7XG5cbiAgICB2YXIgbWF0aEFicyA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gYWJzICgpIHtcbiAgICAgICAgdmFyIGRhdGEgICAgICAgICAgID0gdGhpcy5fZGF0YTtcblxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPSBtYXRoQWJzKHRoaXMuX21pbGxpc2Vjb25kcyk7XG4gICAgICAgIHRoaXMuX2RheXMgICAgICAgICA9IG1hdGhBYnModGhpcy5fZGF5cyk7XG4gICAgICAgIHRoaXMuX21vbnRocyAgICAgICA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyAgPSBtYXRoQWJzKGRhdGEubWlsbGlzZWNvbmRzKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzICAgICAgID0gbWF0aEFicyhkYXRhLnNlY29uZHMpO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgICAgICAgPSBtYXRoQWJzKGRhdGEubWludXRlcyk7XG4gICAgICAgIGRhdGEuaG91cnMgICAgICAgICA9IG1hdGhBYnMoZGF0YS5ob3Vycyk7XG4gICAgICAgIGRhdGEubW9udGhzICAgICAgICA9IG1hdGhBYnMoZGF0YS5tb250aHMpO1xuICAgICAgICBkYXRhLnllYXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0JDEgKGR1cmF0aW9uLCBpbnB1dCwgdmFsdWUsIGRpcmVjdGlvbikge1xuICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVEdXJhdGlvbihpbnB1dCwgdmFsdWUpO1xuXG4gICAgICAgIGR1cmF0aW9uLl9taWxsaXNlY29uZHMgKz0gZGlyZWN0aW9uICogb3RoZXIuX21pbGxpc2Vjb25kcztcbiAgICAgICAgZHVyYXRpb24uX2RheXMgICAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICAgICAgZHVyYXRpb24uX21vbnRocyAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fbW9udGhzO1xuXG4gICAgICAgIHJldHVybiBkdXJhdGlvbi5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgYWRkKDEsICdzJykgb3IgYWRkKGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIGFkZCQxIChpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAxKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBzdWJ0cmFjdCgxLCAncycpIG9yIHN1YnRyYWN0KGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0JDEgKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIC0xKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNDZWlsIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBidWJibGUgKCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuICAgICAgICB2YXIgZGF5cyAgICAgICAgID0gdGhpcy5fZGF5cztcbiAgICAgICAgdmFyIG1vbnRocyAgICAgICA9IHRoaXMuX21vbnRocztcbiAgICAgICAgdmFyIGRhdGEgICAgICAgICA9IHRoaXMuX2RhdGE7XG4gICAgICAgIHZhciBzZWNvbmRzLCBtaW51dGVzLCBob3VycywgeWVhcnMsIG1vbnRoc0Zyb21EYXlzO1xuXG4gICAgICAgIC8vIGlmIHdlIGhhdmUgYSBtaXggb2YgcG9zaXRpdmUgYW5kIG5lZ2F0aXZlIHZhbHVlcywgYnViYmxlIGRvd24gZmlyc3RcbiAgICAgICAgLy8gY2hlY2s6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yMTY2XG4gICAgICAgIGlmICghKChtaWxsaXNlY29uZHMgPj0gMCAmJiBkYXlzID49IDAgJiYgbW9udGhzID49IDApIHx8XG4gICAgICAgICAgICAgICAgKG1pbGxpc2Vjb25kcyA8PSAwICYmIGRheXMgPD0gMCAmJiBtb250aHMgPD0gMCkpKSB7XG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgKz0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzKSArIGRheXMpICogODY0ZTU7XG4gICAgICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgICAgIG1vbnRocyA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgICAgIC8vIGV4YW1wbGVzIG9mIHdoYXQgdGhhdCBtZWFucy5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHMgJSAxMDAwO1xuXG4gICAgICAgIHNlY29uZHMgICAgICAgICAgID0gYWJzRmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyAgICAgID0gc2Vjb25kcyAlIDYwO1xuXG4gICAgICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgZGF0YS5taW51dGVzICAgICAgPSBtaW51dGVzICUgNjA7XG5cbiAgICAgICAgaG91cnMgICAgICAgICAgICAgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBkYXRhLmhvdXJzICAgICAgICA9IGhvdXJzICUgMjQ7XG5cbiAgICAgICAgZGF5cyArPSBhYnNGbG9vcihob3VycyAvIDI0KTtcblxuICAgICAgICAvLyBjb252ZXJ0IGRheXMgdG8gbW9udGhzXG4gICAgICAgIG1vbnRoc0Zyb21EYXlzID0gYWJzRmxvb3IoZGF5c1RvTW9udGhzKGRheXMpKTtcbiAgICAgICAgbW9udGhzICs9IG1vbnRoc0Zyb21EYXlzO1xuICAgICAgICBkYXlzIC09IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRoc0Zyb21EYXlzKSk7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG4gICAgICAgIGRhdGEuZGF5cyAgID0gZGF5cztcbiAgICAgICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgICAgIGRhdGEueWVhcnMgID0geWVhcnM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c1RvTW9udGhzIChkYXlzKSB7XG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDE0NjA5NyBkYXlzICh0YWtpbmcgaW50byBhY2NvdW50IGxlYXAgeWVhciBydWxlcylcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTIgbW9udGhzID09PSA0ODAwXG4gICAgICAgIHJldHVybiBkYXlzICogNDgwMCAvIDE0NjA5NztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNUb0RheXMgKG1vbnRocykge1xuICAgICAgICAvLyB0aGUgcmV2ZXJzZSBvZiBkYXlzVG9Nb250aHNcbiAgICAgICAgcmV0dXJuIG1vbnRocyAqIDE0NjA5NyAvIDQ4MDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXMgKHVuaXRzKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRheXM7XG4gICAgICAgIHZhciBtb250aHM7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAncXVhcnRlcicgfHwgdW5pdHMgPT09ICd5ZWFyJykge1xuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyArIGRheXNUb01vbnRocyhkYXlzKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdtb250aCc6ICAgcmV0dXJuIG1vbnRocztcbiAgICAgICAgICAgICAgICBjYXNlICdxdWFydGVyJzogcmV0dXJuIG1vbnRocyAvIDM7XG4gICAgICAgICAgICAgICAgY2FzZSAneWVhcic6ICAgIHJldHVybiBtb250aHMgLyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZSBtaWxsaXNlY29uZHMgc2VwYXJhdGVseSBiZWNhdXNlIG9mIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChpc3N1ZSAjMTg2NylcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgTWF0aC5yb3VuZChtb250aHNUb0RheXModGhpcy5fbW9udGhzKSk7XG4gICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnd2VlaycgICA6IHJldHVybiBkYXlzIC8gNyAgICAgKyBtaWxsaXNlY29uZHMgLyA2MDQ4ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGF5JyAgICA6IHJldHVybiBkYXlzICAgICAgICAgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdob3VyJyAgIDogcmV0dXJuIGRheXMgKiAyNCAgICArIG1pbGxpc2Vjb25kcyAvIDM2ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWludXRlJyA6IHJldHVybiBkYXlzICogMTQ0MCAgKyBtaWxsaXNlY29uZHMgLyA2ZTQ7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2Vjb25kJyA6IHJldHVybiBkYXlzICogODY0MDAgKyBtaWxsaXNlY29uZHMgLyAxMDAwO1xuICAgICAgICAgICAgICAgIC8vIE1hdGguZmxvb3IgcHJldmVudHMgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgaGVyZVxuICAgICAgICAgICAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzogcmV0dXJuIE1hdGguZmxvb3IoZGF5cyAqIDg2NGU1KSArIG1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdW5pdCAnICsgdW5pdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVE9ETzogVXNlIHRoaXMuYXMoJ21zJyk/XG4gICAgZnVuY3Rpb24gdmFsdWVPZiQxICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzICtcbiAgICAgICAgICAgIHRoaXMuX2RheXMgKiA4NjRlNSArXG4gICAgICAgICAgICAodGhpcy5fbW9udGhzICUgMTIpICogMjU5MmU2ICtcbiAgICAgICAgICAgIHRvSW50KHRoaXMuX21vbnRocyAvIDEyKSAqIDMxNTM2ZTZcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlQXMgKGFsaWFzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcyhhbGlhcyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGFzTWlsbGlzZWNvbmRzID0gbWFrZUFzKCdtcycpO1xuICAgIHZhciBhc1NlY29uZHMgICAgICA9IG1ha2VBcygncycpO1xuICAgIHZhciBhc01pbnV0ZXMgICAgICA9IG1ha2VBcygnbScpO1xuICAgIHZhciBhc0hvdXJzICAgICAgICA9IG1ha2VBcygnaCcpO1xuICAgIHZhciBhc0RheXMgICAgICAgICA9IG1ha2VBcygnZCcpO1xuICAgIHZhciBhc1dlZWtzICAgICAgICA9IG1ha2VBcygndycpO1xuICAgIHZhciBhc01vbnRocyAgICAgICA9IG1ha2VBcygnTScpO1xuICAgIHZhciBhc1F1YXJ0ZXJzICAgICA9IG1ha2VBcygnUScpO1xuICAgIHZhciBhc1llYXJzICAgICAgICA9IG1ha2VBcygneScpO1xuXG4gICAgZnVuY3Rpb24gY2xvbmUkMSAoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQkMiAodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXNbdW5pdHMgKyAncyddKCkgOiBOYU47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUdldHRlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9kYXRhW25hbWVdIDogTmFOO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBtaWxsaXNlY29uZHMgPSBtYWtlR2V0dGVyKCdtaWxsaXNlY29uZHMnKTtcbiAgICB2YXIgc2Vjb25kcyAgICAgID0gbWFrZUdldHRlcignc2Vjb25kcycpO1xuICAgIHZhciBtaW51dGVzICAgICAgPSBtYWtlR2V0dGVyKCdtaW51dGVzJyk7XG4gICAgdmFyIGhvdXJzICAgICAgICA9IG1ha2VHZXR0ZXIoJ2hvdXJzJyk7XG4gICAgdmFyIGRheXMgICAgICAgICA9IG1ha2VHZXR0ZXIoJ2RheXMnKTtcbiAgICB2YXIgbW9udGhzICAgICAgID0gbWFrZUdldHRlcignbW9udGhzJyk7XG4gICAgdmFyIHllYXJzICAgICAgICA9IG1ha2VHZXR0ZXIoJ3llYXJzJyk7XG5cbiAgICBmdW5jdGlvbiB3ZWVrcyAoKSB7XG4gICAgICAgIHJldHVybiBhYnNGbG9vcih0aGlzLmRheXMoKSAvIDcpO1xuICAgIH1cblxuICAgIHZhciByb3VuZCA9IE1hdGgucm91bmQ7XG4gICAgdmFyIHRocmVzaG9sZHMgPSB7XG4gICAgICAgIHNzOiA0NCwgICAgICAgICAvLyBhIGZldyBzZWNvbmRzIHRvIHNlY29uZHNcbiAgICAgICAgcyA6IDQ1LCAgICAgICAgIC8vIHNlY29uZHMgdG8gbWludXRlXG4gICAgICAgIG0gOiA0NSwgICAgICAgICAvLyBtaW51dGVzIHRvIGhvdXJcbiAgICAgICAgaCA6IDIyLCAgICAgICAgIC8vIGhvdXJzIHRvIGRheVxuICAgICAgICBkIDogMjYsICAgICAgICAgLy8gZGF5cyB0byBtb250aFxuICAgICAgICBNIDogMTEgICAgICAgICAgLy8gbW9udGhzIHRvIHllYXJcbiAgICB9O1xuXG4gICAgLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBtb21lbnQuZm4uZnJvbSwgbW9tZW50LmZuLmZyb21Ob3csIGFuZCBtb21lbnQuZHVyYXRpb24uZm4uaHVtYW5pemVcbiAgICBmdW5jdGlvbiBzdWJzdGl0dXRlVGltZUFnbyhzdHJpbmcsIG51bWJlciwgd2l0aG91dFN1ZmZpeCwgaXNGdXR1cmUsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLnJlbGF0aXZlVGltZShudW1iZXIgfHwgMSwgISF3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUkMSAocG9zTmVnRHVyYXRpb24sIHdpdGhvdXRTdWZmaXgsIGxvY2FsZSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbihwb3NOZWdEdXJhdGlvbikuYWJzKCk7XG4gICAgICAgIHZhciBzZWNvbmRzICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdzJykpO1xuICAgICAgICB2YXIgbWludXRlcyAgPSByb3VuZChkdXJhdGlvbi5hcygnbScpKTtcbiAgICAgICAgdmFyIGhvdXJzICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ2gnKSk7XG4gICAgICAgIHZhciBkYXlzICAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdkJykpO1xuICAgICAgICB2YXIgbW9udGhzICAgPSByb3VuZChkdXJhdGlvbi5hcygnTScpKTtcbiAgICAgICAgdmFyIHllYXJzICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ3knKSk7XG5cbiAgICAgICAgdmFyIGEgPSBzZWNvbmRzIDw9IHRocmVzaG9sZHMuc3MgJiYgWydzJywgc2Vjb25kc10gIHx8XG4gICAgICAgICAgICAgICAgc2Vjb25kcyA8IHRocmVzaG9sZHMucyAgICYmIFsnc3MnLCBzZWNvbmRzXSB8fFxuICAgICAgICAgICAgICAgIG1pbnV0ZXMgPD0gMSAgICAgICAgICAgICAmJiBbJ20nXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBtaW51dGVzIDwgdGhyZXNob2xkcy5tICAgJiYgWydtbScsIG1pbnV0ZXNdIHx8XG4gICAgICAgICAgICAgICAgaG91cnMgICA8PSAxICAgICAgICAgICAgICYmIFsnaCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIGhvdXJzICAgPCB0aHJlc2hvbGRzLmggICAmJiBbJ2hoJywgaG91cnNdICAgfHxcbiAgICAgICAgICAgICAgICBkYXlzICAgIDw9IDEgICAgICAgICAgICAgJiYgWydkJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgZGF5cyAgICA8IHRocmVzaG9sZHMuZCAgICYmIFsnZGQnLCBkYXlzXSAgICB8fFxuICAgICAgICAgICAgICAgIG1vbnRocyAgPD0gMSAgICAgICAgICAgICAmJiBbJ00nXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBtb250aHMgIDwgdGhyZXNob2xkcy5NICAgJiYgWydNTScsIG1vbnRoc10gIHx8XG4gICAgICAgICAgICAgICAgeWVhcnMgICA8PSAxICAgICAgICAgICAgICYmIFsneSddICAgICAgICAgICB8fCBbJ3l5JywgeWVhcnNdO1xuXG4gICAgICAgIGFbMl0gPSB3aXRob3V0U3VmZml4O1xuICAgICAgICBhWzNdID0gK3Bvc05lZ0R1cmF0aW9uID4gMDtcbiAgICAgICAgYVs0XSA9IGxvY2FsZTtcbiAgICAgICAgcmV0dXJuIHN1YnN0aXR1dGVUaW1lQWdvLmFwcGx5KG51bGwsIGEpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgdGhlIHJvdW5kaW5nIGZ1bmN0aW9uIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZyAocm91bmRpbmdGdW5jdGlvbikge1xuICAgICAgICBpZiAocm91bmRpbmdGdW5jdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91bmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZihyb3VuZGluZ0Z1bmN0aW9uKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcm91bmQgPSByb3VuZGluZ0Z1bmN0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgYSB0aHJlc2hvbGQgZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCAodGhyZXNob2xkLCBsaW1pdCkge1xuICAgICAgICBpZiAodGhyZXNob2xkc1t0aHJlc2hvbGRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRocmVzaG9sZHNbdGhyZXNob2xkXTtcbiAgICAgICAgfVxuICAgICAgICB0aHJlc2hvbGRzW3RocmVzaG9sZF0gPSBsaW1pdDtcbiAgICAgICAgaWYgKHRocmVzaG9sZCA9PT0gJ3MnKSB7XG4gICAgICAgICAgICB0aHJlc2hvbGRzLnNzID0gbGltaXQgLSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGh1bWFuaXplICh3aXRoU3VmZml4KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvY2FsZSA9IHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICB2YXIgb3V0cHV0ID0gcmVsYXRpdmVUaW1lJDEodGhpcywgIXdpdGhTdWZmaXgsIGxvY2FsZSk7XG5cbiAgICAgICAgaWYgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IGxvY2FsZS5wYXN0RnV0dXJlKCt0aGlzLCBvdXRwdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvY2FsZS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGFicyQxID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBzaWduKHgpIHtcbiAgICAgICAgcmV0dXJuICgoeCA+IDApIC0gKHggPCAwKSkgfHwgK3g7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JU09TdHJpbmckMSgpIHtcbiAgICAgICAgLy8gZm9yIElTTyBzdHJpbmdzIHdlIGRvIG5vdCB1c2UgdGhlIG5vcm1hbCBidWJibGluZyBydWxlczpcbiAgICAgICAgLy8gICogbWlsbGlzZWNvbmRzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSBob3Vyc1xuICAgICAgICAvLyAgKiBkYXlzIGRvIG5vdCBidWJibGUgYXQgYWxsXG4gICAgICAgIC8vICAqIG1vbnRocyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgeWVhcnNcbiAgICAgICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbnRleHQtZnJlZSBjb252ZXJzaW9uIGJldHdlZW4gaG91cnMgYW5kIGRheXNcbiAgICAgICAgLy8gKHRoaW5rIG9mIGNsb2NrIGNoYW5nZXMpXG4gICAgICAgIC8vIGFuZCBhbHNvIG5vdCBiZXR3ZWVuIGRheXMgYW5kIG1vbnRocyAoMjgtMzEgZGF5cyBwZXIgbW9udGgpXG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlY29uZHMgPSBhYnMkMSh0aGlzLl9taWxsaXNlY29uZHMpIC8gMTAwMDtcbiAgICAgICAgdmFyIGRheXMgICAgICAgICA9IGFicyQxKHRoaXMuX2RheXMpO1xuICAgICAgICB2YXIgbW9udGhzICAgICAgID0gYWJzJDEodGhpcy5fbW9udGhzKTtcbiAgICAgICAgdmFyIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycztcblxuICAgICAgICAvLyAzNjAwIHNlY29uZHMgLT4gNjAgbWludXRlcyAtPiAxIGhvdXJcbiAgICAgICAgbWludXRlcyAgICAgICAgICAgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIHNlY29uZHMgJT0gNjA7XG4gICAgICAgIG1pbnV0ZXMgJT0gNjA7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyAgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuXG4gICAgICAgIC8vIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9kb3JkaWxsZS9tb21lbnQtaXNvZHVyYXRpb24vYmxvYi9tYXN0ZXIvbW9tZW50Lmlzb2R1cmF0aW9uLmpzXG4gICAgICAgIHZhciBZID0geWVhcnM7XG4gICAgICAgIHZhciBNID0gbW9udGhzO1xuICAgICAgICB2YXIgRCA9IGRheXM7XG4gICAgICAgIHZhciBoID0gaG91cnM7XG4gICAgICAgIHZhciBtID0gbWludXRlcztcbiAgICAgICAgdmFyIHMgPSBzZWNvbmRzID8gc2Vjb25kcy50b0ZpeGVkKDMpLnJlcGxhY2UoL1xcLj8wKyQvLCAnJykgOiAnJztcbiAgICAgICAgdmFyIHRvdGFsID0gdGhpcy5hc1NlY29uZHMoKTtcblxuICAgICAgICBpZiAoIXRvdGFsKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBzYW1lIGFzIEMjJ3MgKE5vZGEpIGFuZCBweXRob24gKGlzb2RhdGUpLi4uXG4gICAgICAgICAgICAvLyBidXQgbm90IG90aGVyIEpTIChnb29nLmRhdGUpXG4gICAgICAgICAgICByZXR1cm4gJ1AwRCc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG90YWxTaWduID0gdG90YWwgPCAwID8gJy0nIDogJyc7XG4gICAgICAgIHZhciB5bVNpZ24gPSBzaWduKHRoaXMuX21vbnRocykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgICAgIHZhciBkYXlzU2lnbiA9IHNpZ24odGhpcy5fZGF5cykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgICAgIHZhciBobXNTaWduID0gc2lnbih0aGlzLl9taWxsaXNlY29uZHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuXG4gICAgICAgIHJldHVybiB0b3RhbFNpZ24gKyAnUCcgK1xuICAgICAgICAgICAgKFkgPyB5bVNpZ24gKyBZICsgJ1knIDogJycpICtcbiAgICAgICAgICAgIChNID8geW1TaWduICsgTSArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAoRCA/IGRheXNTaWduICsgRCArICdEJyA6ICcnKSArXG4gICAgICAgICAgICAoKGggfHwgbSB8fCBzKSA/ICdUJyA6ICcnKSArXG4gICAgICAgICAgICAoaCA/IGhtc1NpZ24gKyBoICsgJ0gnIDogJycpICtcbiAgICAgICAgICAgIChtID8gaG1zU2lnbiArIG0gKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKHMgPyBobXNTaWduICsgcyArICdTJyA6ICcnKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8kMiA9IER1cmF0aW9uLnByb3RvdHlwZTtcblxuICAgIHByb3RvJDIuaXNWYWxpZCAgICAgICAgPSBpc1ZhbGlkJDE7XG4gICAgcHJvdG8kMi5hYnMgICAgICAgICAgICA9IGFicztcbiAgICBwcm90byQyLmFkZCAgICAgICAgICAgID0gYWRkJDE7XG4gICAgcHJvdG8kMi5zdWJ0cmFjdCAgICAgICA9IHN1YnRyYWN0JDE7XG4gICAgcHJvdG8kMi5hcyAgICAgICAgICAgICA9IGFzO1xuICAgIHByb3RvJDIuYXNNaWxsaXNlY29uZHMgPSBhc01pbGxpc2Vjb25kcztcbiAgICBwcm90byQyLmFzU2Vjb25kcyAgICAgID0gYXNTZWNvbmRzO1xuICAgIHByb3RvJDIuYXNNaW51dGVzICAgICAgPSBhc01pbnV0ZXM7XG4gICAgcHJvdG8kMi5hc0hvdXJzICAgICAgICA9IGFzSG91cnM7XG4gICAgcHJvdG8kMi5hc0RheXMgICAgICAgICA9IGFzRGF5cztcbiAgICBwcm90byQyLmFzV2Vla3MgICAgICAgID0gYXNXZWVrcztcbiAgICBwcm90byQyLmFzTW9udGhzICAgICAgID0gYXNNb250aHM7XG4gICAgcHJvdG8kMi5hc1F1YXJ0ZXJzICAgICA9IGFzUXVhcnRlcnM7XG4gICAgcHJvdG8kMi5hc1llYXJzICAgICAgICA9IGFzWWVhcnM7XG4gICAgcHJvdG8kMi52YWx1ZU9mICAgICAgICA9IHZhbHVlT2YkMTtcbiAgICBwcm90byQyLl9idWJibGUgICAgICAgID0gYnViYmxlO1xuICAgIHByb3RvJDIuY2xvbmUgICAgICAgICAgPSBjbG9uZSQxO1xuICAgIHByb3RvJDIuZ2V0ICAgICAgICAgICAgPSBnZXQkMjtcbiAgICBwcm90byQyLm1pbGxpc2Vjb25kcyAgID0gbWlsbGlzZWNvbmRzO1xuICAgIHByb3RvJDIuc2Vjb25kcyAgICAgICAgPSBzZWNvbmRzO1xuICAgIHByb3RvJDIubWludXRlcyAgICAgICAgPSBtaW51dGVzO1xuICAgIHByb3RvJDIuaG91cnMgICAgICAgICAgPSBob3VycztcbiAgICBwcm90byQyLmRheXMgICAgICAgICAgID0gZGF5cztcbiAgICBwcm90byQyLndlZWtzICAgICAgICAgID0gd2Vla3M7XG4gICAgcHJvdG8kMi5tb250aHMgICAgICAgICA9IG1vbnRocztcbiAgICBwcm90byQyLnllYXJzICAgICAgICAgID0geWVhcnM7XG4gICAgcHJvdG8kMi5odW1hbml6ZSAgICAgICA9IGh1bWFuaXplO1xuICAgIHByb3RvJDIudG9JU09TdHJpbmcgICAgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIudG9TdHJpbmcgICAgICAgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIudG9KU09OICAgICAgICAgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIubG9jYWxlICAgICAgICAgPSBsb2NhbGU7XG4gICAgcHJvdG8kMi5sb2NhbGVEYXRhICAgICA9IGxvY2FsZURhdGE7XG5cbiAgICBwcm90byQyLnRvSXNvU3RyaW5nID0gZGVwcmVjYXRlKCd0b0lzb1N0cmluZygpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdG9JU09TdHJpbmcoKSBpbnN0ZWFkIChub3RpY2UgdGhlIGNhcGl0YWxzKScsIHRvSVNPU3RyaW5nJDEpO1xuICAgIHByb3RvJDIubGFuZyA9IGxhbmc7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWCcsIDAsIDAsICd1bml4Jyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3gnLCAwLCAwLCAndmFsdWVPZicpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigneCcsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdYJywgbWF0Y2hUaW1lc3RhbXApO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUocGFyc2VGbG9hdChpbnB1dCwgMTApICogMTAwMCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbigneCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSh0b0ludChpbnB1dCkpO1xuICAgIH0pO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG5cbiAgICBob29rcy52ZXJzaW9uID0gJzIuMjQuMCc7XG5cbiAgICBzZXRIb29rQ2FsbGJhY2soY3JlYXRlTG9jYWwpO1xuXG4gICAgaG9va3MuZm4gICAgICAgICAgICAgICAgICAgID0gcHJvdG87XG4gICAgaG9va3MubWluICAgICAgICAgICAgICAgICAgID0gbWluO1xuICAgIGhvb2tzLm1heCAgICAgICAgICAgICAgICAgICA9IG1heDtcbiAgICBob29rcy5ub3cgICAgICAgICAgICAgICAgICAgPSBub3c7XG4gICAgaG9va3MudXRjICAgICAgICAgICAgICAgICAgID0gY3JlYXRlVVRDO1xuICAgIGhvb2tzLnVuaXggICAgICAgICAgICAgICAgICA9IGNyZWF0ZVVuaXg7XG4gICAgaG9va3MubW9udGhzICAgICAgICAgICAgICAgID0gbGlzdE1vbnRocztcbiAgICBob29rcy5pc0RhdGUgICAgICAgICAgICAgICAgPSBpc0RhdGU7XG4gICAgaG9va3MubG9jYWxlICAgICAgICAgICAgICAgID0gZ2V0U2V0R2xvYmFsTG9jYWxlO1xuICAgIGhvb2tzLmludmFsaWQgICAgICAgICAgICAgICA9IGNyZWF0ZUludmFsaWQ7XG4gICAgaG9va3MuZHVyYXRpb24gICAgICAgICAgICAgID0gY3JlYXRlRHVyYXRpb247XG4gICAgaG9va3MuaXNNb21lbnQgICAgICAgICAgICAgID0gaXNNb21lbnQ7XG4gICAgaG9va3Mud2Vla2RheXMgICAgICAgICAgICAgID0gbGlzdFdlZWtkYXlzO1xuICAgIGhvb2tzLnBhcnNlWm9uZSAgICAgICAgICAgICA9IGNyZWF0ZUluWm9uZTtcbiAgICBob29rcy5sb2NhbGVEYXRhICAgICAgICAgICAgPSBnZXRMb2NhbGU7XG4gICAgaG9va3MuaXNEdXJhdGlvbiAgICAgICAgICAgID0gaXNEdXJhdGlvbjtcbiAgICBob29rcy5tb250aHNTaG9ydCAgICAgICAgICAgPSBsaXN0TW9udGhzU2hvcnQ7XG4gICAgaG9va3Mud2Vla2RheXNNaW4gICAgICAgICAgID0gbGlzdFdlZWtkYXlzTWluO1xuICAgIGhvb2tzLmRlZmluZUxvY2FsZSAgICAgICAgICA9IGRlZmluZUxvY2FsZTtcbiAgICBob29rcy51cGRhdGVMb2NhbGUgICAgICAgICAgPSB1cGRhdGVMb2NhbGU7XG4gICAgaG9va3MubG9jYWxlcyAgICAgICAgICAgICAgID0gbGlzdExvY2FsZXM7XG4gICAgaG9va3Mud2Vla2RheXNTaG9ydCAgICAgICAgID0gbGlzdFdlZWtkYXlzU2hvcnQ7XG4gICAgaG9va3Mubm9ybWFsaXplVW5pdHMgICAgICAgID0gbm9ybWFsaXplVW5pdHM7XG4gICAgaG9va3MucmVsYXRpdmVUaW1lUm91bmRpbmcgID0gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmc7XG4gICAgaG9va3MucmVsYXRpdmVUaW1lVGhyZXNob2xkID0gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkO1xuICAgIGhvb2tzLmNhbGVuZGFyRm9ybWF0ICAgICAgICA9IGdldENhbGVuZGFyRm9ybWF0O1xuICAgIGhvb2tzLnByb3RvdHlwZSAgICAgICAgICAgICA9IHByb3RvO1xuXG4gICAgLy8gY3VycmVudGx5IEhUTUw1IGlucHV0IHR5cGUgb25seSBzdXBwb3J0cyAyNC1ob3VyIGZvcm1hdHNcbiAgICBob29rcy5IVE1MNV9GTVQgPSB7XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMOiAnWVlZWS1NTS1ERFRISDptbScsICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiAvPlxuICAgICAgICBEQVRFVElNRV9MT0NBTF9TRUNPTkRTOiAnWVlZWS1NTS1ERFRISDptbTpzcycsICAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICBEQVRFVElNRV9MT0NBTF9NUzogJ1lZWVktTU0tRERUSEg6bW06c3MuU1NTJywgICAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICAgICAgREFURTogJ1lZWVktTU0tREQnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJkYXRlXCIgLz5cbiAgICAgICAgVElNRTogJ0hIOm1tJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgLz5cbiAgICAgICAgVElNRV9TRUNPTkRTOiAnSEg6bW06c3MnLCAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICBUSU1FX01TOiAnSEg6bW06c3MuU1NTJywgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICBXRUVLOiAnR0dHRy1bV11XVycsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cIndlZWtcIiAvPlxuICAgICAgICBNT05USDogJ1lZWVktTU0nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cIm1vbnRoXCIgLz5cbiAgICB9O1xuXG4gICAgcmV0dXJuIGhvb2tzO1xuXG59KSkpO1xuIiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTU9ESUZJRVJfS0VZX05BTUVTID0gZXhwb3J0cy5ERUZBVUxUX1ZFUlRJQ0FMX1NQQUNJTkcgPSBleHBvcnRzLkZBTkdfSEVJR0hUX1BYID0gZXhwb3J0cy5GQU5HX1dJRFRIX1BYID0gZXhwb3J0cy5XRUVLREFZUyA9IGV4cG9ydHMuQkxPQ0tFRF9NT0RJRklFUiA9IGV4cG9ydHMuREFZX1NJWkUgPSBleHBvcnRzLk9QRU5fVVAgPSBleHBvcnRzLk9QRU5fRE9XTiA9IGV4cG9ydHMuQU5DSE9SX1JJR0hUID0gZXhwb3J0cy5BTkNIT1JfTEVGVCA9IGV4cG9ydHMuSU5GT19QT1NJVElPTl9BRlRFUiA9IGV4cG9ydHMuSU5GT19QT1NJVElPTl9CRUZPUkUgPSBleHBvcnRzLklORk9fUE9TSVRJT05fQk9UVE9NID0gZXhwb3J0cy5JTkZPX1BPU0lUSU9OX1RPUCA9IGV4cG9ydHMuSUNPTl9BRlRFUl9QT1NJVElPTiA9IGV4cG9ydHMuSUNPTl9CRUZPUkVfUE9TSVRJT04gPSBleHBvcnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEUgPSBleHBvcnRzLlZFUlRJQ0FMX09SSUVOVEFUSU9OID0gZXhwb3J0cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OID0gZXhwb3J0cy5FTkRfREFURSA9IGV4cG9ydHMuU1RBUlRfREFURSA9IGV4cG9ydHMuSVNPX01PTlRIX0ZPUk1BVCA9IGV4cG9ydHMuSVNPX0ZPUk1BVCA9IGV4cG9ydHMuRElTUExBWV9GT1JNQVQgPSB2b2lkIDA7XG52YXIgRElTUExBWV9GT1JNQVQgPSAnTCc7XG5leHBvcnRzLkRJU1BMQVlfRk9STUFUID0gRElTUExBWV9GT1JNQVQ7XG52YXIgSVNPX0ZPUk1BVCA9ICdZWVlZLU1NLUREJztcbmV4cG9ydHMuSVNPX0ZPUk1BVCA9IElTT19GT1JNQVQ7XG52YXIgSVNPX01PTlRIX0ZPUk1BVCA9ICdZWVlZLU1NJzsgLy8gVE9ETyBkZWxldGUgdGhpcyBsaW5lIG9mIGRlYWQgY29kZSBvbiBuZXh0IGJyZWFraW5nIGNoYW5nZVxuXG5leHBvcnRzLklTT19NT05USF9GT1JNQVQgPSBJU09fTU9OVEhfRk9STUFUO1xudmFyIFNUQVJUX0RBVEUgPSAnc3RhcnREYXRlJztcbmV4cG9ydHMuU1RBUlRfREFURSA9IFNUQVJUX0RBVEU7XG52YXIgRU5EX0RBVEUgPSAnZW5kRGF0ZSc7XG5leHBvcnRzLkVORF9EQVRFID0gRU5EX0RBVEU7XG52YXIgSE9SSVpPTlRBTF9PUklFTlRBVElPTiA9ICdob3Jpem9udGFsJztcbmV4cG9ydHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTiA9IEhPUklaT05UQUxfT1JJRU5UQVRJT047XG52YXIgVkVSVElDQUxfT1JJRU5UQVRJT04gPSAndmVydGljYWwnO1xuZXhwb3J0cy5WRVJUSUNBTF9PUklFTlRBVElPTiA9IFZFUlRJQ0FMX09SSUVOVEFUSU9OO1xudmFyIFZFUlRJQ0FMX1NDUk9MTEFCTEUgPSAndmVydGljYWxTY3JvbGxhYmxlJztcbmV4cG9ydHMuVkVSVElDQUxfU0NST0xMQUJMRSA9IFZFUlRJQ0FMX1NDUk9MTEFCTEU7XG52YXIgSUNPTl9CRUZPUkVfUE9TSVRJT04gPSAnYmVmb3JlJztcbmV4cG9ydHMuSUNPTl9CRUZPUkVfUE9TSVRJT04gPSBJQ09OX0JFRk9SRV9QT1NJVElPTjtcbnZhciBJQ09OX0FGVEVSX1BPU0lUSU9OID0gJ2FmdGVyJztcbmV4cG9ydHMuSUNPTl9BRlRFUl9QT1NJVElPTiA9IElDT05fQUZURVJfUE9TSVRJT047XG52YXIgSU5GT19QT1NJVElPTl9UT1AgPSAndG9wJztcbmV4cG9ydHMuSU5GT19QT1NJVElPTl9UT1AgPSBJTkZPX1BPU0lUSU9OX1RPUDtcbnZhciBJTkZPX1BPU0lUSU9OX0JPVFRPTSA9ICdib3R0b20nO1xuZXhwb3J0cy5JTkZPX1BPU0lUSU9OX0JPVFRPTSA9IElORk9fUE9TSVRJT05fQk9UVE9NO1xudmFyIElORk9fUE9TSVRJT05fQkVGT1JFID0gJ2JlZm9yZSc7XG5leHBvcnRzLklORk9fUE9TSVRJT05fQkVGT1JFID0gSU5GT19QT1NJVElPTl9CRUZPUkU7XG52YXIgSU5GT19QT1NJVElPTl9BRlRFUiA9ICdhZnRlcic7XG5leHBvcnRzLklORk9fUE9TSVRJT05fQUZURVIgPSBJTkZPX1BPU0lUSU9OX0FGVEVSO1xudmFyIEFOQ0hPUl9MRUZUID0gJ2xlZnQnO1xuZXhwb3J0cy5BTkNIT1JfTEVGVCA9IEFOQ0hPUl9MRUZUO1xudmFyIEFOQ0hPUl9SSUdIVCA9ICdyaWdodCc7XG5leHBvcnRzLkFOQ0hPUl9SSUdIVCA9IEFOQ0hPUl9SSUdIVDtcbnZhciBPUEVOX0RPV04gPSAnZG93bic7XG5leHBvcnRzLk9QRU5fRE9XTiA9IE9QRU5fRE9XTjtcbnZhciBPUEVOX1VQID0gJ3VwJztcbmV4cG9ydHMuT1BFTl9VUCA9IE9QRU5fVVA7XG52YXIgREFZX1NJWkUgPSAzOTtcbmV4cG9ydHMuREFZX1NJWkUgPSBEQVlfU0laRTtcbnZhciBCTE9DS0VEX01PRElGSUVSID0gJ2Jsb2NrZWQnO1xuZXhwb3J0cy5CTE9DS0VEX01PRElGSUVSID0gQkxPQ0tFRF9NT0RJRklFUjtcbnZhciBXRUVLREFZUyA9IFswLCAxLCAyLCAzLCA0LCA1LCA2XTtcbmV4cG9ydHMuV0VFS0RBWVMgPSBXRUVLREFZUztcbnZhciBGQU5HX1dJRFRIX1BYID0gMjA7XG5leHBvcnRzLkZBTkdfV0lEVEhfUFggPSBGQU5HX1dJRFRIX1BYO1xudmFyIEZBTkdfSEVJR0hUX1BYID0gMTA7XG5leHBvcnRzLkZBTkdfSEVJR0hUX1BYID0gRkFOR19IRUlHSFRfUFg7XG52YXIgREVGQVVMVF9WRVJUSUNBTF9TUEFDSU5HID0gMjI7XG5leHBvcnRzLkRFRkFVTFRfVkVSVElDQUxfU1BBQ0lORyA9IERFRkFVTFRfVkVSVElDQUxfU1BBQ0lORztcbnZhciBNT0RJRklFUl9LRVlfTkFNRVMgPSBuZXcgU2V0KFsnU2hpZnQnLCAnQ29udHJvbCcsICdBbHQnLCAnTWV0YSddKTtcbmV4cG9ydHMuTU9ESUZJRVJfS0VZX05BTUVTID0gTU9ESUZJRVJfS0VZX05BTUVTOyIsIm1vZHVsZS5leHBvcnRzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA/IHJlcXVpcmUoJy4vYnVpbGQvbW9ja3MnKSA6IHJlcXVpcmUoJy4vYnVpbGQnKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZShcIi4vZGVmaW5lUHJvcGVydHlcIik7XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0U3ByZWFkOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5DYWxlbmRhckRheVBocmFzZXMgPSBleHBvcnRzLkRheVBpY2tlck5hdmlnYXRpb25QaHJhc2VzID0gZXhwb3J0cy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c1BocmFzZXMgPSBleHBvcnRzLkRheVBpY2tlclBocmFzZXMgPSBleHBvcnRzLlNpbmdsZURhdGVQaWNrZXJJbnB1dFBocmFzZXMgPSBleHBvcnRzLlNpbmdsZURhdGVQaWNrZXJQaHJhc2VzID0gZXhwb3J0cy5EYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXMgPSBleHBvcnRzLkRhdGVSYW5nZVBpY2tlclBocmFzZXMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBjYWxlbmRhckxhYmVsID0gJ0NhbGVuZGFyJztcbnZhciByb2xlRGVzY3JpcHRpb24gPSAnZGF0ZXBpY2tlcic7XG52YXIgY2xvc2VEYXRlUGlja2VyID0gJ0Nsb3NlJztcbnZhciBmb2N1c1N0YXJ0RGF0ZSA9ICdJbnRlcmFjdCB3aXRoIHRoZSBjYWxlbmRhciBhbmQgYWRkIHRoZSBjaGVjay1pbiBkYXRlIGZvciB5b3VyIHRyaXAuJztcbnZhciBjbGVhckRhdGUgPSAnQ2xlYXIgRGF0ZSc7XG52YXIgY2xlYXJEYXRlcyA9ICdDbGVhciBEYXRlcyc7XG52YXIganVtcFRvUHJldk1vbnRoID0gJ01vdmUgYmFja3dhcmQgdG8gc3dpdGNoIHRvIHRoZSBwcmV2aW91cyBtb250aC4nO1xudmFyIGp1bXBUb05leHRNb250aCA9ICdNb3ZlIGZvcndhcmQgdG8gc3dpdGNoIHRvIHRoZSBuZXh0IG1vbnRoLic7XG52YXIga2V5Ym9hcmRTaG9ydGN1dHMgPSAnS2V5Ym9hcmQgU2hvcnRjdXRzJztcbnZhciBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9ICdPcGVuIHRoZSBrZXlib2FyZCBzaG9ydGN1dHMgcGFuZWwuJztcbnZhciBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9ICdDbG9zZSB0aGUgc2hvcnRjdXRzIHBhbmVsLic7XG52YXIgb3BlblRoaXNQYW5lbCA9ICdPcGVuIHRoaXMgcGFuZWwuJztcbnZhciBlbnRlcktleSA9ICdFbnRlciBrZXknO1xudmFyIGxlZnRBcnJvd1JpZ2h0QXJyb3cgPSAnUmlnaHQgYW5kIGxlZnQgYXJyb3cga2V5cyc7XG52YXIgdXBBcnJvd0Rvd25BcnJvdyA9ICd1cCBhbmQgZG93biBhcnJvdyBrZXlzJztcbnZhciBwYWdlVXBQYWdlRG93biA9ICdwYWdlIHVwIGFuZCBwYWdlIGRvd24ga2V5cyc7XG52YXIgaG9tZUVuZCA9ICdIb21lIGFuZCBlbmQga2V5cyc7XG52YXIgZXNjYXBlID0gJ0VzY2FwZSBrZXknO1xudmFyIHF1ZXN0aW9uTWFyayA9ICdRdWVzdGlvbiBtYXJrJztcbnZhciBzZWxlY3RGb2N1c2VkRGF0ZSA9ICdTZWxlY3QgdGhlIGRhdGUgaW4gZm9jdXMuJztcbnZhciBtb3ZlRm9jdXNCeU9uZURheSA9ICdNb3ZlIGJhY2t3YXJkIChsZWZ0KSBhbmQgZm9yd2FyZCAocmlnaHQpIGJ5IG9uZSBkYXkuJztcbnZhciBtb3ZlRm9jdXNCeU9uZVdlZWsgPSAnTW92ZSBiYWNrd2FyZCAodXApIGFuZCBmb3J3YXJkIChkb3duKSBieSBvbmUgd2Vlay4nO1xudmFyIG1vdmVGb2N1c0J5T25lTW9udGggPSAnU3dpdGNoIG1vbnRocy4nO1xudmFyIG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWsgPSAnR28gdG8gdGhlIGZpcnN0IG9yIGxhc3QgZGF5IG9mIGEgd2Vlay4nO1xudmFyIHJldHVybkZvY3VzVG9JbnB1dCA9ICdSZXR1cm4gdG8gdGhlIGRhdGUgaW5wdXQgZmllbGQuJztcbnZhciBrZXlib2FyZEZvcndhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zID0gJ05hdmlnYXRlIGZvcndhcmQgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgY2FsZW5kYXIgYW5kIHNlbGVjdCBhIGRhdGUuIFByZXNzIHRoZSBxdWVzdGlvbiBtYXJrIGtleSB0byBnZXQgdGhlIGtleWJvYXJkIHNob3J0Y3V0cyBmb3IgY2hhbmdpbmcgZGF0ZXMuJztcbnZhciBrZXlib2FyZEJhY2t3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9ucyA9ICdOYXZpZ2F0ZSBiYWNrd2FyZCB0byBpbnRlcmFjdCB3aXRoIHRoZSBjYWxlbmRhciBhbmQgc2VsZWN0IGEgZGF0ZS4gUHJlc3MgdGhlIHF1ZXN0aW9uIG1hcmsga2V5IHRvIGdldCB0aGUga2V5Ym9hcmQgc2hvcnRjdXRzIGZvciBjaGFuZ2luZyBkYXRlcy4nO1xuXG52YXIgY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlID0gZnVuY3Rpb24gY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlKF9yZWYpIHtcbiAgdmFyIGRhdGUgPSBfcmVmLmRhdGU7XG4gIHJldHVybiBcIkNob29zZSBcIi5jb25jYXQoZGF0ZSwgXCIgYXMgeW91ciBjaGVjay1pbiBkYXRlLiBJdFxcdTIwMTlzIGF2YWlsYWJsZS5cIik7XG59O1xuXG52YXIgY2hvb3NlQXZhaWxhYmxlRW5kRGF0ZSA9IGZ1bmN0aW9uIGNob29zZUF2YWlsYWJsZUVuZERhdGUoX3JlZjIpIHtcbiAgdmFyIGRhdGUgPSBfcmVmMi5kYXRlO1xuICByZXR1cm4gXCJDaG9vc2UgXCIuY29uY2F0KGRhdGUsIFwiIGFzIHlvdXIgY2hlY2stb3V0IGRhdGUuIEl0XFx1MjAxOXMgYXZhaWxhYmxlLlwiKTtcbn07XG5cbnZhciBjaG9vc2VBdmFpbGFibGVEYXRlID0gZnVuY3Rpb24gY2hvb3NlQXZhaWxhYmxlRGF0ZShfcmVmMykge1xuICB2YXIgZGF0ZSA9IF9yZWYzLmRhdGU7XG4gIHJldHVybiBkYXRlO1xufTtcblxudmFyIGRhdGVJc1VuYXZhaWxhYmxlID0gZnVuY3Rpb24gZGF0ZUlzVW5hdmFpbGFibGUoX3JlZjQpIHtcbiAgdmFyIGRhdGUgPSBfcmVmNC5kYXRlO1xuICByZXR1cm4gXCJOb3QgYXZhaWxhYmxlLiBcIi5jb25jYXQoZGF0ZSk7XG59O1xuXG52YXIgZGF0ZUlzU2VsZWN0ZWQgPSBmdW5jdGlvbiBkYXRlSXNTZWxlY3RlZChfcmVmNSkge1xuICB2YXIgZGF0ZSA9IF9yZWY1LmRhdGU7XG4gIHJldHVybiBcIlNlbGVjdGVkLiBcIi5jb25jYXQoZGF0ZSk7XG59O1xuXG52YXIgZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZSA9IGZ1bmN0aW9uIGRhdGVJc1NlbGVjdGVkQXNTdGFydERhdGUoX3JlZjYpIHtcbiAgdmFyIGRhdGUgPSBfcmVmNi5kYXRlO1xuICByZXR1cm4gXCJTZWxlY3RlZCBhcyBzdGFydCBkYXRlLiBcIi5jb25jYXQoZGF0ZSk7XG59O1xuXG52YXIgZGF0ZUlzU2VsZWN0ZWRBc0VuZERhdGUgPSBmdW5jdGlvbiBkYXRlSXNTZWxlY3RlZEFzRW5kRGF0ZShfcmVmNykge1xuICB2YXIgZGF0ZSA9IF9yZWY3LmRhdGU7XG4gIHJldHVybiBcIlNlbGVjdGVkIGFzIGVuZCBkYXRlLiBcIi5jb25jYXQoZGF0ZSk7XG59O1xuXG52YXIgX2RlZmF1bHQgPSB7XG4gIGNhbGVuZGFyTGFiZWw6IGNhbGVuZGFyTGFiZWwsXG4gIHJvbGVEZXNjcmlwdGlvbjogcm9sZURlc2NyaXB0aW9uLFxuICBjbG9zZURhdGVQaWNrZXI6IGNsb3NlRGF0ZVBpY2tlcixcbiAgZm9jdXNTdGFydERhdGU6IGZvY3VzU3RhcnREYXRlLFxuICBjbGVhckRhdGU6IGNsZWFyRGF0ZSxcbiAgY2xlYXJEYXRlczogY2xlYXJEYXRlcyxcbiAganVtcFRvUHJldk1vbnRoOiBqdW1wVG9QcmV2TW9udGgsXG4gIGp1bXBUb05leHRNb250aDoganVtcFRvTmV4dE1vbnRoLFxuICBrZXlib2FyZFNob3J0Y3V0czoga2V5Ym9hcmRTaG9ydGN1dHMsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICBvcGVuVGhpc1BhbmVsOiBvcGVuVGhpc1BhbmVsLFxuICBlbnRlcktleTogZW50ZXJLZXksXG4gIGxlZnRBcnJvd1JpZ2h0QXJyb3c6IGxlZnRBcnJvd1JpZ2h0QXJyb3csXG4gIHVwQXJyb3dEb3duQXJyb3c6IHVwQXJyb3dEb3duQXJyb3csXG4gIHBhZ2VVcFBhZ2VEb3duOiBwYWdlVXBQYWdlRG93bixcbiAgaG9tZUVuZDogaG9tZUVuZCxcbiAgZXNjYXBlOiBlc2NhcGUsXG4gIHF1ZXN0aW9uTWFyazogcXVlc3Rpb25NYXJrLFxuICBzZWxlY3RGb2N1c2VkRGF0ZTogc2VsZWN0Rm9jdXNlZERhdGUsXG4gIG1vdmVGb2N1c0J5T25lRGF5OiBtb3ZlRm9jdXNCeU9uZURheSxcbiAgbW92ZUZvY3VzQnlPbmVXZWVrOiBtb3ZlRm9jdXNCeU9uZVdlZWssXG4gIG1vdmVGb2N1c0J5T25lTW9udGg6IG1vdmVGb2N1c0J5T25lTW9udGgsXG4gIG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWs6IG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWssXG4gIHJldHVybkZvY3VzVG9JbnB1dDogcmV0dXJuRm9jdXNUb0lucHV0LFxuICBrZXlib2FyZEZvcndhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zOiBrZXlib2FyZEZvcndhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zLFxuICBrZXlib2FyZEJhY2t3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9uczoga2V5Ym9hcmRCYWNrd2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnMsXG4gIGNob29zZUF2YWlsYWJsZVN0YXJ0RGF0ZTogY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlLFxuICBjaG9vc2VBdmFpbGFibGVFbmREYXRlOiBjaG9vc2VBdmFpbGFibGVFbmREYXRlLFxuICBkYXRlSXNVbmF2YWlsYWJsZTogZGF0ZUlzVW5hdmFpbGFibGUsXG4gIGRhdGVJc1NlbGVjdGVkOiBkYXRlSXNTZWxlY3RlZCxcbiAgZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZTogZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZSxcbiAgZGF0ZUlzU2VsZWN0ZWRBc0VuZERhdGU6IGRhdGVJc1NlbGVjdGVkQXNFbmREYXRlXG59O1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbnZhciBEYXRlUmFuZ2VQaWNrZXJQaHJhc2VzID0ge1xuICBjYWxlbmRhckxhYmVsOiBjYWxlbmRhckxhYmVsLFxuICByb2xlRGVzY3JpcHRpb246IHJvbGVEZXNjcmlwdGlvbixcbiAgY2xvc2VEYXRlUGlja2VyOiBjbG9zZURhdGVQaWNrZXIsXG4gIGNsZWFyRGF0ZXM6IGNsZWFyRGF0ZXMsXG4gIGZvY3VzU3RhcnREYXRlOiBmb2N1c1N0YXJ0RGF0ZSxcbiAganVtcFRvUHJldk1vbnRoOiBqdW1wVG9QcmV2TW9udGgsXG4gIGp1bXBUb05leHRNb250aDoganVtcFRvTmV4dE1vbnRoLFxuICBrZXlib2FyZFNob3J0Y3V0czoga2V5Ym9hcmRTaG9ydGN1dHMsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICBvcGVuVGhpc1BhbmVsOiBvcGVuVGhpc1BhbmVsLFxuICBlbnRlcktleTogZW50ZXJLZXksXG4gIGxlZnRBcnJvd1JpZ2h0QXJyb3c6IGxlZnRBcnJvd1JpZ2h0QXJyb3csXG4gIHVwQXJyb3dEb3duQXJyb3c6IHVwQXJyb3dEb3duQXJyb3csXG4gIHBhZ2VVcFBhZ2VEb3duOiBwYWdlVXBQYWdlRG93bixcbiAgaG9tZUVuZDogaG9tZUVuZCxcbiAgZXNjYXBlOiBlc2NhcGUsXG4gIHF1ZXN0aW9uTWFyazogcXVlc3Rpb25NYXJrLFxuICBzZWxlY3RGb2N1c2VkRGF0ZTogc2VsZWN0Rm9jdXNlZERhdGUsXG4gIG1vdmVGb2N1c0J5T25lRGF5OiBtb3ZlRm9jdXNCeU9uZURheSxcbiAgbW92ZUZvY3VzQnlPbmVXZWVrOiBtb3ZlRm9jdXNCeU9uZVdlZWssXG4gIG1vdmVGb2N1c0J5T25lTW9udGg6IG1vdmVGb2N1c0J5T25lTW9udGgsXG4gIG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWs6IG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWssXG4gIHJldHVybkZvY3VzVG9JbnB1dDogcmV0dXJuRm9jdXNUb0lucHV0LFxuICBrZXlib2FyZEZvcndhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zOiBrZXlib2FyZEZvcndhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zLFxuICBrZXlib2FyZEJhY2t3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9uczoga2V5Ym9hcmRCYWNrd2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnMsXG4gIGNob29zZUF2YWlsYWJsZVN0YXJ0RGF0ZTogY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlLFxuICBjaG9vc2VBdmFpbGFibGVFbmREYXRlOiBjaG9vc2VBdmFpbGFibGVFbmREYXRlLFxuICBkYXRlSXNVbmF2YWlsYWJsZTogZGF0ZUlzVW5hdmFpbGFibGUsXG4gIGRhdGVJc1NlbGVjdGVkOiBkYXRlSXNTZWxlY3RlZCxcbiAgZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZTogZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZSxcbiAgZGF0ZUlzU2VsZWN0ZWRBc0VuZERhdGU6IGRhdGVJc1NlbGVjdGVkQXNFbmREYXRlXG59O1xuZXhwb3J0cy5EYXRlUmFuZ2VQaWNrZXJQaHJhc2VzID0gRGF0ZVJhbmdlUGlja2VyUGhyYXNlcztcbnZhciBEYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXMgPSB7XG4gIGZvY3VzU3RhcnREYXRlOiBmb2N1c1N0YXJ0RGF0ZSxcbiAgY2xlYXJEYXRlczogY2xlYXJEYXRlcyxcbiAga2V5Ym9hcmRGb3J3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9uczoga2V5Ym9hcmRGb3J3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9ucyxcbiAga2V5Ym9hcmRCYWNrd2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnM6IGtleWJvYXJkQmFja3dhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zXG59O1xuZXhwb3J0cy5EYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXMgPSBEYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXM7XG52YXIgU2luZ2xlRGF0ZVBpY2tlclBocmFzZXMgPSB7XG4gIGNhbGVuZGFyTGFiZWw6IGNhbGVuZGFyTGFiZWwsXG4gIHJvbGVEZXNjcmlwdGlvbjogcm9sZURlc2NyaXB0aW9uLFxuICBjbG9zZURhdGVQaWNrZXI6IGNsb3NlRGF0ZVBpY2tlcixcbiAgY2xlYXJEYXRlOiBjbGVhckRhdGUsXG4gIGp1bXBUb1ByZXZNb250aDoganVtcFRvUHJldk1vbnRoLFxuICBqdW1wVG9OZXh0TW9udGg6IGp1bXBUb05leHRNb250aCxcbiAga2V5Ym9hcmRTaG9ydGN1dHM6IGtleWJvYXJkU2hvcnRjdXRzLFxuICBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgb3BlblRoaXNQYW5lbDogb3BlblRoaXNQYW5lbCxcbiAgZW50ZXJLZXk6IGVudGVyS2V5LFxuICBsZWZ0QXJyb3dSaWdodEFycm93OiBsZWZ0QXJyb3dSaWdodEFycm93LFxuICB1cEFycm93RG93bkFycm93OiB1cEFycm93RG93bkFycm93LFxuICBwYWdlVXBQYWdlRG93bjogcGFnZVVwUGFnZURvd24sXG4gIGhvbWVFbmQ6IGhvbWVFbmQsXG4gIGVzY2FwZTogZXNjYXBlLFxuICBxdWVzdGlvbk1hcms6IHF1ZXN0aW9uTWFyayxcbiAgc2VsZWN0Rm9jdXNlZERhdGU6IHNlbGVjdEZvY3VzZWREYXRlLFxuICBtb3ZlRm9jdXNCeU9uZURheTogbW92ZUZvY3VzQnlPbmVEYXksXG4gIG1vdmVGb2N1c0J5T25lV2VlazogbW92ZUZvY3VzQnlPbmVXZWVrLFxuICBtb3ZlRm9jdXNCeU9uZU1vbnRoOiBtb3ZlRm9jdXNCeU9uZU1vbnRoLFxuICBtb3ZlRm9jdXN0b1N0YXJ0QW5kRW5kT2ZXZWVrOiBtb3ZlRm9jdXN0b1N0YXJ0QW5kRW5kT2ZXZWVrLFxuICByZXR1cm5Gb2N1c1RvSW5wdXQ6IHJldHVybkZvY3VzVG9JbnB1dCxcbiAga2V5Ym9hcmRGb3J3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9uczoga2V5Ym9hcmRGb3J3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9ucyxcbiAga2V5Ym9hcmRCYWNrd2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnM6IGtleWJvYXJkQmFja3dhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zLFxuICBjaG9vc2VBdmFpbGFibGVEYXRlOiBjaG9vc2VBdmFpbGFibGVEYXRlLFxuICBkYXRlSXNVbmF2YWlsYWJsZTogZGF0ZUlzVW5hdmFpbGFibGUsXG4gIGRhdGVJc1NlbGVjdGVkOiBkYXRlSXNTZWxlY3RlZFxufTtcbmV4cG9ydHMuU2luZ2xlRGF0ZVBpY2tlclBocmFzZXMgPSBTaW5nbGVEYXRlUGlja2VyUGhyYXNlcztcbnZhciBTaW5nbGVEYXRlUGlja2VySW5wdXRQaHJhc2VzID0ge1xuICBjbGVhckRhdGU6IGNsZWFyRGF0ZSxcbiAga2V5Ym9hcmRGb3J3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9uczoga2V5Ym9hcmRGb3J3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9ucyxcbiAga2V5Ym9hcmRCYWNrd2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnM6IGtleWJvYXJkQmFja3dhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zXG59O1xuZXhwb3J0cy5TaW5nbGVEYXRlUGlja2VySW5wdXRQaHJhc2VzID0gU2luZ2xlRGF0ZVBpY2tlcklucHV0UGhyYXNlcztcbnZhciBEYXlQaWNrZXJQaHJhc2VzID0ge1xuICBjYWxlbmRhckxhYmVsOiBjYWxlbmRhckxhYmVsLFxuICByb2xlRGVzY3JpcHRpb246IHJvbGVEZXNjcmlwdGlvbixcbiAganVtcFRvUHJldk1vbnRoOiBqdW1wVG9QcmV2TW9udGgsXG4gIGp1bXBUb05leHRNb250aDoganVtcFRvTmV4dE1vbnRoLFxuICBrZXlib2FyZFNob3J0Y3V0czoga2V5Ym9hcmRTaG9ydGN1dHMsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICBvcGVuVGhpc1BhbmVsOiBvcGVuVGhpc1BhbmVsLFxuICBlbnRlcktleTogZW50ZXJLZXksXG4gIGxlZnRBcnJvd1JpZ2h0QXJyb3c6IGxlZnRBcnJvd1JpZ2h0QXJyb3csXG4gIHVwQXJyb3dEb3duQXJyb3c6IHVwQXJyb3dEb3duQXJyb3csXG4gIHBhZ2VVcFBhZ2VEb3duOiBwYWdlVXBQYWdlRG93bixcbiAgaG9tZUVuZDogaG9tZUVuZCxcbiAgZXNjYXBlOiBlc2NhcGUsXG4gIHF1ZXN0aW9uTWFyazogcXVlc3Rpb25NYXJrLFxuICBzZWxlY3RGb2N1c2VkRGF0ZTogc2VsZWN0Rm9jdXNlZERhdGUsXG4gIG1vdmVGb2N1c0J5T25lRGF5OiBtb3ZlRm9jdXNCeU9uZURheSxcbiAgbW92ZUZvY3VzQnlPbmVXZWVrOiBtb3ZlRm9jdXNCeU9uZVdlZWssXG4gIG1vdmVGb2N1c0J5T25lTW9udGg6IG1vdmVGb2N1c0J5T25lTW9udGgsXG4gIG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWs6IG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWssXG4gIHJldHVybkZvY3VzVG9JbnB1dDogcmV0dXJuRm9jdXNUb0lucHV0LFxuICBjaG9vc2VBdmFpbGFibGVTdGFydERhdGU6IGNob29zZUF2YWlsYWJsZVN0YXJ0RGF0ZSxcbiAgY2hvb3NlQXZhaWxhYmxlRW5kRGF0ZTogY2hvb3NlQXZhaWxhYmxlRW5kRGF0ZSxcbiAgY2hvb3NlQXZhaWxhYmxlRGF0ZTogY2hvb3NlQXZhaWxhYmxlRGF0ZSxcbiAgZGF0ZUlzVW5hdmFpbGFibGU6IGRhdGVJc1VuYXZhaWxhYmxlLFxuICBkYXRlSXNTZWxlY3RlZDogZGF0ZUlzU2VsZWN0ZWQsXG4gIGRhdGVJc1NlbGVjdGVkQXNTdGFydERhdGU6IGRhdGVJc1NlbGVjdGVkQXNTdGFydERhdGUsXG4gIGRhdGVJc1NlbGVjdGVkQXNFbmREYXRlOiBkYXRlSXNTZWxlY3RlZEFzRW5kRGF0ZVxufTtcbmV4cG9ydHMuRGF5UGlja2VyUGhyYXNlcyA9IERheVBpY2tlclBocmFzZXM7XG52YXIgRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNQaHJhc2VzID0ge1xuICBrZXlib2FyZFNob3J0Y3V0czoga2V5Ym9hcmRTaG9ydGN1dHMsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICBvcGVuVGhpc1BhbmVsOiBvcGVuVGhpc1BhbmVsLFxuICBlbnRlcktleTogZW50ZXJLZXksXG4gIGxlZnRBcnJvd1JpZ2h0QXJyb3c6IGxlZnRBcnJvd1JpZ2h0QXJyb3csXG4gIHVwQXJyb3dEb3duQXJyb3c6IHVwQXJyb3dEb3duQXJyb3csXG4gIHBhZ2VVcFBhZ2VEb3duOiBwYWdlVXBQYWdlRG93bixcbiAgaG9tZUVuZDogaG9tZUVuZCxcbiAgZXNjYXBlOiBlc2NhcGUsXG4gIHF1ZXN0aW9uTWFyazogcXVlc3Rpb25NYXJrLFxuICBzZWxlY3RGb2N1c2VkRGF0ZTogc2VsZWN0Rm9jdXNlZERhdGUsXG4gIG1vdmVGb2N1c0J5T25lRGF5OiBtb3ZlRm9jdXNCeU9uZURheSxcbiAgbW92ZUZvY3VzQnlPbmVXZWVrOiBtb3ZlRm9jdXNCeU9uZVdlZWssXG4gIG1vdmVGb2N1c0J5T25lTW9udGg6IG1vdmVGb2N1c0J5T25lTW9udGgsXG4gIG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWs6IG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWssXG4gIHJldHVybkZvY3VzVG9JbnB1dDogcmV0dXJuRm9jdXNUb0lucHV0XG59O1xuZXhwb3J0cy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c1BocmFzZXMgPSBEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c1BocmFzZXM7XG52YXIgRGF5UGlja2VyTmF2aWdhdGlvblBocmFzZXMgPSB7XG4gIGp1bXBUb1ByZXZNb250aDoganVtcFRvUHJldk1vbnRoLFxuICBqdW1wVG9OZXh0TW9udGg6IGp1bXBUb05leHRNb250aFxufTtcbmV4cG9ydHMuRGF5UGlja2VyTmF2aWdhdGlvblBocmFzZXMgPSBEYXlQaWNrZXJOYXZpZ2F0aW9uUGhyYXNlcztcbnZhciBDYWxlbmRhckRheVBocmFzZXMgPSB7XG4gIGNob29zZUF2YWlsYWJsZURhdGU6IGNob29zZUF2YWlsYWJsZURhdGUsXG4gIGRhdGVJc1VuYXZhaWxhYmxlOiBkYXRlSXNVbmF2YWlsYWJsZSxcbiAgZGF0ZUlzU2VsZWN0ZWQ6IGRhdGVJc1NlbGVjdGVkLFxuICBkYXRlSXNTZWxlY3RlZEFzU3RhcnREYXRlOiBkYXRlSXNTZWxlY3RlZEFzU3RhcnREYXRlLFxuICBkYXRlSXNTZWxlY3RlZEFzRW5kRGF0ZTogZGF0ZUlzU2VsZWN0ZWRBc0VuZERhdGVcbn07XG5leHBvcnRzLkNhbGVuZGFyRGF5UGhyYXNlcyA9IENhbGVuZGFyRGF5UGhyYXNlczsiLCJmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzTG9vc2U7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBnZXRQaHJhc2VQcm9wVHlwZXM7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxuZnVuY3Rpb24gZ2V0UGhyYXNlUHJvcFR5cGVzKGRlZmF1bHRQaHJhc2VzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhkZWZhdWx0UGhyYXNlcykucmVkdWNlKGZ1bmN0aW9uIChwaHJhc2VzLCBrZXkpIHtcbiAgICByZXR1cm4gKDAsIF9vYmplY3RTcHJlYWQ0W1wiZGVmYXVsdFwiXSkoe30sIHBocmFzZXMsICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIGtleSwgX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2ZUeXBlKFtfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsIF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsIF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGVdKSkpO1xuICB9LCB7fSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHNoYWxsb3dFcXVhbDtcblxudmFyIF9vYmplY3RJcyA9IHJlcXVpcmUoJ29iamVjdC1pcycpO1xuXG52YXIgX29iamVjdElzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdElzKTtcblxudmFyIF9oYXMgPSByZXF1aXJlKCdoYXMnKTtcblxudmFyIF9oYXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvMTQ0MzI4ZmU4MTcxOWU5MTZiOTQ2ZTIyNjYwNDc5ZTMxNTYxYmIwYi9wYWNrYWdlcy9zaGFyZWQvc2hhbGxvd0VxdWFsLmpzI0wzNi1MNjhcbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmICgoMCwgX29iamVjdElzMlsnZGVmYXVsdCddKShvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKCFvYmpBIHx8ICFvYmpCIHx8ICh0eXBlb2Ygb2JqQSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqQSkpICE9PSAnb2JqZWN0JyB8fCAodHlwZW9mIG9iakIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iakIpKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAga2V5c0Euc29ydCgpO1xuICBrZXlzQi5zb3J0KCk7XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICghKDAsIF9oYXMyWydkZWZhdWx0J10pKG9iakIsIGtleXNBW2ldKSB8fCAhKDAsIF9vYmplY3RJczJbJ2RlZmF1bHQnXSkob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlwYm1SbGVDNXFjeUpkTENKdVlXMWxjeUk2V3lKemFHRnNiRzkzUlhGMVlXd2lMQ0p2WW1wQklpd2liMkpxUWlJc0ltdGxlWE5CSWl3aVQySnFaV04wSWl3aWEyVjVjeUlzSW10bGVYTkNJaXdpYkdWdVozUm9JaXdpYzI5eWRDSXNJbWtpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN08zRkNRVWwzUWtFc1dUczdRVUZLZUVJN096czdRVUZEUVRzN096czdPMEZCUlVFN1FVRkRaU3hUUVVGVFFTeFpRVUZVTEVOQlFYTkNReXhKUVVGMFFpeEZRVUUwUWtNc1NVRkJOVUlzUlVGQmEwTTdRVUZETDBNc1RVRkJTU3d5UWtGQlIwUXNTVUZCU0N4RlFVRlRReXhKUVVGVUxFTkJRVW9zUlVGQmIwSTdRVUZEYkVJc1YwRkJUeXhKUVVGUU8wRkJRMFE3TzBGQlJVUXNUVUZCU1N4RFFVRkRSQ3hKUVVGRUxFbEJRVk1zUTBGQlEwTXNTVUZCVml4SlFVRnJRaXhSUVVGUFJDeEpRVUZRTEhsRFFVRlBRU3hKUVVGUUxFOUJRV2RDTEZGQlFXeERMRWxCUVRoRExGRkJRVTlETEVsQlFWQXNlVU5CUVU5QkxFbEJRVkFzVDBGQlowSXNVVUZCYkVVc1JVRkJORVU3UVVGRE1VVXNWMEZCVHl4TFFVRlFPMEZCUTBRN08wRkJSVVFzVFVGQlRVTXNVVUZCVVVNc1QwRkJUME1zU1VGQlVDeERRVUZaU2l4SlFVRmFMRU5CUVdRN1FVRkRRU3hOUVVGTlN5eFJRVUZSUml4UFFVRlBReXhKUVVGUUxFTkJRVmxJTEVsQlFWb3NRMEZCWkRzN1FVRkZRU3hOUVVGSlF5eE5RVUZOU1N4TlFVRk9MRXRCUVdsQ1JDeE5RVUZOUXl4TlFVRXpRaXhGUVVGdFF6dEJRVU5xUXl4WFFVRlBMRXRCUVZBN1FVRkRSRHM3UVVGRlJFb3NVVUZCVFVzc1NVRkJUanRCUVVOQlJpeFJRVUZOUlN4SlFVRk9PenRCUVVWQk8wRkJRMEVzVDBGQlN5eEpRVUZKUXl4SlFVRkpMRU5CUVdJc1JVRkJaMEpCTEVsQlFVbE9MRTFCUVUxSkxFMUJRVEZDTEVWQlFXdERSU3hMUVVGTExFTkJRWFpETEVWQlFUQkRPMEZCUTNoRExGRkJRVWtzUTBGQlF5eHpRa0ZCU1ZBc1NVRkJTaXhGUVVGVlF5eE5RVUZOVFN4RFFVRk9MRU5CUVZZc1EwRkJSQ3hKUVVGM1FpeERRVUZETERKQ1FVRkhVaXhMUVVGTFJTeE5RVUZOVFN4RFFVRk9MRU5CUVV3c1EwRkJTQ3hGUVVGdFFsQXNTMEZCUzBNc1RVRkJUVTBzUTBGQlRpeERRVUZNTEVOQlFXNUNMRU5CUVRkQ0xFVkJRV2xGTzBGQlF5OUVMR0ZCUVU4c1MwRkJVRHRCUVVORU8wRkJRMFk3TzBGQlJVUXNVMEZCVHl4SlFVRlFPMEZCUTBRaUxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2FYTWdabkp2YlNBbmIySnFaV04wTFdsekp6dGNibWx0Y0c5eWRDQm9ZWE1nWm5KdmJTQW5hR0Z6Snp0Y2JseHVMeThnWVdSaGNIUmxaQ0JtY205dElHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOW1ZV05sWW05dmF5OXlaV0ZqZEM5aWJHOWlMekUwTkRNeU9HWmxPREUzTVRsbE9URTJZamswTm1VeU1qWTJNRFEzT1dVek1UVTJNV0ppTUdJdmNHRmphMkZuWlhNdmMyaGhjbVZrTDNOb1lXeHNiM2RGY1hWaGJDNXFjeU5NTXpZdFREWTRYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQnphR0ZzYkc5M1JYRjFZV3dvYjJKcVFTd2diMkpxUWlrZ2UxeHVJQ0JwWmlBb2FYTW9iMkpxUVN3Z2IySnFRaWtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2doYjJKcVFTQjhmQ0FoYjJKcVFpQjhmQ0IwZVhCbGIyWWdiMkpxUVNBaFBUMGdKMjlpYW1WamRDY2dmSHdnZEhsd1pXOW1JRzlpYWtJZ0lUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnYTJWNWMwRWdQU0JQWW1wbFkzUXVhMlY1Y3lodlltcEJLVHRjYmlBZ1kyOXVjM1FnYTJWNWMwSWdQU0JQWW1wbFkzUXVhMlY1Y3lodlltcENLVHRjYmx4dUlDQnBaaUFvYTJWNWMwRXViR1Z1WjNSb0lDRTlQU0JyWlhselFpNXNaVzVuZEdncElIdGNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgxY2JseHVJQ0JyWlhselFTNXpiM0owS0NrN1hHNGdJR3RsZVhOQ0xuTnZjblFvS1R0Y2JseHVJQ0F2THlCVVpYTjBJR1p2Y2lCQkozTWdhMlY1Y3lCa2FXWm1aWEpsYm5RZ1puSnZiU0JDTGx4dUlDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR3RsZVhOQkxteGxibWQwYURzZ2FTQXJQU0F4S1NCN1hHNGdJQ0FnYVdZZ0tDRm9ZWE1vYjJKcVFpd2dhMlY1YzBGYmFWMHBJSHg4SUNGcGN5aHZZbXBCVzJ0bGVYTkJXMmxkWFN3Z2IySnFRbHRyWlhselFWdHBYVjBwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlIUnlkV1U3WEc1OVhHNGlYWDA9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHM7IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMud2l0aFN0eWxlc1Byb3BUeXBlcyA9IGV4cG9ydHMuY3NzID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5leHBvcnRzLndpdGhTdHlsZXMgPSB3aXRoU3R5bGVzO1xuXG52YXIgX29iamVjdCA9IHJlcXVpcmUoJ29iamVjdC5hc3NpZ24nKTtcblxudmFyIF9vYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9ob2lzdE5vblJlYWN0U3RhdGljcyA9IHJlcXVpcmUoJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJyk7XG5cbnZhciBfaG9pc3ROb25SZWFjdFN0YXRpY3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaG9pc3ROb25SZWFjdFN0YXRpY3MpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoJ3JlYWN0LXdpdGgtZGlyZWN0aW9uL2Rpc3QvY29uc3RhbnRzJyk7XG5cbnZhciBfYnJjYXN0ID0gcmVxdWlyZSgncmVhY3Qtd2l0aC1kaXJlY3Rpb24vZGlzdC9wcm9wdHlwZXMvYnJjYXN0Jyk7XG5cbnZhciBfYnJjYXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2JyY2FzdCk7XG5cbnZhciBfVGhlbWVkU3R5bGVTaGVldCA9IHJlcXVpcmUoJy4vVGhlbWVkU3R5bGVTaGVldCcpO1xuXG52YXIgX1RoZW1lZFN0eWxlU2hlZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVGhlbWVkU3R5bGVTaGVldCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfSAvKiBlc2xpbnQgcmVhY3QvZm9yYmlkLWZvcmVpZ24tcHJvcC10eXBlczogb2ZmICovXG5cbi8vIEFkZCBzb21lIG5hbWVkIGV4cG9ydHMgdG8gYXNzaXN0IGluIHVwZ3JhZGluZyBhbmQgZm9yIGNvbnZlbmllbmNlXG52YXIgY3NzID0gZXhwb3J0cy5jc3MgPSBfVGhlbWVkU3R5bGVTaGVldDJbJ2RlZmF1bHQnXS5yZXNvbHZlTFRSO1xudmFyIHdpdGhTdHlsZXNQcm9wVHlwZXMgPSBleHBvcnRzLndpdGhTdHlsZXNQcm9wVHlwZXMgPSB7XG4gIHN0eWxlczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vYmplY3QuaXNSZXF1aXJlZCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9mb3JiaWQtcHJvcC10eXBlc1xuICB0aGVtZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vYmplY3QuaXNSZXF1aXJlZCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9mb3JiaWQtcHJvcC10eXBlc1xuICBjc3M6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYy5pc1JlcXVpcmVkXG59O1xuXG52YXIgRU1QVFlfU1RZTEVTID0ge307XG52YXIgRU1QVFlfU1RZTEVTX0ZOID0gZnVuY3Rpb24gRU1QVFlfU1RZTEVTX0ZOKCkge1xuICByZXR1cm4gRU1QVFlfU1RZTEVTO1xufTtcblxudmFyIFNUQVJUX01BUksgPSAncmVhY3Qtd2l0aC1zdHlsZXMuY3JlYXRlU3R5bGVzLnN0YXJ0JztcbnZhciBFTkRfTUFSSyA9ICdyZWFjdC13aXRoLXN0eWxlcy5jcmVhdGVTdHlsZXMuZW5kJztcblxuZnVuY3Rpb24gYmFzZUNsYXNzKHB1cmVDb21wb25lbnQpIHtcbiAgaWYgKHB1cmVDb21wb25lbnQpIHtcbiAgICBpZiAoIV9yZWFjdDJbJ2RlZmF1bHQnXS5QdXJlQ29tcG9uZW50KSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoJ3dpdGhTdHlsZXMoKSBwdXJlQ29tcG9uZW50IG9wdGlvbiByZXF1aXJlcyBSZWFjdCAxNS4zLjAgb3IgbGF0ZXInKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLlB1cmVDb21wb25lbnQ7XG4gIH1cblxuICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudDtcbn1cblxudmFyIGNvbnRleHRUeXBlcyA9IF9kZWZpbmVQcm9wZXJ0eSh7fSwgX2NvbnN0YW50cy5DSEFOTkVMLCBfYnJjYXN0MlsnZGVmYXVsdCddKTtcblxudmFyIGRlZmF1bHREaXJlY3Rpb24gPSBfY29uc3RhbnRzLkRJUkVDVElPTlMuTFRSO1xuXG5mdW5jdGlvbiB3aXRoU3R5bGVzKHN0eWxlRm4pIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgX3JlZiRzdHlsZXNQcm9wTmFtZSA9IF9yZWYuc3R5bGVzUHJvcE5hbWUsXG4gICAgICBzdHlsZXNQcm9wTmFtZSA9IF9yZWYkc3R5bGVzUHJvcE5hbWUgPT09IHVuZGVmaW5lZCA/ICdzdHlsZXMnIDogX3JlZiRzdHlsZXNQcm9wTmFtZSxcbiAgICAgIF9yZWYkdGhlbWVQcm9wTmFtZSA9IF9yZWYudGhlbWVQcm9wTmFtZSxcbiAgICAgIHRoZW1lUHJvcE5hbWUgPSBfcmVmJHRoZW1lUHJvcE5hbWUgPT09IHVuZGVmaW5lZCA/ICd0aGVtZScgOiBfcmVmJHRoZW1lUHJvcE5hbWUsXG4gICAgICBfcmVmJGNzc1Byb3BOYW1lID0gX3JlZi5jc3NQcm9wTmFtZSxcbiAgICAgIGNzc1Byb3BOYW1lID0gX3JlZiRjc3NQcm9wTmFtZSA9PT0gdW5kZWZpbmVkID8gJ2NzcycgOiBfcmVmJGNzc1Byb3BOYW1lLFxuICAgICAgX3JlZiRmbHVzaEJlZm9yZSA9IF9yZWYuZmx1c2hCZWZvcmUsXG4gICAgICBmbHVzaEJlZm9yZSA9IF9yZWYkZmx1c2hCZWZvcmUgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiRmbHVzaEJlZm9yZSxcbiAgICAgIF9yZWYkcHVyZUNvbXBvbmVudCA9IF9yZWYucHVyZUNvbXBvbmVudCxcbiAgICAgIHB1cmVDb21wb25lbnQgPSBfcmVmJHB1cmVDb21wb25lbnQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiRwdXJlQ29tcG9uZW50O1xuXG4gIHZhciBzdHlsZURlZkxUUiA9IHZvaWQgMDtcbiAgdmFyIHN0eWxlRGVmUlRMID0gdm9pZCAwO1xuICB2YXIgY3VycmVudFRoZW1lTFRSID0gdm9pZCAwO1xuICB2YXIgY3VycmVudFRoZW1lUlRMID0gdm9pZCAwO1xuICB2YXIgQmFzZUNsYXNzID0gYmFzZUNsYXNzKHB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIGdldFJlc29sdmVNZXRob2QoZGlyZWN0aW9uKSB7XG4gICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5ESVJFQ1RJT05TLkxUUiA/IF9UaGVtZWRTdHlsZVNoZWV0MlsnZGVmYXVsdCddLnJlc29sdmVMVFIgOiBfVGhlbWVkU3R5bGVTaGVldDJbJ2RlZmF1bHQnXS5yZXNvbHZlUlRMO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudFRoZW1lKGRpcmVjdGlvbikge1xuICAgIHJldHVybiBkaXJlY3Rpb24gPT09IF9jb25zdGFudHMuRElSRUNUSU9OUy5MVFIgPyBjdXJyZW50VGhlbWVMVFIgOiBjdXJyZW50VGhlbWVSVEw7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTdHlsZURlZihkaXJlY3Rpb24sIHdyYXBwZWRDb21wb25lbnROYW1lKSB7XG4gICAgdmFyIGN1cnJlbnRUaGVtZSA9IGdldEN1cnJlbnRUaGVtZShkaXJlY3Rpb24pO1xuICAgIHZhciBzdHlsZURlZiA9IGRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5ESVJFQ1RJT05TLkxUUiA/IHN0eWxlRGVmTFRSIDogc3R5bGVEZWZSVEw7XG5cbiAgICB2YXIgcmVnaXN0ZXJlZFRoZW1lID0gX1RoZW1lZFN0eWxlU2hlZXQyWydkZWZhdWx0J10uZ2V0KCk7XG5cbiAgICAvLyBSZXR1cm4gdGhlIGV4aXN0aW5nIHN0eWxlcyBpZiB0aGV5J3ZlIGFscmVhZHkgYmVlbiBkZWZpbmVkXG4gICAgLy8gYW5kIGlmIHRoZSB0aGVtZSB1c2VkIHRvIGNyZWF0ZSB0aGVtIGNvcnJlc3BvbmRzIHRvIHRoZSB0aGVtZVxuICAgIC8vIHJlZ2lzdGVyZWQgd2l0aCBUaGVtZWRTdHlsZVNoZWV0XG4gICAgaWYgKHN0eWxlRGVmICYmIGN1cnJlbnRUaGVtZSA9PT0gcmVnaXN0ZXJlZFRoZW1lKSB7XG4gICAgICByZXR1cm4gc3R5bGVEZWY7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHBlcmZvcm1hbmNlICE9PSAndW5kZWZpbmVkJyAmJiBwZXJmb3JtYW5jZS5tYXJrICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHBlcmZvcm1hbmNlLmNsZWFyTWFya3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBlcmZvcm1hbmNlLmNsZWFyTWFya3MoU1RBUlRfTUFSSyk7XG4gICAgICBwZXJmb3JtYW5jZS5tYXJrKFNUQVJUX01BUkspO1xuICAgIH1cblxuICAgIHZhciBpc1JUTCA9IGRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5ESVJFQ1RJT05TLlJUTDtcblxuICAgIGlmIChpc1JUTCkge1xuICAgICAgc3R5bGVEZWZSVEwgPSBzdHlsZUZuID8gX1RoZW1lZFN0eWxlU2hlZXQyWydkZWZhdWx0J10uY3JlYXRlUlRMKHN0eWxlRm4pIDogRU1QVFlfU1RZTEVTX0ZOO1xuXG4gICAgICBjdXJyZW50VGhlbWVSVEwgPSByZWdpc3RlcmVkVGhlbWU7XG4gICAgICBzdHlsZURlZiA9IHN0eWxlRGVmUlRMO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZURlZkxUUiA9IHN0eWxlRm4gPyBfVGhlbWVkU3R5bGVTaGVldDJbJ2RlZmF1bHQnXS5jcmVhdGVMVFIoc3R5bGVGbikgOiBFTVBUWV9TVFlMRVNfRk47XG5cbiAgICAgIGN1cnJlbnRUaGVtZUxUUiA9IHJlZ2lzdGVyZWRUaGVtZTtcbiAgICAgIHN0eWxlRGVmID0gc3R5bGVEZWZMVFI7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHBlcmZvcm1hbmNlICE9PSAndW5kZWZpbmVkJyAmJiBwZXJmb3JtYW5jZS5tYXJrICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHBlcmZvcm1hbmNlLmNsZWFyTWFya3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBlcmZvcm1hbmNlLmNsZWFyTWFya3MoRU5EX01BUkspO1xuICAgICAgcGVyZm9ybWFuY2UubWFyayhFTkRfTUFSSyk7XG5cbiAgICAgIHZhciBtZWFzdXJlTmFtZSA9ICdcXHVEODNEXFx1REM2OVxcdTIwMERcXHVEODNDXFx1REZBOCB3aXRoU3R5bGVzKCcgKyBTdHJpbmcod3JhcHBlZENvbXBvbmVudE5hbWUpICsgJykgW2NyZWF0ZSBzdHlsZXNdJztcblxuICAgICAgcGVyZm9ybWFuY2UubWVhc3VyZShtZWFzdXJlTmFtZSwgU1RBUlRfTUFSSywgRU5EX01BUkspO1xuICAgICAgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyhtZWFzdXJlTmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlRGVmO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoZGlyZWN0aW9uLCB3cmFwcGVkQ29tcG9uZW50TmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXNvbHZlTWV0aG9kOiBnZXRSZXNvbHZlTWV0aG9kKGRpcmVjdGlvbiksXG4gICAgICBzdHlsZURlZjogZ2V0U3R5bGVEZWYoZGlyZWN0aW9uLCB3cmFwcGVkQ29tcG9uZW50TmFtZSlcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiB3aXRoU3R5bGVzSE9DKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gICAgICAvLyBOT1RFOiBVc2UgYSBjbGFzcyBoZXJlIHNvIGNvbXBvbmVudHMgYXJlIHJlZi1hYmxlIGlmIG5lZWQgYmU6XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJlZmVyLXN0YXRlbGVzcy1mdW5jdGlvblxuXG4gICAgICB2YXIgV2l0aFN0eWxlcyA9IGZ1bmN0aW9uIChfQmFzZUNsYXNzKSB7XG4gICAgICAgIF9pbmhlcml0cyhXaXRoU3R5bGVzLCBfQmFzZUNsYXNzKTtcblxuICAgICAgICBmdW5jdGlvbiBXaXRoU3R5bGVzKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdpdGhTdHlsZXMpO1xuXG4gICAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFdpdGhTdHlsZXMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihXaXRoU3R5bGVzKSkuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IF90aGlzLmNvbnRleHRbX2NvbnN0YW50cy5DSEFOTkVMXSA/IF90aGlzLmNvbnRleHRbX2NvbnN0YW50cy5DSEFOTkVMXS5nZXRTdGF0ZSgpIDogZGVmYXVsdERpcmVjdGlvbjtcblxuICAgICAgICAgIF90aGlzLnN0YXRlID0gZ2V0U3RhdGUoZGlyZWN0aW9uLCB3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG4gICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgX2NyZWF0ZUNsYXNzKFdpdGhTdHlsZXMsIFt7XG4gICAgICAgICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dFtfY29uc3RhbnRzLkNIQU5ORUxdKSB7XG4gICAgICAgICAgICAgICAgLy8gc3Vic2NyaWJlIHRvIGZ1dHVyZSBkaXJlY3Rpb24gY2hhbmdlc1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbFVuc3Vic2NyaWJlID0gdGhpcy5jb250ZXh0W19jb25zdGFudHMuQ0hBTk5FTF0uc3Vic2NyaWJlKGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZShnZXRTdGF0ZShkaXJlY3Rpb24sIHdyYXBwZWRDb21wb25lbnROYW1lKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudERpZE1vdW50O1xuICAgICAgICAgIH0oKVxuICAgICAgICB9LCB7XG4gICAgICAgICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuY2hhbm5lbFVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFubmVsVW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50V2lsbFVubW91bnQ7XG4gICAgICAgICAgfSgpXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICAgIHZhciBfcmVmMjtcblxuICAgICAgICAgICAgICAvLyBBcyBzb21lIGNvbXBvbmVudHMgd2lsbCBkZXBlbmQgb24gcHJldmlvdXMgc3R5bGVzIGluXG4gICAgICAgICAgICAgIC8vIHRoZSBjb21wb25lbnQgdHJlZSwgd2UgcHJvdmlkZSB0aGUgb3B0aW9uIG9mIGZsdXNoaW5nIHRoZVxuICAgICAgICAgICAgICAvLyBidWZmZXJlZCBzdHlsZXMgKGkuZS4gdG8gYSBzdHlsZSB0YWcpICoqYmVmb3JlKiogdGhlIHJlbmRlcmluZ1xuICAgICAgICAgICAgICAvLyBjeWNsZSBiZWdpbnMuXG4gICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgIC8vIFRoZSBpbnRlcmZhY2VzIHByb3ZpZGUgdGhlIG9wdGlvbmFsIFwiZmx1c2hcIiBtZXRob2Qgd2hpY2hcbiAgICAgICAgICAgICAgLy8gaXMgcnVuIGluIHR1cm4gYnkgVGhlbWVkU3R5bGVTaGVldC5mbHVzaC5cbiAgICAgICAgICAgICAgaWYgKGZsdXNoQmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgX1RoZW1lZFN0eWxlU2hlZXQyWydkZWZhdWx0J10uZmx1c2goKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgcmVzb2x2ZU1ldGhvZCA9IF9zdGF0ZS5yZXNvbHZlTWV0aG9kLFxuICAgICAgICAgICAgICAgICAgc3R5bGVEZWYgPSBfc3RhdGUuc3R5bGVEZWY7XG5cblxuICAgICAgICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIChfcmVmMiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZjIsIHRoZW1lUHJvcE5hbWUsIF9UaGVtZWRTdHlsZVNoZWV0MlsnZGVmYXVsdCddLmdldCgpKSwgX2RlZmluZVByb3BlcnR5KF9yZWYyLCBzdHlsZXNQcm9wTmFtZSwgc3R5bGVEZWYoKSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMiwgY3NzUHJvcE5hbWUsIHJlc29sdmVNZXRob2QpLCBfcmVmMikpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcjtcbiAgICAgICAgICB9KClcbiAgICAgICAgfV0pO1xuXG4gICAgICAgIHJldHVybiBXaXRoU3R5bGVzO1xuICAgICAgfShCYXNlQ2xhc3MpO1xuXG4gICAgICBXaXRoU3R5bGVzLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgV2l0aFN0eWxlcy5kaXNwbGF5TmFtZSA9ICd3aXRoU3R5bGVzKCcgKyBTdHJpbmcod3JhcHBlZENvbXBvbmVudE5hbWUpICsgJyknO1xuICAgICAgV2l0aFN0eWxlcy5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG4gICAgICBpZiAoV3JhcHBlZENvbXBvbmVudC5wcm9wVHlwZXMpIHtcbiAgICAgICAgV2l0aFN0eWxlcy5wcm9wVHlwZXMgPSAoMCwgX29iamVjdDJbJ2RlZmF1bHQnXSkoe30sIFdyYXBwZWRDb21wb25lbnQucHJvcFR5cGVzKTtcbiAgICAgICAgZGVsZXRlIFdpdGhTdHlsZXMucHJvcFR5cGVzW3N0eWxlc1Byb3BOYW1lXTtcbiAgICAgICAgZGVsZXRlIFdpdGhTdHlsZXMucHJvcFR5cGVzW3RoZW1lUHJvcE5hbWVdO1xuICAgICAgICBkZWxldGUgV2l0aFN0eWxlcy5wcm9wVHlwZXNbY3NzUHJvcE5hbWVdO1xuICAgICAgfVxuICAgICAgaWYgKFdyYXBwZWRDb21wb25lbnQuZGVmYXVsdFByb3BzKSB7XG4gICAgICAgIFdpdGhTdHlsZXMuZGVmYXVsdFByb3BzID0gKDAsIF9vYmplY3QyWydkZWZhdWx0J10pKHt9LCBXcmFwcGVkQ29tcG9uZW50LmRlZmF1bHRQcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoMCwgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzMlsnZGVmYXVsdCddKShXaXRoU3R5bGVzLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gd2l0aFN0eWxlc0hPQztcbiAgfSgpO1xufSIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsInZhciBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcbnZhciBtb21lbnRWYWxpZGF0aW9uV3JhcHBlciA9IHJlcXVpcmUoJy4vbW9tZW50LXZhbGlkYXRpb24td3JhcHBlcicpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL2NvcmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgbW9tZW50T2JqIDogY29yZS5jcmVhdGVNb21lbnRDaGVja2VyKFxuICAgICdvYmplY3QnLFxuICAgIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnO1xuICAgIH0sXG4gICAgZnVuY3Rpb24gaXNWYWxpZCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG1vbWVudFZhbGlkYXRpb25XcmFwcGVyLmlzVmFsaWRNb21lbnQodmFsdWUpO1xuICAgIH0sXG4gICAgJ01vbWVudCdcbiAgKSxcblxuICBtb21lbnRTdHJpbmcgOiBjb3JlLmNyZWF0ZU1vbWVudENoZWNrZXIoXG4gICAgJ3N0cmluZycsXG4gICAgZnVuY3Rpb24oc3RyKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZyc7XG4gICAgfSxcbiAgICBmdW5jdGlvbiBpc1ZhbGlkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbW9tZW50VmFsaWRhdGlvbldyYXBwZXIuaXNWYWxpZE1vbWVudChtb21lbnQodmFsdWUpKTtcbiAgICB9LFxuICAgICdNb21lbnQnXG4gICksXG5cbiAgbW9tZW50RHVyYXRpb25PYmogOiBjb3JlLmNyZWF0ZU1vbWVudENoZWNrZXIoXG4gICAgJ29iamVjdCcsXG4gICAgZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCc7XG4gICAgfSxcbiAgICBmdW5jdGlvbiBpc1ZhbGlkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbW9tZW50LmlzRHVyYXRpb24odmFsdWUpO1xuICAgIH0sXG4gICAgJ0R1cmF0aW9uJ1xuICApLFxuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJ29iamVjdC1rZXlzJyk7XG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgnZm9vJykgPT09ICdzeW1ib2wnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGNvbmNhdCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQ7XG52YXIgb3JpZ0RlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIChmbikge1xuXHRyZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmIHRvU3RyLmNhbGwoZm4pID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufTtcblxudmFyIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBvYmogPSB7fTtcblx0dHJ5IHtcblx0XHRvcmlnRGVmaW5lUHJvcGVydHkob2JqLCAneCcsIHsgZW51bWVyYWJsZTogZmFsc2UsIHZhbHVlOiBvYmogfSk7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzLCBuby1yZXN0cmljdGVkLXN5bnRheFxuXHRcdGZvciAodmFyIF8gaW4gb2JqKSB7IC8vIGpzY3M6aWdub3JlIGRpc2FsbG93VW51c2VkVmFyaWFibGVzXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiBvYmoueCA9PT0gb2JqO1xuXHR9IGNhdGNoIChlKSB7IC8qIHRoaXMgaXMgSUUgOC4gKi9cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG52YXIgc3VwcG9ydHNEZXNjcmlwdG9ycyA9IG9yaWdEZWZpbmVQcm9wZXJ0eSAmJiBhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkKCk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIHZhbHVlLCBwcmVkaWNhdGUpIHtcblx0aWYgKG5hbWUgaW4gb2JqZWN0ICYmICghaXNGdW5jdGlvbihwcmVkaWNhdGUpIHx8ICFwcmVkaWNhdGUoKSkpIHtcblx0XHRyZXR1cm47XG5cdH1cblx0aWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcblx0XHRvcmlnRGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0b2JqZWN0W25hbWVdID0gdmFsdWU7XG5cdH1cbn07XG5cbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iamVjdCwgbWFwKSB7XG5cdHZhciBwcmVkaWNhdGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB7fTtcblx0dmFyIHByb3BzID0ga2V5cyhtYXApO1xuXHRpZiAoaGFzU3ltYm9scykge1xuXHRcdHByb3BzID0gY29uY2F0LmNhbGwocHJvcHMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobWFwKSk7XG5cdH1cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcHNbaV0sIG1hcFtwcm9wc1tpXV0sIHByZWRpY2F0ZXNbcHJvcHNbaV1dKTtcblx0fVxufTtcblxuZGVmaW5lUHJvcGVydGllcy5zdXBwb3J0c0Rlc2NyaXB0b3JzID0gISFzdXBwb3J0c0Rlc2NyaXB0b3JzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnRpZXM7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbm9mbGlwO1xudmFyIE5PRkxJUCA9ICcvKiBAbm9mbGlwICovJzsgLy8gQXBwZW5kcyBhIG5vZmxpcCBjb21tZW50IHRvIGEgc3R5bGUgcnVsZSBpbiBvcmRlciB0byBwcmV2ZW50IGl0IGZyb20gYmVpbmcgYXV0b21hdGljYWxseVxuLy8gZmxpcHBlZCBpbiBSVEwgY29udGV4dHMuIFRoaXMgc2hvdWxkIGJlIHVzZWQgb25seSBpbiBzaXR1YXRpb25zIHdoZXJlIHRoZSBzdHlsZSBtdXN0IHJlbWFpblxuLy8gdW5mbGlwcGVkIHJlZ2FyZGxlc3Mgb2YgZGlyZWN0aW9uIGNvbnRleHQuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2tlbnRjZG9kZHMvcnRsLWNzcy1qcyN1c2FnZVxuXG5mdW5jdGlvbiBub2ZsaXAodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHJldHVybiBcIlwiLmNvbmNhdCh2YWx1ZSwgXCJweCBcIikuY29uY2F0KE5PRkxJUCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm4gXCJcIi5jb25jYXQodmFsdWUsIFwiIFwiKS5jb25jYXQoTk9GTElQKTtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignbm9mbGlwIGV4cGVjdHMgYSBzdHJpbmcgb3IgYSBudW1iZXInKTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCB8fCBpbXBsZW1lbnRhdGlvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbnZhciBfZGVmYXVsdCA9IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mKF9jb25zdGFudHMuV0VFS0RBWVMpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbnZhciBfZGVmYXVsdCA9IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mKFtfY29uc3RhbnRzLk9QRU5fRE9XTiwgX2NvbnN0YW50cy5PUEVOX1VQXSk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGlzU2FtZURheTtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG5mdW5jdGlvbiBpc1NhbWVEYXkoYSwgYikge1xuICBpZiAoIV9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGEpIHx8ICFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChiKSkgcmV0dXJuIGZhbHNlOyAvLyBDb21wYXJlIGxlYXN0IHNpZ25pZmljYW50LCBtb3N0IGxpa2VseSB0byBjaGFuZ2UgdW5pdHMgZmlyc3RcbiAgLy8gTW9tZW50J3MgaXNTYW1lIGNsb25lcyBtb21lbnQgaW5wdXRzIGFuZCBpcyBhIHRhZCBzbG93XG5cbiAgcmV0dXJuIGEuZGF0ZSgpID09PSBiLmRhdGUoKSAmJiBhLm1vbnRoKCkgPT09IGIubW9udGgoKSAmJiBhLnllYXIoKSA9PT0gYi55ZWFyKCk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB0b01vbWVudE9iamVjdDtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbmZ1bmN0aW9uIHRvTW9tZW50T2JqZWN0KGRhdGVTdHJpbmcsIGN1c3RvbUZvcm1hdCkge1xuICB2YXIgZGF0ZUZvcm1hdHMgPSBjdXN0b21Gb3JtYXQgPyBbY3VzdG9tRm9ybWF0LCBfY29uc3RhbnRzLkRJU1BMQVlfRk9STUFULCBfY29uc3RhbnRzLklTT19GT1JNQVRdIDogW19jb25zdGFudHMuRElTUExBWV9GT1JNQVQsIF9jb25zdGFudHMuSVNPX0ZPUk1BVF07XG4gIHZhciBkYXRlID0gKDAsIF9tb21lbnRbXCJkZWZhdWx0XCJdKShkYXRlU3RyaW5nLCBkYXRlRm9ybWF0cywgdHJ1ZSk7XG4gIHJldHVybiBkYXRlLmlzVmFsaWQoKSA/IGRhdGUuaG91cigxMikgOiBudWxsO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbnZhciBfZGVmYXVsdCA9IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mKFtfY29uc3RhbnRzLkhPUklaT05UQUxfT1JJRU5UQVRJT04sIF9jb25zdGFudHMuVkVSVElDQUxfT1JJRU5UQVRJT04sIF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRV0pO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBpc1RvdWNoRGV2aWNlO1xuZnVuY3Rpb24gaXNUb3VjaERldmljZSgpIHtcbiAgcmV0dXJuICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIHdpbmRvdy5Eb2N1bWVudFRvdWNoKSkgfHwgISEodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyB8fCBuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cykpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxudmFyIF9kZWZhdWx0ID0gX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2YoW19jb25zdGFudHMuSUNPTl9CRUZPUkVfUE9TSVRJT04sIF9jb25zdGFudHMuSUNPTl9BRlRFUl9QT1NJVElPTl0pO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gaXNJbmNsdXNpdmVseUFmdGVyRGF5O1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfaXNCZWZvcmVEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzQmVmb3JlRGF5XCIpKTtcblxuZnVuY3Rpb24gaXNJbmNsdXNpdmVseUFmdGVyRGF5KGEsIGIpIHtcbiAgaWYgKCFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChhKSB8fCAhX21vbWVudFtcImRlZmF1bHRcIl0uaXNNb21lbnQoYikpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICEoMCwgX2lzQmVmb3JlRGF5W1wiZGVmYXVsdFwiXSkoYSwgYik7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIHJlbmRlcjogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlXG59O1xuXG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAgICckJHR5cGVvZic6IHRydWUsXG4gICAgY29tcGFyZTogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tSZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgICBpZiAoUmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgICAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICAgIH1cbiAgICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgICAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB0b0lTT0RhdGVTdHJpbmc7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF90b01vbWVudE9iamVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdG9Nb21lbnRPYmplY3RcIikpO1xuXG5mdW5jdGlvbiB0b0lTT0RhdGVTdHJpbmcoZGF0ZSwgY3VycmVudEZvcm1hdCkge1xuICB2YXIgZGF0ZU9iaiA9IF9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGRhdGUpID8gZGF0ZSA6ICgwLCBfdG9Nb21lbnRPYmplY3RbXCJkZWZhdWx0XCJdKShkYXRlLCBjdXJyZW50Rm9ybWF0KTtcbiAgaWYgKCFkYXRlT2JqKSByZXR1cm4gbnVsbDsgLy8gVGVtcGxhdGUgc3RyaW5ncyBjb21waWxlZCBpbiBzdHJpY3QgbW9kZSB1c2VzIGNvbmNhdCwgd2hpY2ggaXMgc2xvdy4gU2luY2VcbiAgLy8gdGhpcyBjb2RlIGlzIGluIGEgaG90IHBhdGggYW5kIHdlIHdhbnQgaXQgdG8gYmUgYXMgZmFzdCBhcyBwb3NzaWJsZSwgd2VcbiAgLy8gd2FudCB0byB1c2Ugb2xkLWZhc2hpb25lZCArLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXRlbXBsYXRlXG5cbiAgcmV0dXJuIGRhdGVPYmoueWVhcigpICsgJy0nICsgU3RyaW5nKGRhdGVPYmoubW9udGgoKSArIDEpLnBhZFN0YXJ0KDIsICcwJykgKyAnLScgKyBTdHJpbmcoZGF0ZU9iai5kYXRlKCkpLnBhZFN0YXJ0KDIsICcwJyk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxudmFyIF9kZWZhdWx0ID0gX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2ZUeXBlKFtfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLCBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZihbX2NvbnN0YW50cy5TVEFSVF9EQVRFLCBfY29uc3RhbnRzLkVORF9EQVRFXSldKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG52YXIgX2RlZmF1bHQgPSBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZihbX2NvbnN0YW50cy5JTkZPX1BPU0lUSU9OX1RPUCwgX2NvbnN0YW50cy5JTkZPX1BPU0lUSU9OX0JPVFRPTSwgX2NvbnN0YW50cy5JTkZPX1BPU0lUSU9OX0JFRk9SRSwgX2NvbnN0YW50cy5JTkZPX1BPU0lUSU9OX0FGVEVSXSk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBpc0JlZm9yZURheTtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG5mdW5jdGlvbiBpc0JlZm9yZURheShhLCBiKSB7XG4gIGlmICghX21vbWVudFtcImRlZmF1bHRcIl0uaXNNb21lbnQoYSkgfHwgIV9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGIpKSByZXR1cm4gZmFsc2U7XG4gIHZhciBhWWVhciA9IGEueWVhcigpO1xuICB2YXIgYU1vbnRoID0gYS5tb250aCgpO1xuICB2YXIgYlllYXIgPSBiLnllYXIoKTtcbiAgdmFyIGJNb250aCA9IGIubW9udGgoKTtcbiAgdmFyIGlzU2FtZVllYXIgPSBhWWVhciA9PT0gYlllYXI7XG4gIHZhciBpc1NhbWVNb250aCA9IGFNb250aCA9PT0gYk1vbnRoO1xuICBpZiAoaXNTYW1lWWVhciAmJiBpc1NhbWVNb250aCkgcmV0dXJuIGEuZGF0ZSgpIDwgYi5kYXRlKCk7XG4gIGlmIChpc1NhbWVZZWFyKSByZXR1cm4gYU1vbnRoIDwgYk1vbnRoO1xuICByZXR1cm4gYVllYXIgPCBiWWVhcjtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIENsb3NlQnV0dG9uID0gZnVuY3Rpb24gQ2xvc2VCdXR0b24ocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInN2Z1wiLCBwcm9wcywgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIGQ6IFwiTTExLjUzLjQ3YS43NS43NSAwIDAgMC0xLjA2MSAwbC00LjQ3IDQuNDdMMS41MjkuNDdBLjc1Ljc1IDAgMSAwIC40NjggMS41MzFsNC40NyA0LjQ3LTQuNDcgNC40N2EuNzUuNzUgMCAxIDAgMS4wNjEgMS4wNjFsNC40Ny00LjQ3IDQuNDcgNC40N2EuNzUuNzUgMCAxIDAgMS4wNjEtMS4wNjFsLTQuNDctNC40NyA0LjQ3LTQuNDdhLjc1Ljc1IDAgMCAwIDAtMS4wNjF6XCJcbiAgfSkpO1xufTtcblxuQ2xvc2VCdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICBmb2N1c2FibGU6IFwiZmFsc2VcIixcbiAgdmlld0JveDogXCIwIDAgMTIgMTJcIlxufTtcbnZhciBfZGVmYXVsdCA9IENsb3NlQnV0dG9uO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmFuZCkoW19wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmluc3RhbmNlT2YoU2V0KSwgZnVuY3Rpb24gbW9kaWZpZXJzKHByb3BzLCBwcm9wTmFtZSkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgcmVzdFtfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICB2YXIgZmlyc3RFcnJvcjtcbiAgKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShwcm9wVmFsdWUpLnNvbWUoZnVuY3Rpb24gKHYsIGkpIHtcbiAgICB2YXIgX1Byb3BUeXBlcyRzdHJpbmc7XG5cbiAgICB2YXIgZmFrZVByb3BOYW1lID0gXCJcIi5jb25jYXQocHJvcE5hbWUsIFwiOiBpbmRleCBcIikuY29uY2F0KGkpO1xuICAgIGZpcnN0RXJyb3IgPSAoX1Byb3BUeXBlcyRzdHJpbmcgPSBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcpLmlzUmVxdWlyZWQuYXBwbHkoX1Byb3BUeXBlcyRzdHJpbmcsIFsoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHt9LCBmYWtlUHJvcE5hbWUsIHYpLCBmYWtlUHJvcE5hbWVdLmNvbmNhdChyZXN0KSk7XG4gICAgcmV0dXJuIGZpcnN0RXJyb3IgIT0gbnVsbDtcbiAgfSk7XG4gIHJldHVybiBmaXJzdEVycm9yID09IG51bGwgPyBudWxsIDogZmlyc3RFcnJvcjtcbn1dLCAnTW9kaWZpZXJzIChTZXQgb2YgU3RyaW5ncyknKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJ2YXIgQ0FOX1VTRV9ET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vLyBBZGFwdGVkIGZyb20gTW9kZXJuaXpyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL2FjYjNmMGQ5L2ZlYXR1cmUtZGV0ZWN0cy9kb20vcGFzc2l2ZWV2ZW50bGlzdGVuZXJzLmpzI0wyNi1MMzdcbmZ1bmN0aW9uIHRlc3RQYXNzaXZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICghQ0FOX1VTRV9ET00pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIXdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8ICF3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciB8fCAhT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHN1cHBvcnRzUGFzc2l2ZU9wdGlvbiA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnZXR0ZXItcmV0dXJuXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZU9wdGlvbiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2V0O1xuICAgICAgfSgpXG4gICAgfSk7XG4gICAgdmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3RQYXNzaXZlRXZlbnRTdXBwb3J0Jywgbm9vcCwgb3B0cyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3RQYXNzaXZlRXZlbnRTdXBwb3J0Jywgbm9vcCwgb3B0cyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBkbyBub3RoaW5nXG4gIH1cblxuICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlT3B0aW9uO1xufVxuXG52YXIgbWVtb2l6ZWQgPSB2b2lkIDA7XG5cbmZ1bmN0aW9uIGNhblVzZVBhc3NpdmVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKG1lbW9pemVkID09PSB1bmRlZmluZWQpIHtcbiAgICBtZW1vaXplZCA9IHRlc3RQYXNzaXZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50T3B0aW9ucyhldmVudE9wdGlvbnMpIHtcbiAgaWYgKCFldmVudE9wdGlvbnMpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCFjYW5Vc2VQYXNzaXZlRXZlbnRMaXN0ZW5lcnMoKSkge1xuICAgIC8vIElmIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIHBhc3NpdmUgb3B0aW9uLCB0aGVuIGl0IGlzIGV4cGVjdGluZ1xuICAgIC8vIGEgYm9vbGVhbiBmb3IgdGhlIG9wdGlvbnMgYXJndW1lbnQgdG8gc3BlY2lmeSB3aGV0aGVyIGl0IHNob3VsZCB1c2VcbiAgICAvLyBjYXB0dXJlIG9yIG5vdC4gSW4gbW9yZSBtb2Rlcm4gYnJvd3NlcnMsIHRoaXMgaXMgcGFzc2VkIHZpYSB0aGUgYGNhcHR1cmVgXG4gICAgLy8gb3B0aW9uLCBzbyBsZXQncyBqdXN0IGhvaXN0IHRoYXQgdmFsdWUgdXAuXG4gICAgcmV0dXJuICEhZXZlbnRPcHRpb25zLmNhcHR1cmU7XG4gIH1cblxuICByZXR1cm4gZXZlbnRPcHRpb25zO1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogR2VuZXJhdGUgYSB1bmlxdWUga2V5IGZvciBhbnkgc2V0IG9mIGV2ZW50IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gZXZlbnRPcHRpb25zS2V5KG5vcm1hbGl6ZWRFdmVudE9wdGlvbnMpIHtcbiAgaWYgKCFub3JtYWxpemVkRXZlbnRPcHRpb25zKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvLyBJZiB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHBhc3NpdmUgZXZlbnQgbGlzdGVuZXJzLCB0aGUgbm9ybWFsaXplZFxuICAvLyBldmVudCBvcHRpb25zIHdpbGwgYmUgYSBib29sZWFuLlxuICBpZiAobm9ybWFsaXplZEV2ZW50T3B0aW9ucyA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiAxMDA7XG4gIH1cblxuICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgYnJvd3NlciBzdXBwb3J0cyBwYXNzaXZlIGV2ZW50IGxpc3RlbmVycywgc28gd2UgZXhwZWN0XG4gIC8vIHRoZSBldmVudCBvcHRpb25zIHRvIGJlIGFuIG9iamVjdCB3aXRoIHBvc3NpYmxlIHByb3BlcnRpZXMgb2YgY2FwdHVyZSxcbiAgLy8gcGFzc2l2ZSwgYW5kIG9uY2UuXG4gIC8vXG4gIC8vIFdlIHdhbnQgdG8gY29uc2lzdGVudGx5IHJldHVybiB0aGUgc2FtZSB2YWx1ZSwgcmVnYXJkbGVzcyBvZiB0aGUgb3JkZXIgb2ZcbiAgLy8gdGhlc2UgcHJvcGVydGllcywgc28gbGV0J3MgdXNlIGJpbmFyeSBtYXRocyB0byBhc3NpZ24gZWFjaCBwcm9wZXJ0eSB0byBhXG4gIC8vIGJpdCwgYW5kIHRoZW4gYWRkIHRob3NlIHRvZ2V0aGVyICh3aXRoIGFuIG9mZnNldCB0byBhY2NvdW50IGZvciB0aGVcbiAgLy8gYm9vbGVhbnMgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGlzIGZ1bmN0aW9uKS5cbiAgdmFyIGNhcHR1cmUgPSBub3JtYWxpemVkRXZlbnRPcHRpb25zLmNhcHR1cmUgPDwgMDtcbiAgdmFyIHBhc3NpdmUgPSBub3JtYWxpemVkRXZlbnRPcHRpb25zLnBhc3NpdmUgPDwgMTtcbiAgdmFyIG9uY2UgPSBub3JtYWxpemVkRXZlbnRPcHRpb25zLm9uY2UgPDwgMjtcbiAgcmV0dXJuIGNhcHR1cmUgKyBwYXNzaXZlICsgb25jZTtcbn1cblxuZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dEV2ZW50SGFuZGxlcnMoZXZlbnRIYW5kbGVycykge1xuICBpZiAoZXZlbnRIYW5kbGVycy5oYW5kbGVycyA9PT0gZXZlbnRIYW5kbGVycy5uZXh0SGFuZGxlcnMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBldmVudEhhbmRsZXJzLm5leHRIYW5kbGVycyA9IGV2ZW50SGFuZGxlcnMuaGFuZGxlcnMuc2xpY2UoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBUYXJnZXRFdmVudEhhbmRsZXJzKHRhcmdldCkge1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy5ldmVudHMgPSB7fTtcbn1cblxuVGFyZ2V0RXZlbnRIYW5kbGVycy5wcm90b3R5cGUuZ2V0RXZlbnRIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZ2V0RXZlbnRIYW5kbGVycyhldmVudE5hbWUsIG9wdGlvbnMpIHtcbiAgICB2YXIga2V5ID0gU3RyaW5nKGV2ZW50TmFtZSkgKyAnICcgKyBTdHJpbmcoZXZlbnRPcHRpb25zS2V5KG9wdGlvbnMpKTtcblxuICAgIGlmICghdGhpcy5ldmVudHNba2V5XSkge1xuICAgICAgdGhpcy5ldmVudHNba2V5XSA9IHtcbiAgICAgICAgaGFuZGxlcnM6IFtdLFxuICAgICAgICBoYW5kbGVFdmVudDogdW5kZWZpbmVkXG4gICAgICB9O1xuICAgICAgdGhpcy5ldmVudHNba2V5XS5uZXh0SGFuZGxlcnMgPSB0aGlzLmV2ZW50c1trZXldLmhhbmRsZXJzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmV2ZW50c1trZXldO1xuICB9XG5cbiAgcmV0dXJuIGdldEV2ZW50SGFuZGxlcnM7XG59KCk7XG5cblRhcmdldEV2ZW50SGFuZGxlcnMucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBoYW5kbGVFdmVudChldmVudE5hbWUsIG9wdGlvbnMsIGV2ZW50KSB7XG4gICAgdmFyIGV2ZW50SGFuZGxlcnMgPSB0aGlzLmdldEV2ZW50SGFuZGxlcnMoZXZlbnROYW1lLCBvcHRpb25zKTtcbiAgICBldmVudEhhbmRsZXJzLmhhbmRsZXJzID0gZXZlbnRIYW5kbGVycy5uZXh0SGFuZGxlcnM7XG4gICAgZXZlbnRIYW5kbGVycy5oYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGZvciBwcmVzZW5jZSBoZXJlIGJlY2F1c2UgYSBoYW5kbGVyIGZ1bmN0aW9uIG1heVxuICAgICAgICAvLyBjYXVzZSBsYXRlciBoYW5kbGVycyB0byBnZXQgcmVtb3ZlZC4gVGhpcyBjYW4gaGFwcGVuIGlmIHlvdSBmb3JcbiAgICAgICAgLy8gaW5zdGFuY2UgaGF2ZSBhIHdheXBvaW50IHRoYXQgdW5tb3VudHMgYW5vdGhlciB3YXlwb2ludCBhcyBwYXJ0IG9mIGFuXG4gICAgICAgIC8vIG9uRW50ZXIvb25MZWF2ZSBoYW5kbGVyLlxuICAgICAgICBoYW5kbGVyKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBoYW5kbGVFdmVudDtcbn0oKTtcblxuVGFyZ2V0RXZlbnRIYW5kbGVycy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBhZGQoZXZlbnROYW1lLCBsaXN0ZW5lciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBvcHRpb25zIGhhcyBhbHJlYWR5IGJlZW4gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50LlxuICAgIHZhciBldmVudEhhbmRsZXJzID0gdGhpcy5nZXRFdmVudEhhbmRsZXJzKGV2ZW50TmFtZSwgb3B0aW9ucyk7XG5cbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0RXZlbnRIYW5kbGVycyhldmVudEhhbmRsZXJzKTtcblxuICAgIGlmIChldmVudEhhbmRsZXJzLm5leHRIYW5kbGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGV2ZW50SGFuZGxlcnMuaGFuZGxlRXZlbnQgPSB0aGlzLmhhbmRsZUV2ZW50LmJpbmQodGhpcywgZXZlbnROYW1lLCBvcHRpb25zKTtcblxuICAgICAgdGhpcy50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGV2ZW50SGFuZGxlcnMuaGFuZGxlRXZlbnQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGV2ZW50SGFuZGxlcnMubmV4dEhhbmRsZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgdmFyIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dEV2ZW50SGFuZGxlcnMoZXZlbnRIYW5kbGVycyk7XG4gICAgICAgIHZhciBpbmRleCA9IGV2ZW50SGFuZGxlcnMubmV4dEhhbmRsZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgICBldmVudEhhbmRsZXJzLm5leHRIYW5kbGVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgIGlmIChldmVudEhhbmRsZXJzLm5leHRIYW5kbGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAvLyBBbGwgZXZlbnQgaGFuZGxlcnMgaGF2ZSBiZWVuIHJlbW92ZWQsIHNvIHdlIHdhbnQgdG8gcmVtb3ZlIHRoZSBldmVudFxuICAgICAgICAgIC8vIGxpc3RlbmVyIGZyb20gdGhlIHRhcmdldCBub2RlLlxuXG4gICAgICAgICAgaWYgKF90aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgLy8gVGhlcmUgY2FuIGJlIGEgcmFjZSBjb25kaXRpb24gd2hlcmUgdGhlIHRhcmdldCBtYXkgbm8gbG9uZ2VyIGV4aXN0XG4gICAgICAgICAgICAvLyB3aGVuIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkLCBlLmcuIHdoZW4gYSBSZWFjdCBjb21wb25lbnQgaXNcbiAgICAgICAgICAgIC8vIHVubW91bnRpbmcuIEd1YXJkaW5nIGFnYWluc3QgdGhpcyBwcmV2ZW50cyB0aGUgZm9sbG93aW5nIGVycm9yOlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgQ2Fubm90IHJlYWQgcHJvcGVydHkgJ3JlbW92ZUV2ZW50TGlzdGVuZXInIG9mIHVuZGVmaW5lZFxuICAgICAgICAgICAgX3RoaXMudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBldmVudEhhbmRsZXJzLmhhbmRsZUV2ZW50LCBvcHRpb25zKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBldmVudEhhbmRsZXJzLmhhbmRsZUV2ZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgICB9KCk7XG4gICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xuICB9XG5cbiAgcmV0dXJuIGFkZDtcbn0oKTtcblxudmFyIEVWRU5UX0hBTkRMRVJTX0tFWSA9ICdfX2NvbnNvbGlkYXRlZF9ldmVudHNfaGFuZGxlcnNfXyc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0XG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKHRhcmdldCwgZXZlbnROYW1lLCBsaXN0ZW5lciwgb3B0aW9ucykge1xuICBpZiAoIXRhcmdldFtFVkVOVF9IQU5ETEVSU19LRVldKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdGFyZ2V0W0VWRU5UX0hBTkRMRVJTX0tFWV0gPSBuZXcgVGFyZ2V0RXZlbnRIYW5kbGVycyh0YXJnZXQpO1xuICB9XG4gIHZhciBub3JtYWxpemVkRXZlbnRPcHRpb25zID0gbm9ybWFsaXplRXZlbnRPcHRpb25zKG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0W0VWRU5UX0hBTkRMRVJTX0tFWV0uYWRkKGV2ZW50TmFtZSwgbGlzdGVuZXIsIG5vcm1hbGl6ZWRFdmVudE9wdGlvbnMpO1xufVxuXG5leHBvcnQgeyBhZGRFdmVudExpc3RlbmVyIH07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHRvSVNPTW9udGhTdHJpbmc7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF90b01vbWVudE9iamVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdG9Nb21lbnRPYmplY3RcIikpO1xuXG5mdW5jdGlvbiB0b0lTT01vbnRoU3RyaW5nKGRhdGUsIGN1cnJlbnRGb3JtYXQpIHtcbiAgdmFyIGRhdGVPYmogPSBfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChkYXRlKSA/IGRhdGUgOiAoMCwgX3RvTW9tZW50T2JqZWN0W1wiZGVmYXVsdFwiXSkoZGF0ZSwgY3VycmVudEZvcm1hdCk7XG4gIGlmICghZGF0ZU9iaikgcmV0dXJuIG51bGw7IC8vIFRlbXBsYXRlIHN0cmluZ3MgY29tcGlsZWQgaW4gc3RyaWN0IG1vZGUgdXNlcyBjb25jYXQsIHdoaWNoIGlzIHNsb3cuIFNpbmNlXG4gIC8vIHRoaXMgY29kZSBpcyBpbiBhIGhvdCBwYXRoIGFuZCB3ZSB3YW50IGl0IHRvIGJlIGFzIGZhc3QgYXMgcG9zc2libGUsIHdlXG4gIC8vIHdhbnQgdG8gdXNlIG9sZC1mYXNoaW9uZWQgKy5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci10ZW1wbGF0ZVxuXG4gIHJldHVybiBkYXRlT2JqLnllYXIoKSArICctJyArIFN0cmluZyhkYXRlT2JqLm1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpO1xufSIsIid1c2Ugc3RyaWN0JztcblxuLyogZ2xvYmFsc1xuXHRTZXQsXG5cdE1hcCxcblx0V2Vha1NldCxcblx0V2Vha01hcCxcblxuXHRQcm9taXNlLFxuXG5cdFN5bWJvbCxcblx0UHJveHksXG5cblx0QXRvbWljcyxcblx0U2hhcmVkQXJyYXlCdWZmZXIsXG5cblx0QXJyYXlCdWZmZXIsXG5cdERhdGFWaWV3LFxuXHRVaW50OEFycmF5LFxuXHRGbG9hdDMyQXJyYXksXG5cdEZsb2F0NjRBcnJheSxcblx0SW50OEFycmF5LFxuXHRJbnQxNkFycmF5LFxuXHRJbnQzMkFycmF5LFxuXHRVaW50OENsYW1wZWRBcnJheSxcblx0VWludDE2QXJyYXksXG5cdFVpbnQzMkFycmF5LFxuKi9cblxudmFyIHVuZGVmaW5lZDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xuXG52YXIgVGhyb3dUeXBlRXJyb3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG5cdD8gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYXJndW1lbnRzLCAnY2FsbGVlJykuZ2V0OyB9KCkpXG5cdDogZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCk7IH07XG5cbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJztcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Ll9fcHJvdG9fXzsgfTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b1xuXG52YXIgZ2VuZXJhdG9yOyAvLyA9IGZ1bmN0aW9uICogKCkge307XG52YXIgZ2VuZXJhdG9yRnVuY3Rpb24gPSBnZW5lcmF0b3IgPyBnZXRQcm90byhnZW5lcmF0b3IpIDogdW5kZWZpbmVkO1xudmFyIGFzeW5jRm47IC8vIGFzeW5jIGZ1bmN0aW9uKCkge307XG52YXIgYXN5bmNGdW5jdGlvbiA9IGFzeW5jRm4gPyBhc3luY0ZuLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkO1xudmFyIGFzeW5jR2VuOyAvLyBhc3luYyBmdW5jdGlvbiAqICgpIHt9O1xudmFyIGFzeW5jR2VuRnVuY3Rpb24gPSBhc3luY0dlbiA/IGdldFByb3RvKGFzeW5jR2VuKSA6IHVuZGVmaW5lZDtcbnZhciBhc3luY0dlbkl0ZXJhdG9yID0gYXN5bmNHZW4gPyBhc3luY0dlbigpIDogdW5kZWZpbmVkO1xuXG52YXIgVHlwZWRBcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKFVpbnQ4QXJyYXkpO1xuXG52YXIgSU5UUklOU0lDUyA9IHtcblx0JyQgJUFycmF5JSc6IEFycmF5LFxuXHQnJCAlQXJyYXlCdWZmZXIlJzogdHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFycmF5QnVmZmVyLFxuXHQnJCAlQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogdHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFycmF5QnVmZmVyLnByb3RvdHlwZSxcblx0JyQgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCckICVBcnJheVByb3RvdHlwZSUnOiBBcnJheS5wcm90b3R5cGUsXG5cdCckICVBcnJheVByb3RvX2VudHJpZXMlJzogQXJyYXkucHJvdG90eXBlLmVudHJpZXMsXG5cdCckICVBcnJheVByb3RvX2ZvckVhY2glJzogQXJyYXkucHJvdG90eXBlLmZvckVhY2gsXG5cdCckICVBcnJheVByb3RvX2tleXMlJzogQXJyYXkucHJvdG90eXBlLmtleXMsXG5cdCckICVBcnJheVByb3RvX3ZhbHVlcyUnOiBBcnJheS5wcm90b3R5cGUudmFsdWVzLFxuXHQnJCAlQXN5bmNGcm9tU3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IHVuZGVmaW5lZCxcblx0JyQgJUFzeW5jRnVuY3Rpb24lJzogYXN5bmNGdW5jdGlvbixcblx0JyQgJUFzeW5jRnVuY3Rpb25Qcm90b3R5cGUlJzogYXN5bmNGdW5jdGlvbiA/IGFzeW5jRnVuY3Rpb24ucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJCAlQXN5bmNHZW5lcmF0b3IlJzogYXN5bmNHZW4gPyBnZXRQcm90byhhc3luY0dlbkl0ZXJhdG9yKSA6IHVuZGVmaW5lZCxcblx0JyQgJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJzogYXN5bmNHZW5GdW5jdGlvbixcblx0JyQgJUFzeW5jR2VuZXJhdG9yUHJvdG90eXBlJSc6IGFzeW5jR2VuRnVuY3Rpb24gPyBhc3luY0dlbkZ1bmN0aW9uLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcblx0JyQgJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogYXN5bmNHZW5JdGVyYXRvciAmJiBoYXNTeW1ib2xzICYmIFN5bWJvbC5hc3luY0l0ZXJhdG9yID8gYXN5bmNHZW5JdGVyYXRvcltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSA6IHVuZGVmaW5lZCxcblx0JyQgJUF0b21pY3MlJzogdHlwZW9mIEF0b21pY3MgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXRvbWljcyxcblx0JyQgJUJvb2xlYW4lJzogQm9vbGVhbixcblx0JyQgJUJvb2xlYW5Qcm90b3R5cGUlJzogQm9vbGVhbi5wcm90b3R5cGUsXG5cdCckICVEYXRhVmlldyUnOiB0eXBlb2YgRGF0YVZpZXcgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRGF0YVZpZXcsXG5cdCckICVEYXRhVmlld1Byb3RvdHlwZSUnOiB0eXBlb2YgRGF0YVZpZXcgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRGF0YVZpZXcucHJvdG90eXBlLFxuXHQnJCAlRGF0ZSUnOiBEYXRlLFxuXHQnJCAlRGF0ZVByb3RvdHlwZSUnOiBEYXRlLnByb3RvdHlwZSxcblx0JyQgJWRlY29kZVVSSSUnOiBkZWNvZGVVUkksXG5cdCckICVkZWNvZGVVUklDb21wb25lbnQlJzogZGVjb2RlVVJJQ29tcG9uZW50LFxuXHQnJCAlZW5jb2RlVVJJJSc6IGVuY29kZVVSSSxcblx0JyQgJWVuY29kZVVSSUNvbXBvbmVudCUnOiBlbmNvZGVVUklDb21wb25lbnQsXG5cdCckICVFcnJvciUnOiBFcnJvcixcblx0JyQgJUVycm9yUHJvdG90eXBlJSc6IEVycm9yLnByb3RvdHlwZSxcblx0JyQgJWV2YWwlJzogZXZhbCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXG5cdCckICVFdmFsRXJyb3IlJzogRXZhbEVycm9yLFxuXHQnJCAlRXZhbEVycm9yUHJvdG90eXBlJSc6IEV2YWxFcnJvci5wcm90b3R5cGUsXG5cdCckICVGbG9hdDMyQXJyYXklJzogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDMyQXJyYXksXG5cdCckICVGbG9hdDMyQXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDMyQXJyYXkucHJvdG90eXBlLFxuXHQnJCAlRmxvYXQ2NEFycmF5JSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LFxuXHQnJCAlRmxvYXQ2NEFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LnByb3RvdHlwZSxcblx0JyQgJUZ1bmN0aW9uJSc6IEZ1bmN0aW9uLFxuXHQnJCAlRnVuY3Rpb25Qcm90b3R5cGUlJzogRnVuY3Rpb24ucHJvdG90eXBlLFxuXHQnJCAlR2VuZXJhdG9yJSc6IGdlbmVyYXRvciA/IGdldFByb3RvKGdlbmVyYXRvcigpKSA6IHVuZGVmaW5lZCxcblx0JyQgJUdlbmVyYXRvckZ1bmN0aW9uJSc6IGdlbmVyYXRvckZ1bmN0aW9uLFxuXHQnJCAlR2VuZXJhdG9yUHJvdG90eXBlJSc6IGdlbmVyYXRvckZ1bmN0aW9uID8gZ2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJCAlSW50OEFycmF5JSc6IHR5cGVvZiBJbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LFxuXHQnJCAlSW50OEFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBJbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LnByb3RvdHlwZSxcblx0JyQgJUludDE2QXJyYXklJzogdHlwZW9mIEludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MTZBcnJheSxcblx0JyQgJUludDE2QXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIEludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LnByb3RvdHlwZSxcblx0JyQgJUludDMyQXJyYXklJzogdHlwZW9mIEludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MzJBcnJheSxcblx0JyQgJUludDMyQXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIEludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MzJBcnJheS5wcm90b3R5cGUsXG5cdCckICVpc0Zpbml0ZSUnOiBpc0Zpbml0ZSxcblx0JyQgJWlzTmFOJSc6IGlzTmFOLFxuXHQnJCAlSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkpIDogdW5kZWZpbmVkLFxuXHQnJCAlSlNPTiUnOiBKU09OLFxuXHQnJCAlSlNPTlBhcnNlJSc6IEpTT04ucGFyc2UsXG5cdCckICVNYXAlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBNYXAsXG5cdCckICVNYXBJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBNYXAoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJCAlTWFwUHJvdG90eXBlJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogTWFwLnByb3RvdHlwZSxcblx0JyQgJU1hdGglJzogTWF0aCxcblx0JyQgJU51bWJlciUnOiBOdW1iZXIsXG5cdCckICVOdW1iZXJQcm90b3R5cGUlJzogTnVtYmVyLnByb3RvdHlwZSxcblx0JyQgJU9iamVjdCUnOiBPYmplY3QsXG5cdCckICVPYmplY3RQcm90b3R5cGUlJzogT2JqZWN0LnByb3RvdHlwZSxcblx0JyQgJU9ialByb3RvX3RvU3RyaW5nJSc6IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsXG5cdCckICVPYmpQcm90b192YWx1ZU9mJSc6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZixcblx0JyQgJXBhcnNlRmxvYXQlJzogcGFyc2VGbG9hdCxcblx0JyQgJXBhcnNlSW50JSc6IHBhcnNlSW50LFxuXHQnJCAlUHJvbWlzZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLFxuXHQnJCAlUHJvbWlzZVByb3RvdHlwZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLnByb3RvdHlwZSxcblx0JyQgJVByb21pc2VQcm90b190aGVuJSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UucHJvdG90eXBlLnRoZW4sXG5cdCckICVQcm9taXNlX2FsbCUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLmFsbCxcblx0JyQgJVByb21pc2VfcmVqZWN0JSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UucmVqZWN0LFxuXHQnJCAlUHJvbWlzZV9yZXNvbHZlJSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UucmVzb2x2ZSxcblx0JyQgJVByb3h5JSc6IHR5cGVvZiBQcm94eSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm94eSxcblx0JyQgJVJhbmdlRXJyb3IlJzogUmFuZ2VFcnJvcixcblx0JyQgJVJhbmdlRXJyb3JQcm90b3R5cGUlJzogUmFuZ2VFcnJvci5wcm90b3R5cGUsXG5cdCckICVSZWZlcmVuY2VFcnJvciUnOiBSZWZlcmVuY2VFcnJvcixcblx0JyQgJVJlZmVyZW5jZUVycm9yUHJvdG90eXBlJSc6IFJlZmVyZW5jZUVycm9yLnByb3RvdHlwZSxcblx0JyQgJVJlZmxlY3QlJzogdHlwZW9mIFJlZmxlY3QgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUmVmbGVjdCxcblx0JyQgJVJlZ0V4cCUnOiBSZWdFeHAsXG5cdCckICVSZWdFeHBQcm90b3R5cGUlJzogUmVnRXhwLnByb3RvdHlwZSxcblx0JyQgJVNldCUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNldCxcblx0JyQgJVNldEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IFNldCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCckICVTZXRQcm90b3R5cGUlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTZXQucHJvdG90eXBlLFxuXHQnJCAlU2hhcmVkQXJyYXlCdWZmZXIlJzogdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNoYXJlZEFycmF5QnVmZmVyLFxuXHQnJCAlU2hhcmVkQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNoYXJlZEFycmF5QnVmZmVyLnByb3RvdHlwZSxcblx0JyQgJVN0cmluZyUnOiBTdHJpbmcsXG5cdCckICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oJydbU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCxcblx0JyQgJVN0cmluZ1Byb3RvdHlwZSUnOiBTdHJpbmcucHJvdG90eXBlLFxuXHQnJCAlU3ltYm9sJSc6IGhhc1N5bWJvbHMgPyBTeW1ib2wgOiB1bmRlZmluZWQsXG5cdCckICVTeW1ib2xQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG5cdCckICVTeW50YXhFcnJvciUnOiBTeW50YXhFcnJvcixcblx0JyQgJVN5bnRheEVycm9yUHJvdG90eXBlJSc6IFN5bnRheEVycm9yLnByb3RvdHlwZSxcblx0JyQgJVRocm93VHlwZUVycm9yJSc6IFRocm93VHlwZUVycm9yLFxuXHQnJCAlVHlwZWRBcnJheSUnOiBUeXBlZEFycmF5LFxuXHQnJCAlVHlwZWRBcnJheVByb3RvdHlwZSUnOiBUeXBlZEFycmF5ID8gVHlwZWRBcnJheS5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG5cdCckICVUeXBlRXJyb3IlJzogVHlwZUVycm9yLFxuXHQnJCAlVHlwZUVycm9yUHJvdG90eXBlJSc6IFR5cGVFcnJvci5wcm90b3R5cGUsXG5cdCckICVVaW50OEFycmF5JSc6IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4QXJyYXksXG5cdCckICVVaW50OEFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4QXJyYXkucHJvdG90eXBlLFxuXHQnJCAlVWludDhDbGFtcGVkQXJyYXklJzogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4Q2xhbXBlZEFycmF5LFxuXHQnJCAlVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4Q2xhbXBlZEFycmF5LnByb3RvdHlwZSxcblx0JyQgJVVpbnQxNkFycmF5JSc6IHR5cGVvZiBVaW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MTZBcnJheSxcblx0JyQgJVVpbnQxNkFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBVaW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MTZBcnJheS5wcm90b3R5cGUsXG5cdCckICVVaW50MzJBcnJheSUnOiB0eXBlb2YgVWludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDMyQXJyYXksXG5cdCckICVVaW50MzJBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgVWludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDMyQXJyYXkucHJvdG90eXBlLFxuXHQnJCAlVVJJRXJyb3IlJzogVVJJRXJyb3IsXG5cdCckICVVUklFcnJvclByb3RvdHlwZSUnOiBVUklFcnJvci5wcm90b3R5cGUsXG5cdCckICVXZWFrTWFwJSc6IHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtNYXAsXG5cdCckICVXZWFrTWFwUHJvdG90eXBlJSc6IHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtNYXAucHJvdG90eXBlLFxuXHQnJCAlV2Vha1NldCUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0LFxuXHQnJCAlV2Vha1NldFByb3RvdHlwZSUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0LnByb3RvdHlwZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYWxsb3dNaXNzaW5nICE9PSAnYm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdcImFsbG93TWlzc2luZ1wiIGFyZ3VtZW50IG11c3QgYmUgYSBib29sZWFuJyk7XG5cdH1cblxuXHR2YXIga2V5ID0gJyQgJyArIG5hbWU7XG5cdGlmICghKGtleSBpbiBJTlRSSU5TSUNTKSkge1xuXHRcdHRocm93IG5ldyBTeW50YXhFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBkb2VzIG5vdCBleGlzdCEnKTtcblx0fVxuXG5cdC8vIGlzdGFuYnVsIGlnbm9yZSBpZiAvLyBob3BlZnVsbHkgdGhpcyBpcyBpbXBvc3NpYmxlIHRvIHRlc3QgOi0pXG5cdGlmICh0eXBlb2YgSU5UUklOU0lDU1trZXldID09PSAndW5kZWZpbmVkJyAmJiAhYWxsb3dNaXNzaW5nKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgZmlsZSBhbiBpc3N1ZSEnKTtcblx0fVxuXHRyZXR1cm4gSU5UUklOU0lDU1trZXldO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gaXNBZnRlckRheTtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX2lzQmVmb3JlRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc0JlZm9yZURheVwiKSk7XG5cbnZhciBfaXNTYW1lRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc1NhbWVEYXlcIikpO1xuXG5mdW5jdGlvbiBpc0FmdGVyRGF5KGEsIGIpIHtcbiAgaWYgKCFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChhKSB8fCAhX21vbWVudFtcImRlZmF1bHRcIl0uaXNNb21lbnQoYikpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICEoMCwgX2lzQmVmb3JlRGF5W1wiZGVmYXVsdFwiXSkoYSwgYikgJiYgISgwLCBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXSkoYSwgYik7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVucmVzb2x2ZWRcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWInKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZXhwb3J0cy5QdXJlQ2FsZW5kYXJEYXkgPSB2b2lkIDA7XG5cbnZhciBfZW56eW1lU2hhbGxvd0VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZW56eW1lLXNoYWxsb3ctZXF1YWxcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0TW9tZW50UHJvcHR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtbW9tZW50LXByb3B0eXBlc1wiKSk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG52YXIgX3JlYWN0V2l0aFN0eWxlcyA9IHJlcXVpcmUoXCJyZWFjdC13aXRoLXN0eWxlc1wiKTtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX3JhZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJhZlwiKSk7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0UGhyYXNlUHJvcFR5cGVzXCIpKTtcblxudmFyIF9nZXRDYWxlbmRhckRheVNldHRpbmdzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0Q2FsZW5kYXJEYXlTZXR0aW5nc1wiKSk7XG5cbnZhciBfTW9kaWZpZXJzU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvTW9kaWZpZXJzU2hhcGVcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbnZhciBwcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKSgoMCwgX29iamVjdFNwcmVhZDNbXCJkZWZhdWx0XCJdKSh7fSwgX3JlYWN0V2l0aFN0eWxlcy53aXRoU3R5bGVzUHJvcFR5cGVzLCB7XG4gIGRheTogX3JlYWN0TW9tZW50UHJvcHR5cGVzW1wiZGVmYXVsdFwiXS5tb21lbnRPYmosXG4gIGRheVNpemU6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBpc091dHNpZGVEYXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG1vZGlmaWVyczogX01vZGlmaWVyc1NoYXBlW1wiZGVmYXVsdFwiXSxcbiAgaXNGb2N1c2VkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICB0YWJJbmRleDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2YoWzAsIC0xXSksXG4gIG9uRGF5Q2xpY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uRGF5TW91c2VFbnRlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25EYXlNb3VzZUxlYXZlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJEYXlDb250ZW50czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgYXJpYUxhYmVsRm9ybWF0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIC8vIGludGVybmF0aW9uYWxpemF0aW9uXG4gIHBocmFzZXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzW1wiZGVmYXVsdFwiXSkoX2RlZmF1bHRQaHJhc2VzLkNhbGVuZGFyRGF5UGhyYXNlcykpXG59KSkgOiB7fTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGRheTogKDAsIF9tb21lbnRbXCJkZWZhdWx0XCJdKSgpLFxuICBkYXlTaXplOiBfY29uc3RhbnRzLkRBWV9TSVpFLFxuICBpc091dHNpZGVEYXk6IGZhbHNlLFxuICBtb2RpZmllcnM6IG5ldyBTZXQoKSxcbiAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgdGFiSW5kZXg6IC0xLFxuICBvbkRheUNsaWNrOiBmdW5jdGlvbiBvbkRheUNsaWNrKCkge30sXG4gIG9uRGF5TW91c2VFbnRlcjogZnVuY3Rpb24gb25EYXlNb3VzZUVudGVyKCkge30sXG4gIG9uRGF5TW91c2VMZWF2ZTogZnVuY3Rpb24gb25EYXlNb3VzZUxlYXZlKCkge30sXG4gIHJlbmRlckRheUNvbnRlbnRzOiBudWxsLFxuICBhcmlhTGFiZWxGb3JtYXQ6ICdkZGRkLCBMTCcsXG4gIC8vIGludGVybmF0aW9uYWxpemF0aW9uXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5DYWxlbmRhckRheVBocmFzZXNcbn07XG5cbnZhciBDYWxlbmRhckRheSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX3JlZikge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyW1wiZGVmYXVsdFwiXSkoQ2FsZW5kYXJEYXksIF9yZWYpO1xuICB2YXIgX3Byb3RvID0gQ2FsZW5kYXJEYXkucHJvdG90eXBlO1xuXG4gIF9wcm90b1shX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICYmIFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCJdID0gZnVuY3Rpb24gKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgcmV0dXJuICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKTtcbiAgfTtcblxuICBmdW5jdGlvbiBDYWxlbmRhckRheSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcmVmLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5zZXRCdXR0b25SZWYgPSBfdGhpcy5zZXRCdXR0b25SZWYuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBpc0ZvY3VzZWQgPSBfdGhpcyRwcm9wcy5pc0ZvY3VzZWQsXG4gICAgICAgIHRhYkluZGV4ID0gX3RoaXMkcHJvcHMudGFiSW5kZXg7XG5cbiAgICBpZiAodGFiSW5kZXggPT09IDApIHtcbiAgICAgIGlmIChpc0ZvY3VzZWQgfHwgdGFiSW5kZXggIT09IHByZXZQcm9wcy50YWJJbmRleCkge1xuICAgICAgICAoMCwgX3JhZltcImRlZmF1bHRcIl0pKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMyLmJ1dHRvblJlZikge1xuICAgICAgICAgICAgX3RoaXMyLmJ1dHRvblJlZi5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbkRheUNsaWNrID0gZnVuY3Rpb24gb25EYXlDbGljayhkYXksIGUpIHtcbiAgICB2YXIgb25EYXlDbGljayA9IHRoaXMucHJvcHMub25EYXlDbGljaztcbiAgICBvbkRheUNsaWNrKGRheSwgZSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uRGF5TW91c2VFbnRlciA9IGZ1bmN0aW9uIG9uRGF5TW91c2VFbnRlcihkYXksIGUpIHtcbiAgICB2YXIgb25EYXlNb3VzZUVudGVyID0gdGhpcy5wcm9wcy5vbkRheU1vdXNlRW50ZXI7XG4gICAgb25EYXlNb3VzZUVudGVyKGRheSwgZSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uRGF5TW91c2VMZWF2ZSA9IGZ1bmN0aW9uIG9uRGF5TW91c2VMZWF2ZShkYXksIGUpIHtcbiAgICB2YXIgb25EYXlNb3VzZUxlYXZlID0gdGhpcy5wcm9wcy5vbkRheU1vdXNlTGVhdmU7XG4gICAgb25EYXlNb3VzZUxlYXZlKGRheSwgZSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uS2V5RG93biA9IGZ1bmN0aW9uIG9uS2V5RG93bihkYXksIGUpIHtcbiAgICB2YXIgb25EYXlDbGljayA9IHRoaXMucHJvcHMub25EYXlDbGljaztcbiAgICB2YXIga2V5ID0gZS5rZXk7XG5cbiAgICBpZiAoa2V5ID09PSAnRW50ZXInIHx8IGtleSA9PT0gJyAnKSB7XG4gICAgICBvbkRheUNsaWNrKGRheSwgZSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zZXRCdXR0b25SZWYgPSBmdW5jdGlvbiBzZXRCdXR0b25SZWYocmVmKSB7XG4gICAgdGhpcy5idXR0b25SZWYgPSByZWY7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBkYXkgPSBfdGhpcyRwcm9wczIuZGF5LFxuICAgICAgICBhcmlhTGFiZWxGb3JtYXQgPSBfdGhpcyRwcm9wczIuYXJpYUxhYmVsRm9ybWF0LFxuICAgICAgICBkYXlTaXplID0gX3RoaXMkcHJvcHMyLmRheVNpemUsXG4gICAgICAgIGlzT3V0c2lkZURheSA9IF90aGlzJHByb3BzMi5pc091dHNpZGVEYXksXG4gICAgICAgIG1vZGlmaWVycyA9IF90aGlzJHByb3BzMi5tb2RpZmllcnMsXG4gICAgICAgIHJlbmRlckRheUNvbnRlbnRzID0gX3RoaXMkcHJvcHMyLnJlbmRlckRheUNvbnRlbnRzLFxuICAgICAgICB0YWJJbmRleCA9IF90aGlzJHByb3BzMi50YWJJbmRleCxcbiAgICAgICAgc3R5bGVzID0gX3RoaXMkcHJvcHMyLnN0eWxlcyxcbiAgICAgICAgcGhyYXNlcyA9IF90aGlzJHByb3BzMi5waHJhc2VzO1xuICAgIGlmICghZGF5KSByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwidGRcIiwgbnVsbCk7XG5cbiAgICB2YXIgX2dldENhbGVuZGFyRGF5U2V0dGluID0gKDAsIF9nZXRDYWxlbmRhckRheVNldHRpbmdzW1wiZGVmYXVsdFwiXSkoZGF5LCBhcmlhTGFiZWxGb3JtYXQsIGRheVNpemUsIG1vZGlmaWVycywgcGhyYXNlcyksXG4gICAgICAgIGRheVNpemVTdHlsZXMgPSBfZ2V0Q2FsZW5kYXJEYXlTZXR0aW4uZGF5U2l6ZVN0eWxlcyxcbiAgICAgICAgdXNlRGVmYXVsdEN1cnNvciA9IF9nZXRDYWxlbmRhckRheVNldHRpbi51c2VEZWZhdWx0Q3Vyc29yLFxuICAgICAgICBzZWxlY3RlZCA9IF9nZXRDYWxlbmRhckRheVNldHRpbi5zZWxlY3RlZCxcbiAgICAgICAgaG92ZXJlZFNwYW4gPSBfZ2V0Q2FsZW5kYXJEYXlTZXR0aW4uaG92ZXJlZFNwYW4sXG4gICAgICAgIGlzT3V0c2lkZVJhbmdlID0gX2dldENhbGVuZGFyRGF5U2V0dGluLmlzT3V0c2lkZVJhbmdlLFxuICAgICAgICBhcmlhTGFiZWwgPSBfZ2V0Q2FsZW5kYXJEYXlTZXR0aW4uYXJpYUxhYmVsO1xuXG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInRkXCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuQ2FsZW5kYXJEYXksIHVzZURlZmF1bHRDdXJzb3IgJiYgc3R5bGVzLkNhbGVuZGFyRGF5X19kZWZhdWx0Q3Vyc29yLCBzdHlsZXMuQ2FsZW5kYXJEYXlfX2RlZmF1bHQsIGlzT3V0c2lkZURheSAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX291dHNpZGUsIG1vZGlmaWVycy5oYXMoJ3RvZGF5JykgJiYgc3R5bGVzLkNhbGVuZGFyRGF5X190b2RheSwgbW9kaWZpZXJzLmhhcygnZmlyc3QtZGF5LW9mLXdlZWsnKSAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX2ZpcnN0RGF5T2ZXZWVrLCBtb2RpZmllcnMuaGFzKCdsYXN0LWRheS1vZi13ZWVrJykgJiYgc3R5bGVzLkNhbGVuZGFyRGF5X19sYXN0RGF5T2ZXZWVrLCBtb2RpZmllcnMuaGFzKCdob3ZlcmVkLW9mZnNldCcpICYmIHN0eWxlcy5DYWxlbmRhckRheV9faG92ZXJlZF9vZmZzZXQsIG1vZGlmaWVycy5oYXMoJ2hvdmVyZWQtc3RhcnQtZmlyc3QtcG9zc2libGUtZW5kJykgJiYgc3R5bGVzLkNhbGVuZGFyRGF5X19ob3ZlcmVkX3N0YXJ0X2ZpcnN0X3Bvc3NpYmxlX2VuZCwgbW9kaWZpZXJzLmhhcygnaG92ZXJlZC1zdGFydC1ibG9ja2VkLW1pbmltdW0tbmlnaHRzJykgJiYgc3R5bGVzLkNhbGVuZGFyRGF5X19ob3ZlcmVkX3N0YXJ0X2Jsb2NrZWRfbWluX25pZ2h0cywgbW9kaWZpZXJzLmhhcygnaGlnaGxpZ2h0ZWQtY2FsZW5kYXInKSAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX2hpZ2hsaWdodGVkX2NhbGVuZGFyLCBtb2RpZmllcnMuaGFzKCdibG9ja2VkLW1pbmltdW0tbmlnaHRzJykgJiYgc3R5bGVzLkNhbGVuZGFyRGF5X19ibG9ja2VkX21pbmltdW1fbmlnaHRzLCBtb2RpZmllcnMuaGFzKCdibG9ja2VkLWNhbGVuZGFyJykgJiYgc3R5bGVzLkNhbGVuZGFyRGF5X19ibG9ja2VkX2NhbGVuZGFyLCBob3ZlcmVkU3BhbiAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX2hvdmVyZWRfc3BhbiwgbW9kaWZpZXJzLmhhcygnc2VsZWN0ZWQtc3BhbicpICYmIHN0eWxlcy5DYWxlbmRhckRheV9fc2VsZWN0ZWRfc3BhbiwgbW9kaWZpZXJzLmhhcygnc2VsZWN0ZWQtc3RhcnQnKSAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX3NlbGVjdGVkX3N0YXJ0LCBtb2RpZmllcnMuaGFzKCdzZWxlY3RlZC1lbmQnKSAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX3NlbGVjdGVkX2VuZCwgc2VsZWN0ZWQgJiYgIW1vZGlmaWVycy5oYXMoJ3NlbGVjdGVkLXNwYW4nKSAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX3NlbGVjdGVkLCBpc091dHNpZGVSYW5nZSAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX2Jsb2NrZWRfb3V0X29mX3JhbmdlLCBkYXlTaXplU3R5bGVzKSwge1xuICAgICAgcm9sZTogXCJidXR0b25cIiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGpzeC1hMTF5L25vLW5vbmludGVyYWN0aXZlLWVsZW1lbnQtdG8taW50ZXJhY3RpdmUtcm9sZVxuICAgICAgLFxuICAgICAgcmVmOiB0aGlzLnNldEJ1dHRvblJlZixcbiAgICAgIFwiYXJpYS1kaXNhYmxlZFwiOiBtb2RpZmllcnMuaGFzKCdibG9ja2VkJyksXG4gICAgICBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLFxuICAgICAgb25Nb3VzZUVudGVyOiBmdW5jdGlvbiBvbk1vdXNlRW50ZXIoZSkge1xuICAgICAgICBfdGhpczMub25EYXlNb3VzZUVudGVyKGRheSwgZSk7XG4gICAgICB9LFxuICAgICAgb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoZSkge1xuICAgICAgICBfdGhpczMub25EYXlNb3VzZUxlYXZlKGRheSwgZSk7XG4gICAgICB9LFxuICAgICAgb25Nb3VzZVVwOiBmdW5jdGlvbiBvbk1vdXNlVXAoZSkge1xuICAgICAgICBlLmN1cnJlbnRUYXJnZXQuYmx1cigpO1xuICAgICAgfSxcbiAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICBfdGhpczMub25EYXlDbGljayhkYXksIGUpO1xuICAgICAgfSxcbiAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24gb25LZXlEb3duKGUpIHtcbiAgICAgICAgX3RoaXMzLm9uS2V5RG93bihkYXksIGUpO1xuICAgICAgfSxcbiAgICAgIHRhYkluZGV4OiB0YWJJbmRleFxuICAgIH0pLCByZW5kZXJEYXlDb250ZW50cyA/IHJlbmRlckRheUNvbnRlbnRzKGRheSwgbW9kaWZpZXJzKSA6IGRheS5mb3JtYXQoJ0QnKSk7XG4gIH07XG5cbiAgcmV0dXJuIENhbGVuZGFyRGF5O1xufShfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgfHwgX3JlYWN0W1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXG5leHBvcnRzLlB1cmVDYWxlbmRhckRheSA9IENhbGVuZGFyRGF5O1xuQ2FsZW5kYXJEYXkucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5DYWxlbmRhckRheS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXMpKGZ1bmN0aW9uIChfcmVmMikge1xuICB2YXIgX3JlZjIkcmVhY3REYXRlcyA9IF9yZWYyLnJlYWN0RGF0ZXMsXG4gICAgICBjb2xvciA9IF9yZWYyJHJlYWN0RGF0ZXMuY29sb3IsXG4gICAgICBmb250ID0gX3JlZjIkcmVhY3REYXRlcy5mb250O1xuICByZXR1cm4ge1xuICAgIENhbGVuZGFyRGF5OiB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgZm9udFNpemU6IGZvbnQuc2l6ZSxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgb3V0bGluZTogMFxuICAgICAgfVxuICAgIH0sXG4gICAgQ2FsZW5kYXJEYXlfX2RlZmF1bHRDdXJzb3I6IHtcbiAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgfSxcbiAgICBDYWxlbmRhckRheV9fZGVmYXVsdDoge1xuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoY29sb3IuY29yZS5ib3JkZXJMaWdodCksXG4gICAgICBjb2xvcjogY29sb3IudGV4dCxcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmJhY2tncm91bmQsXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5jb3JlLmJvcmRlckxpZ2h0LFxuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5jb3JlLmJvcmRlckxpZ2h0KSxcbiAgICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgICAgfVxuICAgIH0sXG4gICAgQ2FsZW5kYXJEYXlfX2hvdmVyZWRfb2Zmc2V0OiB7XG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5jb3JlLmJvcmRlckJyaWdodCxcbiAgICAgIGJvcmRlcjogXCIxcHggZG91YmxlIFwiLmNvbmNhdChjb2xvci5jb3JlLmJvcmRlckxpZ2h0KSxcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgICB9LFxuICAgIENhbGVuZGFyRGF5X19vdXRzaWRlOiB7XG4gICAgICBib3JkZXI6IDAsXG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5vdXRzaWRlLmJhY2tncm91bmRDb2xvcixcbiAgICAgIGNvbG9yOiBjb2xvci5vdXRzaWRlLmNvbG9yLFxuICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgYm9yZGVyOiAwXG4gICAgICB9XG4gICAgfSxcbiAgICBDYWxlbmRhckRheV9fYmxvY2tlZF9taW5pbXVtX25pZ2h0czoge1xuICAgICAgYmFja2dyb3VuZDogY29sb3IubWluaW11bU5pZ2h0cy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5taW5pbXVtTmlnaHRzLmJvcmRlckNvbG9yKSxcbiAgICAgIGNvbG9yOiBjb2xvci5taW5pbXVtTmlnaHRzLmNvbG9yLFxuICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3IubWluaW11bU5pZ2h0cy5iYWNrZ3JvdW5kQ29sb3JfaG92ZXIsXG4gICAgICAgIGNvbG9yOiBjb2xvci5taW5pbXVtTmlnaHRzLmNvbG9yX2FjdGl2ZVxuICAgICAgfSxcbiAgICAgICc6YWN0aXZlJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5taW5pbXVtTmlnaHRzLmJhY2tncm91bmRDb2xvcl9hY3RpdmUsXG4gICAgICAgIGNvbG9yOiBjb2xvci5taW5pbXVtTmlnaHRzLmNvbG9yX2FjdGl2ZVxuICAgICAgfVxuICAgIH0sXG4gICAgQ2FsZW5kYXJEYXlfX2hpZ2hsaWdodGVkX2NhbGVuZGFyOiB7XG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5oaWdobGlnaHRlZC5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBjb2xvcjogY29sb3IuaGlnaGxpZ2h0ZWQuY29sb3IsXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5oaWdobGlnaHRlZC5iYWNrZ3JvdW5kQ29sb3JfaG92ZXIsXG4gICAgICAgIGNvbG9yOiBjb2xvci5oaWdobGlnaHRlZC5jb2xvcl9hY3RpdmVcbiAgICAgIH0sXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3IuaGlnaGxpZ2h0ZWQuYmFja2dyb3VuZENvbG9yX2FjdGl2ZSxcbiAgICAgICAgY29sb3I6IGNvbG9yLmhpZ2hsaWdodGVkLmNvbG9yX2FjdGl2ZVxuICAgICAgfVxuICAgIH0sXG4gICAgQ2FsZW5kYXJEYXlfX3NlbGVjdGVkX3NwYW46IHtcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLnNlbGVjdGVkU3Bhbi5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBib3JkZXI6IFwiMXB4IGRvdWJsZSBcIi5jb25jYXQoY29sb3Iuc2VsZWN0ZWRTcGFuLmJvcmRlckNvbG9yKSxcbiAgICAgIGNvbG9yOiBjb2xvci5zZWxlY3RlZFNwYW4uY29sb3IsXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5zZWxlY3RlZFNwYW4uYmFja2dyb3VuZENvbG9yX2hvdmVyLFxuICAgICAgICBib3JkZXI6IFwiMXB4IGRvdWJsZSBcIi5jb25jYXQoY29sb3Iuc2VsZWN0ZWRTcGFuLmJvcmRlckNvbG9yKSxcbiAgICAgICAgY29sb3I6IGNvbG9yLnNlbGVjdGVkU3Bhbi5jb2xvcl9hY3RpdmVcbiAgICAgIH0sXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3Iuc2VsZWN0ZWRTcGFuLmJhY2tncm91bmRDb2xvcl9hY3RpdmUsXG4gICAgICAgIGJvcmRlcjogXCIxcHggZG91YmxlIFwiLmNvbmNhdChjb2xvci5zZWxlY3RlZFNwYW4uYm9yZGVyQ29sb3IpLFxuICAgICAgICBjb2xvcjogY29sb3Iuc2VsZWN0ZWRTcGFuLmNvbG9yX2FjdGl2ZVxuICAgICAgfVxuICAgIH0sXG4gICAgQ2FsZW5kYXJEYXlfX3NlbGVjdGVkOiB7XG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5zZWxlY3RlZC5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBib3JkZXI6IFwiMXB4IGRvdWJsZSBcIi5jb25jYXQoY29sb3Iuc2VsZWN0ZWQuYm9yZGVyQ29sb3IpLFxuICAgICAgY29sb3I6IGNvbG9yLnNlbGVjdGVkLmNvbG9yLFxuICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3Iuc2VsZWN0ZWQuYmFja2dyb3VuZENvbG9yX2hvdmVyLFxuICAgICAgICBib3JkZXI6IFwiMXB4IGRvdWJsZSBcIi5jb25jYXQoY29sb3Iuc2VsZWN0ZWQuYm9yZGVyQ29sb3IpLFxuICAgICAgICBjb2xvcjogY29sb3Iuc2VsZWN0ZWQuY29sb3JfYWN0aXZlXG4gICAgICB9LFxuICAgICAgJzphY3RpdmUnOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IGNvbG9yLnNlbGVjdGVkLmJhY2tncm91bmRDb2xvcl9hY3RpdmUsXG4gICAgICAgIGJvcmRlcjogXCIxcHggZG91YmxlIFwiLmNvbmNhdChjb2xvci5zZWxlY3RlZC5ib3JkZXJDb2xvciksXG4gICAgICAgIGNvbG9yOiBjb2xvci5zZWxlY3RlZC5jb2xvcl9hY3RpdmVcbiAgICAgIH1cbiAgICB9LFxuICAgIENhbGVuZGFyRGF5X19ob3ZlcmVkX3NwYW46IHtcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmhvdmVyZWRTcGFuLmJhY2tncm91bmRDb2xvcixcbiAgICAgIGJvcmRlcjogXCIxcHggZG91YmxlIFwiLmNvbmNhdChjb2xvci5ob3ZlcmVkU3Bhbi5ib3JkZXJDb2xvciksXG4gICAgICBjb2xvcjogY29sb3IuaG92ZXJlZFNwYW4uY29sb3IsXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5ob3ZlcmVkU3Bhbi5iYWNrZ3JvdW5kQ29sb3JfaG92ZXIsXG4gICAgICAgIGJvcmRlcjogXCIxcHggZG91YmxlIFwiLmNvbmNhdChjb2xvci5ob3ZlcmVkU3Bhbi5ib3JkZXJDb2xvciksXG4gICAgICAgIGNvbG9yOiBjb2xvci5ob3ZlcmVkU3Bhbi5jb2xvcl9hY3RpdmVcbiAgICAgIH0sXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3IuaG92ZXJlZFNwYW4uYmFja2dyb3VuZENvbG9yX2FjdGl2ZSxcbiAgICAgICAgYm9yZGVyOiBcIjFweCBkb3VibGUgXCIuY29uY2F0KGNvbG9yLmhvdmVyZWRTcGFuLmJvcmRlckNvbG9yKSxcbiAgICAgICAgY29sb3I6IGNvbG9yLmhvdmVyZWRTcGFuLmNvbG9yX2FjdGl2ZVxuICAgICAgfVxuICAgIH0sXG4gICAgQ2FsZW5kYXJEYXlfX2Jsb2NrZWRfY2FsZW5kYXI6IHtcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmJsb2NrZWRfY2FsZW5kYXIuYmFja2dyb3VuZENvbG9yLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoY29sb3IuYmxvY2tlZF9jYWxlbmRhci5ib3JkZXJDb2xvciksXG4gICAgICBjb2xvcjogY29sb3IuYmxvY2tlZF9jYWxlbmRhci5jb2xvcixcbiAgICAgICc6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmJsb2NrZWRfY2FsZW5kYXIuYmFja2dyb3VuZENvbG9yX2hvdmVyLFxuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5ibG9ja2VkX2NhbGVuZGFyLmJvcmRlckNvbG9yKSxcbiAgICAgICAgY29sb3I6IGNvbG9yLmJsb2NrZWRfY2FsZW5kYXIuY29sb3JfYWN0aXZlXG4gICAgICB9LFxuICAgICAgJzphY3RpdmUnOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmJsb2NrZWRfY2FsZW5kYXIuYmFja2dyb3VuZENvbG9yX2FjdGl2ZSxcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoY29sb3IuYmxvY2tlZF9jYWxlbmRhci5ib3JkZXJDb2xvciksXG4gICAgICAgIGNvbG9yOiBjb2xvci5ibG9ja2VkX2NhbGVuZGFyLmNvbG9yX2FjdGl2ZVxuICAgICAgfVxuICAgIH0sXG4gICAgQ2FsZW5kYXJEYXlfX2Jsb2NrZWRfb3V0X29mX3JhbmdlOiB7XG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5ib3JkZXJDb2xvciksXG4gICAgICBjb2xvcjogY29sb3IuYmxvY2tlZF9vdXRfb2ZfcmFuZ2UuY29sb3IsXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5iYWNrZ3JvdW5kQ29sb3JfaG92ZXIsXG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGNvbG9yLmJsb2NrZWRfb3V0X29mX3JhbmdlLmJvcmRlckNvbG9yKSxcbiAgICAgICAgY29sb3I6IGNvbG9yLmJsb2NrZWRfb3V0X29mX3JhbmdlLmNvbG9yX2FjdGl2ZVxuICAgICAgfSxcbiAgICAgICc6YWN0aXZlJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5iYWNrZ3JvdW5kQ29sb3JfYWN0aXZlLFxuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5ib3JkZXJDb2xvciksXG4gICAgICAgIGNvbG9yOiBjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5jb2xvcl9hY3RpdmVcbiAgICAgIH1cbiAgICB9LFxuICAgIENhbGVuZGFyRGF5X19ob3ZlcmVkX3N0YXJ0X2ZpcnN0X3Bvc3NpYmxlX2VuZDoge1xuICAgICAgYmFja2dyb3VuZDogY29sb3IuY29yZS5ib3JkZXJMaWdodGVyLFxuICAgICAgYm9yZGVyOiBcIjFweCBkb3VibGUgXCIuY29uY2F0KGNvbG9yLmNvcmUuYm9yZGVyTGlnaHRlcilcbiAgICB9LFxuICAgIENhbGVuZGFyRGF5X19ob3ZlcmVkX3N0YXJ0X2Jsb2NrZWRfbWluX25pZ2h0czoge1xuICAgICAgYmFja2dyb3VuZDogY29sb3IuY29yZS5ib3JkZXJMaWdodGVyLFxuICAgICAgYm9yZGVyOiBcIjFweCBkb3VibGUgXCIuY29uY2F0KGNvbG9yLmNvcmUuYm9yZGVyTGlnaHQpXG4gICAgfSxcbiAgICBDYWxlbmRhckRheV9fc2VsZWN0ZWRfc3RhcnQ6IHt9LFxuICAgIENhbGVuZGFyRGF5X19zZWxlY3RlZF9lbmQ6IHt9LFxuICAgIENhbGVuZGFyRGF5X190b2RheToge30sXG4gICAgQ2FsZW5kYXJEYXlfX2ZpcnN0RGF5T2ZXZWVrOiB7fSxcbiAgICBDYWxlbmRhckRheV9fbGFzdERheU9mV2Vlazoge31cbiAgfTtcbn0sIHtcbiAgcHVyZUNvbXBvbmVudDogdHlwZW9mIF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAhPT0gJ3VuZGVmaW5lZCdcbn0pKENhbGVuZGFyRGF5KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyk7XG5cbnZhciBvcmlnS2V5cyA9IE9iamVjdC5rZXlzO1xudmFyIGtleXNTaGltID0gb3JpZ0tleXMgPyBmdW5jdGlvbiBrZXlzKG8pIHsgcmV0dXJuIG9yaWdLZXlzKG8pOyB9IDogcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG52YXIgb3JpZ2luYWxLZXlzID0gT2JqZWN0LmtleXM7XG5cbmtleXNTaGltLnNoaW0gPSBmdW5jdGlvbiBzaGltT2JqZWN0S2V5cygpIHtcblx0aWYgKE9iamVjdC5rZXlzKSB7XG5cdFx0dmFyIGtleXNXb3Jrc1dpdGhBcmd1bWVudHMgPSAoZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8gU2FmYXJpIDUuMCBidWdcblx0XHRcdHZhciBhcmdzID0gT2JqZWN0LmtleXMoYXJndW1lbnRzKTtcblx0XHRcdHJldHVybiBhcmdzICYmIGFyZ3MubGVuZ3RoID09PSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdH0oMSwgMikpO1xuXHRcdGlmICgha2V5c1dvcmtzV2l0aEFyZ3VtZW50cykge1xuXHRcdFx0T2JqZWN0LmtleXMgPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuXHRcdFx0XHRpZiAoaXNBcmdzKG9iamVjdCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKHNsaWNlLmNhbGwob2JqZWN0KSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhvYmplY3QpO1xuXHRcdFx0fTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0T2JqZWN0LmtleXMgPSBrZXlzU2hpbTtcblx0fVxuXHRyZXR1cm4gT2JqZWN0LmtleXMgfHwga2V5c1NoaW07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuIiwidmFyIGFycmF5V2l0aG91dEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRob3V0SG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciBub25JdGVyYWJsZVNwcmVhZCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlU3ByZWFkXCIpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvQ29uc3VtYWJsZUFycmF5OyIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW5yZXNvbHZlZFxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2J1aWxkL091dHNpZGVDbGlja0hhbmRsZXInKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBzaGltID0gcmVxdWlyZSgnLi9zaGltJyk7XG5cbnZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cbmRlZmluZShwb2x5ZmlsbCwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcG9seWZpbGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmblRvU3RyID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzXFxiLztcbnZhciBpc0VTNkNsYXNzRm4gPSBmdW5jdGlvbiBpc0VTNkNsYXNzRnVuY3Rpb24odmFsdWUpIHtcblx0dHJ5IHtcblx0XHR2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiBjb25zdHJ1Y3RvclJlZ2V4LnRlc3QoZm5TdHIpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlOyAvLyBub3QgYSBmdW5jdGlvblxuXHR9XG59O1xuXG52YXIgdHJ5RnVuY3Rpb25PYmplY3QgPSBmdW5jdGlvbiB0cnlGdW5jdGlvblRvU3RyKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZm5DbGFzcyA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG52YXIgZ2VuQ2xhc3MgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbGxhYmxlKHZhbHVlKSB7XG5cdGlmICghdmFsdWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhdmFsdWUucHJvdG90eXBlKSB7IHJldHVybiB0cnVlOyB9XG5cdGlmIChoYXNUb1N0cmluZ1RhZykgeyByZXR1cm4gdHJ5RnVuY3Rpb25PYmplY3QodmFsdWUpOyB9XG5cdGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHR2YXIgc3RyQ2xhc3MgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0cmV0dXJuIHN0ckNsYXNzID09PSBmbkNsYXNzIHx8IHN0ckNsYXNzID09PSBnZW5DbGFzcztcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBoYXMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG5cbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHtcblx0aWYgKCRhc3NpZ24pIHtcblx0XHRyZXR1cm4gJGFzc2lnbih0YXJnZXQsIHNvdXJjZSk7XG5cdH1cblxuXHRmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG5cdFx0aWYgKGhhcyhzb3VyY2UsIGtleSkpIHtcblx0XHRcdHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG5cdFx0fVxuXHR9XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGdldElucHV0SGVpZ2h0O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbmZ1bmN0aW9uIGdldFBhZGRpbmcodmVydGljYWwsIHRvcCwgYm90dG9tKSB7XG4gIHZhciBpc1RvcERlZmluZWQgPSB0eXBlb2YgdG9wID09PSAnbnVtYmVyJztcbiAgdmFyIGlzQm90dG9tRGVmaW5lZCA9IHR5cGVvZiBib3R0b20gPT09ICdudW1iZXInO1xuICB2YXIgaXNWZXJ0aWNhbERlZmluZWQgPSB0eXBlb2YgdmVydGljYWwgPT09ICdudW1iZXInO1xuXG4gIGlmIChpc1RvcERlZmluZWQgJiYgaXNCb3R0b21EZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRvcCArIGJvdHRvbTtcbiAgfVxuXG4gIGlmIChpc1RvcERlZmluZWQgJiYgaXNWZXJ0aWNhbERlZmluZWQpIHtcbiAgICByZXR1cm4gdG9wICsgdmVydGljYWw7XG4gIH1cblxuICBpZiAoaXNUb3BEZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRvcDtcbiAgfVxuXG4gIGlmIChpc0JvdHRvbURlZmluZWQgJiYgaXNWZXJ0aWNhbERlZmluZWQpIHtcbiAgICByZXR1cm4gYm90dG9tICsgdmVydGljYWw7XG4gIH1cblxuICBpZiAoaXNCb3R0b21EZWZpbmVkKSB7XG4gICAgcmV0dXJuIGJvdHRvbTtcbiAgfVxuXG4gIGlmIChpc1ZlcnRpY2FsRGVmaW5lZCkge1xuICAgIHJldHVybiAyICogdmVydGljYWw7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gZ2V0SW5wdXRIZWlnaHQoX3JlZiwgc21hbGwpIHtcbiAgdmFyIF9yZWYkZm9udCRpbnB1dCA9IF9yZWYuZm9udC5pbnB1dCxcbiAgICAgIGxpbmVIZWlnaHQgPSBfcmVmJGZvbnQkaW5wdXQubGluZUhlaWdodCxcbiAgICAgIGxpbmVIZWlnaHRfc21hbGwgPSBfcmVmJGZvbnQkaW5wdXQubGluZUhlaWdodF9zbWFsbCxcbiAgICAgIF9yZWYkc3BhY2luZyA9IF9yZWYuc3BhY2luZyxcbiAgICAgIGlucHV0UGFkZGluZyA9IF9yZWYkc3BhY2luZy5pbnB1dFBhZGRpbmcsXG4gICAgICBkaXNwbGF5VGV4dFBhZGRpbmdWZXJ0aWNhbCA9IF9yZWYkc3BhY2luZy5kaXNwbGF5VGV4dFBhZGRpbmdWZXJ0aWNhbCxcbiAgICAgIGRpc3BsYXlUZXh0UGFkZGluZ1RvcCA9IF9yZWYkc3BhY2luZy5kaXNwbGF5VGV4dFBhZGRpbmdUb3AsXG4gICAgICBkaXNwbGF5VGV4dFBhZGRpbmdCb3R0b20gPSBfcmVmJHNwYWNpbmcuZGlzcGxheVRleHRQYWRkaW5nQm90dG9tLFxuICAgICAgZGlzcGxheVRleHRQYWRkaW5nVmVydGljYWxfc21hbGwgPSBfcmVmJHNwYWNpbmcuZGlzcGxheVRleHRQYWRkaW5nVmVydGljYWxfc21hbGwsXG4gICAgICBkaXNwbGF5VGV4dFBhZGRpbmdUb3Bfc21hbGwgPSBfcmVmJHNwYWNpbmcuZGlzcGxheVRleHRQYWRkaW5nVG9wX3NtYWxsLFxuICAgICAgZGlzcGxheVRleHRQYWRkaW5nQm90dG9tX3NtYWxsID0gX3JlZiRzcGFjaW5nLmRpc3BsYXlUZXh0UGFkZGluZ0JvdHRvbV9zbWFsbDtcbiAgdmFyIGNhbGNMaW5lSGVpZ2h0ID0gc21hbGwgPyBsaW5lSGVpZ2h0X3NtYWxsIDogbGluZUhlaWdodDtcbiAgdmFyIHBhZGRpbmcgPSBzbWFsbCA/IGdldFBhZGRpbmcoZGlzcGxheVRleHRQYWRkaW5nVmVydGljYWxfc21hbGwsIGRpc3BsYXlUZXh0UGFkZGluZ1RvcF9zbWFsbCwgZGlzcGxheVRleHRQYWRkaW5nQm90dG9tX3NtYWxsKSA6IGdldFBhZGRpbmcoZGlzcGxheVRleHRQYWRkaW5nVmVydGljYWwsIGRpc3BsYXlUZXh0UGFkZGluZ1RvcCwgZGlzcGxheVRleHRQYWRkaW5nQm90dG9tKTtcbiAgcmV0dXJuIHBhcnNlSW50KGNhbGNMaW5lSGVpZ2h0LCAxMCkgKyAyICogaW5wdXRQYWRkaW5nICsgcGFkZGluZztcbn0iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdG9Mb2NhbGl6ZWREYXRlU3RyaW5nO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfdG9Nb21lbnRPYmplY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RvTW9tZW50T2JqZWN0XCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG5mdW5jdGlvbiB0b0xvY2FsaXplZERhdGVTdHJpbmcoZGF0ZSwgY3VycmVudEZvcm1hdCkge1xuICB2YXIgZGF0ZU9iaiA9IF9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGRhdGUpID8gZGF0ZSA6ICgwLCBfdG9Nb21lbnRPYmplY3RbXCJkZWZhdWx0XCJdKShkYXRlLCBjdXJyZW50Rm9ybWF0KTtcbiAgaWYgKCFkYXRlT2JqKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIGRhdGVPYmouZm9ybWF0KF9jb25zdGFudHMuRElTUExBWV9GT1JNQVQpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gaXNEYXlWaXNpYmxlO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfaXNCZWZvcmVEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzQmVmb3JlRGF5XCIpKTtcblxudmFyIF9pc0FmdGVyRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc0FmdGVyRGF5XCIpKTtcblxudmFyIF90b0lTT01vbnRoU3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi90b0lTT01vbnRoU3RyaW5nXCIpKTtcblxudmFyIHN0YXJ0Q2FjaGVPdXRzaWRlRGF5cyA9IG5ldyBNYXAoKTtcbnZhciBlbmRDYWNoZU91dHNpZGVEYXlzID0gbmV3IE1hcCgpO1xudmFyIHN0YXJ0Q2FjaGVJbnNpZGVEYXlzID0gbmV3IE1hcCgpO1xudmFyIGVuZENhY2hlSW5zaWRlRGF5cyA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gaXNEYXlWaXNpYmxlKGRheSwgbW9udGgsIG51bWJlck9mTW9udGhzLCBlbmFibGVPdXRzaWRlRGF5cykge1xuICBpZiAoIV9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGRheSkpIHJldHVybiBmYWxzZTsgLy8gQ2xvbmluZyBpcyBhIGxpdHRsZSBleHBlbnNpdmUsIHNvIHdlIHdhbnQgdG8gZG8gaXQgYXMgbGl0dGxlIGFzIHBvc3NpYmxlLlxuXG4gIHZhciBzdGFydEtleSA9ICgwLCBfdG9JU09Nb250aFN0cmluZ1tcImRlZmF1bHRcIl0pKG1vbnRoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci10ZW1wbGF0ZVxuXG4gIHZhciBlbmRLZXkgPSBzdGFydEtleSArICcrJyArIG51bWJlck9mTW9udGhzO1xuXG4gIGlmIChlbmFibGVPdXRzaWRlRGF5cykge1xuICAgIGlmICghc3RhcnRDYWNoZU91dHNpZGVEYXlzLmhhcyhzdGFydEtleSkpIHtcbiAgICAgIHN0YXJ0Q2FjaGVPdXRzaWRlRGF5cy5zZXQoc3RhcnRLZXksIG1vbnRoLmNsb25lKCkuc3RhcnRPZignbW9udGgnKS5zdGFydE9mKCd3ZWVrJykpO1xuICAgIH1cblxuICAgIGlmICgoMCwgX2lzQmVmb3JlRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBzdGFydENhY2hlT3V0c2lkZURheXMuZ2V0KHN0YXJ0S2V5KSkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmICghZW5kQ2FjaGVPdXRzaWRlRGF5cy5oYXMoZW5kS2V5KSkge1xuICAgICAgZW5kQ2FjaGVPdXRzaWRlRGF5cy5zZXQoZW5kS2V5LCBtb250aC5jbG9uZSgpLmVuZE9mKCd3ZWVrJykuYWRkKG51bWJlck9mTW9udGhzIC0gMSwgJ21vbnRocycpLmVuZE9mKCdtb250aCcpLmVuZE9mKCd3ZWVrJykpO1xuICAgIH1cblxuICAgIHJldHVybiAhKDAsIF9pc0FmdGVyRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBlbmRDYWNoZU91dHNpZGVEYXlzLmdldChlbmRLZXkpKTtcbiAgfSAvLyAhZW5hYmxlT3V0c2lkZURheXNcblxuXG4gIGlmICghc3RhcnRDYWNoZUluc2lkZURheXMuaGFzKHN0YXJ0S2V5KSkge1xuICAgIHN0YXJ0Q2FjaGVJbnNpZGVEYXlzLnNldChzdGFydEtleSwgbW9udGguY2xvbmUoKS5zdGFydE9mKCdtb250aCcpKTtcbiAgfVxuXG4gIGlmICgoMCwgX2lzQmVmb3JlRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBzdGFydENhY2hlSW5zaWRlRGF5cy5nZXQoc3RhcnRLZXkpKSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICghZW5kQ2FjaGVJbnNpZGVEYXlzLmhhcyhlbmRLZXkpKSB7XG4gICAgZW5kQ2FjaGVJbnNpZGVEYXlzLnNldChlbmRLZXksIG1vbnRoLmNsb25lKCkuYWRkKG51bWJlck9mTW9udGhzIC0gMSwgJ21vbnRocycpLmVuZE9mKCdtb250aCcpKTtcbiAgfVxuXG4gIHJldHVybiAhKDAsIF9pc0FmdGVyRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBlbmRDYWNoZUluc2lkZURheXMuZ2V0KGVuZEtleSkpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZXhwb3J0cy5QdXJlRGF5UGlja2VyID0gZXhwb3J0cy5kZWZhdWx0UHJvcHMgPSB2b2lkIDA7XG5cbnZhciBfZW56eW1lU2hhbGxvd0VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZW56eW1lLXNoYWxsb3ctZXF1YWxcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQ0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxudmFyIF9yZWFjdFdpdGhTdHlsZXMgPSByZXF1aXJlKFwicmVhY3Qtd2l0aC1zdHlsZXNcIik7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF90aHJvdHRsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImxvZGFzaC90aHJvdHRsZVwiKSk7XG5cbnZhciBfaXNUb3VjaERldmljZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlzLXRvdWNoLWRldmljZVwiKSk7XG5cbnZhciBfcmVhY3RPdXRzaWRlQ2xpY2tIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3Qtb3V0c2lkZS1jbGljay1oYW5kbGVyXCIpKTtcblxudmFyIF9kZWZhdWx0UGhyYXNlcyA9IHJlcXVpcmUoXCIuLi9kZWZhdWx0UGhyYXNlc1wiKTtcblxudmFyIF9nZXRQaHJhc2VQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRQaHJhc2VQcm9wVHlwZXNcIikpO1xuXG52YXIgX25vZmxpcCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL25vZmxpcFwiKSk7XG5cbnZhciBfQ2FsZW5kYXJNb250aEdyaWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NhbGVuZGFyTW9udGhHcmlkXCIpKTtcblxudmFyIF9EYXlQaWNrZXJOYXZpZ2F0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9EYXlQaWNrZXJOYXZpZ2F0aW9uXCIpKTtcblxudmFyIF9EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL0RheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzXCIpKTtcblxudmFyIF9nZXROdW1iZXJPZkNhbGVuZGFyTW9udGhXZWVrcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldE51bWJlck9mQ2FsZW5kYXJNb250aFdlZWtzXCIpKTtcblxudmFyIF9nZXRDYWxlbmRhck1vbnRoV2lkdGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRDYWxlbmRhck1vbnRoV2lkdGhcIikpO1xuXG52YXIgX2NhbGN1bGF0ZURpbWVuc2lvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2NhbGN1bGF0ZURpbWVuc2lvblwiKSk7XG5cbnZhciBfZ2V0QWN0aXZlRWxlbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldEFjdGl2ZUVsZW1lbnRcIikpO1xuXG52YXIgX2lzRGF5VmlzaWJsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzRGF5VmlzaWJsZVwiKSk7XG5cbnZhciBfTW9kaWZpZXJzU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvTW9kaWZpZXJzU2hhcGVcIikpO1xuXG52YXIgX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlXCIpKTtcblxudmFyIF9EYXlPZldlZWtTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9EYXlPZldlZWtTaGFwZVwiKSk7XG5cbnZhciBfQ2FsZW5kYXJJbmZvUG9zaXRpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9DYWxlbmRhckluZm9Qb3NpdGlvblNoYXBlXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG52YXIgTU9OVEhfUEFERElORyA9IDIzO1xudmFyIFBSRVZfVFJBTlNJVElPTiA9ICdwcmV2JztcbnZhciBORVhUX1RSQU5TSVRJT04gPSAnbmV4dCc7XG52YXIgTU9OVEhfU0VMRUNUSU9OX1RSQU5TSVRJT04gPSAnbW9udGhfc2VsZWN0aW9uJztcbnZhciBZRUFSX1NFTEVDVElPTl9UUkFOU0lUSU9OID0gJ3llYXJfc2VsZWN0aW9uJztcbnZhciBwcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKSgoMCwgX29iamVjdFNwcmVhZDRbXCJkZWZhdWx0XCJdKSh7fSwgX3JlYWN0V2l0aFN0eWxlcy53aXRoU3R5bGVzUHJvcFR5cGVzLCB7XG4gIC8vIGNhbGVuZGFyIHByZXNlbnRhdGlvbiBwcm9wc1xuICBlbmFibGVPdXRzaWRlRGF5czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgbnVtYmVyT2ZNb250aHM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgb3JpZW50YXRpb246IF9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIHdpdGhQb3J0YWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG9uT3V0c2lkZUNsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBoaWRkZW46IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGluaXRpYWxWaXNpYmxlTW9udGg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGZpcnN0RGF5T2ZXZWVrOiBfRGF5T2ZXZWVrU2hhcGVbXCJkZWZhdWx0XCJdLFxuICByZW5kZXJDYWxlbmRhckluZm86IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGNhbGVuZGFySW5mb1Bvc2l0aW9uOiBfQ2FsZW5kYXJJbmZvUG9zaXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBkYXlTaXplOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgaXNSVEw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHZlcnRpY2FsSGVpZ2h0OiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgbm9Cb3JkZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIHZlcnRpY2FsQm9yZGVyU3BhY2luZzogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIGhvcml6b250YWxNb250aFBhZGRpbmc6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgLy8gbmF2aWdhdGlvbiBwcm9wc1xuICBkaXNhYmxlUHJldjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgZGlzYWJsZU5leHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG5hdlByZXY6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIG5hdk5leHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIG5vTmF2QnV0dG9uczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgb25QcmV2TW9udGhDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25OZXh0TW9udGhDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25Nb250aENoYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25ZZWFyQ2hhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbk11bHRpcGx5U2Nyb2xsYWJsZU1vbnRoczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgLy8gVkVSVElDQUxfU0NST0xMQUJMRSBkYXlwaWNrZXJzIG9ubHlcbiAgLy8gbW9udGggcHJvcHNcbiAgcmVuZGVyTW9udGhUZXh0OiAoMCwgX2FpcmJuYlByb3BUeXBlcy5tdXR1YWxseUV4Y2x1c2l2ZVByb3BzKShfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLCAncmVuZGVyTW9udGhUZXh0JywgJ3JlbmRlck1vbnRoRWxlbWVudCcpLFxuICByZW5kZXJNb250aEVsZW1lbnQ6ICgwLCBfYWlyYm5iUHJvcFR5cGVzLm11dHVhbGx5RXhjbHVzaXZlUHJvcHMpKF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsICdyZW5kZXJNb250aFRleHQnLCAncmVuZGVyTW9udGhFbGVtZW50JyksXG4gIC8vIGRheSBwcm9wc1xuICBtb2RpZmllcnM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdE9mKF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdE9mKF9Nb2RpZmllcnNTaGFwZVtcImRlZmF1bHRcIl0pKSxcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlckRheUNvbnRlbnRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkRheUNsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkRheU1vdXNlRW50ZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uRGF5TW91c2VMZWF2ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgLy8gYWNjZXNzaWJpbGl0eSBwcm9wc1xuICBpc0ZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGdldEZpcnN0Rm9jdXNhYmxlRGF5OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkJsdXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgb25UYWI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uU2hpZnRUYWI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIC8vIGludGVybmF0aW9uYWxpemF0aW9uXG4gIG1vbnRoRm9ybWF0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHdlZWtEYXlGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgcGhyYXNlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc2hhcGUoKDAsIF9nZXRQaHJhc2VQcm9wVHlwZXNbXCJkZWZhdWx0XCJdKShfZGVmYXVsdFBocmFzZXMuRGF5UGlja2VyUGhyYXNlcykpLFxuICBkYXlBcmlhTGFiZWxGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZ1xufSkpIDoge307XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICAvLyBjYWxlbmRhciBwcmVzZW50YXRpb24gcHJvcHNcbiAgZW5hYmxlT3V0c2lkZURheXM6IGZhbHNlLFxuICBudW1iZXJPZk1vbnRoczogMixcbiAgb3JpZW50YXRpb246IF9jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTixcbiAgd2l0aFBvcnRhbDogZmFsc2UsXG4gIG9uT3V0c2lkZUNsaWNrOiBmdW5jdGlvbiBvbk91dHNpZGVDbGljaygpIHt9LFxuICBoaWRkZW46IGZhbHNlLFxuICBpbml0aWFsVmlzaWJsZU1vbnRoOiBmdW5jdGlvbiBpbml0aWFsVmlzaWJsZU1vbnRoKCkge1xuICAgIHJldHVybiAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCk7XG4gIH0sXG4gIGZpcnN0RGF5T2ZXZWVrOiBudWxsLFxuICByZW5kZXJDYWxlbmRhckluZm86IG51bGwsXG4gIGNhbGVuZGFySW5mb1Bvc2l0aW9uOiBfY29uc3RhbnRzLklORk9fUE9TSVRJT05fQk9UVE9NLFxuICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogZmFsc2UsXG4gIGRheVNpemU6IF9jb25zdGFudHMuREFZX1NJWkUsXG4gIGlzUlRMOiBmYWxzZSxcbiAgdmVydGljYWxIZWlnaHQ6IG51bGwsXG4gIG5vQm9yZGVyOiBmYWxzZSxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiB1bmRlZmluZWQsXG4gIHZlcnRpY2FsQm9yZGVyU3BhY2luZzogdW5kZWZpbmVkLFxuICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiAxMyxcbiAgcmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b246IHVuZGVmaW5lZCxcbiAgLy8gbmF2aWdhdGlvbiBwcm9wc1xuICBkaXNhYmxlUHJldjogZmFsc2UsXG4gIGRpc2FibGVOZXh0OiBmYWxzZSxcbiAgbmF2UHJldjogbnVsbCxcbiAgbmF2TmV4dDogbnVsbCxcbiAgbm9OYXZCdXR0b25zOiBmYWxzZSxcbiAgb25QcmV2TW9udGhDbGljazogZnVuY3Rpb24gb25QcmV2TW9udGhDbGljaygpIHt9LFxuICBvbk5leHRNb250aENsaWNrOiBmdW5jdGlvbiBvbk5leHRNb250aENsaWNrKCkge30sXG4gIG9uTW9udGhDaGFuZ2U6IGZ1bmN0aW9uIG9uTW9udGhDaGFuZ2UoKSB7fSxcbiAgb25ZZWFyQ2hhbmdlOiBmdW5jdGlvbiBvblllYXJDaGFuZ2UoKSB7fSxcbiAgb25NdWx0aXBseVNjcm9sbGFibGVNb250aHM6IGZ1bmN0aW9uIG9uTXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzKCkge30sXG4gIC8vIG1vbnRoIHByb3BzXG4gIHJlbmRlck1vbnRoVGV4dDogbnVsbCxcbiAgcmVuZGVyTW9udGhFbGVtZW50OiBudWxsLFxuICAvLyBkYXkgcHJvcHNcbiAgbW9kaWZpZXJzOiB7fSxcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IHVuZGVmaW5lZCxcbiAgcmVuZGVyRGF5Q29udGVudHM6IG51bGwsXG4gIG9uRGF5Q2xpY2s6IGZ1bmN0aW9uIG9uRGF5Q2xpY2soKSB7fSxcbiAgb25EYXlNb3VzZUVudGVyOiBmdW5jdGlvbiBvbkRheU1vdXNlRW50ZXIoKSB7fSxcbiAgb25EYXlNb3VzZUxlYXZlOiBmdW5jdGlvbiBvbkRheU1vdXNlTGVhdmUoKSB7fSxcbiAgLy8gYWNjZXNzaWJpbGl0eSBwcm9wc1xuICBpc0ZvY3VzZWQ6IGZhbHNlLFxuICBnZXRGaXJzdEZvY3VzYWJsZURheTogbnVsbCxcbiAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7fSxcbiAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBmYWxzZSxcbiAgb25UYWI6IGZ1bmN0aW9uIG9uVGFiKCkge30sXG4gIG9uU2hpZnRUYWI6IGZ1bmN0aW9uIG9uU2hpZnRUYWIoKSB7fSxcbiAgLy8gaW50ZXJuYXRpb25hbGl6YXRpb25cbiAgbW9udGhGb3JtYXQ6ICdNTU1NIFlZWVknLFxuICB3ZWVrRGF5Rm9ybWF0OiAnZGQnLFxuICBwaHJhc2VzOiBfZGVmYXVsdFBocmFzZXMuRGF5UGlja2VyUGhyYXNlcyxcbiAgZGF5QXJpYUxhYmVsRm9ybWF0OiB1bmRlZmluZWRcbn07XG5leHBvcnRzLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIERheVBpY2tlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX3JlZikge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyW1wiZGVmYXVsdFwiXSkoRGF5UGlja2VyLCBfcmVmKTtcbiAgdmFyIF9wcm90byA9IERheVBpY2tlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvWyFfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgJiYgXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIl0gPSBmdW5jdGlvbiAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIERheVBpY2tlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX3JlZi5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIHZhciBjdXJyZW50TW9udGggPSBwcm9wcy5oaWRkZW4gPyAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCkgOiBwcm9wcy5pbml0aWFsVmlzaWJsZU1vbnRoKCk7XG4gICAgdmFyIGZvY3VzZWREYXRlID0gY3VycmVudE1vbnRoLmNsb25lKCkuc3RhcnRPZignbW9udGgnKTtcblxuICAgIGlmIChwcm9wcy5nZXRGaXJzdEZvY3VzYWJsZURheSkge1xuICAgICAgZm9jdXNlZERhdGUgPSBwcm9wcy5nZXRGaXJzdEZvY3VzYWJsZURheShjdXJyZW50TW9udGgpO1xuICAgIH1cblxuICAgIHZhciBob3Jpem9udGFsTW9udGhQYWRkaW5nID0gcHJvcHMuaG9yaXpvbnRhbE1vbnRoUGFkZGluZztcbiAgICB2YXIgdHJhbnNsYXRpb25WYWx1ZSA9IHByb3BzLmlzUlRMICYmIF90aGlzLmlzSG9yaXpvbnRhbCgpID8gLSgwLCBfZ2V0Q2FsZW5kYXJNb250aFdpZHRoW1wiZGVmYXVsdFwiXSkocHJvcHMuZGF5U2l6ZSwgaG9yaXpvbnRhbE1vbnRoUGFkZGluZykgOiAwO1xuICAgIF90aGlzLmhhc1NldEluaXRpYWxWaXNpYmxlTW9udGggPSAhcHJvcHMuaGlkZGVuO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY3VycmVudE1vbnRoOiBjdXJyZW50TW9udGgsXG4gICAgICBtb250aFRyYW5zaXRpb246IG51bGwsXG4gICAgICB0cmFuc2xhdGlvblZhbHVlOiB0cmFuc2xhdGlvblZhbHVlLFxuICAgICAgc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGU6IDEsXG4gICAgICBjYWxlbmRhck1vbnRoV2lkdGg6ICgwLCBfZ2V0Q2FsZW5kYXJNb250aFdpZHRoW1wiZGVmYXVsdFwiXSkocHJvcHMuZGF5U2l6ZSwgaG9yaXpvbnRhbE1vbnRoUGFkZGluZyksXG4gICAgICBmb2N1c2VkRGF0ZTogIXByb3BzLmhpZGRlbiB8fCBwcm9wcy5pc0ZvY3VzZWQgPyBmb2N1c2VkRGF0ZSA6IG51bGwsXG4gICAgICBuZXh0Rm9jdXNlZERhdGU6IG51bGwsXG4gICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IHByb3BzLnNob3dLZXlib2FyZFNob3J0Y3V0cyxcbiAgICAgIG9uS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbENsb3NlOiBmdW5jdGlvbiBvbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZSgpIHt9LFxuICAgICAgaXNUb3VjaERldmljZTogKDAsIF9pc1RvdWNoRGV2aWNlW1wiZGVmYXVsdFwiXSkoKSxcbiAgICAgIHdpdGhNb3VzZUludGVyYWN0aW9uczogdHJ1ZSxcbiAgICAgIGNhbGVuZGFySW5mb1dpZHRoOiAwLFxuICAgICAgbW9udGhUaXRsZUhlaWdodDogbnVsbCxcbiAgICAgIGhhc1NldEhlaWdodDogZmFsc2VcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0Q2FsZW5kYXJNb250aFdlZWtzKGN1cnJlbnRNb250aCk7XG5cbiAgICBfdGhpcy5jYWxlbmRhck1vbnRoR3JpZEhlaWdodCA9IDA7XG4gICAgX3RoaXMuc2V0Q2FsZW5kYXJJbmZvV2lkdGhUaW1lb3V0ID0gbnVsbDtcbiAgICBfdGhpcy5zZXRDYWxlbmRhck1vbnRoR3JpZEhlaWdodFRpbWVvdXQgPSBudWxsO1xuICAgIF90aGlzLm9uS2V5RG93biA9IF90aGlzLm9uS2V5RG93bi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMudGhyb3R0bGVkS2V5RG93biA9ICgwLCBfdGhyb3R0bGVbXCJkZWZhdWx0XCJdKShfdGhpcy5vbkZpbmFsS2V5RG93biwgMjAwLCB7XG4gICAgICB0cmFpbGluZzogZmFsc2VcbiAgICB9KTtcbiAgICBfdGhpcy5vblByZXZNb250aENsaWNrID0gX3RoaXMub25QcmV2TW9udGhDbGljay5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25QcmV2TW9udGhUcmFuc2l0aW9uID0gX3RoaXMub25QcmV2TW9udGhUcmFuc2l0aW9uLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbk5leHRNb250aENsaWNrID0gX3RoaXMub25OZXh0TW9udGhDbGljay5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25OZXh0TW9udGhUcmFuc2l0aW9uID0gX3RoaXMub25OZXh0TW9udGhUcmFuc2l0aW9uLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbk1vbnRoQ2hhbmdlID0gX3RoaXMub25Nb250aENoYW5nZS5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25ZZWFyQ2hhbmdlID0gX3RoaXMub25ZZWFyQ2hhbmdlLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5tdWx0aXBseVNjcm9sbGFibGVNb250aHMgPSBfdGhpcy5tdWx0aXBseVNjcm9sbGFibGVNb250aHMuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLnVwZGF0ZVN0YXRlQWZ0ZXJNb250aFRyYW5zaXRpb24gPSBfdGhpcy51cGRhdGVTdGF0ZUFmdGVyTW9udGhUcmFuc2l0aW9uLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vcGVuS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9IF90aGlzLm9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5jbG9zZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBfdGhpcy5jbG9zZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLnNldENhbGVuZGFySW5mb1JlZiA9IF90aGlzLnNldENhbGVuZGFySW5mb1JlZi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMuc2V0Q29udGFpbmVyUmVmID0gX3RoaXMuc2V0Q29udGFpbmVyUmVmLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5zZXRUcmFuc2l0aW9uQ29udGFpbmVyUmVmID0gX3RoaXMuc2V0VHJhbnNpdGlvbkNvbnRhaW5lclJlZi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMuc2V0TW9udGhUaXRsZUhlaWdodCA9IF90aGlzLnNldE1vbnRoVGl0bGVIZWlnaHQuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHZhciBjdXJyZW50TW9udGggPSB0aGlzLnN0YXRlLmN1cnJlbnRNb250aDtcblxuICAgIGlmICh0aGlzLmNhbGVuZGFySW5mbykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzVG91Y2hEZXZpY2U6ICgwLCBfaXNUb3VjaERldmljZVtcImRlZmF1bHRcIl0pKCksXG4gICAgICAgIGNhbGVuZGFySW5mb1dpZHRoOiAoMCwgX2NhbGN1bGF0ZURpbWVuc2lvbltcImRlZmF1bHRcIl0pKHRoaXMuY2FsZW5kYXJJbmZvLCAnd2lkdGgnLCB0cnVlLCB0cnVlKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc1RvdWNoRGV2aWNlOiAoMCwgX2lzVG91Y2hEZXZpY2VbXCJkZWZhdWx0XCJdKSgpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldENhbGVuZGFyTW9udGhXZWVrcyhjdXJyZW50TW9udGgpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgaGlkZGVuID0gbmV4dFByb3BzLmhpZGRlbixcbiAgICAgICAgaXNGb2N1c2VkID0gbmV4dFByb3BzLmlzRm9jdXNlZCxcbiAgICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzID0gbmV4dFByb3BzLnNob3dLZXlib2FyZFNob3J0Y3V0cyxcbiAgICAgICAgb25CbHVyID0gbmV4dFByb3BzLm9uQmx1cixcbiAgICAgICAgcmVuZGVyTW9udGhUZXh0ID0gbmV4dFByb3BzLnJlbmRlck1vbnRoVGV4dCxcbiAgICAgICAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZyA9IG5leHRQcm9wcy5ob3Jpem9udGFsTW9udGhQYWRkaW5nO1xuICAgIHZhciBjdXJyZW50TW9udGggPSB0aGlzLnN0YXRlLmN1cnJlbnRNb250aDtcblxuICAgIGlmICghaGlkZGVuKSB7XG4gICAgICBpZiAoIXRoaXMuaGFzU2V0SW5pdGlhbFZpc2libGVNb250aCkge1xuICAgICAgICB0aGlzLmhhc1NldEluaXRpYWxWaXNpYmxlTW9udGggPSB0cnVlO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBjdXJyZW50TW9udGg6IG5leHRQcm9wcy5pbml0aWFsVmlzaWJsZU1vbnRoKClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZGF5U2l6ZSA9IF90aGlzJHByb3BzLmRheVNpemUsXG4gICAgICAgIHByZXZJc0ZvY3VzZWQgPSBfdGhpcyRwcm9wcy5pc0ZvY3VzZWQsXG4gICAgICAgIHByZXZSZW5kZXJNb250aFRleHQgPSBfdGhpcyRwcm9wcy5yZW5kZXJNb250aFRleHQ7XG5cbiAgICBpZiAobmV4dFByb3BzLmRheVNpemUgIT09IGRheVNpemUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjYWxlbmRhck1vbnRoV2lkdGg6ICgwLCBfZ2V0Q2FsZW5kYXJNb250aFdpZHRoW1wiZGVmYXVsdFwiXSkobmV4dFByb3BzLmRheVNpemUsIGhvcml6b250YWxNb250aFBhZGRpbmcpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNGb2N1c2VkICE9PSBwcmV2SXNGb2N1c2VkKSB7XG4gICAgICBpZiAoaXNGb2N1c2VkKSB7XG4gICAgICAgIHZhciBmb2N1c2VkRGF0ZSA9IHRoaXMuZ2V0Rm9jdXNlZERheShjdXJyZW50TW9udGgpO1xuICAgICAgICB2YXIgb25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2UgPSB0aGlzLnN0YXRlLm9uS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbENsb3NlO1xuXG4gICAgICAgIGlmIChuZXh0UHJvcHMuc2hvd0tleWJvYXJkU2hvcnRjdXRzKSB7XG4gICAgICAgICAgLy8gdGhlID8gc2hvcnRjdXQgY2FtZSBmcm9tIHRoZSBpbnB1dCBhbmQgd2Ugc2hvdWxkIHJldHVybiBpbnB1dCB0aGVyZSBvbmNlIGl0IGlzIGNsb3NlXG4gICAgICAgICAgb25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2UgPSBvbkJsdXI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IHNob3dLZXlib2FyZFNob3J0Y3V0cyxcbiAgICAgICAgICBvbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZTogb25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2UsXG4gICAgICAgICAgZm9jdXNlZERhdGU6IGZvY3VzZWREYXRlLFxuICAgICAgICAgIHdpdGhNb3VzZUludGVyYWN0aW9uczogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBmb2N1c2VkRGF0ZTogbnVsbFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmVuZGVyTW9udGhUZXh0ICE9PSBwcmV2UmVuZGVyTW9udGhUZXh0KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbW9udGhUaXRsZUhlaWdodDogbnVsbFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSB0aGlzLnByb3BzLnRyYW5zaXRpb25EdXJhdGlvbjsgLy8gQ2FsY3VsYXRpbmcgdGhlIGRpbWVuc2lvbnMgdHJpZ2dlciBhIERPTSByZXBhaW50IHdoaWNoXG4gICAgLy8gYnJlYWtzIHRoZSBDU1MgdHJhbnNpdGlvbi5cbiAgICAvLyBUaGUgc2V0VGltZW91dCB3aWxsIHdhaXQgdW50aWwgdGhlIHRyYW5zaXRpb24gZW5kcy5cblxuICAgIGlmICh0aGlzLmNhbGVuZGFySW5mbykge1xuICAgICAgdGhpcy5zZXRDYWxlbmRhckluZm9XaWR0aFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNhbGVuZGFySW5mb1dpZHRoID0gX3RoaXMyLnN0YXRlLmNhbGVuZGFySW5mb1dpZHRoO1xuICAgICAgICB2YXIgY2FsZW5kYXJJbmZvUGFuZWxXaWR0aCA9ICgwLCBfY2FsY3VsYXRlRGltZW5zaW9uW1wiZGVmYXVsdFwiXSkoX3RoaXMyLmNhbGVuZGFySW5mbywgJ3dpZHRoJywgdHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKGNhbGVuZGFySW5mb1dpZHRoICE9PSBjYWxlbmRhckluZm9QYW5lbFdpZHRoKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGNhbGVuZGFySW5mb1dpZHRoOiBjYWxlbmRhckluZm9QYW5lbFdpZHRoXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9yaWVudGF0aW9uID0gX3RoaXMkcHJvcHMyLm9yaWVudGF0aW9uLFxuICAgICAgICBkYXlTaXplID0gX3RoaXMkcHJvcHMyLmRheVNpemUsXG4gICAgICAgIGlzRm9jdXNlZCA9IF90aGlzJHByb3BzMi5pc0ZvY3VzZWQsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHMyLm51bWJlck9mTW9udGhzO1xuICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGZvY3VzZWREYXRlID0gX3RoaXMkc3RhdGUuZm9jdXNlZERhdGUsXG4gICAgICAgIG1vbnRoVGl0bGVIZWlnaHQgPSBfdGhpcyRzdGF0ZS5tb250aFRpdGxlSGVpZ2h0O1xuXG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkgJiYgKG9yaWVudGF0aW9uICE9PSBwcmV2UHJvcHMub3JpZW50YXRpb24gfHwgZGF5U2l6ZSAhPT0gcHJldlByb3BzLmRheVNpemUpKSB7XG4gICAgICB2YXIgdmlzaWJsZUNhbGVuZGFyV2Vla3MgPSB0aGlzLmNhbGVuZGFyTW9udGhXZWVrcy5zbGljZSgxLCBudW1iZXJPZk1vbnRocyArIDEpO1xuICAgICAgdmFyIGNhbGVuZGFyTW9udGhXZWVrc0hlaWdodCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIFswXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKSh2aXNpYmxlQ2FsZW5kYXJXZWVrcykpKSAqIChkYXlTaXplIC0gMSk7XG4gICAgICB2YXIgbmV3TW9udGhIZWlnaHQgPSBtb250aFRpdGxlSGVpZ2h0ICsgY2FsZW5kYXJNb250aFdlZWtzSGVpZ2h0ICsgMTtcbiAgICAgIHRoaXMuYWRqdXN0RGF5UGlja2VySGVpZ2h0KG5ld01vbnRoSGVpZ2h0KTtcbiAgICB9XG5cbiAgICBpZiAoIXByZXZQcm9wcy5pc0ZvY3VzZWQgJiYgaXNGb2N1c2VkICYmICFmb2N1c2VkRGF0ZSkge1xuICAgICAgdGhpcy5jb250YWluZXIuZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuc2V0Q2FsZW5kYXJJbmZvV2lkdGhUaW1lb3V0KTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5zZXRDYWxlbmRhck1vbnRoR3JpZEhlaWdodFRpbWVvdXQpO1xuICB9O1xuXG4gIF9wcm90by5vbktleURvd24gPSBmdW5jdGlvbiBvbktleURvd24oZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBpZiAoIV9jb25zdGFudHMuTU9ESUZJRVJfS0VZX05BTUVTLmhhcyhlLmtleSkpIHtcbiAgICAgIHRoaXMudGhyb3R0bGVkS2V5RG93bihlKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uRmluYWxLZXlEb3duID0gZnVuY3Rpb24gb25GaW5hbEtleURvd24oZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgd2l0aE1vdXNlSW50ZXJhY3Rpb25zOiBmYWxzZVxuICAgIH0pO1xuICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBvbkJsdXIgPSBfdGhpcyRwcm9wczMub25CbHVyLFxuICAgICAgICBvblRhYiA9IF90aGlzJHByb3BzMy5vblRhYixcbiAgICAgICAgb25TaGlmdFRhYiA9IF90aGlzJHByb3BzMy5vblNoaWZ0VGFiLFxuICAgICAgICBpc1JUTCA9IF90aGlzJHByb3BzMy5pc1JUTDtcbiAgICB2YXIgX3RoaXMkc3RhdGUyID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgZm9jdXNlZERhdGUgPSBfdGhpcyRzdGF0ZTIuZm9jdXNlZERhdGUsXG4gICAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0cyA9IF90aGlzJHN0YXRlMi5zaG93S2V5Ym9hcmRTaG9ydGN1dHM7XG4gICAgaWYgKCFmb2N1c2VkRGF0ZSkgcmV0dXJuO1xuICAgIHZhciBuZXdGb2N1c2VkRGF0ZSA9IGZvY3VzZWREYXRlLmNsb25lKCk7XG4gICAgdmFyIGRpZFRyYW5zaXRpb25Nb250aCA9IGZhbHNlOyAvLyBmb2N1cyBtaWdodCBiZSBhbnl3aGVyZSB3aGVuIHRoZSBrZXlib2FyZCBzaG9ydGN1dHMgcGFuZWwgaXMgb3BlbmVkIHNvIHdlIHdhbnQgdG9cbiAgICAvLyByZXR1cm4gaXQgdG8gd2hlcmV2ZXIgaXQgd2FzIGJlZm9yZSB3aGVuIHRoZSBwYW5lbCB3YXMgb3BlbmVkXG5cbiAgICB2YXIgYWN0aXZlRWxlbWVudCA9ICgwLCBfZ2V0QWN0aXZlRWxlbWVudFtcImRlZmF1bHRcIl0pKCk7XG5cbiAgICB2YXIgb25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2UgPSBmdW5jdGlvbiBvbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZSgpIHtcbiAgICAgIGlmIChhY3RpdmVFbGVtZW50KSBhY3RpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgfTtcblxuICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG5ld0ZvY3VzZWREYXRlLnN1YnRyYWN0KDEsICd3ZWVrJyk7XG4gICAgICAgIGRpZFRyYW5zaXRpb25Nb250aCA9IHRoaXMubWF5YmVUcmFuc2l0aW9uUHJldk1vbnRoKG5ld0ZvY3VzZWREYXRlKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBpZiAoaXNSVEwpIHtcbiAgICAgICAgICBuZXdGb2N1c2VkRGF0ZS5hZGQoMSwgJ2RheScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0ZvY3VzZWREYXRlLnN1YnRyYWN0KDEsICdkYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpZFRyYW5zaXRpb25Nb250aCA9IHRoaXMubWF5YmVUcmFuc2l0aW9uUHJldk1vbnRoKG5ld0ZvY3VzZWREYXRlKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ0hvbWUnOlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG5ld0ZvY3VzZWREYXRlLnN0YXJ0T2YoJ3dlZWsnKTtcbiAgICAgICAgZGlkVHJhbnNpdGlvbk1vbnRoID0gdGhpcy5tYXliZVRyYW5zaXRpb25QcmV2TW9udGgobmV3Rm9jdXNlZERhdGUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnUGFnZVVwJzpcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBuZXdGb2N1c2VkRGF0ZS5zdWJ0cmFjdCgxLCAnbW9udGgnKTtcbiAgICAgICAgZGlkVHJhbnNpdGlvbk1vbnRoID0gdGhpcy5tYXliZVRyYW5zaXRpb25QcmV2TW9udGgobmV3Rm9jdXNlZERhdGUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBuZXdGb2N1c2VkRGF0ZS5hZGQoMSwgJ3dlZWsnKTtcbiAgICAgICAgZGlkVHJhbnNpdGlvbk1vbnRoID0gdGhpcy5tYXliZVRyYW5zaXRpb25OZXh0TW9udGgobmV3Rm9jdXNlZERhdGUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBpZiAoaXNSVEwpIHtcbiAgICAgICAgICBuZXdGb2N1c2VkRGF0ZS5zdWJ0cmFjdCgxLCAnZGF5Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3Rm9jdXNlZERhdGUuYWRkKDEsICdkYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpZFRyYW5zaXRpb25Nb250aCA9IHRoaXMubWF5YmVUcmFuc2l0aW9uTmV4dE1vbnRoKG5ld0ZvY3VzZWREYXRlKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ0VuZCc6XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbmV3Rm9jdXNlZERhdGUuZW5kT2YoJ3dlZWsnKTtcbiAgICAgICAgZGlkVHJhbnNpdGlvbk1vbnRoID0gdGhpcy5tYXliZVRyYW5zaXRpb25OZXh0TW9udGgobmV3Rm9jdXNlZERhdGUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnUGFnZURvd24nOlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG5ld0ZvY3VzZWREYXRlLmFkZCgxLCAnbW9udGgnKTtcbiAgICAgICAgZGlkVHJhbnNpdGlvbk1vbnRoID0gdGhpcy5tYXliZVRyYW5zaXRpb25OZXh0TW9udGgobmV3Rm9jdXNlZERhdGUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnPyc6XG4gICAgICAgIHRoaXMub3BlbktleWJvYXJkU2hvcnRjdXRzUGFuZWwob25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2UpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgICAgaWYgKHNob3dLZXlib2FyZFNob3J0Y3V0cykge1xuICAgICAgICAgIHRoaXMuY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb25CbHVyKGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ1RhYic6XG4gICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgb25TaGlmdFRhYigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uVGFiKGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH0gLy8gSWYgdGhlcmUgd2FzIGEgbW9udGggdHJhbnNpdGlvbiwgZG8gbm90IHVwZGF0ZSB0aGUgZm9jdXNlZCBkYXRlIHVudGlsIHRoZSB0cmFuc2l0aW9uIGhhc1xuICAgIC8vIGNvbXBsZXRlZC4gT3RoZXJ3aXNlLCBhdHRlbXB0aW5nIHRvIGZvY3VzIG9uIGEgRE9NIG5vZGUgbWF5IGludGVycnVwdCB0aGUgQ1NTIGFuaW1hdGlvbi4gSWZcbiAgICAvLyBkaWRUcmFuc2l0aW9uTW9udGggaXMgdHJ1ZSwgdGhlIGZvY3VzZWREYXRlIGdldHMgdXBkYXRlZCBpbiAjdXBkYXRlU3RhdGVBZnRlck1vbnRoVHJhbnNpdGlvblxuXG5cbiAgICBpZiAoIWRpZFRyYW5zaXRpb25Nb250aCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWREYXRlOiBuZXdGb2N1c2VkRGF0ZVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vblByZXZNb250aENsaWNrID0gZnVuY3Rpb24gb25QcmV2TW9udGhDbGljayhlKSB7XG4gICAgaWYgKGUpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLm9uUHJldk1vbnRoVHJhbnNpdGlvbigpO1xuICB9O1xuXG4gIF9wcm90by5vblByZXZNb250aFRyYW5zaXRpb24gPSBmdW5jdGlvbiBvblByZXZNb250aFRyYW5zaXRpb24obmV4dEZvY3VzZWREYXRlKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRheVNpemUgPSBfdGhpcyRwcm9wczQuZGF5U2l6ZSxcbiAgICAgICAgaXNSVEwgPSBfdGhpcyRwcm9wczQuaXNSVEwsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHM0Lm51bWJlck9mTW9udGhzO1xuICAgIHZhciBfdGhpcyRzdGF0ZTMgPSB0aGlzLnN0YXRlLFxuICAgICAgICBjYWxlbmRhck1vbnRoV2lkdGggPSBfdGhpcyRzdGF0ZTMuY2FsZW5kYXJNb250aFdpZHRoLFxuICAgICAgICBtb250aFRpdGxlSGVpZ2h0ID0gX3RoaXMkc3RhdGUzLm1vbnRoVGl0bGVIZWlnaHQ7XG4gICAgdmFyIHRyYW5zbGF0aW9uVmFsdWU7XG5cbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIHZhciBjYWxlbmRhck1vbnRoV2Vla3NIZWlnaHQgPSB0aGlzLmNhbGVuZGFyTW9udGhXZWVrc1swXSAqIChkYXlTaXplIC0gMSk7XG4gICAgICB0cmFuc2xhdGlvblZhbHVlID0gbW9udGhUaXRsZUhlaWdodCArIGNhbGVuZGFyTW9udGhXZWVrc0hlaWdodCArIDE7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB0cmFuc2xhdGlvblZhbHVlID0gY2FsZW5kYXJNb250aFdpZHRoO1xuXG4gICAgICBpZiAoaXNSVEwpIHtcbiAgICAgICAgdHJhbnNsYXRpb25WYWx1ZSA9IC0yICogY2FsZW5kYXJNb250aFdpZHRoO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmlzaWJsZUNhbGVuZGFyV2Vla3MgPSB0aGlzLmNhbGVuZGFyTW9udGhXZWVrcy5zbGljZSgwLCBudW1iZXJPZk1vbnRocyk7XG5cbiAgICAgIHZhciBfY2FsZW5kYXJNb250aFdlZWtzSGVpZ2h0ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgWzBdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKHZpc2libGVDYWxlbmRhcldlZWtzKSkpICogKGRheVNpemUgLSAxKTtcblxuICAgICAgdmFyIG5ld01vbnRoSGVpZ2h0ID0gbW9udGhUaXRsZUhlaWdodCArIF9jYWxlbmRhck1vbnRoV2Vla3NIZWlnaHQgKyAxO1xuICAgICAgdGhpcy5hZGp1c3REYXlQaWNrZXJIZWlnaHQobmV3TW9udGhIZWlnaHQpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbW9udGhUcmFuc2l0aW9uOiBQUkVWX1RSQU5TSVRJT04sXG4gICAgICB0cmFuc2xhdGlvblZhbHVlOiB0cmFuc2xhdGlvblZhbHVlLFxuICAgICAgZm9jdXNlZERhdGU6IG51bGwsXG4gICAgICBuZXh0Rm9jdXNlZERhdGU6IG5leHRGb2N1c2VkRGF0ZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vbk1vbnRoQ2hhbmdlID0gZnVuY3Rpb24gb25Nb250aENoYW5nZShjdXJyZW50TW9udGgpIHtcbiAgICB0aGlzLnNldENhbGVuZGFyTW9udGhXZWVrcyhjdXJyZW50TW9udGgpO1xuICAgIHRoaXMuY2FsY3VsYXRlQW5kU2V0RGF5UGlja2VySGVpZ2h0KCk7IC8vIFRyYW5zbGF0aW9uIHZhbHVlIGlzIGEgaGFjayB0byBmb3JjZSBhbiBpbnZpc2libGUgdHJhbnNpdGlvbiB0aGF0XG4gICAgLy8gcHJvcGVybHkgcmVyZW5kZXJzIHRoZSBDYWxlbmRhck1vbnRoR3JpZFxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtb250aFRyYW5zaXRpb246IE1PTlRIX1NFTEVDVElPTl9UUkFOU0lUSU9OLFxuICAgICAgdHJhbnNsYXRpb25WYWx1ZTogMC4wMDAwMSxcbiAgICAgIGZvY3VzZWREYXRlOiBudWxsLFxuICAgICAgbmV4dEZvY3VzZWREYXRlOiBjdXJyZW50TW9udGgsXG4gICAgICBjdXJyZW50TW9udGg6IGN1cnJlbnRNb250aFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vblllYXJDaGFuZ2UgPSBmdW5jdGlvbiBvblllYXJDaGFuZ2UoY3VycmVudE1vbnRoKSB7XG4gICAgdGhpcy5zZXRDYWxlbmRhck1vbnRoV2Vla3MoY3VycmVudE1vbnRoKTtcbiAgICB0aGlzLmNhbGN1bGF0ZUFuZFNldERheVBpY2tlckhlaWdodCgpOyAvLyBUcmFuc2xhdGlvbiB2YWx1ZSBpcyBhIGhhY2sgdG8gZm9yY2UgYW4gaW52aXNpYmxlIHRyYW5zaXRpb24gdGhhdFxuICAgIC8vIHByb3Blcmx5IHJlcmVuZGVycyB0aGUgQ2FsZW5kYXJNb250aEdyaWRcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbW9udGhUcmFuc2l0aW9uOiBZRUFSX1NFTEVDVElPTl9UUkFOU0lUSU9OLFxuICAgICAgdHJhbnNsYXRpb25WYWx1ZTogMC4wMDAxLFxuICAgICAgZm9jdXNlZERhdGU6IG51bGwsXG4gICAgICBuZXh0Rm9jdXNlZERhdGU6IGN1cnJlbnRNb250aCxcbiAgICAgIGN1cnJlbnRNb250aDogY3VycmVudE1vbnRoXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uTmV4dE1vbnRoQ2xpY2sgPSBmdW5jdGlvbiBvbk5leHRNb250aENsaWNrKGUpIHtcbiAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMub25OZXh0TW9udGhUcmFuc2l0aW9uKCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uTmV4dE1vbnRoVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIG9uTmV4dE1vbnRoVHJhbnNpdGlvbihuZXh0Rm9jdXNlZERhdGUpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaXNSVEwgPSBfdGhpcyRwcm9wczUuaXNSVEwsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHM1Lm51bWJlck9mTW9udGhzLFxuICAgICAgICBkYXlTaXplID0gX3RoaXMkcHJvcHM1LmRheVNpemU7XG4gICAgdmFyIF90aGlzJHN0YXRlNCA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGNhbGVuZGFyTW9udGhXaWR0aCA9IF90aGlzJHN0YXRlNC5jYWxlbmRhck1vbnRoV2lkdGgsXG4gICAgICAgIG1vbnRoVGl0bGVIZWlnaHQgPSBfdGhpcyRzdGF0ZTQubW9udGhUaXRsZUhlaWdodDtcbiAgICB2YXIgdHJhbnNsYXRpb25WYWx1ZTtcblxuICAgIGlmICh0aGlzLmlzVmVydGljYWwoKSkge1xuICAgICAgdmFyIGZpcnN0VmlzaWJsZU1vbnRoV2Vla3MgPSB0aGlzLmNhbGVuZGFyTW9udGhXZWVrc1sxXTtcbiAgICAgIHZhciBjYWxlbmRhck1vbnRoV2Vla3NIZWlnaHQgPSBmaXJzdFZpc2libGVNb250aFdlZWtzICogKGRheVNpemUgLSAxKTtcbiAgICAgIHRyYW5zbGF0aW9uVmFsdWUgPSAtKG1vbnRoVGl0bGVIZWlnaHQgKyBjYWxlbmRhck1vbnRoV2Vla3NIZWlnaHQgKyAxKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdHJhbnNsYXRpb25WYWx1ZSA9IC1jYWxlbmRhck1vbnRoV2lkdGg7XG5cbiAgICAgIGlmIChpc1JUTCkge1xuICAgICAgICB0cmFuc2xhdGlvblZhbHVlID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHZpc2libGVDYWxlbmRhcldlZWtzID0gdGhpcy5jYWxlbmRhck1vbnRoV2Vla3Muc2xpY2UoMiwgbnVtYmVyT2ZNb250aHMgKyAyKTtcblxuICAgICAgdmFyIF9jYWxlbmRhck1vbnRoV2Vla3NIZWlnaHQyID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgWzBdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKHZpc2libGVDYWxlbmRhcldlZWtzKSkpICogKGRheVNpemUgLSAxKTtcblxuICAgICAgdmFyIG5ld01vbnRoSGVpZ2h0ID0gbW9udGhUaXRsZUhlaWdodCArIF9jYWxlbmRhck1vbnRoV2Vla3NIZWlnaHQyICsgMTtcbiAgICAgIHRoaXMuYWRqdXN0RGF5UGlja2VySGVpZ2h0KG5ld01vbnRoSGVpZ2h0KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1vbnRoVHJhbnNpdGlvbjogTkVYVF9UUkFOU0lUSU9OLFxuICAgICAgdHJhbnNsYXRpb25WYWx1ZTogdHJhbnNsYXRpb25WYWx1ZSxcbiAgICAgIGZvY3VzZWREYXRlOiBudWxsLFxuICAgICAgbmV4dEZvY3VzZWREYXRlOiBuZXh0Rm9jdXNlZERhdGVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0Rmlyc3REYXlPZldlZWsgPSBmdW5jdGlvbiBnZXRGaXJzdERheU9mV2VlaygpIHtcbiAgICB2YXIgZmlyc3REYXlPZldlZWsgPSB0aGlzLnByb3BzLmZpcnN0RGF5T2ZXZWVrO1xuXG4gICAgaWYgKGZpcnN0RGF5T2ZXZWVrID09IG51bGwpIHtcbiAgICAgIHJldHVybiBfbW9tZW50W1wiZGVmYXVsdFwiXS5sb2NhbGVEYXRhKCkuZmlyc3REYXlPZldlZWsoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlyc3REYXlPZldlZWs7XG4gIH07XG5cbiAgX3Byb3RvLmdldEZpcnN0VmlzaWJsZUluZGV4ID0gZnVuY3Rpb24gZ2V0Rmlyc3RWaXNpYmxlSW5kZXgoKSB7XG4gICAgdmFyIG9yaWVudGF0aW9uID0gdGhpcy5wcm9wcy5vcmllbnRhdGlvbjtcbiAgICB2YXIgbW9udGhUcmFuc2l0aW9uID0gdGhpcy5zdGF0ZS5tb250aFRyYW5zaXRpb247XG4gICAgaWYgKG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEUpIHJldHVybiAwO1xuICAgIHZhciBmaXJzdFZpc2libGVNb250aEluZGV4ID0gMTtcblxuICAgIGlmIChtb250aFRyYW5zaXRpb24gPT09IFBSRVZfVFJBTlNJVElPTikge1xuICAgICAgZmlyc3RWaXNpYmxlTW9udGhJbmRleCAtPSAxO1xuICAgIH0gZWxzZSBpZiAobW9udGhUcmFuc2l0aW9uID09PSBORVhUX1RSQU5TSVRJT04pIHtcbiAgICAgIGZpcnN0VmlzaWJsZU1vbnRoSW5kZXggKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlyc3RWaXNpYmxlTW9udGhJbmRleDtcbiAgfTtcblxuICBfcHJvdG8uZ2V0Rm9jdXNlZERheSA9IGZ1bmN0aW9uIGdldEZvY3VzZWREYXkobmV3TW9udGgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM2ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZ2V0Rmlyc3RGb2N1c2FibGVEYXkgPSBfdGhpcyRwcm9wczYuZ2V0Rmlyc3RGb2N1c2FibGVEYXksXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHM2Lm51bWJlck9mTW9udGhzO1xuICAgIHZhciBmb2N1c2VkRGF0ZTtcblxuICAgIGlmIChnZXRGaXJzdEZvY3VzYWJsZURheSkge1xuICAgICAgZm9jdXNlZERhdGUgPSBnZXRGaXJzdEZvY3VzYWJsZURheShuZXdNb250aCk7XG4gICAgfVxuXG4gICAgaWYgKG5ld01vbnRoICYmICghZm9jdXNlZERhdGUgfHwgISgwLCBfaXNEYXlWaXNpYmxlW1wiZGVmYXVsdFwiXSkoZm9jdXNlZERhdGUsIG5ld01vbnRoLCBudW1iZXJPZk1vbnRocykpKSB7XG4gICAgICBmb2N1c2VkRGF0ZSA9IG5ld01vbnRoLmNsb25lKCkuc3RhcnRPZignbW9udGgnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm9jdXNlZERhdGU7XG4gIH07XG5cbiAgX3Byb3RvLnNldE1vbnRoVGl0bGVIZWlnaHQgPSBmdW5jdGlvbiBzZXRNb250aFRpdGxlSGVpZ2h0KG1vbnRoVGl0bGVIZWlnaHQpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbW9udGhUaXRsZUhlaWdodDogbW9udGhUaXRsZUhlaWdodFxuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5jYWxjdWxhdGVBbmRTZXREYXlQaWNrZXJIZWlnaHQoKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uc2V0Q2FsZW5kYXJNb250aFdlZWtzID0gZnVuY3Rpb24gc2V0Q2FsZW5kYXJNb250aFdlZWtzKGN1cnJlbnRNb250aCkge1xuICAgIHZhciBudW1iZXJPZk1vbnRocyA9IHRoaXMucHJvcHMubnVtYmVyT2ZNb250aHM7XG4gICAgdGhpcy5jYWxlbmRhck1vbnRoV2Vla3MgPSBbXTtcbiAgICB2YXIgbW9udGggPSBjdXJyZW50TW9udGguY2xvbmUoKS5zdWJ0cmFjdCgxLCAnbW9udGhzJyk7XG4gICAgdmFyIGZpcnN0RGF5T2ZXZWVrID0gdGhpcy5nZXRGaXJzdERheU9mV2VlaygpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZk1vbnRocyArIDI7IGkgKz0gMSkge1xuICAgICAgdmFyIG51bWJlck9mV2Vla3MgPSAoMCwgX2dldE51bWJlck9mQ2FsZW5kYXJNb250aFdlZWtzW1wiZGVmYXVsdFwiXSkobW9udGgsIGZpcnN0RGF5T2ZXZWVrKTtcbiAgICAgIHRoaXMuY2FsZW5kYXJNb250aFdlZWtzLnB1c2gobnVtYmVyT2ZXZWVrcyk7XG4gICAgICBtb250aCA9IG1vbnRoLmFkZCgxLCAnbW9udGhzJyk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zZXRDb250YWluZXJSZWYgPSBmdW5jdGlvbiBzZXRDb250YWluZXJSZWYocmVmKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSByZWY7XG4gIH07XG5cbiAgX3Byb3RvLnNldENhbGVuZGFySW5mb1JlZiA9IGZ1bmN0aW9uIHNldENhbGVuZGFySW5mb1JlZihyZWYpIHtcbiAgICB0aGlzLmNhbGVuZGFySW5mbyA9IHJlZjtcbiAgfTtcblxuICBfcHJvdG8uc2V0VHJhbnNpdGlvbkNvbnRhaW5lclJlZiA9IGZ1bmN0aW9uIHNldFRyYW5zaXRpb25Db250YWluZXJSZWYocmVmKSB7XG4gICAgdGhpcy50cmFuc2l0aW9uQ29udGFpbmVyID0gcmVmO1xuICB9O1xuXG4gIF9wcm90by5tYXliZVRyYW5zaXRpb25OZXh0TW9udGggPSBmdW5jdGlvbiBtYXliZVRyYW5zaXRpb25OZXh0TW9udGgobmV3Rm9jdXNlZERhdGUpIHtcbiAgICB2YXIgbnVtYmVyT2ZNb250aHMgPSB0aGlzLnByb3BzLm51bWJlck9mTW9udGhzO1xuICAgIHZhciBfdGhpcyRzdGF0ZTUgPSB0aGlzLnN0YXRlLFxuICAgICAgICBjdXJyZW50TW9udGggPSBfdGhpcyRzdGF0ZTUuY3VycmVudE1vbnRoLFxuICAgICAgICBmb2N1c2VkRGF0ZSA9IF90aGlzJHN0YXRlNS5mb2N1c2VkRGF0ZTtcbiAgICB2YXIgbmV3Rm9jdXNlZERhdGVNb250aCA9IG5ld0ZvY3VzZWREYXRlLm1vbnRoKCk7XG4gICAgdmFyIGZvY3VzZWREYXRlTW9udGggPSBmb2N1c2VkRGF0ZS5tb250aCgpO1xuICAgIHZhciBpc05ld0ZvY3VzZWREYXRlVmlzaWJsZSA9ICgwLCBfaXNEYXlWaXNpYmxlW1wiZGVmYXVsdFwiXSkobmV3Rm9jdXNlZERhdGUsIGN1cnJlbnRNb250aCwgbnVtYmVyT2ZNb250aHMpO1xuXG4gICAgaWYgKG5ld0ZvY3VzZWREYXRlTW9udGggIT09IGZvY3VzZWREYXRlTW9udGggJiYgIWlzTmV3Rm9jdXNlZERhdGVWaXNpYmxlKSB7XG4gICAgICB0aGlzLm9uTmV4dE1vbnRoVHJhbnNpdGlvbihuZXdGb2N1c2VkRGF0ZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgX3Byb3RvLm1heWJlVHJhbnNpdGlvblByZXZNb250aCA9IGZ1bmN0aW9uIG1heWJlVHJhbnNpdGlvblByZXZNb250aChuZXdGb2N1c2VkRGF0ZSkge1xuICAgIHZhciBudW1iZXJPZk1vbnRocyA9IHRoaXMucHJvcHMubnVtYmVyT2ZNb250aHM7XG4gICAgdmFyIF90aGlzJHN0YXRlNiA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGN1cnJlbnRNb250aCA9IF90aGlzJHN0YXRlNi5jdXJyZW50TW9udGgsXG4gICAgICAgIGZvY3VzZWREYXRlID0gX3RoaXMkc3RhdGU2LmZvY3VzZWREYXRlO1xuICAgIHZhciBuZXdGb2N1c2VkRGF0ZU1vbnRoID0gbmV3Rm9jdXNlZERhdGUubW9udGgoKTtcbiAgICB2YXIgZm9jdXNlZERhdGVNb250aCA9IGZvY3VzZWREYXRlLm1vbnRoKCk7XG4gICAgdmFyIGlzTmV3Rm9jdXNlZERhdGVWaXNpYmxlID0gKDAsIF9pc0RheVZpc2libGVbXCJkZWZhdWx0XCJdKShuZXdGb2N1c2VkRGF0ZSwgY3VycmVudE1vbnRoLCBudW1iZXJPZk1vbnRocyk7XG5cbiAgICBpZiAobmV3Rm9jdXNlZERhdGVNb250aCAhPT0gZm9jdXNlZERhdGVNb250aCAmJiAhaXNOZXdGb2N1c2VkRGF0ZVZpc2libGUpIHtcbiAgICAgIHRoaXMub25QcmV2TW9udGhUcmFuc2l0aW9uKG5ld0ZvY3VzZWREYXRlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8ubXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzID0gZnVuY3Rpb24gbXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzKGUpIHtcbiAgICB2YXIgb25NdWx0aXBseVNjcm9sbGFibGVNb250aHMgPSB0aGlzLnByb3BzLm9uTXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzO1xuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKG9uTXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzKSBvbk11bHRpcGx5U2Nyb2xsYWJsZU1vbnRocyhlKTtcbiAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIHNjcm9sbGFibGVNb250aE11bHRpcGxlID0gX3JlZjIuc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGU7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzY3JvbGxhYmxlTW9udGhNdWx0aXBsZTogc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGUgKyAxXG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5pc0hvcml6b250YWwgPSBmdW5jdGlvbiBpc0hvcml6b250YWwoKSB7XG4gICAgdmFyIG9yaWVudGF0aW9uID0gdGhpcy5wcm9wcy5vcmllbnRhdGlvbjtcbiAgICByZXR1cm4gb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTjtcbiAgfTtcblxuICBfcHJvdG8uaXNWZXJ0aWNhbCA9IGZ1bmN0aW9uIGlzVmVydGljYWwoKSB7XG4gICAgdmFyIG9yaWVudGF0aW9uID0gdGhpcy5wcm9wcy5vcmllbnRhdGlvbjtcbiAgICByZXR1cm4gb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfT1JJRU5UQVRJT04gfHwgb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlU3RhdGVBZnRlck1vbnRoVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXRlQWZ0ZXJNb250aFRyYW5zaXRpb24oKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHM3ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25QcmV2TW9udGhDbGljayA9IF90aGlzJHByb3BzNy5vblByZXZNb250aENsaWNrLFxuICAgICAgICBvbk5leHRNb250aENsaWNrID0gX3RoaXMkcHJvcHM3Lm9uTmV4dE1vbnRoQ2xpY2ssXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHM3Lm51bWJlck9mTW9udGhzLFxuICAgICAgICBvbk1vbnRoQ2hhbmdlID0gX3RoaXMkcHJvcHM3Lm9uTW9udGhDaGFuZ2UsXG4gICAgICAgIG9uWWVhckNoYW5nZSA9IF90aGlzJHByb3BzNy5vblllYXJDaGFuZ2UsXG4gICAgICAgIGlzUlRMID0gX3RoaXMkcHJvcHM3LmlzUlRMO1xuICAgIHZhciBfdGhpcyRzdGF0ZTcgPSB0aGlzLnN0YXRlLFxuICAgICAgICBjdXJyZW50TW9udGggPSBfdGhpcyRzdGF0ZTcuY3VycmVudE1vbnRoLFxuICAgICAgICBtb250aFRyYW5zaXRpb24gPSBfdGhpcyRzdGF0ZTcubW9udGhUcmFuc2l0aW9uLFxuICAgICAgICBmb2N1c2VkRGF0ZSA9IF90aGlzJHN0YXRlNy5mb2N1c2VkRGF0ZSxcbiAgICAgICAgbmV4dEZvY3VzZWREYXRlID0gX3RoaXMkc3RhdGU3Lm5leHRGb2N1c2VkRGF0ZSxcbiAgICAgICAgd2l0aE1vdXNlSW50ZXJhY3Rpb25zID0gX3RoaXMkc3RhdGU3LndpdGhNb3VzZUludGVyYWN0aW9ucyxcbiAgICAgICAgY2FsZW5kYXJNb250aFdpZHRoID0gX3RoaXMkc3RhdGU3LmNhbGVuZGFyTW9udGhXaWR0aDtcbiAgICBpZiAoIW1vbnRoVHJhbnNpdGlvbikgcmV0dXJuO1xuICAgIHZhciBuZXdNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpO1xuICAgIHZhciBmaXJzdERheU9mV2VlayA9IHRoaXMuZ2V0Rmlyc3REYXlPZldlZWsoKTtcblxuICAgIGlmIChtb250aFRyYW5zaXRpb24gPT09IFBSRVZfVFJBTlNJVElPTikge1xuICAgICAgbmV3TW9udGguc3VidHJhY3QoMSwgJ21vbnRoJyk7XG4gICAgICBpZiAob25QcmV2TW9udGhDbGljaykgb25QcmV2TW9udGhDbGljayhuZXdNb250aCk7XG4gICAgICB2YXIgbmV3SW52aXNpYmxlTW9udGggPSBuZXdNb250aC5jbG9uZSgpLnN1YnRyYWN0KDEsICdtb250aCcpO1xuICAgICAgdmFyIG51bWJlck9mV2Vla3MgPSAoMCwgX2dldE51bWJlck9mQ2FsZW5kYXJNb250aFdlZWtzW1wiZGVmYXVsdFwiXSkobmV3SW52aXNpYmxlTW9udGgsIGZpcnN0RGF5T2ZXZWVrKTtcbiAgICAgIHRoaXMuY2FsZW5kYXJNb250aFdlZWtzID0gW251bWJlck9mV2Vla3NdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKHRoaXMuY2FsZW5kYXJNb250aFdlZWtzLnNsaWNlKDAsIC0xKSkpO1xuICAgIH0gZWxzZSBpZiAobW9udGhUcmFuc2l0aW9uID09PSBORVhUX1RSQU5TSVRJT04pIHtcbiAgICAgIG5ld01vbnRoLmFkZCgxLCAnbW9udGgnKTtcbiAgICAgIGlmIChvbk5leHRNb250aENsaWNrKSBvbk5leHRNb250aENsaWNrKG5ld01vbnRoKTtcblxuICAgICAgdmFyIF9uZXdJbnZpc2libGVNb250aCA9IG5ld01vbnRoLmNsb25lKCkuYWRkKG51bWJlck9mTW9udGhzLCAnbW9udGgnKTtcblxuICAgICAgdmFyIF9udW1iZXJPZldlZWtzID0gKDAsIF9nZXROdW1iZXJPZkNhbGVuZGFyTW9udGhXZWVrc1tcImRlZmF1bHRcIl0pKF9uZXdJbnZpc2libGVNb250aCwgZmlyc3REYXlPZldlZWspO1xuXG4gICAgICB0aGlzLmNhbGVuZGFyTW9udGhXZWVrcyA9IFtdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKHRoaXMuY2FsZW5kYXJNb250aFdlZWtzLnNsaWNlKDEpKSwgW19udW1iZXJPZldlZWtzXSk7XG4gICAgfSBlbHNlIGlmIChtb250aFRyYW5zaXRpb24gPT09IE1PTlRIX1NFTEVDVElPTl9UUkFOU0lUSU9OKSB7XG4gICAgICBpZiAob25Nb250aENoYW5nZSkgb25Nb250aENoYW5nZShuZXdNb250aCk7XG4gICAgfSBlbHNlIGlmIChtb250aFRyYW5zaXRpb24gPT09IFlFQVJfU0VMRUNUSU9OX1RSQU5TSVRJT04pIHtcbiAgICAgIGlmIChvblllYXJDaGFuZ2UpIG9uWWVhckNoYW5nZShuZXdNb250aCk7XG4gICAgfVxuXG4gICAgdmFyIG5ld0ZvY3VzZWREYXRlID0gbnVsbDtcblxuICAgIGlmIChuZXh0Rm9jdXNlZERhdGUpIHtcbiAgICAgIG5ld0ZvY3VzZWREYXRlID0gbmV4dEZvY3VzZWREYXRlO1xuICAgIH0gZWxzZSBpZiAoIWZvY3VzZWREYXRlICYmICF3aXRoTW91c2VJbnRlcmFjdGlvbnMpIHtcbiAgICAgIG5ld0ZvY3VzZWREYXRlID0gdGhpcy5nZXRGb2N1c2VkRGF5KG5ld01vbnRoKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJlbnRNb250aDogbmV3TW9udGgsXG4gICAgICBtb250aFRyYW5zaXRpb246IG51bGwsXG4gICAgICB0cmFuc2xhdGlvblZhbHVlOiBpc1JUTCAmJiB0aGlzLmlzSG9yaXpvbnRhbCgpID8gLWNhbGVuZGFyTW9udGhXaWR0aCA6IDAsXG4gICAgICBuZXh0Rm9jdXNlZERhdGU6IG51bGwsXG4gICAgICBmb2N1c2VkRGF0ZTogbmV3Rm9jdXNlZERhdGVcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyB3ZSBkb24ndCB3YW50IHRvIGZvY3VzIG9uIHRoZSByZWxldmFudCBjYWxlbmRhciBkYXkgYWZ0ZXIgYSBtb250aCB0cmFuc2l0aW9uXG4gICAgICAvLyBpZiB0aGUgdXNlciBpcyBuYXZpZ2F0aW5nIGFyb3VuZCB1c2luZyBhIG1vdXNlXG4gICAgICBpZiAod2l0aE1vdXNlSW50ZXJhY3Rpb25zKSB7XG4gICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gKDAsIF9nZXRBY3RpdmVFbGVtZW50W1wiZGVmYXVsdFwiXSkoKTtcblxuICAgICAgICBpZiAoYWN0aXZlRWxlbWVudCAmJiBhY3RpdmVFbGVtZW50ICE9PSBkb2N1bWVudC5ib2R5ICYmIF90aGlzNC5jb250YWluZXIuY29udGFpbnMoYWN0aXZlRWxlbWVudCkgJiYgYWN0aXZlRWxlbWVudC5ibHVyKSB7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uYWRqdXN0RGF5UGlja2VySGVpZ2h0ID0gZnVuY3Rpb24gYWRqdXN0RGF5UGlja2VySGVpZ2h0KG5ld01vbnRoSGVpZ2h0KSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICB2YXIgbW9udGhIZWlnaHQgPSBuZXdNb250aEhlaWdodCArIE1PTlRIX1BBRERJTkc7XG5cbiAgICBpZiAobW9udGhIZWlnaHQgIT09IHRoaXMuY2FsZW5kYXJNb250aEdyaWRIZWlnaHQpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbkNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBcIlwiLmNvbmNhdChtb250aEhlaWdodCwgXCJweFwiKTtcblxuICAgICAgaWYgKCF0aGlzLmNhbGVuZGFyTW9udGhHcmlkSGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuc2V0Q2FsZW5kYXJNb250aEdyaWRIZWlnaHRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM1LnNldFN0YXRlKHtcbiAgICAgICAgICAgIGhhc1NldEhlaWdodDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYWxlbmRhck1vbnRoR3JpZEhlaWdodCA9IG1vbnRoSGVpZ2h0O1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY2FsY3VsYXRlQW5kU2V0RGF5UGlja2VySGVpZ2h0ID0gZnVuY3Rpb24gY2FsY3VsYXRlQW5kU2V0RGF5UGlja2VySGVpZ2h0KCkge1xuICAgIHZhciBfdGhpcyRwcm9wczggPSB0aGlzLnByb3BzLFxuICAgICAgICBkYXlTaXplID0gX3RoaXMkcHJvcHM4LmRheVNpemUsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHM4Lm51bWJlck9mTW9udGhzO1xuICAgIHZhciBtb250aFRpdGxlSGVpZ2h0ID0gdGhpcy5zdGF0ZS5tb250aFRpdGxlSGVpZ2h0O1xuICAgIHZhciB2aXNpYmxlQ2FsZW5kYXJXZWVrcyA9IHRoaXMuY2FsZW5kYXJNb250aFdlZWtzLnNsaWNlKDEsIG51bWJlck9mTW9udGhzICsgMSk7XG4gICAgdmFyIGNhbGVuZGFyTW9udGhXZWVrc0hlaWdodCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIFswXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKSh2aXNpYmxlQ2FsZW5kYXJXZWVrcykpKSAqIChkYXlTaXplIC0gMSk7XG4gICAgdmFyIG5ld01vbnRoSGVpZ2h0ID0gbW9udGhUaXRsZUhlaWdodCArIGNhbGVuZGFyTW9udGhXZWVrc0hlaWdodCArIDE7XG5cbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdGhpcy5hZGp1c3REYXlQaWNrZXJIZWlnaHQobmV3TW9udGhIZWlnaHQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub3BlbktleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBmdW5jdGlvbiBvcGVuS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbChvbkNsb3NlQ2FsbEJhY2spIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogdHJ1ZSxcbiAgICAgIG9uS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbENsb3NlOiBvbkNsb3NlQ2FsbEJhY2tcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsID0gZnVuY3Rpb24gY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsKCkge1xuICAgIHZhciBvbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZSA9IHRoaXMuc3RhdGUub25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2U7XG5cbiAgICBpZiAob25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2UpIHtcbiAgICAgIG9uS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbENsb3NlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBvbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZTogbnVsbCxcbiAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogZmFsc2VcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyTmF2aWdhdGlvbiA9IGZ1bmN0aW9uIHJlbmRlck5hdmlnYXRpb24oKSB7XG4gICAgdmFyIF90aGlzJHByb3BzOSA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRpc2FibGVQcmV2ID0gX3RoaXMkcHJvcHM5LmRpc2FibGVQcmV2LFxuICAgICAgICBkaXNhYmxlTmV4dCA9IF90aGlzJHByb3BzOS5kaXNhYmxlTmV4dCxcbiAgICAgICAgbmF2UHJldiA9IF90aGlzJHByb3BzOS5uYXZQcmV2LFxuICAgICAgICBuYXZOZXh0ID0gX3RoaXMkcHJvcHM5Lm5hdk5leHQsXG4gICAgICAgIG5vTmF2QnV0dG9ucyA9IF90aGlzJHByb3BzOS5ub05hdkJ1dHRvbnMsXG4gICAgICAgIG9yaWVudGF0aW9uID0gX3RoaXMkcHJvcHM5Lm9yaWVudGF0aW9uLFxuICAgICAgICBwaHJhc2VzID0gX3RoaXMkcHJvcHM5LnBocmFzZXMsXG4gICAgICAgIGlzUlRMID0gX3RoaXMkcHJvcHM5LmlzUlRMO1xuXG4gICAgaWYgKG5vTmF2QnV0dG9ucykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG9uTmV4dE1vbnRoQ2xpY2sgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFID8gdGhpcy5tdWx0aXBseVNjcm9sbGFibGVNb250aHMgOiB0aGlzLm9uTmV4dE1vbnRoQ2xpY2s7XG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfRGF5UGlja2VyTmF2aWdhdGlvbltcImRlZmF1bHRcIl0sIHtcbiAgICAgIGRpc2FibGVQcmV2OiBkaXNhYmxlUHJldixcbiAgICAgIGRpc2FibGVOZXh0OiBkaXNhYmxlTmV4dCxcbiAgICAgIG9uUHJldk1vbnRoQ2xpY2s6IHRoaXMub25QcmV2TW9udGhDbGljayxcbiAgICAgIG9uTmV4dE1vbnRoQ2xpY2s6IG9uTmV4dE1vbnRoQ2xpY2ssXG4gICAgICBuYXZQcmV2OiBuYXZQcmV2LFxuICAgICAgbmF2TmV4dDogbmF2TmV4dCxcbiAgICAgIG9yaWVudGF0aW9uOiBvcmllbnRhdGlvbixcbiAgICAgIHBocmFzZXM6IHBocmFzZXMsXG4gICAgICBpc1JUTDogaXNSVExcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyV2Vla0hlYWRlciA9IGZ1bmN0aW9uIHJlbmRlcldlZWtIZWFkZXIoaW5kZXgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMxMCA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRheVNpemUgPSBfdGhpcyRwcm9wczEwLmRheVNpemUsXG4gICAgICAgIGhvcml6b250YWxNb250aFBhZGRpbmcgPSBfdGhpcyRwcm9wczEwLmhvcml6b250YWxNb250aFBhZGRpbmcsXG4gICAgICAgIG9yaWVudGF0aW9uID0gX3RoaXMkcHJvcHMxMC5vcmllbnRhdGlvbixcbiAgICAgICAgd2Vla0RheUZvcm1hdCA9IF90aGlzJHByb3BzMTAud2Vla0RheUZvcm1hdCxcbiAgICAgICAgc3R5bGVzID0gX3RoaXMkcHJvcHMxMC5zdHlsZXM7XG4gICAgdmFyIGNhbGVuZGFyTW9udGhXaWR0aCA9IHRoaXMuc3RhdGUuY2FsZW5kYXJNb250aFdpZHRoO1xuICAgIHZhciB2ZXJ0aWNhbFNjcm9sbGFibGUgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuICAgIHZhciBob3Jpem9udGFsU3R5bGUgPSB7XG4gICAgICBsZWZ0OiBpbmRleCAqIGNhbGVuZGFyTW9udGhXaWR0aFxuICAgIH07XG4gICAgdmFyIHZlcnRpY2FsU3R5bGUgPSB7XG4gICAgICBtYXJnaW5MZWZ0OiAtY2FsZW5kYXJNb250aFdpZHRoIC8gMlxuICAgIH07XG4gICAgdmFyIHdlZWtIZWFkZXJTdHlsZSA9IHt9OyAvLyBubyBzdHlsZXMgYXBwbGllZCB0byB0aGUgdmVydGljYWwtc2Nyb2xsYWJsZSBvcmllbnRhdGlvblxuXG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHdlZWtIZWFkZXJTdHlsZSA9IGhvcml6b250YWxTdHlsZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNWZXJ0aWNhbCgpICYmICF2ZXJ0aWNhbFNjcm9sbGFibGUpIHtcbiAgICAgIHdlZWtIZWFkZXJTdHlsZSA9IHZlcnRpY2FsU3R5bGU7XG4gICAgfVxuXG4gICAgdmFyIGZpcnN0RGF5T2ZXZWVrID0gdGhpcy5nZXRGaXJzdERheU9mV2VlaygpO1xuICAgIHZhciBoZWFkZXIgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNzsgaSArPSAxKSB7XG4gICAgICBoZWFkZXIucHVzaChfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe1xuICAgICAgICBrZXk6IGlcbiAgICAgIH0sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRheVBpY2tlcl93ZWVrSGVhZGVyX2xpLCB7XG4gICAgICAgIHdpZHRoOiBkYXlTaXplXG4gICAgICB9KSksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInNtYWxsXCIsIG51bGwsICgwLCBfbW9tZW50W1wiZGVmYXVsdFwiXSkoKS5kYXkoKGkgKyBmaXJzdERheU9mV2VlaykgJSA3KS5mb3JtYXQod2Vla0RheUZvcm1hdCkpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRheVBpY2tlcl93ZWVrSGVhZGVyLCB0aGlzLmlzVmVydGljYWwoKSAmJiBzdHlsZXMuRGF5UGlja2VyX3dlZWtIZWFkZXJfX3ZlcnRpY2FsLCB2ZXJ0aWNhbFNjcm9sbGFibGUgJiYgc3R5bGVzLkRheVBpY2tlcl93ZWVrSGVhZGVyX192ZXJ0aWNhbFNjcm9sbGFibGUsIHdlZWtIZWFkZXJTdHlsZSwge1xuICAgICAgcGFkZGluZzogXCIwIFwiLmNvbmNhdChob3Jpem9udGFsTW9udGhQYWRkaW5nLCBcInB4XCIpXG4gICAgfSksIHtcbiAgICAgIGtleTogXCJ3ZWVrLVwiLmNvbmNhdChpbmRleClcbiAgICB9KSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwidWxcIiwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF5UGlja2VyX3dlZWtIZWFkZXJfdWwpLCBoZWFkZXIpKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHN0YXRlOCA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGNhbGVuZGFyTW9udGhXaWR0aCA9IF90aGlzJHN0YXRlOC5jYWxlbmRhck1vbnRoV2lkdGgsXG4gICAgICAgIGN1cnJlbnRNb250aCA9IF90aGlzJHN0YXRlOC5jdXJyZW50TW9udGgsXG4gICAgICAgIG1vbnRoVHJhbnNpdGlvbiA9IF90aGlzJHN0YXRlOC5tb250aFRyYW5zaXRpb24sXG4gICAgICAgIHRyYW5zbGF0aW9uVmFsdWUgPSBfdGhpcyRzdGF0ZTgudHJhbnNsYXRpb25WYWx1ZSxcbiAgICAgICAgc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGUgPSBfdGhpcyRzdGF0ZTguc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGUsXG4gICAgICAgIGZvY3VzZWREYXRlID0gX3RoaXMkc3RhdGU4LmZvY3VzZWREYXRlLFxuICAgICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHMgPSBfdGhpcyRzdGF0ZTguc2hvd0tleWJvYXJkU2hvcnRjdXRzLFxuICAgICAgICBpc1RvdWNoID0gX3RoaXMkc3RhdGU4LmlzVG91Y2hEZXZpY2UsXG4gICAgICAgIGhhc1NldEhlaWdodCA9IF90aGlzJHN0YXRlOC5oYXNTZXRIZWlnaHQsXG4gICAgICAgIGNhbGVuZGFySW5mb1dpZHRoID0gX3RoaXMkc3RhdGU4LmNhbGVuZGFySW5mb1dpZHRoLFxuICAgICAgICBtb250aFRpdGxlSGVpZ2h0ID0gX3RoaXMkc3RhdGU4Lm1vbnRoVGl0bGVIZWlnaHQ7XG4gICAgdmFyIF90aGlzJHByb3BzMTEgPSB0aGlzLnByb3BzLFxuICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IF90aGlzJHByb3BzMTEuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHMxMS5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgb3JpZW50YXRpb24gPSBfdGhpcyRwcm9wczExLm9yaWVudGF0aW9uLFxuICAgICAgICBtb2RpZmllcnMgPSBfdGhpcyRwcm9wczExLm1vZGlmaWVycyxcbiAgICAgICAgd2l0aFBvcnRhbCA9IF90aGlzJHByb3BzMTEud2l0aFBvcnRhbCxcbiAgICAgICAgb25EYXlDbGljayA9IF90aGlzJHByb3BzMTEub25EYXlDbGljayxcbiAgICAgICAgb25EYXlNb3VzZUVudGVyID0gX3RoaXMkcHJvcHMxMS5vbkRheU1vdXNlRW50ZXIsXG4gICAgICAgIG9uRGF5TW91c2VMZWF2ZSA9IF90aGlzJHByb3BzMTEub25EYXlNb3VzZUxlYXZlLFxuICAgICAgICBmaXJzdERheU9mV2VlayA9IF90aGlzJHByb3BzMTEuZmlyc3REYXlPZldlZWssXG4gICAgICAgIHJlbmRlck1vbnRoVGV4dCA9IF90aGlzJHByb3BzMTEucmVuZGVyTW9udGhUZXh0LFxuICAgICAgICByZW5kZXJDYWxlbmRhckRheSA9IF90aGlzJHByb3BzMTEucmVuZGVyQ2FsZW5kYXJEYXksXG4gICAgICAgIHJlbmRlckRheUNvbnRlbnRzID0gX3RoaXMkcHJvcHMxMS5yZW5kZXJEYXlDb250ZW50cyxcbiAgICAgICAgcmVuZGVyQ2FsZW5kYXJJbmZvID0gX3RoaXMkcHJvcHMxMS5yZW5kZXJDYWxlbmRhckluZm8sXG4gICAgICAgIHJlbmRlck1vbnRoRWxlbWVudCA9IF90aGlzJHByb3BzMTEucmVuZGVyTW9udGhFbGVtZW50LFxuICAgICAgICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbiA9IF90aGlzJHByb3BzMTEucmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b24sXG4gICAgICAgIGNhbGVuZGFySW5mb1Bvc2l0aW9uID0gX3RoaXMkcHJvcHMxMS5jYWxlbmRhckluZm9Qb3NpdGlvbixcbiAgICAgICAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBfdGhpcyRwcm9wczExLmhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgICBvbk91dHNpZGVDbGljayA9IF90aGlzJHByb3BzMTEub25PdXRzaWRlQ2xpY2ssXG4gICAgICAgIG1vbnRoRm9ybWF0ID0gX3RoaXMkcHJvcHMxMS5tb250aEZvcm1hdCxcbiAgICAgICAgZGF5U2l6ZSA9IF90aGlzJHByb3BzMTEuZGF5U2l6ZSxcbiAgICAgICAgaXNGb2N1c2VkID0gX3RoaXMkcHJvcHMxMS5pc0ZvY3VzZWQsXG4gICAgICAgIGlzUlRMID0gX3RoaXMkcHJvcHMxMS5pc1JUTCxcbiAgICAgICAgc3R5bGVzID0gX3RoaXMkcHJvcHMxMS5zdHlsZXMsXG4gICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMxMS50aGVtZSxcbiAgICAgICAgcGhyYXNlcyA9IF90aGlzJHByb3BzMTEucGhyYXNlcyxcbiAgICAgICAgdmVydGljYWxIZWlnaHQgPSBfdGhpcyRwcm9wczExLnZlcnRpY2FsSGVpZ2h0LFxuICAgICAgICBkYXlBcmlhTGFiZWxGb3JtYXQgPSBfdGhpcyRwcm9wczExLmRheUFyaWFMYWJlbEZvcm1hdCxcbiAgICAgICAgbm9Cb3JkZXIgPSBfdGhpcyRwcm9wczExLm5vQm9yZGVyLFxuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfdGhpcyRwcm9wczExLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgICAgdmVydGljYWxCb3JkZXJTcGFjaW5nID0gX3RoaXMkcHJvcHMxMS52ZXJ0aWNhbEJvcmRlclNwYWNpbmcsXG4gICAgICAgIGhvcml6b250YWxNb250aFBhZGRpbmcgPSBfdGhpcyRwcm9wczExLmhvcml6b250YWxNb250aFBhZGRpbmc7XG4gICAgdmFyIGRheVBpY2tlckhvcml6b250YWxQYWRkaW5nID0gdGhlbWUucmVhY3REYXRlcy5zcGFjaW5nLmRheVBpY2tlckhvcml6b250YWxQYWRkaW5nO1xuICAgIHZhciBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgIHZhciBudW1PZldlZWtIZWFkZXJzID0gdGhpcy5pc1ZlcnRpY2FsKCkgPyAxIDogbnVtYmVyT2ZNb250aHM7XG4gICAgdmFyIHdlZWtIZWFkZXJzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bU9mV2Vla0hlYWRlcnM7IGkgKz0gMSkge1xuICAgICAgd2Vla0hlYWRlcnMucHVzaCh0aGlzLnJlbmRlcldlZWtIZWFkZXIoaSkpO1xuICAgIH1cblxuICAgIHZhciB2ZXJ0aWNhbFNjcm9sbGFibGUgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuICAgIHZhciBoZWlnaHQ7XG5cbiAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICBoZWlnaHQgPSB0aGlzLmNhbGVuZGFyTW9udGhHcmlkSGVpZ2h0O1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc1ZlcnRpY2FsKCkgJiYgIXZlcnRpY2FsU2Nyb2xsYWJsZSAmJiAhd2l0aFBvcnRhbCkge1xuICAgICAgLy8gSWYgdGhlIHVzZXIgZG9lc24ndCBzZXQgYSBkZXNpcmVkIGhlaWdodCxcbiAgICAgIC8vIHdlIGRlZmF1bHQgYmFjayB0byB0aGlzIGtpbmQgb2YgbWFkZS11cCB2YWx1ZSB0aGF0IGdlbmVyYWxseSBsb29rcyBnb29kXG4gICAgICBoZWlnaHQgPSB2ZXJ0aWNhbEhlaWdodCB8fCAxLjc1ICogY2FsZW5kYXJNb250aFdpZHRoO1xuICAgIH1cblxuICAgIHZhciBpc0NhbGVuZGFyTW9udGhHcmlkQW5pbWF0aW5nID0gbW9udGhUcmFuc2l0aW9uICE9PSBudWxsO1xuICAgIHZhciBzaG91bGRGb2N1c0RhdGUgPSAhaXNDYWxlbmRhck1vbnRoR3JpZEFuaW1hdGluZyAmJiBpc0ZvY3VzZWQ7XG4gICAgdmFyIGtleWJvYXJkU2hvcnRjdXRCdXR0b25Mb2NhdGlvbiA9IF9EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cy5CT1RUT01fUklHSFQ7XG5cbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIGtleWJvYXJkU2hvcnRjdXRCdXR0b25Mb2NhdGlvbiA9IHdpdGhQb3J0YWwgPyBfRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHMuVE9QX0xFRlQgOiBfRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHMuVE9QX1JJR0hUO1xuICAgIH1cblxuICAgIHZhciBzaG91bGRBbmltYXRlSGVpZ2h0ID0gaXNIb3Jpem9udGFsICYmIGhhc1NldEhlaWdodDtcbiAgICB2YXIgY2FsZW5kYXJJbmZvUG9zaXRpb25Ub3AgPSBjYWxlbmRhckluZm9Qb3NpdGlvbiA9PT0gX2NvbnN0YW50cy5JTkZPX1BPU0lUSU9OX1RPUDtcbiAgICB2YXIgY2FsZW5kYXJJbmZvUG9zaXRpb25Cb3R0b20gPSBjYWxlbmRhckluZm9Qb3NpdGlvbiA9PT0gX2NvbnN0YW50cy5JTkZPX1BPU0lUSU9OX0JPVFRPTTtcbiAgICB2YXIgY2FsZW5kYXJJbmZvUG9zaXRpb25CZWZvcmUgPSBjYWxlbmRhckluZm9Qb3NpdGlvbiA9PT0gX2NvbnN0YW50cy5JTkZPX1BPU0lUSU9OX0JFRk9SRTtcbiAgICB2YXIgY2FsZW5kYXJJbmZvUG9zaXRpb25BZnRlciA9IGNhbGVuZGFySW5mb1Bvc2l0aW9uID09PSBfY29uc3RhbnRzLklORk9fUE9TSVRJT05fQUZURVI7XG4gICAgdmFyIGNhbGVuZGFySW5mb0lzSW5saW5lID0gY2FsZW5kYXJJbmZvUG9zaXRpb25CZWZvcmUgfHwgY2FsZW5kYXJJbmZvUG9zaXRpb25BZnRlcjtcblxuICAgIHZhciBjYWxlbmRhckluZm8gPSByZW5kZXJDYWxlbmRhckluZm8gJiYgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgICByZWY6IHRoaXMuc2V0Q2FsZW5kYXJJbmZvUmVmXG4gICAgfSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShjYWxlbmRhckluZm9Jc0lubGluZSAmJiBzdHlsZXMuRGF5UGlja2VyX2NhbGVuZGFySW5mb19faG9yaXpvbnRhbCkpLCByZW5kZXJDYWxlbmRhckluZm8oKSk7XG5cbiAgICB2YXIgY2FsZW5kYXJJbmZvUGFuZWxXaWR0aCA9IHJlbmRlckNhbGVuZGFySW5mbyAmJiBjYWxlbmRhckluZm9Jc0lubGluZSA/IGNhbGVuZGFySW5mb1dpZHRoIDogMDtcbiAgICB2YXIgZmlyc3RWaXNpYmxlTW9udGhJbmRleCA9IHRoaXMuZ2V0Rmlyc3RWaXNpYmxlSW5kZXgoKTtcbiAgICB2YXIgd3JhcHBlckhvcml6b250YWxXaWR0aCA9IGNhbGVuZGFyTW9udGhXaWR0aCAqIG51bWJlck9mTW9udGhzICsgMiAqIGRheVBpY2tlckhvcml6b250YWxQYWRkaW5nOyAvLyBBZGRpbmcgYDFweGAgYmVjYXVzZSBvZiB3aGl0ZXNwYWNlIGJldHdlZW4gMiBpbmxpbmUtYmxvY2tcblxuICAgIHZhciBmdWxsSG9yaXpvbnRhbFdpZHRoID0gd3JhcHBlckhvcml6b250YWxXaWR0aCArIGNhbGVuZGFySW5mb1BhbmVsV2lkdGggKyAxO1xuICAgIHZhciB0cmFuc2l0aW9uQ29udGFpbmVyU3R5bGUgPSB7XG4gICAgICB3aWR0aDogaXNIb3Jpem9udGFsICYmIHdyYXBwZXJIb3Jpem9udGFsV2lkdGgsXG4gICAgICBoZWlnaHQ6IGhlaWdodFxuICAgIH07XG4gICAgdmFyIGRheVBpY2tlcldyYXBwZXJTdHlsZSA9IHtcbiAgICAgIHdpZHRoOiBpc0hvcml6b250YWwgJiYgd3JhcHBlckhvcml6b250YWxXaWR0aFxuICAgIH07XG4gICAgdmFyIGRheVBpY2tlclN0eWxlID0ge1xuICAgICAgd2lkdGg6IGlzSG9yaXpvbnRhbCAmJiBmdWxsSG9yaXpvbnRhbFdpZHRoLFxuICAgICAgLy8gVGhlc2UgdmFsdWVzIGFyZSB0byBjZW50ZXIgdGhlIGRhdGVwaWNrZXIgKGFwcHJveGltYXRlbHkpIG9uIHRoZSBwYWdlXG4gICAgICBtYXJnaW5MZWZ0OiBpc0hvcml6b250YWwgJiYgd2l0aFBvcnRhbCA/IC1mdWxsSG9yaXpvbnRhbFdpZHRoIC8gMiA6IG51bGwsXG4gICAgICBtYXJnaW5Ub3A6IGlzSG9yaXpvbnRhbCAmJiB3aXRoUG9ydGFsID8gLWNhbGVuZGFyTW9udGhXaWR0aCAvIDIgOiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgICByb2xlOiBcImFwcGxpY2F0aW9uXCIsXG4gICAgICBcImFyaWEtcm9sZWRlc2NyaXB0aW9uXCI6IHBocmFzZXMucm9sZURlc2NyaXB0aW9uLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IHBocmFzZXMuY2FsZW5kYXJMYWJlbFxuICAgIH0sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRheVBpY2tlciwgaXNIb3Jpem9udGFsICYmIHN0eWxlcy5EYXlQaWNrZXJfX2hvcml6b250YWwsIHZlcnRpY2FsU2Nyb2xsYWJsZSAmJiBzdHlsZXMuRGF5UGlja2VyX192ZXJ0aWNhbFNjcm9sbGFibGUsIGlzSG9yaXpvbnRhbCAmJiB3aXRoUG9ydGFsICYmIHN0eWxlcy5EYXlQaWNrZXJfcG9ydGFsX19ob3Jpem9udGFsLCB0aGlzLmlzVmVydGljYWwoKSAmJiB3aXRoUG9ydGFsICYmIHN0eWxlcy5EYXlQaWNrZXJfcG9ydGFsX192ZXJ0aWNhbCwgZGF5UGlja2VyU3R5bGUsICFtb250aFRpdGxlSGVpZ2h0ICYmIHN0eWxlcy5EYXlQaWNrZXJfX2hpZGRlbiwgIW5vQm9yZGVyICYmIHN0eWxlcy5EYXlQaWNrZXJfX3dpdGhCb3JkZXIpKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9yZWFjdE91dHNpZGVDbGlja0hhbmRsZXJbXCJkZWZhdWx0XCJdLCB7XG4gICAgICBvbk91dHNpZGVDbGljazogb25PdXRzaWRlQ2xpY2tcbiAgICB9LCAoY2FsZW5kYXJJbmZvUG9zaXRpb25Ub3AgfHwgY2FsZW5kYXJJbmZvUG9zaXRpb25CZWZvcmUpICYmIGNhbGVuZGFySW5mbywgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoZGF5UGlja2VyV3JhcHBlclN0eWxlLCBjYWxlbmRhckluZm9Jc0lubGluZSAmJiBpc0hvcml6b250YWwgJiYgc3R5bGVzLkRheVBpY2tlcl93cmFwcGVyX19ob3Jpem9udGFsKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF5UGlja2VyX3dlZWtIZWFkZXJzLCBpc0hvcml6b250YWwgJiYgc3R5bGVzLkRheVBpY2tlcl93ZWVrSGVhZGVyc19faG9yaXpvbnRhbCksIHtcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsXG4gICAgICByb2xlOiBcInByZXNlbnRhdGlvblwiXG4gICAgfSksIHdlZWtIZWFkZXJzKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF5UGlja2VyX2ZvY3VzUmVnaW9uKSwge1xuICAgICAgcmVmOiB0aGlzLnNldENvbnRhaW5lclJlZixcbiAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfSxcbiAgICAgIG9uS2V5RG93bjogdGhpcy5vbktleURvd24sXG4gICAgICBvbk1vdXNlVXA6IGZ1bmN0aW9uIG9uTW91c2VVcCgpIHtcbiAgICAgICAgX3RoaXM2LnNldFN0YXRlKHtcbiAgICAgICAgICB3aXRoTW91c2VJbnRlcmFjdGlvbnM6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgcm9sZTogXCJyZWdpb25cIixcbiAgICAgIHRhYkluZGV4OiAtMVxuICAgIH0pLCAhdmVydGljYWxTY3JvbGxhYmxlICYmIHRoaXMucmVuZGVyTmF2aWdhdGlvbigpLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXlQaWNrZXJfdHJhbnNpdGlvbkNvbnRhaW5lciwgc2hvdWxkQW5pbWF0ZUhlaWdodCAmJiBzdHlsZXMuRGF5UGlja2VyX3RyYW5zaXRpb25Db250YWluZXJfX2hvcml6b250YWwsIHRoaXMuaXNWZXJ0aWNhbCgpICYmIHN0eWxlcy5EYXlQaWNrZXJfdHJhbnNpdGlvbkNvbnRhaW5lcl9fdmVydGljYWwsIHZlcnRpY2FsU2Nyb2xsYWJsZSAmJiBzdHlsZXMuRGF5UGlja2VyX3RyYW5zaXRpb25Db250YWluZXJfX3ZlcnRpY2FsU2Nyb2xsYWJsZSwgdHJhbnNpdGlvbkNvbnRhaW5lclN0eWxlKSwge1xuICAgICAgcmVmOiB0aGlzLnNldFRyYW5zaXRpb25Db250YWluZXJSZWZcbiAgICB9KSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9DYWxlbmRhck1vbnRoR3JpZFtcImRlZmF1bHRcIl0sIHtcbiAgICAgIHNldE1vbnRoVGl0bGVIZWlnaHQ6ICFtb250aFRpdGxlSGVpZ2h0ID8gdGhpcy5zZXRNb250aFRpdGxlSGVpZ2h0IDogdW5kZWZpbmVkLFxuICAgICAgdHJhbnNsYXRpb25WYWx1ZTogdHJhbnNsYXRpb25WYWx1ZSxcbiAgICAgIGVuYWJsZU91dHNpZGVEYXlzOiBlbmFibGVPdXRzaWRlRGF5cyxcbiAgICAgIGZpcnN0VmlzaWJsZU1vbnRoSW5kZXg6IGZpcnN0VmlzaWJsZU1vbnRoSW5kZXgsXG4gICAgICBpbml0aWFsTW9udGg6IGN1cnJlbnRNb250aCxcbiAgICAgIGlzQW5pbWF0aW5nOiBpc0NhbGVuZGFyTW9udGhHcmlkQW5pbWF0aW5nLFxuICAgICAgbW9kaWZpZXJzOiBtb2RpZmllcnMsXG4gICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb24sXG4gICAgICBudW1iZXJPZk1vbnRoczogbnVtYmVyT2ZNb250aHMgKiBzY3JvbGxhYmxlTW9udGhNdWx0aXBsZSxcbiAgICAgIG9uRGF5Q2xpY2s6IG9uRGF5Q2xpY2ssXG4gICAgICBvbkRheU1vdXNlRW50ZXI6IG9uRGF5TW91c2VFbnRlcixcbiAgICAgIG9uRGF5TW91c2VMZWF2ZTogb25EYXlNb3VzZUxlYXZlLFxuICAgICAgb25Nb250aENoYW5nZTogdGhpcy5vbk1vbnRoQ2hhbmdlLFxuICAgICAgb25ZZWFyQ2hhbmdlOiB0aGlzLm9uWWVhckNoYW5nZSxcbiAgICAgIHJlbmRlck1vbnRoVGV4dDogcmVuZGVyTW9udGhUZXh0LFxuICAgICAgcmVuZGVyQ2FsZW5kYXJEYXk6IHJlbmRlckNhbGVuZGFyRGF5LFxuICAgICAgcmVuZGVyRGF5Q29udGVudHM6IHJlbmRlckRheUNvbnRlbnRzLFxuICAgICAgcmVuZGVyTW9udGhFbGVtZW50OiByZW5kZXJNb250aEVsZW1lbnQsXG4gICAgICBvbk1vbnRoVHJhbnNpdGlvbkVuZDogdGhpcy51cGRhdGVTdGF0ZUFmdGVyTW9udGhUcmFuc2l0aW9uLFxuICAgICAgbW9udGhGb3JtYXQ6IG1vbnRoRm9ybWF0LFxuICAgICAgZGF5U2l6ZTogZGF5U2l6ZSxcbiAgICAgIGZpcnN0RGF5T2ZXZWVrOiBmaXJzdERheU9mV2VlayxcbiAgICAgIGlzRm9jdXNlZDogc2hvdWxkRm9jdXNEYXRlLFxuICAgICAgZm9jdXNlZERhdGU6IGZvY3VzZWREYXRlLFxuICAgICAgcGhyYXNlczogcGhyYXNlcyxcbiAgICAgIGlzUlRMOiBpc1JUTCxcbiAgICAgIGRheUFyaWFMYWJlbEZvcm1hdDogZGF5QXJpYUxhYmVsRm9ybWF0LFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICB2ZXJ0aWNhbEJvcmRlclNwYWNpbmc6IHZlcnRpY2FsQm9yZGVyU3BhY2luZyxcbiAgICAgIGhvcml6b250YWxNb250aFBhZGRpbmc6IGhvcml6b250YWxNb250aFBhZGRpbmdcbiAgICB9KSwgdmVydGljYWxTY3JvbGxhYmxlICYmIHRoaXMucmVuZGVyTmF2aWdhdGlvbigpKSwgIWlzVG91Y2ggJiYgIWhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsICYmIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNbXCJkZWZhdWx0XCJdLCB7XG4gICAgICBibG9jazogdGhpcy5pc1ZlcnRpY2FsKCkgJiYgIXdpdGhQb3J0YWwsXG4gICAgICBidXR0b25Mb2NhdGlvbjoga2V5Ym9hcmRTaG9ydGN1dEJ1dHRvbkxvY2F0aW9uLFxuICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWw6IHNob3dLZXlib2FyZFNob3J0Y3V0cyxcbiAgICAgIG9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsOiB0aGlzLm9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiB0aGlzLmNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgIHBocmFzZXM6IHBocmFzZXMsXG4gICAgICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbjogcmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b25cbiAgICB9KSkpLCAoY2FsZW5kYXJJbmZvUG9zaXRpb25Cb3R0b20gfHwgY2FsZW5kYXJJbmZvUG9zaXRpb25BZnRlcikgJiYgY2FsZW5kYXJJbmZvKSk7XG4gIH07XG5cbiAgcmV0dXJuIERheVBpY2tlcjtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuZXhwb3J0cy5QdXJlRGF5UGlja2VyID0gRGF5UGlja2VyO1xuRGF5UGlja2VyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuRGF5UGlja2VyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlcykoZnVuY3Rpb24gKF9yZWYzKSB7XG4gIHZhciBfcmVmMyRyZWFjdERhdGVzID0gX3JlZjMucmVhY3REYXRlcyxcbiAgICAgIGNvbG9yID0gX3JlZjMkcmVhY3REYXRlcy5jb2xvcixcbiAgICAgIGZvbnQgPSBfcmVmMyRyZWFjdERhdGVzLmZvbnQsXG4gICAgICBub1Njcm9sbEJhck9uVmVydGljYWxTY3JvbGxhYmxlID0gX3JlZjMkcmVhY3REYXRlcy5ub1Njcm9sbEJhck9uVmVydGljYWxTY3JvbGxhYmxlLFxuICAgICAgc3BhY2luZyA9IF9yZWYzJHJlYWN0RGF0ZXMuc3BhY2luZyxcbiAgICAgIHpJbmRleCA9IF9yZWYzJHJlYWN0RGF0ZXMuekluZGV4O1xuICByZXR1cm4ge1xuICAgIERheVBpY2tlcjoge1xuICAgICAgYmFja2dyb3VuZDogY29sb3IuYmFja2dyb3VuZCxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgdGV4dEFsaWduOiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKCdsZWZ0JylcbiAgICB9LFxuICAgIERheVBpY2tlcl9faG9yaXpvbnRhbDoge1xuICAgICAgYmFja2dyb3VuZDogY29sb3IuYmFja2dyb3VuZFxuICAgIH0sXG4gICAgRGF5UGlja2VyX192ZXJ0aWNhbFNjcm9sbGFibGU6IHtcbiAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgfSxcbiAgICBEYXlQaWNrZXJfX2hpZGRlbjoge1xuICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbidcbiAgICB9LFxuICAgIERheVBpY2tlcl9fd2l0aEJvcmRlcjoge1xuICAgICAgYm94U2hhZG93OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKCcwIDJweCA2cHggcmdiYSgwLCAwLCAwLCAwLjA1KSwgMCAwIDAgMXB4IHJnYmEoMCwgMCwgMCwgMC4wNyknKSxcbiAgICAgIGJvcmRlclJhZGl1czogM1xuICAgIH0sXG4gICAgRGF5UGlja2VyX3BvcnRhbF9faG9yaXpvbnRhbDoge1xuICAgICAgYm94U2hhZG93OiAnbm9uZScsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoJzUwJScpLFxuICAgICAgdG9wOiAnNTAlJ1xuICAgIH0sXG4gICAgRGF5UGlja2VyX3BvcnRhbF9fdmVydGljYWw6IHtcbiAgICAgIHBvc2l0aW9uOiAnaW5pdGlhbCdcbiAgICB9LFxuICAgIERheVBpY2tlcl9mb2N1c1JlZ2lvbjoge1xuICAgICAgb3V0bGluZTogJ25vbmUnXG4gICAgfSxcbiAgICBEYXlQaWNrZXJfY2FsZW5kYXJJbmZvX19ob3Jpem9udGFsOiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnXG4gICAgfSxcbiAgICBEYXlQaWNrZXJfd3JhcHBlcl9faG9yaXpvbnRhbDoge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJ1xuICAgIH0sXG4gICAgRGF5UGlja2VyX3dlZWtIZWFkZXJzOiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgIH0sXG4gICAgRGF5UGlja2VyX3dlZWtIZWFkZXJzX19ob3Jpem9udGFsOiB7XG4gICAgICBtYXJnaW5MZWZ0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKHNwYWNpbmcuZGF5UGlja2VySG9yaXpvbnRhbFBhZGRpbmcpXG4gICAgfSxcbiAgICBEYXlQaWNrZXJfd2Vla0hlYWRlcjoge1xuICAgICAgY29sb3I6IGNvbG9yLnBsYWNlaG9sZGVyVGV4dCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiA2MixcbiAgICAgIHpJbmRleDogekluZGV4ICsgMixcbiAgICAgIHRleHRBbGlnbjogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgnbGVmdCcpXG4gICAgfSxcbiAgICBEYXlQaWNrZXJfd2Vla0hlYWRlcl9fdmVydGljYWw6IHtcbiAgICAgIGxlZnQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoJzUwJScpXG4gICAgfSxcbiAgICBEYXlQaWNrZXJfd2Vla0hlYWRlcl9fdmVydGljYWxTY3JvbGxhYmxlOiB7XG4gICAgICB0b3A6IDAsXG4gICAgICBkaXNwbGF5OiAndGFibGUtcm93JyxcbiAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgXCIuY29uY2F0KGNvbG9yLmNvcmUuYm9yZGVyKSxcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmJhY2tncm91bmQsXG4gICAgICBtYXJnaW5MZWZ0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKDApLFxuICAgICAgbGVmdDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgwKSxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgfSxcbiAgICBEYXlQaWNrZXJfd2Vla0hlYWRlcl91bDoge1xuICAgICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgICBtYXJnaW46ICcxcHggMCcsXG4gICAgICBwYWRkaW5nTGVmdDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgwKSxcbiAgICAgIHBhZGRpbmdSaWdodDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgwKSxcbiAgICAgIGZvbnRTaXplOiBmb250LnNpemVcbiAgICB9LFxuICAgIERheVBpY2tlcl93ZWVrSGVhZGVyX2xpOiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcidcbiAgICB9LFxuICAgIERheVBpY2tlcl90cmFuc2l0aW9uQ29udGFpbmVyOiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIGJvcmRlclJhZGl1czogM1xuICAgIH0sXG4gICAgRGF5UGlja2VyX3RyYW5zaXRpb25Db250YWluZXJfX2hvcml6b250YWw6IHtcbiAgICAgIHRyYW5zaXRpb246ICdoZWlnaHQgMC4ycyBlYXNlLWluLW91dCdcbiAgICB9LFxuICAgIERheVBpY2tlcl90cmFuc2l0aW9uQ29udGFpbmVyX192ZXJ0aWNhbDoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG4gICAgRGF5UGlja2VyX3RyYW5zaXRpb25Db250YWluZXJfX3ZlcnRpY2FsU2Nyb2xsYWJsZTogKDAsIF9vYmplY3RTcHJlYWQ0W1wiZGVmYXVsdFwiXSkoe1xuICAgICAgcGFkZGluZ1RvcDogMjAsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoMCksXG4gICAgICBsZWZ0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKDApLFxuICAgICAgb3ZlcmZsb3dZOiAnc2Nyb2xsJ1xuICAgIH0sIG5vU2Nyb2xsQmFyT25WZXJ0aWNhbFNjcm9sbGFibGUgJiYge1xuICAgICAgJy13ZWJraXRPdmVyZmxvd1Njcm9sbGluZyc6ICd0b3VjaCcsXG4gICAgICAnOjotd2Via2l0LXNjcm9sbGJhcic6IHtcbiAgICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfSlcbiAgfTtcbn0sIHtcbiAgcHVyZUNvbXBvbmVudDogdHlwZW9mIF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAhPT0gJ3VuZGVmaW5lZCdcbn0pKERheVBpY2tlcik7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucykpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGFmID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYWYnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJpZV9GZWJydWFyaWVfTWFhcnRfQXByaWxfTWVpX0p1bmllX0p1bGllX0F1Z3VzdHVzX1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01ydF9BcHJfTWVpX0p1bl9KdWxfQXVnX1NlcF9Pa3RfTm92X0Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU29uZGFnX01hYW5kYWdfRGluc2RhZ19Xb2Vuc2RhZ19Eb25kZXJkYWdfVnJ5ZGFnX1NhdGVyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1Nvbl9NYWFfRGluX1dvZV9Eb25fVnJ5X1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU29fTWFfRGlfV29fRG9fVnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC92bXxubS9pLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL15ubSQvaS50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAndm0nIDogJ1ZNJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnbm0nIDogJ05NJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW1ZhbmRhZyBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbTcO0cmUgb21dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tHaXN0ZXIgb21dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tMYWFzXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ29vciAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGdlbGVkZScsXG4gICAgICAgICAgICBzIDogJ1xcJ24gcGFhciBzZWtvbmRlcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWtvbmRlcycsXG4gICAgICAgICAgICBtIDogJ1xcJ24gbWludXV0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZScsXG4gICAgICAgICAgICBoIDogJ1xcJ24gdXVyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHVyZScsXG4gICAgICAgICAgICBkIDogJ1xcJ24gZGFnJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRhZScsXG4gICAgICAgICAgICBNIDogJ1xcJ24gbWFhbmQnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbWFhbmRlJyxcbiAgICAgICAgICAgIHkgOiAnXFwnbiBqYWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGphYXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwKSA/ICdzdGUnIDogJ2RlJyk7IC8vIFRoYW5rcyB0byBKb3JpcyBSw7ZsaW5nIDogaHR0cHM6Ly9naXRodWIuY29tL2pqdXBpdGVyXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNYWFuZGFnIGlzIGRpZSBlZXJzdGUgZGFnIHZhbiBkaWUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIERpZSB3ZWVrIHdhdCBkaWUgNGRlIEphbnVhcmllIGJldmF0IGlzIGRpZSBlZXJzdGUgd2VlayB2YW4gZGllIGphYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhZjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn2aEnLFxuICAgICAgICAnMic6ICfZoicsXG4gICAgICAgICczJzogJ9mjJyxcbiAgICAgICAgJzQnOiAn2aQnLFxuICAgICAgICAnNSc6ICfZpScsXG4gICAgICAgICc2JzogJ9mmJyxcbiAgICAgICAgJzcnOiAn2acnLFxuICAgICAgICAnOCc6ICfZqCcsXG4gICAgICAgICc5JzogJ9mpJyxcbiAgICAgICAgJzAnOiAn2aAnXG4gICAgfSwgbnVtYmVyTWFwID0ge1xuICAgICAgICAn2aEnOiAnMScsXG4gICAgICAgICfZoic6ICcyJyxcbiAgICAgICAgJ9mjJzogJzMnLFxuICAgICAgICAn2aQnOiAnNCcsXG4gICAgICAgICfZpSc6ICc1JyxcbiAgICAgICAgJ9mmJzogJzYnLFxuICAgICAgICAn2acnOiAnNycsXG4gICAgICAgICfZqCc6ICc4JyxcbiAgICAgICAgJ9mpJzogJzknLFxuICAgICAgICAn2aAnOiAnMCdcbiAgICB9LCBwbHVyYWxGb3JtID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIG4gPT09IDAgPyAwIDogbiA9PT0gMSA/IDEgOiBuID09PSAyID8gMiA6IG4gJSAxMDAgPj0gMyAmJiBuICUgMTAwIDw9IDEwID8gMyA6IG4gJSAxMDAgPj0gMTEgPyA0IDogNTtcbiAgICB9LCBwbHVyYWxzID0ge1xuICAgICAgICBzIDogWyfYo9mC2YQg2YXZhiDYq9in2YbZitipJywgJ9ir2KfZhtmK2Kkg2YjYp9it2K/YqScsIFsn2KvYp9mG2YrYqtin2YYnLCAn2KvYp9mG2YrYqtmK2YYnXSwgJyVkINir2YjYp9mGJywgJyVkINir2KfZhtmK2KknLCAnJWQg2KvYp9mG2YrYqSddLFxuICAgICAgICBtIDogWyfYo9mC2YQg2YXZhiDYr9mC2YrZgtipJywgJ9iv2YLZitmC2Kkg2YjYp9it2K/YqScsIFsn2K/ZgtmK2YLYqtin2YYnLCAn2K/ZgtmK2YLYqtmK2YYnXSwgJyVkINiv2YLYp9im2YInLCAnJWQg2K/ZgtmK2YLYqScsICclZCDYr9mC2YrZgtipJ10sXG4gICAgICAgIGggOiBbJ9ij2YLZhCDZhdmGINiz2KfYudipJywgJ9iz2KfYudipINmI2KfYrdiv2KknLCBbJ9iz2KfYudiq2KfZhicsICfYs9in2LnYqtmK2YYnXSwgJyVkINiz2KfYudin2KonLCAnJWQg2LPYp9i52KknLCAnJWQg2LPYp9i52KknXSxcbiAgICAgICAgZCA6IFsn2KPZgtmEINmF2YYg2YrZiNmFJywgJ9mK2YjZhSDZiNin2K3YrycsIFsn2YrZiNmF2KfZhicsICfZitmI2YXZitmGJ10sICclZCDYo9mK2KfZhScsICclZCDZitmI2YXZi9inJywgJyVkINmK2YjZhSddLFxuICAgICAgICBNIDogWyfYo9mC2YQg2YXZhiDYtNmH2LEnLCAn2LTZh9ixINmI2KfYrdivJywgWyfYtNmH2LHYp9mGJywgJ9i02YfYsdmK2YYnXSwgJyVkINij2LTZh9ixJywgJyVkINi02YfYsdinJywgJyVkINi02YfYsSddLFxuICAgICAgICB5IDogWyfYo9mC2YQg2YXZhiDYudin2YUnLCAn2LnYp9mFINmI2KfYrdivJywgWyfYudin2YXYp9mGJywgJ9i52KfZhdmK2YYnXSwgJyVkINij2LnZiNin2YUnLCAnJWQg2LnYp9mF2YvYpycsICclZCDYudin2YUnXVxuICAgIH0sIHBsdXJhbGl6ZSA9IGZ1bmN0aW9uICh1KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgICAgICB2YXIgZiA9IHBsdXJhbEZvcm0obnVtYmVyKSxcbiAgICAgICAgICAgICAgICBzdHIgPSBwbHVyYWxzW3VdW3BsdXJhbEZvcm0obnVtYmVyKV07XG4gICAgICAgICAgICBpZiAoZiA9PT0gMikge1xuICAgICAgICAgICAgICAgIHN0ciA9IHN0clt3aXRob3V0U3VmZml4ID8gMCA6IDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgICAgICB9O1xuICAgIH0sIG1vbnRocyA9IFtcbiAgICAgICAgJ9mK2YbYp9mK2LEnLFxuICAgICAgICAn2YHYqNix2KfZitixJyxcbiAgICAgICAgJ9mF2KfYsdizJyxcbiAgICAgICAgJ9ij2KjYsdmK2YQnLFxuICAgICAgICAn2YXYp9mK2YgnLFxuICAgICAgICAn2YrZiNmG2YrZiCcsXG4gICAgICAgICfZitmI2YTZitmIJyxcbiAgICAgICAgJ9ij2LrYs9i32LMnLFxuICAgICAgICAn2LPYqNiq2YXYqNixJyxcbiAgICAgICAgJ9ij2YPYqtmI2KjYsScsXG4gICAgICAgICfZhtmI2YHZhdio2LEnLFxuICAgICAgICAn2K/Zitiz2YXYqNixJ1xuICAgIF07XG5cbiAgICB2YXIgYXIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhcicsIHtcbiAgICAgICAgbW9udGhzIDogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydCA6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXMgOiAn2KfZhNij2K3Yr1/Yp9mE2KXYq9mG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9ij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdEL1xcdTIwMEZNL1xcdTIwMEZZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/YtXzZhS8sXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2YUnID09PSBpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYtSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2YUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/Zi9inINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfYqNi52K8gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICfZhdmG2LAgJXMnLFxuICAgICAgICAgICAgcyA6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICAgICAgc3MgOiBwbHVyYWxpemUoJ3MnKSxcbiAgICAgICAgICAgIG0gOiBwbHVyYWxpemUoJ20nKSxcbiAgICAgICAgICAgIG1tIDogcGx1cmFsaXplKCdtJyksXG4gICAgICAgICAgICBoIDogcGx1cmFsaXplKCdoJyksXG4gICAgICAgICAgICBoaCA6IHBsdXJhbGl6ZSgnaCcpLFxuICAgICAgICAgICAgZCA6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICAgICAgZGQgOiBwbHVyYWxpemUoJ2QnKSxcbiAgICAgICAgICAgIE0gOiBwbHVyYWxpemUoJ00nKSxcbiAgICAgICAgICAgIE1NIDogcGx1cmFsaXplKCdNJyksXG4gICAgICAgICAgICB5IDogcGx1cmFsaXplKCd5JyksXG4gICAgICAgICAgICB5eSA6IHBsdXJhbGl6ZSgneScpXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vZodmi2aPZpNml2abZp9mo2anZoF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KS5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGFyRHogPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1keicsIHtcbiAgICAgICAgbW9udGhzIDogJ9is2KfZhtmB2Ypf2YHZitmB2LHZil/Zhdin2LHYs1/Yo9mB2LHZitmEX9mF2KfZil/YrNmI2KfZhl/YrNmI2YrZhNmK2Klf2KPZiNiqX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn2KzYp9mG2YHZil/ZgdmK2YHYsdmKX9mF2KfYsdizX9ij2YHYsdmK2YRf2YXYp9mKX9is2YjYp9mGX9is2YjZitmE2YrYqV/Yo9mI2Kpf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn2KfYrdivX9in2KvZhtmK2YZf2KvZhNin2KvYp9ihX9in2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9ij2K1f2KXYq1/Yq9mE2Kdf2KPYsV/YrtmFX9is2YVf2LPYqCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfZgdmKICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHMgOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3MgOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtIDogJ9iv2YLZitmC2KknLFxuICAgICAgICAgICAgbW0gOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoIDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoIDogJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgZCA6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQgOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTSA6ICfYtNmH2LEnLFxuICAgICAgICAgICAgTU0gOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeSA6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXkgOiAnJWQg2LPZhtmI2KfYqidcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJEejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGFyS3cgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1rdycsIHtcbiAgICAgICAgbW9udGhzIDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KrZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfYp9it2K9f2KfYqtmG2YrZhl/Yq9mE2KfYq9in2KFf2KfYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn2YHZiiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzIDogJ9ir2YjYp9mGJyxcbiAgICAgICAgICAgIHNzIDogJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgbSA6ICfYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIG1tIDogJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgaCA6ICfYs9in2LnYqScsXG4gICAgICAgICAgICBoaCA6ICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgIGQgOiAn2YrZiNmFJyxcbiAgICAgICAgICAgIGRkIDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgICAgIE0gOiAn2LTZh9ixJyxcbiAgICAgICAgICAgIE1NIDogJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgIHkgOiAn2LPZhtipJyxcbiAgICAgICAgICAgIHl5IDogJyVkINiz2YbZiNin2KonXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJLdztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAnMScsXG4gICAgICAgICcyJzogJzInLFxuICAgICAgICAnMyc6ICczJyxcbiAgICAgICAgJzQnOiAnNCcsXG4gICAgICAgICc1JzogJzUnLFxuICAgICAgICAnNic6ICc2JyxcbiAgICAgICAgJzcnOiAnNycsXG4gICAgICAgICc4JzogJzgnLFxuICAgICAgICAnOSc6ICc5JyxcbiAgICAgICAgJzAnOiAnMCdcbiAgICB9LCBwbHVyYWxGb3JtID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIG4gPT09IDAgPyAwIDogbiA9PT0gMSA/IDEgOiBuID09PSAyID8gMiA6IG4gJSAxMDAgPj0gMyAmJiBuICUgMTAwIDw9IDEwID8gMyA6IG4gJSAxMDAgPj0gMTEgPyA0IDogNTtcbiAgICB9LCBwbHVyYWxzID0ge1xuICAgICAgICBzIDogWyfYo9mC2YQg2YXZhiDYq9in2YbZitipJywgJ9ir2KfZhtmK2Kkg2YjYp9it2K/YqScsIFsn2KvYp9mG2YrYqtin2YYnLCAn2KvYp9mG2YrYqtmK2YYnXSwgJyVkINir2YjYp9mGJywgJyVkINir2KfZhtmK2KknLCAnJWQg2KvYp9mG2YrYqSddLFxuICAgICAgICBtIDogWyfYo9mC2YQg2YXZhiDYr9mC2YrZgtipJywgJ9iv2YLZitmC2Kkg2YjYp9it2K/YqScsIFsn2K/ZgtmK2YLYqtin2YYnLCAn2K/ZgtmK2YLYqtmK2YYnXSwgJyVkINiv2YLYp9im2YInLCAnJWQg2K/ZgtmK2YLYqScsICclZCDYr9mC2YrZgtipJ10sXG4gICAgICAgIGggOiBbJ9ij2YLZhCDZhdmGINiz2KfYudipJywgJ9iz2KfYudipINmI2KfYrdiv2KknLCBbJ9iz2KfYudiq2KfZhicsICfYs9in2LnYqtmK2YYnXSwgJyVkINiz2KfYudin2KonLCAnJWQg2LPYp9i52KknLCAnJWQg2LPYp9i52KknXSxcbiAgICAgICAgZCA6IFsn2KPZgtmEINmF2YYg2YrZiNmFJywgJ9mK2YjZhSDZiNin2K3YrycsIFsn2YrZiNmF2KfZhicsICfZitmI2YXZitmGJ10sICclZCDYo9mK2KfZhScsICclZCDZitmI2YXZi9inJywgJyVkINmK2YjZhSddLFxuICAgICAgICBNIDogWyfYo9mC2YQg2YXZhiDYtNmH2LEnLCAn2LTZh9ixINmI2KfYrdivJywgWyfYtNmH2LHYp9mGJywgJ9i02YfYsdmK2YYnXSwgJyVkINij2LTZh9ixJywgJyVkINi02YfYsdinJywgJyVkINi02YfYsSddLFxuICAgICAgICB5IDogWyfYo9mC2YQg2YXZhiDYudin2YUnLCAn2LnYp9mFINmI2KfYrdivJywgWyfYudin2YXYp9mGJywgJ9i52KfZhdmK2YYnXSwgJyVkINij2LnZiNin2YUnLCAnJWQg2LnYp9mF2YvYpycsICclZCDYudin2YUnXVxuICAgIH0sIHBsdXJhbGl6ZSA9IGZ1bmN0aW9uICh1KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgICAgICB2YXIgZiA9IHBsdXJhbEZvcm0obnVtYmVyKSxcbiAgICAgICAgICAgICAgICBzdHIgPSBwbHVyYWxzW3VdW3BsdXJhbEZvcm0obnVtYmVyKV07XG4gICAgICAgICAgICBpZiAoZiA9PT0gMikge1xuICAgICAgICAgICAgICAgIHN0ciA9IHN0clt3aXRob3V0U3VmZml4ID8gMCA6IDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgICAgICB9O1xuICAgIH0sIG1vbnRocyA9IFtcbiAgICAgICAgJ9mK2YbYp9mK2LEnLFxuICAgICAgICAn2YHYqNix2KfZitixJyxcbiAgICAgICAgJ9mF2KfYsdizJyxcbiAgICAgICAgJ9ij2KjYsdmK2YQnLFxuICAgICAgICAn2YXYp9mK2YgnLFxuICAgICAgICAn2YrZiNmG2YrZiCcsXG4gICAgICAgICfZitmI2YTZitmIJyxcbiAgICAgICAgJ9ij2LrYs9i32LMnLFxuICAgICAgICAn2LPYqNiq2YXYqNixJyxcbiAgICAgICAgJ9ij2YPYqtmI2KjYsScsXG4gICAgICAgICfZhtmI2YHZhdio2LEnLFxuICAgICAgICAn2K/Zitiz2YXYqNixJ1xuICAgIF07XG5cbiAgICB2YXIgYXJMeSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLWx5Jywge1xuICAgICAgICBtb250aHMgOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0IDogbW9udGhzLFxuICAgICAgICB3ZWVrZGF5cyA6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0QvXFx1MjAwRk0vXFx1MjAwRllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i1fNmFLyxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i1JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9mL2Kcg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9io2LnYryAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzIDogcGx1cmFsaXplKCdzJyksXG4gICAgICAgICAgICBzcyA6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICAgICAgbSA6IHBsdXJhbGl6ZSgnbScpLFxuICAgICAgICAgICAgbW0gOiBwbHVyYWxpemUoJ20nKSxcbiAgICAgICAgICAgIGggOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgICAgIGhoIDogcGx1cmFsaXplKCdoJyksXG4gICAgICAgICAgICBkIDogcGx1cmFsaXplKCdkJyksXG4gICAgICAgICAgICBkZCA6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICAgICAgTSA6IHBsdXJhbGl6ZSgnTScpLFxuICAgICAgICAgICAgTU0gOiBwbHVyYWxpemUoJ00nKSxcbiAgICAgICAgICAgIHkgOiBwbHVyYWxpemUoJ3knKSxcbiAgICAgICAgICAgIHl5IDogcGx1cmFsaXplKCd5JylcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KS5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJMeTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGFyTWEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1tYScsIHtcbiAgICAgICAgbW9udGhzIDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KrZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfYp9it2K9f2KfYqtmG2YrZhl/Yq9mE2KfYq9in2KFf2KfYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn2YHZiiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzIDogJ9ir2YjYp9mGJyxcbiAgICAgICAgICAgIHNzIDogJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgbSA6ICfYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIG1tIDogJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgaCA6ICfYs9in2LnYqScsXG4gICAgICAgICAgICBoaCA6ICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgIGQgOiAn2YrZiNmFJyxcbiAgICAgICAgICAgIGRkIDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgICAgIE0gOiAn2LTZh9ixJyxcbiAgICAgICAgICAgIE1NIDogJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgIHkgOiAn2LPZhtipJyxcbiAgICAgICAgICAgIHl5IDogJyVkINiz2YbZiNin2KonXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhck1hO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfZoScsXG4gICAgICAgICcyJzogJ9miJyxcbiAgICAgICAgJzMnOiAn2aMnLFxuICAgICAgICAnNCc6ICfZpCcsXG4gICAgICAgICc1JzogJ9mlJyxcbiAgICAgICAgJzYnOiAn2aYnLFxuICAgICAgICAnNyc6ICfZpycsXG4gICAgICAgICc4JzogJ9moJyxcbiAgICAgICAgJzknOiAn2aknLFxuICAgICAgICAnMCc6ICfZoCdcbiAgICB9LCBudW1iZXJNYXAgPSB7XG4gICAgICAgICfZoSc6ICcxJyxcbiAgICAgICAgJ9miJzogJzInLFxuICAgICAgICAn2aMnOiAnMycsXG4gICAgICAgICfZpCc6ICc0JyxcbiAgICAgICAgJ9mlJzogJzUnLFxuICAgICAgICAn2aYnOiAnNicsXG4gICAgICAgICfZpyc6ICc3JyxcbiAgICAgICAgJ9moJzogJzgnLFxuICAgICAgICAn2aknOiAnOScsXG4gICAgICAgICfZoCc6ICcwJ1xuICAgIH07XG5cbiAgICB2YXIgYXJTYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLXNhJywge1xuICAgICAgICBtb250aHMgOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2YrZiF/ZitmI2YbZitmIX9mK2YjZhNmK2Yhf2KPYutiz2LfYs1/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mK2Yhf2YrZiNmG2YrZiF/ZitmI2YTZitmIX9ij2LrYs9i32LNf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i1fNmFLyxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i1JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfZgdmKICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHMgOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3MgOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtIDogJ9iv2YLZitmC2KknLFxuICAgICAgICAgICAgbW0gOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoIDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoIDogJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgZCA6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQgOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTSA6ICfYtNmH2LEnLFxuICAgICAgICAgICAgTU0gOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeSA6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXkgOiAnJWQg2LPZhtmI2KfYqidcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW9mh2aLZo9mk2aXZptmn2ajZqdmgXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSkucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJTYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGFyVG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci10bicsIHtcbiAgICAgICAgbW9udGhzOiAn2KzYp9mG2YHZil/ZgdmK2YHYsdmKX9mF2KfYsdizX9ij2YHYsdmK2YRf2YXYp9mKX9is2YjYp9mGX9is2YjZitmE2YrYqV/Yo9mI2Kpf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJ9is2KfZhtmB2Ypf2YHZitmB2LHZil/Zhdin2LHYs1/Yo9mB2LHZitmEX9mF2KfZil/YrNmI2KfZhl/YrNmI2YrZhNmK2Klf2KPZiNiqX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9mB2YogJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3MgOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICBtbTogJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgaDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICBkOiAn2YrZiNmFJyxcbiAgICAgICAgICAgIGRkOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTTogJ9i02YfYsScsXG4gICAgICAgICAgICBNTTogJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgIHk6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXk6ICclZCDYs9mG2YjYp9iqJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0IC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyVG47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzdWZmaXhlcyA9IHtcbiAgICAgICAgMTogJy1pbmNpJyxcbiAgICAgICAgNTogJy1pbmNpJyxcbiAgICAgICAgODogJy1pbmNpJyxcbiAgICAgICAgNzA6ICctaW5jaScsXG4gICAgICAgIDgwOiAnLWluY2knLFxuICAgICAgICAyOiAnLW5jaScsXG4gICAgICAgIDc6ICctbmNpJyxcbiAgICAgICAgMjA6ICctbmNpJyxcbiAgICAgICAgNTA6ICctbmNpJyxcbiAgICAgICAgMzogJy3DvG5jw7wnLFxuICAgICAgICA0OiAnLcO8bmPDvCcsXG4gICAgICAgIDEwMDogJy3DvG5jw7wnLFxuICAgICAgICA2OiAnLW5jxLEnLFxuICAgICAgICA5OiAnLXVuY3UnLFxuICAgICAgICAxMDogJy11bmN1JyxcbiAgICAgICAgMzA6ICctdW5jdScsXG4gICAgICAgIDYwOiAnLcSxbmPEsScsXG4gICAgICAgIDkwOiAnLcSxbmPEsSdcbiAgICB9O1xuXG4gICAgdmFyIGF6ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXonLCB7XG4gICAgICAgIG1vbnRocyA6ICd5YW52YXJfZmV2cmFsX21hcnRfYXByZWxfbWF5X2l5dW5faXl1bF9hdnF1c3Rfc2VudHlhYnJfb2t0eWFicl9ub3lhYnJfZGVrYWJyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICd5YW5fZmV2X21hcl9hcHJfbWF5X2l5bl9peWxfYXZxX3Nlbl9va3Rfbm95X2Rlaycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnQmF6YXJfQmF6YXIgZXJ0yZlzaV/Dh8mZcsWfyZluYsmZIGF4xZ9hbcSxX8OHyZlyxZ/JmW5iyZlfQ8O8bcmZIGF4xZ9hbcSxX0PDvG3JmV/FnsmZbmLJmScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdCYXpfQnpFX8OHQXhfw4fJmXJfQ0F4X0PDvG1fxZ7JmW4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0J6X0JFX8OHQV/Dh8mZX0NBX0PDvF/FnsmZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbYnVnw7xuIHNhYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW3NhYmFoIHNhYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1tnyZlsyZluIGjJmWZ0yZldIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW2TDvG7JmW5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1trZcOnyZluIGjJmWZ0yZldIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyBzb25yYScsXG4gICAgICAgICAgICBwYXN0IDogJyVzIMmZdnbJmWwnLFxuICAgICAgICAgICAgcyA6ICdiaXJuZcOnyZkgc2FuaXnJmScsXG4gICAgICAgICAgICBzcyA6ICclZCBzYW5pecmZJyxcbiAgICAgICAgICAgIG0gOiAnYmlyIGTJmXFpccmZJyxcbiAgICAgICAgICAgIG1tIDogJyVkIGTJmXFpccmZJyxcbiAgICAgICAgICAgIGggOiAnYmlyIHNhYXQnLFxuICAgICAgICAgICAgaGggOiAnJWQgc2FhdCcsXG4gICAgICAgICAgICBkIDogJ2JpciBnw7xuJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGfDvG4nLFxuICAgICAgICAgICAgTSA6ICdiaXIgYXknLFxuICAgICAgICAgICAgTU0gOiAnJWQgYXknLFxuICAgICAgICAgICAgeSA6ICdiaXIgaWwnLFxuICAgICAgICAgICAgeXkgOiAnJWQgaWwnXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9nZWPJmXxzyZloyZlyfGfDvG5kw7x6fGF4xZ9hbS8sXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXihnw7xuZMO8enxheMWfYW0pJC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdnZWPJmSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc8mZaMmZcic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZ8O8bmTDvHonO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2F4xZ9hbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0oxLFuY8SxfGluY2l8bmNpfMO8bmPDvHxuY8SxfHVuY3UpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHsgIC8vIHNwZWNpYWwgY2FzZSBmb3IgemVyb1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLcSxbmPEsSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGIgPSBudW1iZXIgJSAxMDAgLSBhLFxuICAgICAgICAgICAgICAgIGMgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbYV0gfHwgc3VmZml4ZXNbYl0gfHwgc3VmZml4ZXNbY10pO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgZnVuY3Rpb24gcGx1cmFsKHdvcmQsIG51bSkge1xuICAgICAgICB2YXIgZm9ybXMgPSB3b3JkLnNwbGl0KCdfJyk7XG4gICAgICAgIHJldHVybiBudW0gJSAxMCA9PT0gMSAmJiBudW0gJSAxMDAgIT09IDExID8gZm9ybXNbMF0gOiAobnVtICUgMTAgPj0gMiAmJiBudW0gJSAxMCA8PSA0ICYmIChudW0gJSAxMDAgPCAxMCB8fCBudW0gJSAxMDAgPj0gMjApID8gZm9ybXNbMV0gOiBmb3Jtc1syXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgICdzcyc6IHdpdGhvdXRTdWZmaXggPyAn0YHQtdC60YPQvdC00LBf0YHQtdC60YPQvdC00Ytf0YHQtdC60YPQvdC0JyA6ICfRgdC10LrRg9C90LTRg1/RgdC10LrRg9C90LTRi1/RgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgJ21tJzogd2l0aG91dFN1ZmZpeCA/ICfRhdCy0ZbQu9GW0L3QsF/RhdCy0ZbQu9GW0L3Ri1/RhdCy0ZbQu9GW0L0nIDogJ9GF0LLRltC70ZbQvdGDX9GF0LLRltC70ZbQvdGLX9GF0LLRltC70ZbQvScsXG4gICAgICAgICAgICAnaGgnOiB3aXRob3V0U3VmZml4ID8gJ9Cz0LDQtNC30ZbQvdCwX9Cz0LDQtNC30ZbQvdGLX9Cz0LDQtNC30ZbQvScgOiAn0LPQsNC00LfRltC90YNf0LPQsNC00LfRltC90Ytf0LPQsNC00LfRltC9JyxcbiAgICAgICAgICAgICdkZCc6ICfQtNC30LXQvdGMX9C00L3Rll/QtNC30ZHQvScsXG4gICAgICAgICAgICAnTU0nOiAn0LzQtdGB0Y/Rhl/QvNC10YHRj9GG0Ytf0LzQtdGB0Y/RhtCw0Z4nLFxuICAgICAgICAgICAgJ3l5JzogJ9Cz0L7QtF/Qs9Cw0LTRi1/Qs9Cw0LTQvtGeJ1xuICAgICAgICB9O1xuICAgICAgICBpZiAoa2V5ID09PSAnbScpIHtcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9GF0LLRltC70ZbQvdCwJyA6ICfRhdCy0ZbQu9GW0L3Rgyc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSAnaCcpIHtcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9Cz0LDQtNC30ZbQvdCwJyA6ICfQs9Cw0LTQt9GW0L3Rgyc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgcGx1cmFsKGZvcm1hdFtrZXldLCArbnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBiZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JlJywge1xuICAgICAgICBtb250aHMgOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICfRgdGC0YPQtNC30LXQvdGPX9C70Y7RgtCw0LPQsF/RgdCw0LrQsNCy0ZbQutCwX9C60YDQsNGB0LDQstGW0LrQsF/RgtGA0LDRntC90Y9f0YfRjdGA0LLQtdC90Y9f0LvRltC/0LXQvdGPX9C20L3RltGe0L3Rj1/QstC10YDQsNGB0L3Rj1/QutCw0YHRgtGA0YvRh9C90ZbQutCwX9C70ZbRgdGC0LDQv9Cw0LTQsF/RgdC90LXQttC90Y8nLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBzdGFuZGFsb25lOiAn0YHRgtGD0LTQt9C10L3RjF/Qu9GO0YLRi1/RgdCw0LrQsNCy0ZbQul/QutGA0LDRgdCw0LLRltC6X9GC0YDQsNCy0LXQvdGMX9GH0Y3RgNCy0LXQvdGMX9C70ZbQv9C10L3RjF/QttC90ZbQstC10L3RjF/QstC10YDQsNGB0LXQvdGMX9C60LDRgdGC0YDRi9GH0L3RltC6X9C70ZbRgdGC0LDQv9Cw0LRf0YHQvdC10LbQsNC90YwnLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0YHRgtGD0LRf0LvRjtGCX9GB0LDQul/QutGA0LDRgV/RgtGA0LDQsl/Rh9GN0YDQsl/Qu9GW0L9f0LbQvdGW0LJf0LLQtdGAX9C60LDRgdGCX9C70ZbRgdGCX9GB0L3QtdC2Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ9C90Y/QtNC30LXQu9GOX9C/0LDQvdGP0LTQt9C10LvQsNC6X9Cw0Z7RgtC+0YDQsNC6X9GB0LXRgNCw0LTRg1/Rh9Cw0YbQstC10YBf0L/Rj9GC0L3RltGG0YNf0YHRg9Cx0L7RgtGDJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ9C90Y/QtNC30LXQu9GPX9C/0LDQvdGP0LTQt9C10LvQsNC6X9Cw0Z7RgtC+0YDQsNC6X9GB0LXRgNCw0LTQsF/Rh9Cw0YbQstC10YBf0L/Rj9GC0L3RltGG0LBf0YHRg9Cx0L7RgtCwJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9cXFsgP1vQo9GD0Z5dID8oPzrQvNGW0L3Rg9C70YPRjnzQvdCw0YHRgtGD0L/QvdGD0Y4pPyA/XFxdID9kZGRkL1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9C90LRf0L/QvV/QsNGCX9GB0YBf0YfRhl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9C90LRf0L/QvV/QsNGCX9GB0YBf0YfRhl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWSDQsy4nLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZINCzLiwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSDQsy4sIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0KHRkdC90L3RjyDRnl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQl9Cw0Z7RgtGA0LAg0Z5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0KPRh9C+0YDQsCDRnl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1vQo10gZGRkZCBb0Z5dIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQoyDQvNGW0L3Rg9C70YPRjl0gZGRkZCBb0Z5dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CjINC80ZbQvdGD0LvRi10gZGRkZCBb0Z5dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn0L/RgNCw0LcgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDRgtCw0LzRgycsXG4gICAgICAgICAgICBzIDogJ9C90LXQutCw0LvRjNC60ZYg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIG0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbW0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoaCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBkIDogJ9C00LfQtdC90YwnLFxuICAgICAgICAgICAgZGQgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTSA6ICfQvNC10YHRj9GGJyxcbiAgICAgICAgICAgIE1NIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIHkgOiAn0LPQvtC0JyxcbiAgICAgICAgICAgIHl5IDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv0L3QvtGH0Yt80YDQsNC90ZbRhtGLfNC00L3Rj3zQstC10YfQsNGA0LAvLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14o0LTQvdGPfNCy0LXRh9Cw0YDQsCkkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C90L7Rh9GLJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRgNCw0L3RltGG0YsnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C00L3Rjyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LLQtdGH0LDRgNCwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjRlnzRi3zQs9CwKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKG51bWJlciAlIDEwID09PSAyIHx8IG51bWJlciAlIDEwID09PSAzKSAmJiAobnVtYmVyICUgMTAwICE9PSAxMiAmJiBudW1iZXIgJSAxMDAgIT09IDEzKSA/IG51bWJlciArICct0ZYnIDogbnVtYmVyICsgJy3Riyc7XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCz0LAnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgYmcgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdiZycsIHtcbiAgICAgICAgbW9udGhzIDogJ9GP0L3Rg9Cw0YDQuF/RhNC10LLRgNGD0LDRgNC4X9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNC5X9GO0L3QuF/RjtC70Lhf0LDQstCz0YPRgdGCX9GB0LXQv9GC0LXQvNCy0YDQuF/QvtC60YLQvtC80LLRgNC4X9C90L7QtdC80LLRgNC4X9C00LXQutC10LzQstGA0LgnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9GP0L3RgF/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Llf0Y7QvdC4X9GO0LvQuF/QsNCy0LNf0YHQtdC/X9C+0LrRgl/QvdC+0LVf0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfQvdC10LTQtdC70Y9f0L/QvtC90LXQtNC10LvQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNGP0LTQsF/Rh9C10YLQstGK0YDRgtGK0Lpf0L/QtdGC0YrQul/RgdGK0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn0L3QtdC0X9C/0L7QvV/QstGC0L5f0YHRgNGPX9GH0LXRgl/Qv9C10YJf0YHRitCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfQvdC0X9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9CU0L3QtdGBINCyXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vQo9GC0YDQtSDQsl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb0LJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW9CS0YfQtdGA0LAg0LJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0LjQt9C80LjQvdCw0LvQsNGC0LBdIGRkZGQgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC40LfQvNC40L3QsNC70LjRj10gZGRkZCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9GB0LvQtdC0ICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn0L/RgNC10LTQuCAlcycsXG4gICAgICAgICAgICBzIDogJ9C90Y/QutC+0LvQutC+INGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgICAgIHNzIDogJyVkINGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgICAgIG0gOiAn0LzQuNC90YPRgtCwJyxcbiAgICAgICAgICAgIG1tIDogJyVkINC80LjQvdGD0YLQuCcsXG4gICAgICAgICAgICBoIDogJ9GH0LDRgScsXG4gICAgICAgICAgICBoaCA6ICclZCDRh9Cw0YHQsCcsXG4gICAgICAgICAgICBkIDogJ9C00LXQvScsXG4gICAgICAgICAgICBkZCA6ICclZCDQtNC90LgnLFxuICAgICAgICAgICAgTSA6ICfQvNC10YHQtdGGJyxcbiAgICAgICAgICAgIE1NIDogJyVkINC80LXRgdC10YbQsCcsXG4gICAgICAgICAgICB5IDogJ9Cz0L7QtNC40L3QsCcsXG4gICAgICAgICAgICB5eSA6ICclZCDQs9C+0LTQuNC90LgnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0LXQsnzQtdC9fNGC0Lh80LLQuHzRgNC4fNC80LgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBsYXN0RGlnaXQgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBsYXN0MkRpZ2l0cyA9IG51bWJlciAlIDEwMDtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QtdCyJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QtdC9JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPiAxMCAmJiBsYXN0MkRpZ2l0cyA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCy0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgNC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSA3IHx8IGxhc3REaWdpdCA9PT0gOCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC80LgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgtC4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYmc7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBibSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JtJywge1xuICAgICAgICBtb250aHMgOiAnWmFud3V5ZWthbG9fRmV3dXJ1eWVrYWxvX01hcmlzaWthbG9fQXdpcmlsaWthbG9fTcmba2Fsb19adXfJm25rYWxvX1p1bHV5ZWthbG9fVXRpa2Fsb19TyZt0YW5idXJ1a2Fsb1/JlGt1dMmUYnVydWthbG9fTm93YW5idXJ1a2Fsb19EZXNhbmJ1cnVrYWxvJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdaYW5fRmV3X01hcl9Bd2lfTcmbX1p1d19adWxfVXRpX1PJm3RfyZRrdV9Ob3dfRGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdLYXJpX050yZtuyZtuX1RhcmF0YV9BcmFiYV9BbGFtaXNhX0p1bWFfU2liaXJpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0thcl9OdMmbX1Rhcl9BcmFfQWxhX0p1bV9TaWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0thX050X1RhX0FyX0FsX0p1X1NpJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnTU1NTSBbdGlsZV0gRCBbc2FuXSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdNTU1NIFt0aWxlXSBEIFtzYW5dIFlZWVkgW2zJm3LJm10gSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIE1NTU0gW3RpbGVdIEQgW3Nhbl0gWVlZWSBbbMmbcsmbXSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tCaSBsyZtyyZtdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1NpbmkgbMmbcsmbXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtkb24gbMmbcsmbXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tLdW51IGzJm3LJm10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbdMmbbcmbbmVuIGzJm3LJm10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIGvJlG7JlCcsXG4gICAgICAgICAgICBwYXN0IDogJ2EgYsmbICVzIGLJlCcsXG4gICAgICAgICAgICBzIDogJ3NhbmdhIGRhbWEgZGFtYScsXG4gICAgICAgICAgICBzcyA6ICdzZWtvbmRpICVkJyxcbiAgICAgICAgICAgIG0gOiAnbWluaXRpIGtlbGVuJyxcbiAgICAgICAgICAgIG1tIDogJ21pbml0aSAlZCcsXG4gICAgICAgICAgICBoIDogJ2zJm3LJmyBrZWxlbicsXG4gICAgICAgICAgICBoaCA6ICdsyZtyyZsgJWQnLFxuICAgICAgICAgICAgZCA6ICd0aWxlIGtlbGVuJyxcbiAgICAgICAgICAgIGRkIDogJ3RpbGUgJWQnLFxuICAgICAgICAgICAgTSA6ICdrYWxvIGtlbGVuJyxcbiAgICAgICAgICAgIE1NIDogJ2thbG8gJWQnLFxuICAgICAgICAgICAgeSA6ICdzYW4ga2VsZW4nLFxuICAgICAgICAgICAgeXkgOiAnc2FuICVkJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBibTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn4KenJyxcbiAgICAgICAgJzInOiAn4KeoJyxcbiAgICAgICAgJzMnOiAn4KepJyxcbiAgICAgICAgJzQnOiAn4KeqJyxcbiAgICAgICAgJzUnOiAn4KerJyxcbiAgICAgICAgJzYnOiAn4KesJyxcbiAgICAgICAgJzcnOiAn4KetJyxcbiAgICAgICAgJzgnOiAn4KeuJyxcbiAgICAgICAgJzknOiAn4KevJyxcbiAgICAgICAgJzAnOiAn4KemJ1xuICAgIH0sXG4gICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAn4KenJzogJzEnLFxuICAgICAgICAn4KeoJzogJzInLFxuICAgICAgICAn4KepJzogJzMnLFxuICAgICAgICAn4KeqJzogJzQnLFxuICAgICAgICAn4KerJzogJzUnLFxuICAgICAgICAn4KesJzogJzYnLFxuICAgICAgICAn4KetJzogJzcnLFxuICAgICAgICAn4KeuJzogJzgnLFxuICAgICAgICAn4KevJzogJzknLFxuICAgICAgICAn4KemJzogJzAnXG4gICAgfTtcblxuICAgIHZhciBibiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JuJywge1xuICAgICAgICBtb250aHMgOiAn4Kac4Ka+4Kao4KeB4Kef4Ka+4Kaw4KeAX+Cmq+Cnh+CmrOCnjeCmsOCngeCnn+CmvuCmsOCmv1/gpq7gpr7gprDgp43gpppf4KaP4Kaq4KeN4Kaw4Ka/4KayX+CmruCnh1/gppzgp4Hgpqhf4Kac4KeB4Kay4Ka+4KaHX+CmhuCml+CmuOCnjeCmn1/gprjgp4fgpqrgp43gpp/gp4fgpq7gp43gpqzgprBf4KaF4KaV4KeN4Kaf4KeL4Kas4KawX+CmqOCmreCnh+CmruCnjeCmrOCmsF/gpqHgpr/gprjgp4fgpq7gp43gpqzgprAnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+CmnOCmvuCmqOCngV/gpqvgp4fgpqxf4Kau4Ka+4Kaw4KeN4KaaX+Cmj+CmquCnjeCmsF/gpq7gp4df4Kac4KeB4KaoX+CmnOCngeCmsl/gpobgppdf4Ka44KeH4Kaq4KeN4KafX+CmheCmleCnjeCmn+Cni1/gpqjgpq3gp4df4Kah4Ka/4Ka44KeHJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfgprDgpqzgpr/gpqzgpr7gprBf4Ka44KeL4Kau4Kas4Ka+4KawX+CmruCmmeCnjeCml+CmsuCmrOCmvuCmsF/gpqzgp4Hgpqfgpqzgpr7gprBf4Kas4KeD4Ka54Ka44KeN4Kaq4Kak4Ka/4Kas4Ka+4KawX+CmtuCngeCmleCnjeCmsOCmrOCmvuCmsF/gprbgpqjgpr/gpqzgpr7gprAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4Kaw4Kas4Ka/X+CmuOCni+Cmrl/gpq7gppngp43gppfgprJf4Kas4KeB4KanX+CmrOCng+CmueCmuOCnjeCmquCmpOCmv1/gprbgp4HgppXgp43gprBf4Ka24Kao4Ka/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfgprDgpqzgpr9f4Ka44KeL4KauX+CmruCmmeCnjeCml1/gpqzgp4Hgpqdf4Kas4KeD4Ka54KaDX+CmtuCngeCmleCnjeCmsF/gprbgpqjgpr8nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnQSBoOm1tIOCmuOCmruCnnycsXG4gICAgICAgICAgICBMVFMgOiAnQSBoOm1tOnNzIOCmuOCmruCnnycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4Ka44Kau4KefJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgprjgpq7gp58nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb4KaG4KacXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vgpobgppfgpr7gpq7gp4DgppXgpr7gprJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+Cml+CmpOCmleCmvuCmsl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+Cml+CmpF0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIOCmquCmsOCnhycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIOCmhuCml+CnhycsXG4gICAgICAgICAgICBzIDogJ+CmleCnn+Cnh+CmlSDgprjgp4fgppXgp4fgpqjgp43gpqEnLFxuICAgICAgICAgICAgc3MgOiAnJWQg4Ka44KeH4KaV4KeH4Kao4KeN4KahJyxcbiAgICAgICAgICAgIG0gOiAn4KaP4KaVIOCmruCmv+CmqOCmv+CmnycsXG4gICAgICAgICAgICBtbSA6ICclZCDgpq7gpr/gpqjgpr/gpp8nLFxuICAgICAgICAgICAgaCA6ICfgpo/gppUg4KaY4Kao4KeN4Kaf4Ka+JyxcbiAgICAgICAgICAgIGhoIDogJyVkIOCmmOCmqOCnjeCmn+CmvicsXG4gICAgICAgICAgICBkIDogJ+Cmj+CmlSDgpqbgpr/gpqgnLFxuICAgICAgICAgICAgZGQgOiAnJWQg4Kam4Ka/4KaoJyxcbiAgICAgICAgICAgIE0gOiAn4KaP4KaVIOCmruCmvuCmuCcsXG4gICAgICAgICAgICBNTSA6ICclZCDgpq7gpr7gprgnLFxuICAgICAgICAgICAgeSA6ICfgpo/gppUg4Kas4Kab4KawJyxcbiAgICAgICAgICAgIHl5IDogJyVkIOCmrOCmm+CmsCdcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Cnp+CnqOCnqeCnquCnq+CnrOCnreCnruCnr+Cnpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CmsOCmvuCmpHzgprjgppXgpr7gprJ84Kam4KeB4Kaq4KeB4KawfOCmrOCmv+CmleCmvuCmsnzgprDgpr7gpqQvLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChtZXJpZGllbSA9PT0gJ+CmsOCmvuCmpCcgJiYgaG91ciA+PSA0KSB8fFxuICAgICAgICAgICAgICAgICAgICAobWVyaWRpZW0gPT09ICfgpqbgp4Hgpqrgp4HgprAnICYmIGhvdXIgPCA1KSB8fFxuICAgICAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+CmrOCmv+CmleCmvuCmsicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmsOCmvuCmpCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Ka44KaV4Ka+4KayJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpqbgp4Hgpqrgp4HgprAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmrOCmv+CmleCmvuCmsic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kaw4Ka+4KakJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYm47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ+C8oScsXG4gICAgICAgICcyJzogJ+C8oicsXG4gICAgICAgICczJzogJ+C8oycsXG4gICAgICAgICc0JzogJ+C8pCcsXG4gICAgICAgICc1JzogJ+C8pScsXG4gICAgICAgICc2JzogJ+C8picsXG4gICAgICAgICc3JzogJ+C8pycsXG4gICAgICAgICc4JzogJ+C8qCcsXG4gICAgICAgICc5JzogJ+C8qScsXG4gICAgICAgICcwJzogJ+C8oCdcbiAgICB9LFxuICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ+C8oSc6ICcxJyxcbiAgICAgICAgJ+C8oic6ICcyJyxcbiAgICAgICAgJ+C8oyc6ICczJyxcbiAgICAgICAgJ+C8pCc6ICc0JyxcbiAgICAgICAgJ+C8pSc6ICc1JyxcbiAgICAgICAgJ+C8pic6ICc2JyxcbiAgICAgICAgJ+C8pyc6ICc3JyxcbiAgICAgICAgJ+C8qCc6ICc4JyxcbiAgICAgICAgJ+C8qSc6ICc5JyxcbiAgICAgICAgJ+C8oCc6ICcwJ1xuICAgIH07XG5cbiAgICB2YXIgYm8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdibycsIHtcbiAgICAgICAgbW9udGhzIDogJ+C9n+C+s+C8i+C9luC8i+C9keC9hOC8i+C9lOC9vF/gvZ/gvrPgvIvgvZbgvIvgvYLgvYngvbLgvabgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2C4L2m4L204L2Y4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9nuC9suC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvaPgvpTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2R4L6y4L204L2C4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9keC9tOC9k+C8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvaLgvpLgvrHgvZHgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2R4L2C4L204LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvYLgvYXgvbLgvYLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2C4L2J4L2y4L2m4LyL4L2UJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfgvZ/gvrPgvIvgvZbgvIvgvZHgvYTgvIvgvZTgvbxf4L2f4L6z4LyL4L2W4LyL4L2C4L2J4L2y4L2m4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9guC9puC9tOC9mOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvZ7gvbLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2j4L6U4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9keC+suC9tOC9guC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvZHgvbTgvZPgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2i4L6S4L6x4L2R4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9keC9guC9tOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2C4L2F4L2y4L2C4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9guC9ieC9suC9puC8i+C9lCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn4L2C4L2f4L2g4LyL4L2J4L2y4LyL4L2Y4LyLX+C9guC9n+C9oOC8i+C9n+C+s+C8i+C9luC8i1/gvYLgvZ/gvaDgvIvgvZjgvbLgvYLgvIvgvZHgvZjgvaLgvItf4L2C4L2f4L2g4LyL4L2j4L634L2C4LyL4L2U4LyLX+C9guC9n+C9oOC8i+C9leC9tOC9ouC8i+C9luC9tF/gvYLgvZ/gvaDgvIvgvZTgvIvgvabgvYTgvabgvItf4L2C4L2f4L2g4LyL4L2m4L6k4L264L2T4LyL4L2U4LyLJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+C9ieC9suC8i+C9mOC8i1/gvZ/gvrPgvIvgvZbgvItf4L2Y4L2y4L2C4LyL4L2R4L2Y4L2i4LyLX+C9o+C+t+C9guC8i+C9lOC8i1/gvZXgvbTgvaLgvIvgvZbgvbRf4L2U4LyL4L2m4L2E4L2m4LyLX+C9puC+pOC9uuC9k+C8i+C9lOC8iycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4L2J4L2y4LyL4L2Y4LyLX+C9n+C+s+C8i+C9luC8i1/gvZjgvbLgvYLgvIvgvZHgvZjgvaLgvItf4L2j4L634L2C4LyL4L2U4LyLX+C9leC9tOC9ouC8i+C9luC9tF/gvZTgvIvgvabgvYTgvabgvItf4L2m4L6k4L264L2T4LyL4L2U4LyLJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0EgaDptbScsXG4gICAgICAgICAgICBMVFMgOiAnQSBoOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb4L2R4L2y4LyL4L2i4L2y4L2EXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vgvabgvYTgvIvgvYngvbLgvZNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1vgvZbgvZHgvbTgvZPgvIvgvZXgvrLgvYLgvIvgvaLgvpfgvbrgvabgvIvgvZhdLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgvYHgvIvgvabgvYRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vgvZbgvZHgvbTgvZPgvIvgvZXgvrLgvYLgvIvgvZjgvZDgvaDgvIvgvZhdIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDgvaPgvIsnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDgvabgvpTgvZPgvIvgvaMnLFxuICAgICAgICAgICAgcyA6ICfgvaPgvZjgvIvgvabgvYQnLFxuICAgICAgICAgICAgc3MgOiAnJWQg4L2m4L6Q4L2i4LyL4L2G4LyNJyxcbiAgICAgICAgICAgIG0gOiAn4L2m4L6Q4L2i4LyL4L2Y4LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOC9puC+kOC9ouC8i+C9mCcsXG4gICAgICAgICAgICBoIDogJ+C9huC9tOC8i+C9muC9vOC9keC8i+C9guC9heC9suC9gicsXG4gICAgICAgICAgICBoaCA6ICclZCDgvYbgvbTgvIvgvZrgvbzgvZEnLFxuICAgICAgICAgICAgZCA6ICfgvYngvbLgvZPgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICAgICAgZGQgOiAnJWQg4L2J4L2y4L2T4LyLJyxcbiAgICAgICAgICAgIE0gOiAn4L2f4L6z4LyL4L2W4LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgICAgIE1NIDogJyVkIOC9n+C+s+C8i+C9licsXG4gICAgICAgICAgICB5IDogJ+C9o+C9vOC8i+C9guC9heC9suC9gicsXG4gICAgICAgICAgICB5eSA6ICclZCDgvaPgvbwnXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgvKHgvKLgvKPgvKTgvKXgvKbgvKfgvKjgvKngvKBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gvZjgvZrgvZPgvIvgvZjgvbx84L2e4L284L2C4L2m4LyL4L2A4L2mfOC9ieC9suC9k+C8i+C9guC9tOC9hHzgvZHgvYLgvbzgvYTgvIvgvZHgvYJ84L2Y4L2a4L2T4LyL4L2Y4L28LyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgobWVyaWRpZW0gPT09ICfgvZjgvZrgvZPgvIvgvZjgvbwnICYmIGhvdXIgPj0gNCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKG1lcmlkaWVtID09PSAn4L2J4L2y4L2T4LyL4L2C4L204L2EJyAmJiBob3VyIDwgNSkgfHxcbiAgICAgICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgvZHgvYLgvbzgvYTgvIvgvZHgvYInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgvZjgvZrgvZPgvIvgvZjgvbwnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C9nuC9vOC9guC9puC8i+C9gOC9pic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4L2J4L2y4L2T4LyL4L2C4L204L2EJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgvZHgvYLgvbzgvYTgvIvgvZHgvYInO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C9mOC9muC9k+C8i+C9mOC9vCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24obnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgICdtbSc6ICdtdW51dGVubicsXG4gICAgICAgICAgICAnTU0nOiAnbWl6JyxcbiAgICAgICAgICAgICdkZCc6ICdkZXZlemgnXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBtdXRhdGlvbihmb3JtYXRba2V5XSwgbnVtYmVyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3BlY2lhbE11dGF0aW9uRm9yWWVhcnMobnVtYmVyKSB7XG4gICAgICAgIHN3aXRjaCAobGFzdE51bWJlcihudW1iZXIpKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgYmxvYXonO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyB2bG9heic7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gbGFzdE51bWJlcihudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA+IDkpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0TnVtYmVyKG51bWJlciAlIDEwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtdXRhdGlvbih0ZXh0LCBudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgcmV0dXJuIHNvZnRNdXRhdGlvbih0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgZnVuY3Rpb24gc29mdE11dGF0aW9uKHRleHQpIHtcbiAgICAgICAgdmFyIG11dGF0aW9uVGFibGUgPSB7XG4gICAgICAgICAgICAnbSc6ICd2JyxcbiAgICAgICAgICAgICdiJzogJ3YnLFxuICAgICAgICAgICAgJ2QnOiAneidcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG11dGF0aW9uVGFibGVbdGV4dC5jaGFyQXQoMCldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtdXRhdGlvblRhYmxlW3RleHQuY2hhckF0KDApXSArIHRleHQuc3Vic3RyaW5nKDEpO1xuICAgIH1cblxuICAgIHZhciBiciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JyJywge1xuICAgICAgICBtb250aHMgOiAnR2VudmVyX0NcXCdod2V2cmVyX01ldXJ6aF9FYnJlbF9NYWVfTWV6aGV2ZW5fR291ZXJlX0Vvc3RfR3dlbmdvbG9fSGVyZV9EdV9LZXJ6dScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnR2VuX0NcXCdod2VfTWV1X0Vicl9NYWVfRXZlX0dvdV9Fb3NfR3dlX0hlcl9EdV9LZXInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ1N1bF9MdW5fTWV1cnpoX01lcmNcXCdoZXJfWWFvdV9Hd2VuZXJfU2Fkb3JuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1N1bF9MdW5fTWV1X01lcl9ZYW9fR3dlX1NhZCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU3VfTHVfTWVfTWVyX1lhX0d3X1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ2hbZV1tbSBBJyxcbiAgICAgICAgICAgIExUUyA6ICdoW2VdbW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBbYSB2aXpdIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBbYSB2aXpdIE1NTU0gWVlZWSBoW2VdbW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgW2Egdml6XSBNTU1NIFlZWVkgaFtlXW1tIEEnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbSGl6aXYgZGFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1dhcmNcXCdob2F6aCBkYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbZGFdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0RlY1xcJ2ggZGFdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW3Bhc2V0IGRhXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnYS1iZW5uICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgXFwnem8nLFxuICAgICAgICAgICAgcyA6ICd1biBuZWJldWQgc2Vnb25kZW5ub8O5JyxcbiAgICAgICAgICAgIHNzIDogJyVkIGVpbGVubicsXG4gICAgICAgICAgICBtIDogJ3VyIHZ1bnV0ZW5uJyxcbiAgICAgICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aE11dGF0aW9uLFxuICAgICAgICAgICAgaCA6ICd1biBldXInLFxuICAgICAgICAgICAgaGggOiAnJWQgZXVyJyxcbiAgICAgICAgICAgIGQgOiAndW4gZGV2ZXpoJyxcbiAgICAgICAgICAgIGRkIDogcmVsYXRpdmVUaW1lV2l0aE11dGF0aW9uLFxuICAgICAgICAgICAgTSA6ICd1ciBtaXonLFxuICAgICAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24sXG4gICAgICAgICAgICB5IDogJ3VyIGJsb2F6JyxcbiAgICAgICAgICAgIHl5IDogc3BlY2lhbE11dGF0aW9uRm9yWWVhcnNcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGHDsXx2ZXQpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSAobnVtYmVyID09PSAxKSA/ICdhw7EnIDogJ3ZldCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBicjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmRlJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnamVkbmEgbWludXRhJyA6ICdqZWRuZSBtaW51dGUnO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRhJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2plZGFuIHNhdCcgOiAnamVkbm9nIHNhdGEnO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXRhJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdGknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdkYW4nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZGFuYSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21qZXNlYyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21qZXNlY2EnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGJzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYnMnLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJfZmVicnVhcl9tYXJ0X2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJhcl9va3RvYmFyX25vdmVtYmFyX2RlY2VtYmFyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW4uX2ZlYi5fbWFyLl9hcHIuX21hai5fanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnbmVkamVsamFfcG9uZWRqZWxqYWtfdXRvcmFrX3NyaWplZGFfxI1ldHZydGFrX3BldGFrX3N1Ym90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICduZWQuX3Bvbi5fdXRvLl9zcmkuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5ICA6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSAgOiAnW3N1dHJhIHVdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkamVsanVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzcmlqZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgIDogJ1tqdcSNZXIgdV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxpXSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0ICAgOiAncHJpamUgJXMnLFxuICAgICAgICAgICAgcyAgICAgIDogJ3BhciBzZWt1bmRpJyxcbiAgICAgICAgICAgIHNzICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgICAgICA6ICdkYW4nLFxuICAgICAgICAgICAgZGQgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTSAgICAgIDogJ21qZXNlYycsXG4gICAgICAgICAgICBNTSAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5ICAgICAgOiAnZ29kaW51JyxcbiAgICAgICAgICAgIHl5ICAgICA6IHRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgY2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdjYScsIHtcbiAgICAgICAgbW9udGhzIDoge1xuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ2dlbmVyX2ZlYnJlcl9tYXLDp19hYnJpbF9tYWlnX2p1bnlfanVsaW9sX2Fnb3N0X3NldGVtYnJlX29jdHVicmVfbm92ZW1icmVfZGVzZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBmb3JtYXQ6ICdkZSBnZW5lcl9kZSBmZWJyZXJfZGUgbWFyw6dfZFxcJ2FicmlsX2RlIG1haWdfZGUganVueV9kZSBqdWxpb2xfZFxcJ2Fnb3N0X2RlIHNldGVtYnJlX2RcXCdvY3R1YnJlX2RlIG5vdmVtYnJlX2RlIGRlc2VtYnJlJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9EW29EXT8oXFxzKStNTU1NL1xuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydCA6ICdnZW4uX2ZlYnIuX21hcsOnX2Fici5fbWFpZ19qdW55X2p1bC5fYWcuX3NldC5fb2N0Ll9ub3YuX2Rlcy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdkaXVtZW5nZV9kaWxsdW5zX2RpbWFydHNfZGltZWNyZXNfZGlqb3VzX2RpdmVuZHJlc19kaXNzYWJ0ZScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkZy5fZGwuX2R0Ll9kYy5fZGouX2R2Ll9kcy4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RnX2RsX2R0X2RjX2RqX2R2X2RzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgbGwgOiAnRCBNTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFtkZV0gWVlZWSBbYSBsZXNdIEg6bW0nLFxuICAgICAgICAgICAgbGxsIDogJ0QgTU1NIFlZWVksIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBbZGVdIFlZWVkgW2EgbGVzXSBIOm1tJyxcbiAgICAgICAgICAgIGxsbGwgOiAnZGRkIEQgTU1NIFlZWVksIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1thdnVpIGEgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdsZXMnIDogJ2xhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tkZW3DoCBhICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbYSAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ2xlcycgOiAnbGEnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2FoaXIgYSAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ2xlcycgOiAnbGEnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tlbF0gZGRkZCBbcGFzc2F0IGEgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdsZXMnIDogJ2xhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2RcXCdhcXXDrSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2ZhICVzJyxcbiAgICAgICAgICAgIHMgOiAndW5zIHNlZ29ucycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWdvbnMnLFxuICAgICAgICAgICAgbSA6ICd1biBtaW51dCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dHMnLFxuICAgICAgICAgICAgaCA6ICd1bmEgaG9yYScsXG4gICAgICAgICAgICBoaCA6ICclZCBob3JlcycsXG4gICAgICAgICAgICBkIDogJ3VuIGRpYScsXG4gICAgICAgICAgICBkZCA6ICclZCBkaWVzJyxcbiAgICAgICAgICAgIE0gOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1lc29zJyxcbiAgICAgICAgICAgIHkgOiAndW4gYW55JyxcbiAgICAgICAgICAgIHl5IDogJyVkIGFueXMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShyfG58dHzDqHxhKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSAobnVtYmVyID09PSAxKSA/ICdyJyA6XG4gICAgICAgICAgICAgICAgKG51bWJlciA9PT0gMikgPyAnbicgOlxuICAgICAgICAgICAgICAgIChudW1iZXIgPT09IDMpID8gJ3InIDpcbiAgICAgICAgICAgICAgICAobnVtYmVyID09PSA0KSA/ICd0JyA6ICfDqCc7XG4gICAgICAgICAgICBpZiAocGVyaW9kID09PSAndycgfHwgcGVyaW9kID09PSAnVycpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAnYSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRocyA9ICdsZWRlbl/Dum5vcl9ixZllemVuX2R1YmVuX2t2xJt0ZW5fxI1lcnZlbl/EjWVydmVuZWNfc3JwZW5fesOhxZnDrV/FmcOtamVuX2xpc3RvcGFkX3Byb3NpbmVjJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA9ICdsZWRfw7pub19ixZllX2R1Yl9rdsSbX8SNdm5fxI12Y19zcnBfesOhxZlfxZnDrWpfbGlzX3Bybycuc3BsaXQoJ18nKTtcblxuICAgIHZhciBtb250aHNQYXJzZSA9IFsvXmxlZC9pLCAvXsO6bm8vaSwgL15ixZllL2ksIC9eZHViL2ksIC9ea3bEmy9pLCAvXijEjXZufMSNZXJ2ZW4kfMSNZXJ2bmEpL2ksIC9eKMSNdmN8xI1lcnZlbmVjfMSNZXJ2ZW5jZSkvaSwgL15zcnAvaSwgL156w6HFmS9pLCAvXsWZw61qL2ksIC9ebGlzL2ksIC9ecHJvL2ldO1xuICAgIC8vIE5PVEU6ICfEjWVydmVuJyBpcyBzdWJzdHJpbmcgb2YgJ8SNZXJ2ZW5lYyc7IHRoZXJlZm9yZSAnxI1lcnZlbmVjJyBtdXN0IHByZWNlZGUgJ8SNZXJ2ZW4nIGluIHRoZSByZWdleCB0byBiZSBmdWxseSBtYXRjaGVkLlxuICAgIC8vIE90aGVyd2lzZSBwYXJzZXIgbWF0Y2hlcyAnMS4gxI1lcnZlbmVjJyBhcyAnMS4gxI1lcnZlbicgKyAnZWMnLlxuICAgIHZhciBtb250aHNSZWdleCA9IC9eKGxlZGVufMO6bm9yfGLFmWV6ZW58ZHViZW58a3bEm3RlbnzEjWVydmVuZWN8xI1lcnZlbmNlfMSNZXJ2ZW58xI1lcnZuYXxzcnBlbnx6w6HFmcOtfMWZw61qZW58bGlzdG9wYWR8cHJvc2luZWN8bGVkfMO6bm98YsWZZXxkdWJ8a3bEm3zEjXZufMSNdmN8c3JwfHrDocWZfMWZw61qfGxpc3xwcm8pL2k7XG5cbiAgICBmdW5jdGlvbiBwbHVyYWwobikge1xuICAgICAgICByZXR1cm4gKG4gPiAxKSAmJiAobiA8IDUpICYmICh+fihuIC8gMTApICE9PSAxKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6ICAvLyBhIGZldyBzZWNvbmRzIC8gaW4gYSBmZXcgc2Vjb25kcyAvIGEgZmV3IHNlY29uZHMgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSA/ICdww6FyIHNla3VuZCcgOiAncMOhciBzZWt1bmRhbWknO1xuICAgICAgICAgICAgY2FzZSAnc3MnOiAvLyA5IHNlY29uZHMgLyBpbiA5IHNlY29uZHMgLyA5IHNlY29uZHMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdzZWt1bmR5JyA6ICdzZWt1bmQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ3Nla3VuZGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbSc6ICAvLyBhIG1pbnV0ZSAvIGluIGEgbWludXRlIC8gYSBtaW51dGUgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnbWludXRhJyA6IChpc0Z1dHVyZSA/ICdtaW51dHUnIDogJ21pbnV0b3UnKTtcbiAgICAgICAgICAgIGNhc2UgJ21tJzogLy8gOSBtaW51dGVzIC8gaW4gOSBtaW51dGVzIC8gOSBtaW51dGVzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWludXR5JyA6ICdtaW51dCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbWludXRhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2gnOiAgLy8gYW4gaG91ciAvIGluIGFuIGhvdXIgLyBhbiBob3VyIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2hvZGluYScgOiAoaXNGdXR1cmUgPyAnaG9kaW51JyA6ICdob2Rpbm91Jyk7XG4gICAgICAgICAgICBjYXNlICdoaCc6IC8vIDkgaG91cnMgLyBpbiA5IGhvdXJzIC8gOSBob3VycyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2hvZGlueScgOiAnaG9kaW4nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2hvZGluYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkJzogIC8vIGEgZGF5IC8gaW4gYSBkYXkgLyBhIGRheSBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ2RlbicgOiAnZG5lbSc7XG4gICAgICAgICAgICBjYXNlICdkZCc6IC8vIDkgZGF5cyAvIGluIDkgZGF5cyAvIDkgZGF5cyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2RueScgOiAnZG7DrScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZG55JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdNJzogIC8vIGEgbW9udGggLyBpbiBhIG1vbnRoIC8gYSBtb250aCBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ23Em3PDrWMnIDogJ23Em3PDrWNlbSc7XG4gICAgICAgICAgICBjYXNlICdNTSc6IC8vIDkgbW9udGhzIC8gaW4gOSBtb250aHMgLyA5IG1vbnRocyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ23Em3PDrWNlJyA6ICdtxJtzw61jxa8nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23Em3PDrWNpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd5JzogIC8vIGEgeWVhciAvIGluIGEgeWVhciAvIGEgeWVhciBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ3JvaycgOiAncm9rZW0nO1xuICAgICAgICAgICAgY2FzZSAneXknOiAvLyA5IHllYXJzIC8gaW4gOSB5ZWFycyAvIDkgeWVhcnMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdyb2t5JyA6ICdsZXQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2xldHknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2NzJywge1xuICAgICAgICBtb250aHMgOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0IDogbW9udGhzU2hvcnQsXG4gICAgICAgIG1vbnRoc1JlZ2V4IDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXggOiBtb250aHNSZWdleCxcbiAgICAgICAgLy8gTk9URTogJ8SNZXJ2ZW4nIGlzIHN1YnN0cmluZyBvZiAnxI1lcnZlbmVjJzsgdGhlcmVmb3JlICfEjWVydmVuZWMnIG11c3QgcHJlY2VkZSAnxI1lcnZlbicgaW4gdGhlIHJlZ2V4IHRvIGJlIGZ1bGx5IG1hdGNoZWQuXG4gICAgICAgIC8vIE90aGVyd2lzZSBwYXJzZXIgbWF0Y2hlcyAnMS4gxI1lcnZlbmVjJyBhcyAnMS4gxI1lcnZlbicgKyAnZWMnLlxuICAgICAgICBtb250aHNTdHJpY3RSZWdleCA6IC9eKGxlZGVufGxlZG5hfMO6bm9yYXzDum5vcnxixZllemVufGLFmWV6bmF8ZHViZW58ZHVibmF8a3bEm3RlbnxrdsSbdG5hfMSNZXJ2ZW5lY3zEjWVydmVuY2V8xI1lcnZlbnzEjWVydm5hfHNycGVufHNycG5hfHrDocWZw618xZnDrWplbnzFmcOtam5hfGxpc3RvcGFkdXxsaXN0b3BhZHxwcm9zaW5lY3xwcm9zaW5jZSkvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleCA6IC9eKGxlZHzDum5vfGLFmWV8ZHVifGt2xJt8xI12bnzEjXZjfHNycHx6w6HFmXzFmcOtanxsaXN8cHJvKS9pLFxuICAgICAgICBtb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICB3ZWVrZGF5cyA6ICduZWTEm2xlX3BvbmTEm2zDrV/DunRlcsO9X3N0xZllZGFfxI10dnJ0ZWtfcMOhdGVrX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICduZV9wb1/DunRfc3RfxI10X3DDoV9zbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnbmVfcG9fw7p0X3N0X8SNdF9ww6Ffc28nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBsIDogJ0QuIE0uIFlZWVknXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkbmVzIHZdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbesOtdHJhIHZdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3YgbmVkxJtsaSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gZGRkZCBbdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2ZSBzdMWZZWR1IHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdmUgxI10dnJ0ZWsgdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHDDoXRlayB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc29ib3R1IHZdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1t2xI1lcmEgdl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWxvdSBuZWTEm2xpIHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMOpXSBkZGRkIFt2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsb3Ugc3TFmWVkdSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDvV0gZGRkZCBbdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bG91IHNvYm90dSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAncMWZZWQgJXMnLFxuICAgICAgICAgICAgcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHNzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE1NIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHl5IDogdHJhbnNsYXRlXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgY3YgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdjdicsIHtcbiAgICAgICAgbW9udGhzIDogJ9C605HRgNC70LDRh1/QvdCw0YDTkdGBX9C/0YPRiF/QsNC60LBf0LzQsNC5X9Kr05fRgNGC0LzQtV/Rg9GC05Ff0qvRg9GA0LvQsF/QsNCy05HQvV/RjtC/0LBf0YfTs9C6X9GA0LDRiNGC0LDQsicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0LrTkdGAX9C90LDRgF/Qv9GD0Yhf0LDQutCwX9C80LDQuV/Sq9OX0YBf0YPRgtORX9Kr0YPRgF/QsNCy0L1f0Y7Qv9CwX9GH07PQul/RgNCw0YgnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9Cy0YvRgNGB0LDRgNC90LjQutGD0L1f0YLRg9C90YLQuNC60YPQvV/Ri9GC0LvQsNGA0LjQutGD0L1f0Y7QvdC60YPQvV/QutOX0qvQvdC10YDQvdC40LrRg9C9X9GN0YDQvdC10LrRg9C9X9GI05HQvNCw0YLQutGD0L0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn0LLRi9GAX9GC0YPQvV/Ri9GC0Ltf0Y7QvV/QutOX0qtf0Y3RgNC9X9GI05HQvCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0LLRgF/RgtC9X9GL0YJf0Y7QvV/QutKrX9GN0YBf0YjQvCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ1lZWVkgW9Kr0YPQu9GF0LhdIE1NTU0gW9GD0LnTkdGF05fQvV0gRFst0LzTl9GI05ddJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZIFvSq9GD0LvRhdC4XSBNTU1NIFvRg9C505HRhdOX0L1dIERbLdC805fRiNOXXSwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBZWVlZIFvSq9GD0LvRhdC4XSBNTU1NIFvRg9C505HRhdOX0L1dIERbLdC805fRiNOXXSwgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQn9Cw0Y/QvV0gTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9Cr0YDQsNC9XSBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb05bQvdC10YBdIExUIFvRgdC10YXQtdGC0YDQtV0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb0qrQuNGC0LXRgV0gZGRkZCBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9CY0YDRgtC905ddIGRkZGQgTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6IGZ1bmN0aW9uIChvdXRwdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWZmaXggPSAv0YHQtdGF0LXRgiQvaS5leGVjKG91dHB1dCkgPyAn0YDQtdC9JyA6IC/Sq9GD0LskL2kuZXhlYyhvdXRwdXQpID8gJ9GC0LDQvScgOiAn0YDQsNC9JztcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0ICsgYWZmaXg7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFzdCA6ICclcyDQutCw0Y/Qu9C70LAnLFxuICAgICAgICAgICAgcyA6ICfQv9OX0YAt0LjQuiDSq9C10LrQutGD0L3RgicsXG4gICAgICAgICAgICBzcyA6ICclZCDSq9C10LrQutGD0L3RgicsXG4gICAgICAgICAgICBtIDogJ9C/05fRgCDQvNC40L3Rg9GCJyxcbiAgICAgICAgICAgIG1tIDogJyVkINC80LjQvdGD0YInLFxuICAgICAgICAgICAgaCA6ICfQv9OX0YAg0YHQtdGF0LXRgicsXG4gICAgICAgICAgICBoaCA6ICclZCDRgdC10YXQtdGCJyxcbiAgICAgICAgICAgIGQgOiAn0L/Tl9GAINC60YPQvScsXG4gICAgICAgICAgICBkZCA6ICclZCDQutGD0L0nLFxuICAgICAgICAgICAgTSA6ICfQv9OX0YAg0YPQudOR0YUnLFxuICAgICAgICAgICAgTU0gOiAnJWQg0YPQudOR0YUnLFxuICAgICAgICAgICAgeSA6ICfQv9OX0YAg0qvRg9C7JyxcbiAgICAgICAgICAgIHl5IDogJyVkINKr0YPQuydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LdC805fRiC8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQt0LzTl9GIJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY3Y7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBjeSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2N5Jywge1xuICAgICAgICBtb250aHM6ICdJb25hd3JfQ2h3ZWZyb3JfTWF3cnRoX0VicmlsbF9NYWlfTWVoZWZpbl9Hb3JmZmVubmFmX0F3c3RfTWVkaV9IeWRyZWZfVGFjaHdlZGRfUmhhZ2Z5cicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdJb25fQ2h3ZV9NYXdfRWJyX01haV9NZWhfR29yX0F3c19NZWRfSHlkX1RhY2hfUmhhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdEeWRkIFN1bF9EeWRkIExsdW5fRHlkZCBNYXdydGhfRHlkZCBNZXJjaGVyX0R5ZGQgSWF1X0R5ZGQgR3dlbmVyX0R5ZGQgU2Fkd3JuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VsX0xsdW5fTWF3X01lcl9JYXVfR3dlX1NhZCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9MbF9NYV9NZV9JYV9Hd19TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgLy8gdGltZSBmb3JtYXRzIGFyZSB0aGUgc2FtZSBhcyBlbi1nYlxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hlZGRpdyBhbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tZZm9yeSBhbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthbV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tEZG9lIGFtXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2Rpd2V0aGFmIGFtXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnbWV3biAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgeW4gw7RsJyxcbiAgICAgICAgICAgIHM6ICd5Y2h5ZGlnIGVpbGlhZGF1JyxcbiAgICAgICAgICAgIHNzOiAnJWQgZWlsaWFkJyxcbiAgICAgICAgICAgIG06ICdtdW51ZCcsXG4gICAgICAgICAgICBtbTogJyVkIG11bnVkJyxcbiAgICAgICAgICAgIGg6ICdhd3InLFxuICAgICAgICAgICAgaGg6ICclZCBhd3InLFxuICAgICAgICAgICAgZDogJ2Rpd3Jub2QnLFxuICAgICAgICAgICAgZGQ6ICclZCBkaXdybm9kJyxcbiAgICAgICAgICAgIE06ICdtaXMnLFxuICAgICAgICAgICAgTU06ICclZCBtaXMnLFxuICAgICAgICAgICAgeTogJ2Jsd3lkZHluJyxcbiAgICAgICAgICAgIHl5OiAnJWQgZmx5bmVkZCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGZlZHxhaW58YWZ8aWx8eWRkfGVkfGVnKS8sXG4gICAgICAgIC8vIHRyYWRpdGlvbmFsIG9yZGluYWwgbnVtYmVycyBhYm92ZSAzMSBhcmUgbm90IGNvbW1vbmx5IHVzZWQgaW4gY29sbG9xdWlhbCBXZWxzaFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlcixcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJyxcbiAgICAgICAgICAgICAgICBsb29rdXAgPSBbXG4gICAgICAgICAgICAgICAgICAgICcnLCAnYWYnLCAnaWwnLCAneWRkJywgJ3lkZCcsICdlZCcsICdlZCcsICdlZCcsICdmZWQnLCAnZmVkJywgJ2ZlZCcsIC8vIDFhZiB0byAxMGZlZFxuICAgICAgICAgICAgICAgICAgICAnZWcnLCAnZmVkJywgJ2VnJywgJ2VnJywgJ2ZlZCcsICdlZycsICdlZycsICdmZWQnLCAnZWcnLCAnZmVkJyAvLyAxMWVnIHRvIDIwZmVkXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmIChiID4gMjApIHtcbiAgICAgICAgICAgICAgICBpZiAoYiA9PT0gNDAgfHwgYiA9PT0gNTAgfHwgYiA9PT0gNjAgfHwgYiA9PT0gODAgfHwgYiA9PT0gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICdmZWQnOyAvLyBub3QgMzBhaW4sIDcwYWluIG9yIDkwYWluXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ2Fpbic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChiID4gMCkge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IGxvb2t1cFtiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGN5O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgZGEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkYScsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcnRzX2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnc8O4bmRhZ19tYW5kYWdfdGlyc2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbMO4cmRhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzw7huX21hbl90aXJfb25zX3Rvcl9mcmVfbMO4cicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnc8O4X21hX3RpX29uX3RvX2ZyX2zDuCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBbZC5dIEQuIE1NTU0gWVlZWSBba2wuXSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tpIGRhZyBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW2kgbW9yZ2VuIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAncMOlIGRkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbaSBnw6VyIGtsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW2ldIGRkZGRbcyBrbC5dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdvbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHNpZGVuJyxcbiAgICAgICAgICAgIHMgOiAnZsOlIHNla3VuZGVyJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNla3VuZGVyJyxcbiAgICAgICAgICAgIG0gOiAnZXQgbWludXQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXR0ZXInLFxuICAgICAgICAgICAgaCA6ICdlbiB0aW1lJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHRpbWVyJyxcbiAgICAgICAgICAgIGQgOiAnZW4gZGFnJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRhZ2UnLFxuICAgICAgICAgICAgTSA6ICdlbiBtw6VuZWQnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbcOlbmVkZXInLFxuICAgICAgICAgICAgeSA6ICdldCDDpXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgw6VyJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ20nOiBbJ2VpbmUgTWludXRlJywgJ2VpbmVyIE1pbnV0ZSddLFxuICAgICAgICAgICAgJ2gnOiBbJ2VpbmUgU3R1bmRlJywgJ2VpbmVyIFN0dW5kZSddLFxuICAgICAgICAgICAgJ2QnOiBbJ2VpbiBUYWcnLCAnZWluZW0gVGFnJ10sXG4gICAgICAgICAgICAnZGQnOiBbbnVtYmVyICsgJyBUYWdlJywgbnVtYmVyICsgJyBUYWdlbiddLFxuICAgICAgICAgICAgJ00nOiBbJ2VpbiBNb25hdCcsICdlaW5lbSBNb25hdCddLFxuICAgICAgICAgICAgJ01NJzogW251bWJlciArICcgTW9uYXRlJywgbnVtYmVyICsgJyBNb25hdGVuJ10sXG4gICAgICAgICAgICAneSc6IFsnZWluIEphaHInLCAnZWluZW0gSmFociddLFxuICAgICAgICAgICAgJ3l5JzogW251bWJlciArICcgSmFocmUnLCBudW1iZXIgKyAnIEphaHJlbiddXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICB2YXIgZGUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkZScsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcl9GZWJydWFyX03DpHJ6X0FwcmlsX01haV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW4uX0ZlYi5fTcOkcnpfQXByLl9NYWlfSnVuaV9KdWxpX0F1Zy5fU2VwLl9Pa3QuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ1Nvbm50YWdfTW9udGFnX0RpZW5zdGFnX01pdHR3b2NoX0Rvbm5lcnN0YWdfRnJlaXRhZ19TYW1zdGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1NvLl9Nby5fRGkuX01pLl9Eby5fRnIuX1NhLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU29fTW9fRGlfTWlfRG9fRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1toZXV0ZSB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3VtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2dlc3Rlcm4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2xldHp0ZW5dIGRkZGQgW3VtXSBMVCBbVWhyXSdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAndm9yICVzJyxcbiAgICAgICAgICAgIHMgOiAnZWluIHBhYXIgU2VrdW5kZW4nLFxuICAgICAgICAgICAgc3MgOiAnJWQgU2VrdW5kZW4nLFxuICAgICAgICAgICAgbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbSA6ICclZCBNaW51dGVuJyxcbiAgICAgICAgICAgIGggOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGggOiAnJWQgU3R1bmRlbicsXG4gICAgICAgICAgICBkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBkZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgICdtJzogWydlaW5lIE1pbnV0ZScsICdlaW5lciBNaW51dGUnXSxcbiAgICAgICAgICAgICdoJzogWydlaW5lIFN0dW5kZScsICdlaW5lciBTdHVuZGUnXSxcbiAgICAgICAgICAgICdkJzogWydlaW4gVGFnJywgJ2VpbmVtIFRhZyddLFxuICAgICAgICAgICAgJ2RkJzogW251bWJlciArICcgVGFnZScsIG51bWJlciArICcgVGFnZW4nXSxcbiAgICAgICAgICAgICdNJzogWydlaW4gTW9uYXQnLCAnZWluZW0gTW9uYXQnXSxcbiAgICAgICAgICAgICdNTSc6IFtudW1iZXIgKyAnIE1vbmF0ZScsIG51bWJlciArICcgTW9uYXRlbiddLFxuICAgICAgICAgICAgJ3knOiBbJ2VpbiBKYWhyJywgJ2VpbmVtIEphaHInXSxcbiAgICAgICAgICAgICd5eSc6IFtudW1iZXIgKyAnIEphaHJlJywgbnVtYmVyICsgJyBKYWhyZW4nXVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuXG4gICAgdmFyIGRlQXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkZS1hdCcsIHtcbiAgICAgICAgbW9udGhzIDogJ0rDpG5uZXJfRmVicnVhcl9Nw6Ryel9BcHJpbF9NYWlfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSsOkbi5fRmViLl9Nw6Ryel9BcHIuX01haV9KdW5pX0p1bGlfQXVnLl9TZXAuX09rdC5fTm92Ll9EZXouJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnU29ubnRhZ19Nb250YWdfRGllbnN0YWdfTWl0dHdvY2hfRG9ubmVyc3RhZ19GcmVpdGFnX1NhbXN0YWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU28uX01vLl9EaS5fTWkuX0RvLl9Gci5fU2EuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2hldXRlIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2VzdGVybiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbbGV0enRlbl0gZGRkZCBbdW1dIExUIFtVaHJdJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICd2b3IgJXMnLFxuICAgICAgICAgICAgcyA6ICdlaW4gcGFhciBTZWt1bmRlbicsXG4gICAgICAgICAgICBzcyA6ICclZCBTZWt1bmRlbicsXG4gICAgICAgICAgICBtIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tIDogJyVkIE1pbnV0ZW4nLFxuICAgICAgICAgICAgaCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaCA6ICclZCBTdHVuZGVuJyxcbiAgICAgICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5IDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5IDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRlQXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAnbSc6IFsnZWluZSBNaW51dGUnLCAnZWluZXIgTWludXRlJ10sXG4gICAgICAgICAgICAnaCc6IFsnZWluZSBTdHVuZGUnLCAnZWluZXIgU3R1bmRlJ10sXG4gICAgICAgICAgICAnZCc6IFsnZWluIFRhZycsICdlaW5lbSBUYWcnXSxcbiAgICAgICAgICAgICdkZCc6IFtudW1iZXIgKyAnIFRhZ2UnLCBudW1iZXIgKyAnIFRhZ2VuJ10sXG4gICAgICAgICAgICAnTSc6IFsnZWluIE1vbmF0JywgJ2VpbmVtIE1vbmF0J10sXG4gICAgICAgICAgICAnTU0nOiBbbnVtYmVyICsgJyBNb25hdGUnLCBudW1iZXIgKyAnIE1vbmF0ZW4nXSxcbiAgICAgICAgICAgICd5JzogWydlaW4gSmFocicsICdlaW5lbSBKYWhyJ10sXG4gICAgICAgICAgICAneXknOiBbbnVtYmVyICsgJyBKYWhyZScsIG51bWJlciArICcgSmFocmVuJ11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHZhciBkZUNoID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZGUtY2gnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJfRmVicnVhcl9Nw6Ryel9BcHJpbF9NYWlfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuLl9GZWIuX03DpHJ6X0Fwci5fTWFpX0p1bmlfSnVsaV9BdWcuX1NlcC5fT2t0Ll9Ob3YuX0Rlei4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTb25udGFnX01vbnRhZ19EaWVuc3RhZ19NaXR0d29jaF9Eb25uZXJzdGFnX0ZyZWl0YWdfU2Ftc3RhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU29fTW9fRGlfTWlfRG9fRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1toZXV0ZSB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3VtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2dlc3Rlcm4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2xldHp0ZW5dIGRkZGQgW3VtXSBMVCBbVWhyXSdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAndm9yICVzJyxcbiAgICAgICAgICAgIHMgOiAnZWluIHBhYXIgU2VrdW5kZW4nLFxuICAgICAgICAgICAgc3MgOiAnJWQgU2VrdW5kZW4nLFxuICAgICAgICAgICAgbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbSA6ICclZCBNaW51dGVuJyxcbiAgICAgICAgICAgIGggOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGggOiAnJWQgU3R1bmRlbicsXG4gICAgICAgICAgICBkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBkZUNoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAn3pberN6C3qreh96m3oPeqScsXG4gICAgICAgICfeit6s3oTesN6D3qreh96m3oPeqScsXG4gICAgICAgICfeid6n3oPeqN6X3qonLFxuICAgICAgICAn3oferd6V3rDeg96p3o3eqicsXG4gICAgICAgICfeid6tJyxcbiAgICAgICAgJ96W3qvegt6wJyxcbiAgICAgICAgJ96W3qrejd6m3ofeqCcsXG4gICAgICAgICfeh96v3o7ept6Q3rDek96qJyxcbiAgICAgICAgJ96Q3qzeld6w3pPerN6J3rDehN6m3oPeqicsXG4gICAgICAgICfeh96u3obesN6T3q/ehN6m3oPeqicsXG4gICAgICAgICfegt6u3ojerN6J3rDehN6m3oPeqicsXG4gICAgICAgICfekd6o3pDerN6J3rDehN6m3oPeqidcbiAgICBdLCB3ZWVrZGF5cyA9IFtcbiAgICAgICAgJ96H3qfei96o3ofesN6M3qYnLFxuICAgICAgICAn3oDer96J3qYnLFxuICAgICAgICAn3ofept6C3rDejt6n3oPepicsXG4gICAgICAgICfehN6q3ovepicsXG4gICAgICAgICfehN6q3oPep96Q3rDeit6m3ozeqCcsXG4gICAgICAgICfegN6q3obeqt6D3qonLFxuICAgICAgICAn3oDert6C3qjegN6o3oPeqidcbiAgICBdO1xuXG4gICAgdmFyIGR2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZHYnLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzIDogd2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiB3ZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn3ofep96L3qhf3oDer96J3qZf3ofept6C3rBf3oTeqt6L3qZf3oTeqt6D3qdf3oDeqt6G3qpf3oDert6C3qgnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuXG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdEL00vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv3onehnzeid6KLyxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfeid6KJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn3onehic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn3oneiic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb3oneqN6H3qbei96qXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1veid6n3ovept6J3qddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb3ofeqN6H3rDelN6sXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb3orep96H3qjejN6q3ojeqF0gZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn3ozerN6D3q3ejt6m3ofeqCAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ96G3qreg96o3oLesCAlcycsXG4gICAgICAgICAgICBzIDogJ96Q3qjeht6q3oLesN6M3qreht6u3oXerN6H3rAnLFxuICAgICAgICAgICAgc3MgOiAnZCUg3pDeqN6G3qregt6w3ozeqicsXG4gICAgICAgICAgICBtIDogJ96J3qjegt6o3pPerN6H3rAnLFxuICAgICAgICAgICAgbW0gOiAn3oneqN6C3qjek96qICVkJyxcbiAgICAgICAgICAgIGggOiAn3o7ept6R3qjeh96o3oPerN6H3rAnLFxuICAgICAgICAgICAgaGggOiAn3o7ept6R3qjeh96o3oPeqiAlZCcsXG4gICAgICAgICAgICBkIDogJ96L3qreiN6m3oDerN6H3rAnLFxuICAgICAgICAgICAgZGQgOiAn3oveqt6I3qbekN6wICVkJyxcbiAgICAgICAgICAgIE0gOiAn3onept6A3qzeh96wJyxcbiAgICAgICAgICAgIE1NIDogJ96J3qbekN6wICVkJyxcbiAgICAgICAgICAgIHkgOiAn3ofept6A3qbeg96s3ofesCcsXG4gICAgICAgICAgICB5eSA6ICfeh96m3oDept6D3qogJWQnXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDcsICAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZHY7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIEZ1bmN0aW9uIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gICAgfVxuXG5cbiAgICB2YXIgZWwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbCcsIHtcbiAgICAgICAgbW9udGhzTm9taW5hdGl2ZUVsIDogJ86ZzrHOvc6/z4XOrM+BzrnOv8+CX86mzrXOss+Bzr/Phc6sz4HOuc6/z4JfzpzOrM+Bz4TOuc6/z4JfzpHPgM+Bzq/Ou865zr/Pgl/OnM6szrnOv8+CX86Zzr/Pjc69zrnOv8+CX86Zzr/Pjc67zrnOv8+CX86Rz43Os86/z4XPg8+Ezr/Pgl/Oo861z4DPhM6tzrzOss+BzrnOv8+CX86fzrrPhM+OzrLPgc65zr/Pgl/Onc6/zq3OvM6yz4HOuc6/z4JfzpTOtc66zq3OvM6yz4HOuc6/z4InLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc0dlbml0aXZlRWwgOiAnzpnOsc69zr/Phc6xz4HOr86/z4VfzqbOtc6yz4HOv8+FzrHPgc6vzr/PhV/OnM6xz4HPhM6vzr/PhV/Okc+Az4HOuc67zq/Ov8+FX86czrHOkM6/z4VfzpnOv8+Fzr3Or86/z4VfzpnOv8+FzrvOr86/z4VfzpHPhc6zzr/Pjc+Dz4TOv8+FX86jzrXPgM+EzrXOvM6yz4HOr86/z4Vfzp/Ous+Ez4nOss+Bzq/Ov8+FX86dzr/Otc68zrLPgc6vzr/PhV/OlM61zrrOtc68zrLPgc6vzr/PhScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzIDogZnVuY3Rpb24gKG1vbWVudFRvRm9ybWF0LCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbW9tZW50VG9Gb3JtYXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzTm9taW5hdGl2ZUVsO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZm9ybWF0ID09PSAnc3RyaW5nJyAmJiAvRC8udGVzdChmb3JtYXQuc3Vic3RyaW5nKDAsIGZvcm1hdC5pbmRleE9mKCdNTU1NJykpKSkgeyAvLyBpZiB0aGVyZSBpcyBhIGRheSBudW1iZXIgYmVmb3JlICdNTU1NJ1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNHZW5pdGl2ZUVsW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzTm9taW5hdGl2ZUVsW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydCA6ICfOmc6xzr1fzqbOtc6yX86czrHPgV/Okc+Az4FfzpzOsc+KX86Zzr/Phc69X86Zzr/Phc67X86Rz4XOs1/Oo861z4Bfzp/Ous+EX86dzr/OtV/OlM61zronLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ86az4XPgc65zrHOus6uX86UzrXPhc+Ezq3Pgc6xX86kz4HOr8+EzrdfzqTOtc+EzqzPgc+EzrdfzqDOrc68z4DPhM63X86gzrHPgc6xz4POus61z4XOrl/Oo86szrLOss6xz4TOvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfOms+Fz4FfzpTOtc+FX86kz4HOuV/OpM61z4RfzqDOtc68X86gzrHPgV/Oo86xzrInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ86az4VfzpTOtV/OpM+BX86kzrVfzqDOtV/OoM6xX86jzrEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ868zrwnIDogJ86czpwnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfPgM68JyA6ICfOoM6cJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICgoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKVswXSA9PT0gJ868Jyk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2UgOiAvW86gzpxdXFwuP86cP1xcLj8vaSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXJFbCA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW86jzq7OvM61z4HOsSB7fV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbzpHPjc+BzrnOvyB7fV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbe31dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW86nzrjOtc+CIHt9XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbz4TOvyDPgM+Bzr/Ot86zzr/Pjc68zrXOvc6/XSBkZGRkIFt7fV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbz4TOt869IM+Az4HOv863zrPOv8+NzrzOtc69zrddIGRkZGQgW3t9XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDogZnVuY3Rpb24gKGtleSwgbW9tKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJFbFtrZXldLFxuICAgICAgICAgICAgICAgIGhvdXJzID0gbW9tICYmIG1vbS5ob3VycygpO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ob3V0cHV0KSkge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dC5hcHBseShtb20pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dC5yZXBsYWNlKCd7fScsIChob3VycyAlIDEyID09PSAxID8gJ8+Dz4TOtycgOiAnz4PPhM65z4InKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfPg861ICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgz4DPgc65zr0nLFxuICAgICAgICAgICAgcyA6ICfOu86vzrPOsSDOtM61z4XPhM61z4HPjM67zrXPgM+EzrEnLFxuICAgICAgICAgICAgc3MgOiAnJWQgzrTOtc+Fz4TOtc+Bz4zOu861z4DPhM6xJyxcbiAgICAgICAgICAgIG0gOiAnzq3Ovc6xIM67zrXPgM+Ez4wnLFxuICAgICAgICAgICAgbW0gOiAnJWQgzrvOtc+Az4TOrCcsXG4gICAgICAgICAgICBoIDogJ868zq/OsSDPjs+BzrEnLFxuICAgICAgICAgICAgaGggOiAnJWQgz47Pgc61z4InLFxuICAgICAgICAgICAgZCA6ICfOvM6vzrEgzrzOrc+BzrEnLFxuICAgICAgICAgICAgZGQgOiAnJWQgzrzOrc+BzrXPgicsXG4gICAgICAgICAgICBNIDogJ86tzr3Osc+CIM68zq7Ovc6xz4InLFxuICAgICAgICAgICAgTU0gOiAnJWQgzrzOrs69zrXPgicsXG4gICAgICAgICAgICB5IDogJ86tzr3Osc+CIM+Hz4HPjM69zr/PgicsXG4gICAgICAgICAgICB5eSA6ICclZCDPh8+Bz4zOvc65zrEnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfc63LyxcbiAgICAgICAgb3JkaW5hbDogJyVkzrcnLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0c3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBlbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGVuU0cgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1TRycsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGFnbycsXG4gICAgICAgICAgICBzIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtIDogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaCA6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQgOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNIDogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHkgOiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuU0c7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBlbkF1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4tYXUnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHMgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG0gOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoIDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZCA6ICdhIGRheScsXG4gICAgICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE0gOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeSA6ICdhIHllYXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5BdTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGVuQ2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1jYScsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTCA6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBhZ28nLFxuICAgICAgICAgICAgcyA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlY29uZHMnLFxuICAgICAgICAgICAgbSA6ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGggOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaCA6ICclZCBob3VycycsXG4gICAgICAgICAgICBkIDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTSA6ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5IDogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eSA6ICclZCB5ZWFycydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5DYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGVuR2IgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1nYicsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGFnbycsXG4gICAgICAgICAgICBzIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtIDogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaCA6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQgOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNIDogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHkgOiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuR2I7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBlbkllID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4taWUnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGFnbycsXG4gICAgICAgICAgICBzIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtIDogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaCA6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQgOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNIDogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHkgOiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuSWU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBlbklsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4taWwnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBhZ28nLFxuICAgICAgICAgICAgcyA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIG0gOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoIDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZCA6ICdhIGRheScsXG4gICAgICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE0gOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeSA6ICdhIHllYXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuSWw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBlbk56ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4tbnonLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHMgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG0gOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoIDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZCA6ICdhIGRheScsXG4gICAgICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE0gOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeSA6ICdhIHllYXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5OejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGVvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW8nLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJvX2ZlYnJ1YXJvX21hcnRvX2Fwcmlsb19tYWpvX2p1bmlvX2p1bGlvX2HFrWd1c3RvX3NlcHRlbWJyb19va3RvYnJvX25vdmVtYnJvX2RlY2VtYnJvJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYcWtZ19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ2RpbWFuxIlvX2x1bmRvX21hcmRvX21lcmtyZWRvX8S1YcWtZG9fdmVuZHJlZG9fc2FiYXRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RpbV9sdW5fbWFyZF9tZXJrX8S1YcWtX3Zlbl9zYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RpX2x1X21hX21lX8S1YV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMIDogJ0RbLWEgZGVdIE1NTU0sIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0RbLWEgZGVdIE1NTU0sIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBbbGFdIERbLWEgZGVdIE1NTU0sIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9bYXBdXFwudFxcLm0vaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgPT09ICdwJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncC50Lm0uJyA6ICdQLlQuTS4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhLnQubS4nIDogJ0EuVC5NLic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbSG9kaWHFrSBqZV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbTW9yZ2HFrSBqZV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbamVdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0hpZXJhxa0gamVdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1twYXNpbnRhXSBkZGRkIFtqZV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3Bvc3QgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdhbnRhxa0gJXMnLFxuICAgICAgICAgICAgcyA6ICdzZWt1bmRvaicsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWt1bmRvaicsXG4gICAgICAgICAgICBtIDogJ21pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dG9qJyxcbiAgICAgICAgICAgIGggOiAnaG9ybycsXG4gICAgICAgICAgICBoaCA6ICclZCBob3JvaicsXG4gICAgICAgICAgICBkIDogJ3RhZ28nLC8vbmUgJ2RpdXJubycsIMSJYXIgZXN0YXMgdXppdGEgcG9yIHByb2tzaW11bW9cbiAgICAgICAgICAgIGRkIDogJyVkIHRhZ29qJyxcbiAgICAgICAgICAgIE0gOiAnbW9uYXRvJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vbmF0b2onLFxuICAgICAgICAgICAgeSA6ICdqYXJvJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGphcm9qJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1hLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZGEnLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBlbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0RG90ID0gJ2VuZS5fZmViLl9tYXIuX2Fici5fbWF5Ll9qdW4uX2p1bC5fYWdvLl9zZXAuX29jdC5fbm92Ll9kaWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA9ICdlbmVfZmViX21hcl9hYnJfbWF5X2p1bl9qdWxfYWdvX3NlcF9vY3Rfbm92X2RpYycuc3BsaXQoJ18nKTtcblxuICAgIHZhciBtb250aHNQYXJzZSA9IFsvXmVuZS9pLCAvXmZlYi9pLCAvXm1hci9pLCAvXmFici9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmFnby9pLCAvXnNlcC9pLCAvXm9jdC9pLCAvXm5vdi9pLCAvXmRpYy9pXTtcbiAgICB2YXIgbW9udGhzUmVnZXggPSAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlfGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pO1xuXG4gICAgdmFyIGVzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXMnLCB7XG4gICAgICAgIG1vbnRocyA6ICdlbmVyb19mZWJyZXJvX21hcnpvX2FicmlsX21heW9fanVuaW9fanVsaW9fYWdvc3RvX3NlcHRpZW1icmVfb2N0dWJyZV9ub3ZpZW1icmVfZGljaWVtYnJlJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90W20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1JlZ2V4IDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXggOiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXggOiAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4IDogL14oZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2ksXG4gICAgICAgIG1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RvbWluZ29fbHVuZXNfbWFydGVzX21pw6lyY29sZXNfanVldmVzX3ZpZXJuZXNfc8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkb20uX2x1bi5fbWFyLl9tacOpLl9qdWUuX3ZpZS5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RvX2x1X21hX21pX2p1X3ZpX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tob3kgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1ttYcOxYW5hIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1theWVyIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2VsXSBkZGRkIFtwYXNhZG8gYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2VuICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnaGFjZSAlcycsXG4gICAgICAgICAgICBzIDogJ3Vub3Mgc2VndW5kb3MnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbSA6ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoIDogJ3VuYSBob3JhJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQgOiAndW4gZMOtYScsXG4gICAgICAgICAgICBkZCA6ICclZCBkw61hcycsXG4gICAgICAgICAgICBNIDogJ3VuIG1lcycsXG4gICAgICAgICAgICBNTSA6ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5IDogJ3VuIGHDsW8nLFxuICAgICAgICAgICAgeXkgOiAnJWQgYcOxb3MnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWwgOiAnJWTCuicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzU2hvcnREb3QgPSAnZW5lLl9mZWIuX21hci5fYWJyLl9tYXkuX2p1bi5fanVsLl9hZ28uX3NlcC5fb2N0Ll9ub3YuX2RpYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpO1xuXG4gICAgdmFyIG1vbnRoc1BhcnNlID0gWy9eZW5lL2ksIC9eZmViL2ksIC9ebWFyL2ksIC9eYWJyL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYWdvL2ksIC9ec2VwL2ksIC9eb2N0L2ksIC9ebm92L2ksIC9eZGljL2ldO1xuICAgIHZhciBtb250aHNSZWdleCA9IC9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmV8ZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2k7XG5cbiAgICB2YXIgZXNEbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VzLWRvJywge1xuICAgICAgICBtb250aHMgOiAnZW5lcm9fZmVicmVyb19tYXJ6b19hYnJpbF9tYXlvX2p1bmlvX2p1bGlvX2Fnb3N0b19zZXB0aWVtYnJlX29jdHVicmVfbm92aWVtYnJlX2RpY2llbWJyZScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3Q7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0W20ubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDogL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZSkvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogL14oZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2ksXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RvbWluZ29fbHVuZXNfbWFydGVzX21pw6lyY29sZXNfanVldmVzX3ZpZXJuZXNfc8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkb20uX2x1bi5fbWFyLl9tacOpLl9qdWUuX3ZpZS5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RvX2x1X21hX21pX2p1X3ZpX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2hveSBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW21hw7FhbmEgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFthIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2F5ZXIgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbZWxdIGRkZGQgW3Bhc2FkbyBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdoYWNlICVzJyxcbiAgICAgICAgICAgIHMgOiAndW5vcyBzZWd1bmRvcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtIDogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGggOiAndW5hIGhvcmEnLFxuICAgICAgICAgICAgaGggOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZCA6ICd1biBkw61hJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGTDrWFzJyxcbiAgICAgICAgICAgIE0gOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHkgOiAndW4gYcOxbycsXG4gICAgICAgICAgICB5eSA6ICclZCBhw7FvcydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbCA6ICclZMK6JyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZXNEbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0RG90ID0gJ2VuZS5fZmViLl9tYXIuX2Fici5fbWF5Ll9qdW4uX2p1bC5fYWdvLl9zZXAuX29jdC5fbm92Ll9kaWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA9ICdlbmVfZmViX21hcl9hYnJfbWF5X2p1bl9qdWxfYWdvX3NlcF9vY3Rfbm92X2RpYycuc3BsaXQoJ18nKTtcblxuICAgIHZhciBtb250aHNQYXJzZSA9IFsvXmVuZS9pLCAvXmZlYi9pLCAvXm1hci9pLCAvXmFici9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmFnby9pLCAvXnNlcC9pLCAvXm9jdC9pLCAvXm5vdi9pLCAvXmRpYy9pXTtcbiAgICB2YXIgbW9udGhzUmVnZXggPSAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlfGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pO1xuXG4gICAgdmFyIGVzVXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlcy11cycsIHtcbiAgICAgICAgbW9udGhzIDogJ2VuZXJvX2ZlYnJlcm9fbWFyem9fYWJyaWxfbWF5b19qdW5pb19qdWxpb19hZ29zdG9fc2VwdGllbWJyZV9vY3R1YnJlX25vdmllbWJyZV9kaWNpZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90O1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3RbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6IC9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmUpL2ksXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6IC9eKGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pLFxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdkb21pbmdvX2x1bmVzX21hcnRlc19tacOpcmNvbGVzX2p1ZXZlc192aWVybmVzX3PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnZG9tLl9sdW4uX21hci5fbWnDqS5fanVlLl92aWUuX3PDoWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdkb19sdV9tYV9taV9qdV92aV9zw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUyA6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTCA6ICdNTS9ERC9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBoOm1tIEEnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tob3kgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1ttYcOxYW5hIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1theWVyIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2VsXSBkZGRkIFtwYXNhZG8gYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2VuICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnaGFjZSAlcycsXG4gICAgICAgICAgICBzIDogJ3Vub3Mgc2VndW5kb3MnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbSA6ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoIDogJ3VuYSBob3JhJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQgOiAndW4gZMOtYScsXG4gICAgICAgICAgICBkZCA6ICclZCBkw61hcycsXG4gICAgICAgICAgICBNIDogJ3VuIG1lcycsXG4gICAgICAgICAgICBNTSA6ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5IDogJ3VuIGHDsW8nLFxuICAgICAgICAgICAgeXkgOiAnJWQgYcOxb3MnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWwgOiAnJWTCuicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVzVXM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAncycgOiBbJ23DtW5lIHNla3VuZGknLCAnbcO1bmkgc2VrdW5kJywgJ3BhYXIgc2VrdW5kaXQnXSxcbiAgICAgICAgICAgICdzcyc6IFtudW1iZXIgKyAnc2VrdW5kaScsIG51bWJlciArICdzZWt1bmRpdCddLFxuICAgICAgICAgICAgJ20nIDogWyfDvGhlIG1pbnV0aScsICfDvGtzIG1pbnV0J10sXG4gICAgICAgICAgICAnbW0nOiBbbnVtYmVyICsgJyBtaW51dGknLCBudW1iZXIgKyAnIG1pbnV0aXQnXSxcbiAgICAgICAgICAgICdoJyA6IFsnw7xoZSB0dW5uaScsICd0dW5kIGFlZ2EnLCAnw7xrcyB0dW5kJ10sXG4gICAgICAgICAgICAnaGgnOiBbbnVtYmVyICsgJyB0dW5uaScsIG51bWJlciArICcgdHVuZGknXSxcbiAgICAgICAgICAgICdkJyA6IFsnw7xoZSBww6RldmEnLCAnw7xrcyBww6RldiddLFxuICAgICAgICAgICAgJ00nIDogWydrdXUgYWphJywgJ2t1dSBhZWdhJywgJ8O8a3Mga3V1J10sXG4gICAgICAgICAgICAnTU0nOiBbbnVtYmVyICsgJyBrdXUnLCBudW1iZXIgKyAnIGt1dWQnXSxcbiAgICAgICAgICAgICd5JyA6IFsnw7xoZSBhYXN0YScsICdhYXN0YScsICfDvGtzIGFhc3RhJ10sXG4gICAgICAgICAgICAneXknOiBbbnVtYmVyICsgJyBhYXN0YScsIG51bWJlciArICcgYWFzdGF0J11cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRba2V5XVsyXSA/IGZvcm1hdFtrZXldWzJdIDogZm9ybWF0W2tleV1bMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICB2YXIgZXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdldCcsIHtcbiAgICAgICAgbW9udGhzICAgICAgICA6ICdqYWFudWFyX3ZlZWJydWFyX23DpHJ0c19hcHJpbGxfbWFpX2p1dW5pX2p1dWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b29iZXJfbm92ZW1iZXJfZGV0c2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCAgIDogJ2phYW5fdmVlYnJfbcOkcnRzX2Fwcl9tYWlfanV1bmlfanV1bGlfYXVnX3NlcHRfb2t0X25vdl9kZXRzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyAgICAgIDogJ3DDvGhhcMOkZXZfZXNtYXNww6Rldl90ZWlzaXDDpGV2X2tvbG1hcMOkZXZfbmVsamFww6Rldl9yZWVkZV9sYXVww6Rldicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdQX0VfVF9LX05fUl9MJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiAgIDogJ1BfRV9UX0tfTl9SX0wnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgICA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgICAgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCAgIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgIDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSAgOiAnW1TDpG5hLF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSAgOiAnW0hvbW1lLF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW0rDpHJnbWluZV0gZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5ICA6ICdbRWlsZSxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tFZWxtaW5lXSBkZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyBww6RyYXN0JyxcbiAgICAgICAgICAgIHBhc3QgICA6ICclcyB0YWdhc2knLFxuICAgICAgICAgICAgcyAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHNzICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW0gICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGggICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaCAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZCAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkICAgICA6ICclZCBww6RldmEnLFxuICAgICAgICAgICAgTSAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5ICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXkgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGV0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgZXUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdldScsIHtcbiAgICAgICAgbW9udGhzIDogJ3VydGFycmlsYV9vdHNhaWxhX21hcnR4b2FfYXBpcmlsYV9tYWlhdHphX2VrYWluYV91enRhaWxhX2FidXp0dWFfaXJhaWxhX3VycmlhX2F6YXJvYV9hYmVuZHVhJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICd1cnQuX290cy5fbWFyLl9hcGkuX21haS5fZWthLl91enQuX2FidS5faXJhLl91cnIuX2F6YS5fYWJlLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2lnYW5kZWFfYXN0ZWxlaGVuYV9hc3RlYXJ0ZWFfYXN0ZWF6a2VuYV9vc3RlZ3VuYV9vc3RpcmFsYV9sYXJ1bmJhdGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnaWcuX2FsLl9hci5fYXouX29nLl9vbC5fbHIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdpZ19hbF9hcl9hel9vZ19vbF9scicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMIDogJ1lZWVlba29dIE1NTU1bcmVuXSBEW2FdJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZW2tvXSBNTU1NW3Jlbl0gRFthXSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIFlZWVlba29dIE1NTU1bcmVuXSBEW2FdIEhIOm1tJyxcbiAgICAgICAgICAgIGwgOiAnWVlZWS1NLUQnLFxuICAgICAgICAgICAgbGwgOiAnWVlZWVtrb10gTU1NIERbYV0nLFxuICAgICAgICAgICAgbGxsIDogJ1lZWVlba29dIE1NTSBEW2FdIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGwgOiAnZGRkLCBZWVlZW2tvXSBNTU0gRFthXSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tnYXVyXSBMVFtldGFuXScsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tiaWhhcl0gTFRbZXRhbl0nLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBMVFtldGFuXScsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1thdHpvXSBMVFtldGFuXScsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbYXVycmVrb10gZGRkZCBMVFtldGFuXScsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMgYmFycnUnLFxuICAgICAgICAgICAgcGFzdCA6ICdkdWVsYSAlcycsXG4gICAgICAgICAgICBzIDogJ3NlZ3VuZG8gYmF0enVrJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlZ3VuZG8nLFxuICAgICAgICAgICAgbSA6ICdtaW51dHUgYmF0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0dScsXG4gICAgICAgICAgICBoIDogJ29yZHUgYmF0JyxcbiAgICAgICAgICAgIGhoIDogJyVkIG9yZHUnLFxuICAgICAgICAgICAgZCA6ICdlZ3VuIGJhdCcsXG4gICAgICAgICAgICBkZCA6ICclZCBlZ3VuJyxcbiAgICAgICAgICAgIE0gOiAnaGlsYWJldGUgYmF0JyxcbiAgICAgICAgICAgIE1NIDogJyVkIGhpbGFiZXRlJyxcbiAgICAgICAgICAgIHkgOiAndXJ0ZSBiYXQnLFxuICAgICAgICAgICAgeXkgOiAnJWQgdXJ0ZSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBldTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn27EnLFxuICAgICAgICAnMic6ICfbsicsXG4gICAgICAgICczJzogJ9uzJyxcbiAgICAgICAgJzQnOiAn27QnLFxuICAgICAgICAnNSc6ICfbtScsXG4gICAgICAgICc2JzogJ9u2JyxcbiAgICAgICAgJzcnOiAn27cnLFxuICAgICAgICAnOCc6ICfbuCcsXG4gICAgICAgICc5JzogJ9u5JyxcbiAgICAgICAgJzAnOiAn27AnXG4gICAgfSwgbnVtYmVyTWFwID0ge1xuICAgICAgICAn27EnOiAnMScsXG4gICAgICAgICfbsic6ICcyJyxcbiAgICAgICAgJ9uzJzogJzMnLFxuICAgICAgICAn27QnOiAnNCcsXG4gICAgICAgICfbtSc6ICc1JyxcbiAgICAgICAgJ9u2JzogJzYnLFxuICAgICAgICAn27cnOiAnNycsXG4gICAgICAgICfbuCc6ICc4JyxcbiAgICAgICAgJ9u5JzogJzknLFxuICAgICAgICAn27AnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIGZhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZmEnLCB7XG4gICAgICAgIG1vbnRocyA6ICfamNin2YbZiNuM2Ydf2YHZiNix24zZh1/Zhdin2LHYs1/YotmI2LHbjNmEX9mF2Ydf2pjZiNim2YZf2pjZiNim24zZh1/Yp9mI2Kpf2LPZvtiq2KfZhdio2LFf2Kfaqdiq2KjYsV/ZhtmI2KfZhdio2LFf2K/Ys9in2YXYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfamNin2YbZiNuM2Ydf2YHZiNix24zZh1/Zhdin2LHYs1/YotmI2LHbjNmEX9mF2Ydf2pjZiNim2YZf2pjZiNim24zZh1/Yp9mI2Kpf2LPZvtiq2KfZhdio2LFf2Kfaqdiq2KjYsV/ZhtmI2KfZhdio2LFf2K/Ys9in2YXYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfbjNqpXFx1MjAwY9i02YbYqNmHX9iv2YjYtNmG2KjZh1/Ys9mHXFx1MjAwY9i02YbYqNmHX9qG2YfYp9ix2LTZhtio2Ydf2b7ZhtisXFx1MjAwY9i02YbYqNmHX9is2YXYudmHX9i02YbYqNmHJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9uM2qlcXHUyMDBj2LTZhtio2Ydf2K/ZiNi02YbYqNmHX9iz2YdcXHUyMDBj2LTZhtio2Ydf2obZh9in2LHYtNmG2KjZh1/ZvtmG2KxcXHUyMDBj2LTZhtio2Ydf2KzZhdi52Ydf2LTZhtio2YcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9uMX9ivX9izX9qGX9m+X9isX9i0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/Zgtio2YQg2KfYsiDYuNmH2LF82KjYudivINin2LIg2LjZh9ixLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL9io2LnYryDYp9iyINi42YfYsS8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2YLYqNmEINin2LIg2LjZh9ixJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYqNi52K8g2KfYsiDYuNmH2LEnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9in2YXYsdmI2LIg2LPYp9i52KpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9mB2LHYr9inINiz2KfYudiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvYs9in2LnYql0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb2K/bjNix2YjYsiDYs9in2LnYql0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBb2b7bjNi0XSBb2LPYp9i52KpdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfYr9ixICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg2b7bjNi0JyxcbiAgICAgICAgICAgIHMgOiAn2obZhtivINir2KfZhtuM2YcnLFxuICAgICAgICAgICAgc3MgOiAn2KvYp9mG24zZhyBkJScsXG4gICAgICAgICAgICBtIDogJ9uM2qkg2K/ZgtuM2YLZhycsXG4gICAgICAgICAgICBtbSA6ICclZCDYr9mC24zZgtmHJyxcbiAgICAgICAgICAgIGggOiAn24zaqSDYs9in2LnYqicsXG4gICAgICAgICAgICBoaCA6ICclZCDYs9in2LnYqicsXG4gICAgICAgICAgICBkIDogJ9uM2qkg2LHZiNiyJyxcbiAgICAgICAgICAgIGRkIDogJyVkINix2YjYsicsXG4gICAgICAgICAgICBNIDogJ9uM2qkg2YXYp9mHJyxcbiAgICAgICAgICAgIE1NIDogJyVkINmF2KfZhycsXG4gICAgICAgICAgICB5IDogJ9uM2qkg2LPYp9mEJyxcbiAgICAgICAgICAgIHl5IDogJyVkINiz2KfZhCdcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW9uwLdu5XS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSkucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ92YUvLFxuICAgICAgICBvcmRpbmFsIDogJyVk2YUnLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBmYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG51bWJlcnNQYXN0ID0gJ25vbGxhIHlrc2kga2Frc2kga29sbWUgbmVsasOkIHZpaXNpIGt1dXNpIHNlaXRzZW3DpG4ga2FoZGVrc2FuIHloZGVrc8Okbicuc3BsaXQoJyAnKSxcbiAgICAgICAgbnVtYmVyc0Z1dHVyZSA9IFtcbiAgICAgICAgICAgICdub2xsYScsICd5aGRlbicsICdrYWhkZW4nLCAna29sbWVuJywgJ25lbGrDpG4nLCAndmlpZGVuJywgJ2t1dWRlbicsXG4gICAgICAgICAgICBudW1iZXJzUGFzdFs3XSwgbnVtYmVyc1Bhc3RbOF0sIG51bWJlcnNQYXN0WzldXG4gICAgICAgIF07XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnbXV1dGFtYW4gc2VrdW5uaW4nIDogJ211dXRhbWEgc2VrdW50aSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ3Nla3VubmluJyA6ICdzZWt1bnRpYSc7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnbWludXV0aW4nIDogJ21pbnV1dHRpJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICdtaW51dXRpbicgOiAnbWludXV0dGlhJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICd0dW5uaW4nIDogJ3R1bnRpJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICd0dW5uaW4nIDogJ3R1bnRpYSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAncMOkaXbDpG4nIDogJ3DDpGl2w6QnO1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ3DDpGl2w6RuJyA6ICdww6RpdsOkw6QnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ2t1dWthdWRlbicgOiAna3V1a2F1c2knO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ2t1dWthdWRlbicgOiAna3V1a2F1dHRhJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICd2dW9kZW4nIDogJ3Z1b3NpJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICd2dW9kZW4nIDogJ3Z1b3R0YSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdmVyYmFsTnVtYmVyKG51bWJlciwgaXNGdXR1cmUpICsgJyAnICsgcmVzdWx0O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiB2ZXJiYWxOdW1iZXIobnVtYmVyLCBpc0Z1dHVyZSkge1xuICAgICAgICByZXR1cm4gbnVtYmVyIDwgMTAgPyAoaXNGdXR1cmUgPyBudW1iZXJzRnV0dXJlW251bWJlcl0gOiBudW1iZXJzUGFzdFtudW1iZXJdKSA6IG51bWJlcjtcbiAgICB9XG5cbiAgICB2YXIgZmkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmaScsIHtcbiAgICAgICAgbW9udGhzIDogJ3RhbW1pa3V1X2hlbG1pa3V1X21hYWxpc2t1dV9odWh0aWt1dV90b3Vrb2t1dV9rZXPDpGt1dV9oZWluw6RrdXVfZWxva3V1X3N5eXNrdXVfbG9rYWt1dV9tYXJyYXNrdXVfam91bHVrdXUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ3RhbW1pX2hlbG1pX21hYWxpc19odWh0aV90b3Vrb19rZXPDpF9oZWluw6RfZWxvX3N5eXNfbG9rYV9tYXJyYXNfam91bHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ3N1bm51bnRhaV9tYWFuYW50YWlfdGlpc3RhaV9rZXNraXZpaWtrb190b3JzdGFpX3BlcmphbnRhaV9sYXVhbnRhaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzdV9tYV90aV9rZV90b19wZV9sYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnc3VfbWFfdGlfa2VfdG9fcGVfbGEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEbyBNTU1NW3RhXSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEbyBNTU1NW3RhXSBZWVlZLCBba2xvXSBISC5tbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIERvIE1NTU1bdGFdIFlZWVksIFtrbG9dIEhILm1tJyxcbiAgICAgICAgICAgIGwgOiAnRC5NLllZWVknLFxuICAgICAgICAgICAgbGwgOiAnRG8gTU1NIFlZWVknLFxuICAgICAgICAgICAgbGxsIDogJ0RvIE1NTSBZWVlZLCBba2xvXSBISC5tbScsXG4gICAgICAgICAgICBsbGxsIDogJ2RkZCwgRG8gTU1NIFlZWVksIFtrbG9dIEhILm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW3TDpG7DpMOkbl0gW2tsb10gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbaHVvbWVubmFdIFtrbG9dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2tsb10gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbZWlsZW5dIFtrbG9dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1t2aWltZV0gZGRkZFtuYV0gW2tsb10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIHDDpMOkc3TDpCcsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHNpdHRlbicsXG4gICAgICAgICAgICBzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3MgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBmaTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGZvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZm8nLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJfZmVicnVhcl9tYXJzX2FwcsOtbF9tYWlfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tYXJfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ3N1bm51ZGFndXJfbcOhbmFkYWd1cl90w71zZGFndXJfbWlrdWRhZ3VyX2jDs3NkYWd1cl9mcsOtZ2dqYWRhZ3VyX2xleWdhcmRhZ3VyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3N1bl9tw6FuX3TDvXNfbWlrX2jDs3NfZnLDrV9sZXknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ3N1X23DoV90w71fbWlfaMOzX2ZyX2xlJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NLCBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW8ONIGRhZyBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW8ONIG1vcmdpbiBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbw40gZ2rDoXIga2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbc8Otw7BzdHVdIGRkZGQgW2tsXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAndW0gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBzw63DsGFuaScsXG4gICAgICAgICAgICBzIDogJ2bDoSBzZWt1bmQnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VrdW5kaXInLFxuICAgICAgICAgICAgbSA6ICdlaW4gbWludXR0dXInLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXR0aXInLFxuICAgICAgICAgICAgaCA6ICdlaW4gdMOtbWknLFxuICAgICAgICAgICAgaGggOiAnJWQgdMOtbWFyJyxcbiAgICAgICAgICAgIGQgOiAnZWluIGRhZ3VyJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRhZ2FyJyxcbiAgICAgICAgICAgIE0gOiAnZWluIG3DoW5hw7B1cicsXG4gICAgICAgICAgICBNTSA6ICclZCBtw6FuYcOwaXInLFxuICAgICAgICAgICAgeSA6ICdlaXR0IMOhcicsXG4gICAgICAgICAgICB5eSA6ICclZCDDoXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZm87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBmciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZyJywge1xuICAgICAgICBtb250aHMgOiAnamFudmllcl9mw6l2cmllcl9tYXJzX2F2cmlsX21haV9qdWluX2p1aWxsZXRfYW/Du3Rfc2VwdGVtYnJlX29jdG9icmVfbm92ZW1icmVfZMOpY2VtYnJlJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW52Ll9mw6l2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2Fvw7t0X3NlcHQuX29jdC5fbm92Ll9kw6ljLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RpbWFuY2hlX2x1bmRpX21hcmRpX21lcmNyZWRpX2pldWRpX3ZlbmRyZWRpX3NhbWVkaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdkaV9sdV9tYV9tZV9qZV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbQXVqb3VyZOKAmWh1aSDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbRGVtYWluIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbSGllciDDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbZGVybmllciDDoF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2RhbnMgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdpbCB5IGEgJXMnLFxuICAgICAgICAgICAgcyA6ICdxdWVscXVlcyBzZWNvbmRlcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRlcycsXG4gICAgICAgICAgICBtIDogJ3VuZSBtaW51dGUnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoIDogJ3VuZSBoZXVyZScsXG4gICAgICAgICAgICBoaCA6ICclZCBoZXVyZXMnLFxuICAgICAgICAgICAgZCA6ICd1biBqb3VyJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGpvdXJzJyxcbiAgICAgICAgICAgIE0gOiAndW4gbW9pcycsXG4gICAgICAgICAgICBNTSA6ICclZCBtb2lzJyxcbiAgICAgICAgICAgIHkgOiAndW4gYW4nLFxuICAgICAgICAgICAgeXkgOiAnJWQgYW5zJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZXJ8KS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogUmV0dXJuICdlJyB3aGVuIGRheSBvZiBtb250aCA+IDEuIE1vdmUgdGhpcyBjYXNlIGluc2lkZVxuICAgICAgICAgICAgICAgIC8vIGJsb2NrIGZvciBtYXNjdWxpbmUgd29yZHMgYmVsb3cuXG4gICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8zMzc1XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ2VyJyA6ICcnKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggbWFzY3VsaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogbW9pcywgdHJpbWVzdHJlLCBqb3VyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdlcicgOiAnZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBmZW1pbmluZSBncmFtbWF0aWNhbCBnZW5kZXI6IHNlbWFpbmVcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAncmUnIDogJ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBmckNhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZnItY2EnLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW52aWVyX2bDqXZyaWVyX21hcnNfYXZyaWxfbWFpX2p1aW5fanVpbGxldF9hb8O7dF9zZXB0ZW1icmVfb2N0b2JyZV9ub3ZlbWJyZV9kw6ljZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbnYuX2bDqXZyLl9tYXJzX2F2ci5fbWFpX2p1aW5fanVpbC5fYW/Du3Rfc2VwdC5fb2N0Ll9ub3YuX2TDqWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnZGltYW5jaGVfbHVuZGlfbWFyZGlfbWVyY3JlZGlfamV1ZGlfdmVuZHJlZGlfc2FtZWRpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RpbS5fbHVuLl9tYXIuX21lci5famV1Ll92ZW4uX3NhbS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RpX2x1X21hX21lX2plX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tBdWpvdXJk4oCZaHVpIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tEZW1haW4gw6BdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW8OgXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tIaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtkZXJuaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZGFucyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2lsIHkgYSAlcycsXG4gICAgICAgICAgICBzIDogJ3F1ZWxxdWVzIHNlY29uZGVzJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlY29uZGVzJyxcbiAgICAgICAgICAgIG0gOiAndW5lIG1pbnV0ZScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGggOiAndW5lIGhldXJlJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhldXJlcycsXG4gICAgICAgICAgICBkIDogJ3VuIGpvdXInLFxuICAgICAgICAgICAgZGQgOiAnJWQgam91cnMnLFxuICAgICAgICAgICAgTSA6ICd1biBtb2lzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vaXMnLFxuICAgICAgICAgICAgeSA6ICd1biBhbicsXG4gICAgICAgICAgICB5eSA6ICclZCBhbnMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlcnxlKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBtYXNjdWxpbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBtb2lzLCB0cmltZXN0cmUsIGpvdXJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ2VyJyA6ICdlJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIGZlbWluaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogc2VtYWluZVxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdyZScgOiAnZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnJDYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGZyQ2ggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmci1jaCcsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnZpZXJfZsOpdnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFudi5fZsOpdnIuX21hcnNfYXZyLl9tYWlfanVpbl9qdWlsLl9hb8O7dF9zZXB0Ll9vY3QuX25vdi5fZMOpYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdkaW1hbmNoZV9sdW5kaV9tYXJkaV9tZXJjcmVkaV9qZXVkaV92ZW5kcmVkaV9zYW1lZGknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnZGltLl9sdW4uX21hci5fbWVyLl9qZXUuX3Zlbi5fc2FtLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZGlfbHVfbWFfbWVfamVfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW0F1am91cmTigJlodWkgw6BdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0RlbWFpbiDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0hpZXIgw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2Rlcm5pZXIgw6BdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdkYW5zICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnaWwgeSBhICVzJyxcbiAgICAgICAgICAgIHMgOiAncXVlbHF1ZXMgc2Vjb25kZXMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kZXMnLFxuICAgICAgICAgICAgbSA6ICd1bmUgbWludXRlJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaCA6ICd1bmUgaGV1cmUnLFxuICAgICAgICAgICAgaGggOiAnJWQgaGV1cmVzJyxcbiAgICAgICAgICAgIGQgOiAndW4gam91cicsXG4gICAgICAgICAgICBkZCA6ICclZCBqb3VycycsXG4gICAgICAgICAgICBNIDogJ3VuIG1vaXMnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9pcycsXG4gICAgICAgICAgICB5IDogJ3VuIGFuJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGFucydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGVyfGUpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIG1hc2N1bGluZSBncmFtbWF0aWNhbCBnZW5kZXI6IG1vaXMsIHRyaW1lc3RyZSwgam91clxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAnZXInIDogJ2UnKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggZmVtaW5pbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBzZW1haW5lXG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ3JlJyA6ICdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZyQ2g7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtb250aHNTaG9ydFdpdGhEb3RzID0gJ2phbi5fZmViLl9tcnQuX2Fwci5fbWFpX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2Rlcy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0V2l0aG91dERvdHMgPSAnamFuX2ZlYl9tcnRfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXMnLnNwbGl0KCdfJyk7XG5cbiAgICB2YXIgZnkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmeScsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbm5ld2FyaXNfZmVicmV3YXJpc19tYWFydF9hcHJpbF9tYWFpZV9qdW55X2p1bHlfYXVndXN0dXNfc2VwdGltYmVyX29rdG9iZXJfbm92aW1iZXJfZGVzaW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aG91dERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ3NuZWluX21vYW5kZWlfdGlpc2RlaV93b2Fuc2RlaV90b25nZXJzZGVpX2ZyZWVkX3NuZW9uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3NpLl9tby5fdGkuX3dvLl90by5fZnIuX3NvLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU2lfTW9fVGlfV29fVG9fRnJfU28nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQtTU0tWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaGpvZWQgb21dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbW9hcm4gb21dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbanVzdGVyIG9tXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vDtGZyw7tuZV0gZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ29lciAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGx5bicsXG4gICAgICAgICAgICBzIDogJ2luIHBlYXIgc2Vrb25kZW4nLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vrb25kZW4nLFxuICAgICAgICAgICAgbSA6ICdpZW4gbWluw7p0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZW4nLFxuICAgICAgICAgICAgaCA6ICdpZW4gb2VyZScsXG4gICAgICAgICAgICBoaCA6ICclZCBvZXJlbicsXG4gICAgICAgICAgICBkIDogJ2llbiBkZWknLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGFnZW4nLFxuICAgICAgICAgICAgTSA6ICdpZW4gbW9hbm5lJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vYW5uZW4nLFxuICAgICAgICAgICAgeSA6ICdpZW4gamllcicsXG4gICAgICAgICAgICB5eSA6ICclZCBqaWVycmVuJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3RlfGRlKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKChudW1iZXIgPT09IDEgfHwgbnVtYmVyID09PSA4IHx8IG51bWJlciA+PSAyMCkgPyAnc3RlJyA6ICdkZScpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBmeTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAnRWFuw6FpcicsICdGZWFiaHJhJywgJ03DoXJ0YScsICdBaWJyZcOhbicsICdCZWFsdGFpbmUnLCAnTcOpaXRoZWFtaCcsICdJw7ppbCcsICdMw7puYXNhJywgJ01lw6FuIEbDs21oYWlyJywgJ0RlYWlyZWFkaCBGw7NtaGFpcicsICdTYW1oYWluJywgJ05vbGxhaWcnXG4gICAgXTtcblxuICAgIHZhciBtb250aHNTaG9ydCA9IFsnRWFuw6EnLCAnRmVhYicsICdNw6FydCcsICdBaWJyJywgJ0JlYWwnLCAnTcOpaXQnLCAnScO6aWwnLCAnTMO6bmEnLCAnTWXDoW4nLCAnRGVhaScsICdTYW1oJywgJ05vbGwnXTtcblxuICAgIHZhciB3ZWVrZGF5cyA9IFsnRMOpIERvbWhuYWlnaCcsICdEw6kgTHVhaW4nLCAnRMOpIE3DoWlydCcsICdEw6kgQ8OpYWRhb2luJywgJ0TDqWFyZGFvaW4nLCAnRMOpIGhBb2luZScsICdEw6kgU2F0aGFybiddO1xuXG4gICAgdmFyIHdlZWtkYXlzU2hvcnQgPSBbJ0RvbScsICdMdWEnLCAnTcOhaScsICdDw6lhJywgJ0TDqWEnLCAnaEFvJywgJ1NhdCddO1xuXG4gICAgdmFyIHdlZWtkYXlzTWluID0gWydEbycsICdMdScsICdNw6EnLCAnQ2UnLCAnRMOpJywgJ2hBJywgJ1NhJ107XG5cbiAgICB2YXIgZ2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdnYScsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHNTaG9ydCxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6IHdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiB3ZWVrZGF5c1Nob3J0LFxuICAgICAgICB3ZWVrZGF5c01pbjogd2Vla2RheXNNaW4sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tJbm5pdSBhZ10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tBbcOhcmFjaCBhZ10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthZ10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tJbm7DqSBhaWddIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbc2VvIGNhaXRlXSBbYWddIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDDsyBzaGluJyxcbiAgICAgICAgICAgIHM6ICdjw7pwbGEgc29pY2luZCcsXG4gICAgICAgICAgICBzczogJyVkIHNvaWNpbmQnLFxuICAgICAgICAgICAgbTogJ27Ds2ltw6lhZCcsXG4gICAgICAgICAgICBtbTogJyVkIG7Ds2ltw6lhZCcsXG4gICAgICAgICAgICBoOiAndWFpciBhbiBjaGxvaWcnLFxuICAgICAgICAgICAgaGg6ICclZCB1YWlyIGFuIGNobG9pZycsXG4gICAgICAgICAgICBkOiAnbMOhJyxcbiAgICAgICAgICAgIGRkOiAnJWQgbMOhJyxcbiAgICAgICAgICAgIE06ICdtw60nLFxuICAgICAgICAgICAgTU06ICclZCBtw60nLFxuICAgICAgICAgICAgeTogJ2JsaWFpbicsXG4gICAgICAgICAgICB5eTogJyVkIGJsaWFpbidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGR8bmF8bWgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9IG51bWJlciA9PT0gMSA/ICdkJyA6IG51bWJlciAlIDEwID09PSAyID8gJ25hJyA6ICdtaCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBnYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRocyA9IFtcbiAgICAgICAgJ0FtIEZhb2lsbGVhY2gnLCAnQW4gR2VhcnJhbicsICdBbSBNw6BydCcsICdBbiBHaWJsZWFuJywgJ0FuIEPDqGl0ZWFuJywgJ0FuIHQtw5JnbWhpb3MnLCAnQW4gdC1JdWNoYXInLCAnQW4gTMO5bmFzdGFsJywgJ0FuIHQtU3VsdGFpbicsICdBbiBEw6BtaGFpcicsICdBbiB0LVNhbWhhaW4nLCAnQW4gRMO5YmhsYWNoZCdcbiAgICBdO1xuXG4gICAgdmFyIG1vbnRoc1Nob3J0ID0gWydGYW9pJywgJ0dlYXInLCAnTcOgcnQnLCAnR2libCcsICdDw6hpdCcsICfDkmdtaCcsICdJdWNoJywgJ0zDuW4nLCAnU3VsdCcsICdEw6BtaCcsICdTYW1oJywgJ0TDuWJoJ107XG5cbiAgICB2YXIgd2Vla2RheXMgPSBbJ0RpZMOybWhuYWljaCcsICdEaWx1YWluJywgJ0RpbcOgaXJ0JywgJ0RpY2lhZGFpbicsICdEaWFyZGFvaW4nLCAnRGloYW9pbmUnLCAnRGlzYXRoYWlybmUnXTtcblxuICAgIHZhciB3ZWVrZGF5c1Nob3J0ID0gWydEaWQnLCAnRGlsJywgJ0RpbScsICdEaWMnLCAnRGlhJywgJ0RpaCcsICdEaXMnXTtcblxuICAgIHZhciB3ZWVrZGF5c01pbiA9IFsnRMOyJywgJ0x1JywgJ03DoCcsICdDaScsICdBcicsICdIYScsICdTYSddO1xuXG4gICAgdmFyIGdkID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ2QnLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHNTaG9ydCxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogd2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiB3ZWVrZGF5c1Nob3J0LFxuICAgICAgICB3ZWVrZGF5c01pbiA6IHdlZWtkYXlzTWluLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbQW4tZGl1Z2ggYWlnXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tBLW3DoGlyZWFjaCBhaWddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2FpZ10gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbQW4tZMOoIGFpZ10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbc2VvIGNoYWlkaF0gW2FpZ10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2FubiBhbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2JobyBjaGlvbm4gJXMnLFxuICAgICAgICAgICAgcyA6ICdiZWFnYW4gZGlvZ2FuJyxcbiAgICAgICAgICAgIHNzIDogJyVkIGRpb2dhbicsXG4gICAgICAgICAgICBtIDogJ21pb25haWQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWlvbmFpZGVhbicsXG4gICAgICAgICAgICBoIDogJ3VhaXInLFxuICAgICAgICAgICAgaGggOiAnJWQgdWFpcmVhbicsXG4gICAgICAgICAgICBkIDogJ2xhdGhhJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGxhdGhhJyxcbiAgICAgICAgICAgIE0gOiAnbcOsb3MnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbcOsb3NhbicsXG4gICAgICAgICAgICB5IDogJ2JsaWFkaG5hJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGJsaWFkaG5hJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9KGR8bmF8bWgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBudW1iZXIgPT09IDEgPyAnZCcgOiBudW1iZXIgJSAxMCA9PT0gMiA/ICduYScgOiAnbWgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ2Q7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBnbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dsJywge1xuICAgICAgICBtb250aHMgOiAneGFuZWlyb19mZWJyZWlyb19tYXJ6b19hYnJpbF9tYWlvX3h1w7FvX3h1bGxvX2Fnb3N0b19zZXRlbWJyb19vdXR1YnJvX25vdmVtYnJvX2RlY2VtYnJvJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICd4YW4uX2ZlYi5fbWFyLl9hYnIuX21haS5feHXDsS5feHVsLl9hZ28uX3NldC5fb3V0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RvbWluZ29fbHVuc19tYXJ0ZXNfbcOpcmNvcmVzX3hvdmVzX3ZlbnJlc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RvbS5fbHVuLl9tYXIuX23DqXIuX3hvdi5fdmVuLl9zw6FiLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZG9fbHVfbWFfbcOpX3hvX3ZlX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tob3hlICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnw6FzJyA6ICfDoScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHREYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbbWHDscOhICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnw6FzJyA6ICfDoScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICfDoXMnIDogJ2EnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW29udGUgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICfDoScgOiAnYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW29dIGRkZGQgW3Bhc2FkbyAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ8OhcycgOiAnYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RyLmluZGV4T2YoJ3VuJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICduJyArIHN0cjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlbiAnICsgc3RyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3QgOiAnaGFpICVzJyxcbiAgICAgICAgICAgIHMgOiAndW5zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG0gOiAndW4gbWludXRvJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaCA6ICd1bmhhIGhvcmEnLFxuICAgICAgICAgICAgaGggOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZCA6ICd1biBkw61hJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGTDrWFzJyxcbiAgICAgICAgICAgIE0gOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHkgOiAndW4gYW5vJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGFub3MnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWwgOiAnJWTCuicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ3MnOiBbJ3Rob2RkZSBzZWNvbmRhbmltJywgJ3Rob2RkZSBzZWNvbmQnXSxcbiAgICAgICAgICAgICdzcyc6IFtudW1iZXIgKyAnIHNlY29uZGFuaW0nLCBudW1iZXIgKyAnIHNlY29uZCddLFxuICAgICAgICAgICAgJ20nOiBbJ2VrYSBtaW50YW4nLCAnZWsgbWludXRlJ10sXG4gICAgICAgICAgICAnbW0nOiBbbnVtYmVyICsgJyBtaW50YW5pbScsIG51bWJlciArICcgbWludGFtJ10sXG4gICAgICAgICAgICAnaCc6IFsnZWthIHZvcmFuJywgJ2VrIHZvciddLFxuICAgICAgICAgICAgJ2hoJzogW251bWJlciArICcgdm9yYW5pbScsIG51bWJlciArICcgdm9yYW0nXSxcbiAgICAgICAgICAgICdkJzogWydla2EgZGlzYW4nLCAnZWsgZGlzJ10sXG4gICAgICAgICAgICAnZGQnOiBbbnVtYmVyICsgJyBkaXNhbmltJywgbnVtYmVyICsgJyBkaXMnXSxcbiAgICAgICAgICAgICdNJzogWydla2EgbWhvaW5lYW4nLCAnZWsgbWhvaW5vJ10sXG4gICAgICAgICAgICAnTU0nOiBbbnVtYmVyICsgJyBtaG9pbmVhbmltJywgbnVtYmVyICsgJyBtaG9pbmUnXSxcbiAgICAgICAgICAgICd5JzogWydla2Egdm9yc2FuJywgJ2VrIHZvcm9zJ10sXG4gICAgICAgICAgICAneXknOiBbbnVtYmVyICsgJyB2b3JzYW5pbScsIG51bWJlciArICcgdm9yc2FtJ11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHZhciBnb21MYXRuID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ29tLWxhdG4nLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW5lcl9GZWJyZXJfTWFyc19BYnJpbF9NYWlfSnVuX0p1bGFpX0Fnb3N0X1NldGVtYnJfT3R1YnJfTm92ZW1icl9EZXplbWJyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW4uX0ZlYi5fTWFyc19BYnIuX01haV9KdW5fSnVsLl9BZ28uX1NldC5fT3R1Ll9Ob3YuX0Rlei4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdBaXRhcl9Tb21hcl9Nb25nbGxhcl9CdWR2YXJfQnJlc3Rhcl9TdWtyYXJfU29uXFwndmFyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0FpdC5fU29tLl9Nb24uX0J1ZC5fQnJlLl9TdWsuX1Nvbi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0FpX1NtX01vX0J1X0JyX1N1X1NuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0EgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3MgW3ZhenRhXScsXG4gICAgICAgICAgICBMIDogJ0RELU1NLVlZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEEgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTVthY2hlYV0gRG8sIFlZWVksIEEgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQsIEQgTU1NIFlZWVksIEEgaDptbSBbdmF6dGFdJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbQWl6XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0ZhbGVhbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdbSWV0YSB0b10gZGRkZFssXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0thbF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbRmF0bG9dIGRkZGRbLF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBhZGltJyxcbiAgICAgICAgICAgIHMgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgc3MgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5IDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5IDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9KGVyKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlIG9yZGluYWwgJ2VyJyBvbmx5IGFwcGxpZXMgdG8gZGF5IG9mIHRoZSBtb250aFxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ2VyJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3JhdGl8c29rYWxsaXxkb25wYXJhbXxzYW5qZS8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdyYXRpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc29rYWxsaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdkb25wYXJhbScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+IDEyID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzYW5qZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncmF0aSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc29rYWxsaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZG9ucGFyYW0nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NhbmplJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdyYXRpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdvbUxhdG47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAnMSc6ICfgq6cnLFxuICAgICAgICAgICAgJzInOiAn4KuoJyxcbiAgICAgICAgICAgICczJzogJ+CrqScsXG4gICAgICAgICAgICAnNCc6ICfgq6onLFxuICAgICAgICAgICAgJzUnOiAn4KurJyxcbiAgICAgICAgICAgICc2JzogJ+CrrCcsXG4gICAgICAgICAgICAnNyc6ICfgq60nLFxuICAgICAgICAgICAgJzgnOiAn4KuuJyxcbiAgICAgICAgICAgICc5JzogJ+CrrycsXG4gICAgICAgICAgICAnMCc6ICfgq6YnXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgq6cnOiAnMScsXG4gICAgICAgICAgICAn4KuoJzogJzInLFxuICAgICAgICAgICAgJ+CrqSc6ICczJyxcbiAgICAgICAgICAgICfgq6onOiAnNCcsXG4gICAgICAgICAgICAn4KurJzogJzUnLFxuICAgICAgICAgICAgJ+CrrCc6ICc2JyxcbiAgICAgICAgICAgICfgq60nOiAnNycsXG4gICAgICAgICAgICAn4KuuJzogJzgnLFxuICAgICAgICAgICAgJ+Crryc6ICc5JyxcbiAgICAgICAgICAgICfgq6YnOiAnMCdcbiAgICAgICAgfTtcblxuICAgIHZhciBndSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2d1Jywge1xuICAgICAgICBtb250aHM6ICfgqpzgqr7gqqjgq43gqq/gq4HgqobgqrDgq4Bf4Kqr4KuH4Kqs4KuN4Kqw4KuB4KqG4Kqw4KuAX+CqruCqvuCqsOCrjeCqml/gqo/gqqrgq43gqrDgqr/gqrJf4Kqu4KuHX+CqnOCrguCqqF/gqpzgq4HgqrLgqr7gqohf4KqR4KqX4Kq44KuN4KqfX+CquOCqquCrjeCqn+Crh+CqruCrjeCqrOCqsF/gqpHgqpXgq43gqp/gq43gqqzgqrBf4Kqo4Kq14KuH4Kqu4KuN4Kqs4KqwX+CqoeCqv+CquOCrh+CqruCrjeCqrOCqsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfgqpzgqr7gqqjgq43gqq/gq4EuX+Cqq+Crh+CqrOCrjeCqsOCrgS5f4Kqu4Kq+4Kqw4KuN4KqaX+Cqj+CqquCrjeCqsOCqvy5f4Kqu4KuHX+CqnOCrguCqqF/gqpzgq4HgqrLgqr4uX+CqkeCqly5f4Kq44Kqq4KuN4Kqf4KuHLl/gqpHgqpXgq43gqp/gq40uX+CqqOCqteCrhy5f4Kqh4Kq/4Kq44KuHLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICfgqrDgqrXgqr/gqrXgqr7gqrBf4Kq44KuL4Kqu4Kq14Kq+4KqwX+CqruCqguCql+Cqs+CqteCqvuCqsF/gqqzgq4Hgqqfgq43gqrXgqr7gqrBf4KqX4KuB4Kqw4KuB4Kq14Kq+4KqwX+CqtuCrgeCqleCrjeCqsOCqteCqvuCqsF/gqrbgqqjgqr/gqrXgqr7gqrAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgqrDgqrXgqr9f4Kq44KuL4KquX+CqruCqguCql+Cqs1/gqqzgq4Hgqqfgq41f4KqX4KuB4Kqw4KuBX+CqtuCrgeCqleCrjeCqsF/gqrbgqqjgqr8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4KqwX+CquOCri1/gqq7gqoJf4Kqs4KuBX+Cql+CrgV/gqrbgq4Ff4Kq2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0g4Kq14Kq+4KqX4KuN4Kqv4KuHJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyDgqrXgqr7gqpfgq43gqq/gq4cnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCqteCqvuCql+CrjeCqr+CrhycsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgqrXgqr7gqpfgq43gqq/gq4cnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+CqhuCqnF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgqpXgqr7gqrLgq4ddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgqpfgqofgqpXgqr7gqrLgq4ddIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+CqquCqvuCqm+CqsuCqvl0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOCqruCqvicsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4Kqq4KuH4Kq54Kqy4Kq+JyxcbiAgICAgICAgICAgIHM6ICfgqoXgqq7gq4HgqpUg4Kqq4Kqz4KuLJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4Kq44KuH4KqV4KqC4KqhJyxcbiAgICAgICAgICAgIG06ICfgqo/gqpUg4Kqu4Kq/4Kqo4Kq/4KqfJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4Kqu4Kq/4Kqo4Kq/4KqfJyxcbiAgICAgICAgICAgIGg6ICfgqo/gqpUg4KqV4Kqy4Kq+4KqVJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4KqV4Kqy4Kq+4KqVJyxcbiAgICAgICAgICAgIGQ6ICfgqo/gqpUg4Kqm4Kq/4Kq14Kq4JyxcbiAgICAgICAgICAgIGRkOiAnJWQg4Kqm4Kq/4Kq14Kq4JyxcbiAgICAgICAgICAgIE06ICfgqo/gqpUg4Kqu4Kq54Kq/4Kqo4KuLJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4Kqu4Kq54Kq/4Kqo4KuLJyxcbiAgICAgICAgICAgIHk6ICfgqo/gqpUg4Kq14Kqw4KuN4Kq3JyxcbiAgICAgICAgICAgIHl5OiAnJWQg4Kq14Kqw4KuN4Kq3J1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Kun4Kuo4Kup4Kuq4Kur4Kus4Kut4Kuu4Kuv4KumXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyBHdWphcmF0aSBub3RhdGlvbiBmb3IgbWVyaWRpZW1zIGFyZSBxdWl0ZSBmdXp6eSBpbiBwcmFjdGljZS4gV2hpbGUgdGhlcmUgZXhpc3RzXG4gICAgICAgIC8vIGEgcmlnaWQgbm90aW9uIG9mIGEgJ1BhaGFyJyBpdCBpcyBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBHdWphcmF0aS5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CqsOCqvuCqpHzgqqzgqqrgq4vgqrB84Kq44Kq14Kq+4KqwfOCquOCqvuCqguCqnC8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CqsOCqvuCqpCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CquOCqteCqvuCqsCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqqzgqqrgq4vgqrAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CquOCqvuCqguCqnCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqrDgqr7gqqQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CquOCqteCqvuCqsCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kqs4Kqq4KuL4KqwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqrjgqr7gqoLgqpwnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CqsOCqvuCqpCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ3U7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBoZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2hlJywge1xuICAgICAgICBtb250aHMgOiAn15nXoNeV15DXqF/XpNeR16jXldeQ16hf157XqNelX9eQ16TXqNeZ15xf157XkNeZX9eZ15XXoNeZX9eZ15XXnNeZX9eQ15XXkteV16HXmF/Xodek15jXnteR16hf15DXlden15jXldeR16hf16DXldeR157XkdeoX9eT16bXnteR16gnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9eZ16DXldezX9ek15HXqNezX9ee16jXpV/XkNek16jXs1/XnteQ15lf15nXldeg15lf15nXldec15lf15DXldeS17Nf16HXpNeY17Nf15DXlden17Nf16DXldeR17Nf15PXptee17MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9eo15DXqdeV159f16nXoNeZX9ep15zXmdep15lf16jXkdeZ16LXmV/Xl9ee15nXqdeZX9ep15nXqdeZX9ep15HXqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfXkNezX9eR17Nf15LXs1/Xk9ezX9eU17Nf15XXs1/XqdezJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfXkF/XkV/Xkl/Xk1/XlF/XlV/XqScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgW9eRXU1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBb15FdTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBb15FdTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIGwgOiAnRC9NL1lZWVknLFxuICAgICAgICAgICAgbGwgOiAnRCBNTU0gWVlZWScsXG4gICAgICAgICAgICBsbGwgOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ2RkZCwgRCBNTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vXlNeZ15XXnSDXkda+XUxUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9ee15fXqCDXkda+XUxUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9eR16nXoteUXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vXkNeq157XldecINeR1r5dTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW9eR15nXldedXSBkZGRkIFvXlNeQ15fXqNeV158g15HXqdei15RdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfXkdei15XXkyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ9ec16TXoNeZICVzJyxcbiAgICAgICAgICAgIHMgOiAn157Xodek16gg16nXoNeZ15XXqicsXG4gICAgICAgICAgICBzcyA6ICclZCDXqdeg15nXldeqJyxcbiAgICAgICAgICAgIG0gOiAn15PXp9eUJyxcbiAgICAgICAgICAgIG1tIDogJyVkINeT16fXldeqJyxcbiAgICAgICAgICAgIGggOiAn16nXoteUJyxcbiAgICAgICAgICAgIGhoIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICfXqdei16rXmdeZ150nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDXqdei15XXqic7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZCA6ICfXmdeV150nLFxuICAgICAgICAgICAgZGQgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ9eZ15XXnteZ15nXnSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINeZ157XmdedJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBNIDogJ9eX15XXk9epJyxcbiAgICAgICAgICAgIE1NIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICfXl9eV15PXqdeZ15nXnSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINeX15XXk9ep15nXnSc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeSA6ICfXqdeg15QnLFxuICAgICAgICAgICAgeXkgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ9ep16DXqteZ15nXnSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgJSAxMCA9PT0gMCAmJiBudW1iZXIgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINep16DXlCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINep16DXmdedJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9eQ15fXlFwi16Z815zXpNeg15RcItemfNeQ15fXqNeZINeU16bXlNeo15nXmdedfNec16TXoNeZINeU16bXlNeo15nXmdedfNec16TXoNeV16og15HXlden16h815HXkdeV16fXqHzXkdei16jXkS9pLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14o15DXl9eUXCLXpnzXkNeX16jXmSDXlNem15TXqNeZ15nXnXzXkdei16jXkSkkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9ec16TXoNeV16og15HXlden16gnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9eR15HXlden16gnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfXnNek16DXlFwi16YnIDogJ9ec16TXoNeZINeU16bXlNeo15nXmdedJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAn15DXl9eUXCLXpicgOiAn15DXl9eo15kg15TXpteU16jXmdeZ150nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9eR16LXqNeRJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfgpacnLFxuICAgICAgICAnMic6ICfgpagnLFxuICAgICAgICAnMyc6ICfgpaknLFxuICAgICAgICAnNCc6ICfgpaonLFxuICAgICAgICAnNSc6ICfgpasnLFxuICAgICAgICAnNic6ICfgpawnLFxuICAgICAgICAnNyc6ICfgpa0nLFxuICAgICAgICAnOCc6ICfgpa4nLFxuICAgICAgICAnOSc6ICfgpa8nLFxuICAgICAgICAnMCc6ICfgpaYnXG4gICAgfSxcbiAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICfgpacnOiAnMScsXG4gICAgICAgICfgpagnOiAnMicsXG4gICAgICAgICfgpaknOiAnMycsXG4gICAgICAgICfgpaonOiAnNCcsXG4gICAgICAgICfgpasnOiAnNScsXG4gICAgICAgICfgpawnOiAnNicsXG4gICAgICAgICfgpa0nOiAnNycsXG4gICAgICAgICfgpa4nOiAnOCcsXG4gICAgICAgICfgpa8nOiAnOScsXG4gICAgICAgICfgpaYnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIGhpID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaGknLCB7XG4gICAgICAgIG1vbnRocyA6ICfgpJzgpKjgpLXgpLDgpYBf4KSr4KS84KSw4KS14KSw4KWAX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpYjgpLJf4KSu4KSIX+CknOClguCkqF/gpJzgpYHgpLLgpL7gpIhf4KSF4KSX4KS44KWN4KSkX+CkuOCkv+CkpOCkruCljeCkrOCksF/gpIXgpJXgpY3gpJ/gpYLgpKzgpLBf4KSo4KS14KSu4KWN4KSs4KSwX+CkpuCkv+CkuOCkruCljeCkrOCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4KSc4KSoLl/gpKvgpLzgpLAuX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpYguX+CkruCkiF/gpJzgpYLgpKhf4KSc4KWB4KSyLl/gpIXgpJcuX+CkuOCkv+CkpC5f4KSF4KSV4KWN4KSf4KWCLl/gpKjgpLUuX+CkpuCkv+CkuC4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ+CksOCkteCkv+CkteCkvuCksF/gpLjgpYvgpK7gpLXgpL7gpLBf4KSu4KSC4KSX4KSy4KS14KS+4KSwX+CkrOClgeCkp+CkteCkvuCksF/gpJfgpYHgpLDgpYLgpLXgpL7gpLBf4KS24KWB4KSV4KWN4KSw4KS14KS+4KSwX+CktuCkqOCkv+CkteCkvuCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgpLDgpLXgpL9f4KS44KWL4KSuX+CkruCkguCkl+Cksl/gpKzgpYHgpKdf4KSX4KWB4KSw4KWCX+CktuClgeCkleCljeCksF/gpLbgpKjgpL8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+CksF/gpLjgpYtf4KSu4KSCX+CkrOClgV/gpJfgpYFf4KS24KWBX+Ckticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3Mg4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCkrOCknOClhydcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgpIbgpJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+CkleCksl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4KSV4KSyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb4KSq4KS/4KSb4KSy4KWHXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg4KSu4KWH4KSCJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg4KSq4KS54KSy4KWHJyxcbiAgICAgICAgICAgIHMgOiAn4KSV4KWB4KSbIOCkueClgCDgpJXgpY3gpLfgpKMnLFxuICAgICAgICAgICAgc3MgOiAnJWQg4KS44KWH4KSV4KSC4KShJyxcbiAgICAgICAgICAgIG0gOiAn4KSP4KSVIOCkruCkv+CkqOCknycsXG4gICAgICAgICAgICBtbSA6ICclZCDgpK7gpL/gpKjgpJ8nLFxuICAgICAgICAgICAgaCA6ICfgpI/gpJUg4KSY4KSC4KSf4KS+JyxcbiAgICAgICAgICAgIGhoIDogJyVkIOCkmOCkguCkn+ClhycsXG4gICAgICAgICAgICBkIDogJ+Ckj+CklSDgpKbgpL/gpKgnLFxuICAgICAgICAgICAgZGQgOiAnJWQg4KSm4KS/4KSoJyxcbiAgICAgICAgICAgIE0gOiAn4KSP4KSVIOCkruCkueClgOCkqOClhycsXG4gICAgICAgICAgICBNTSA6ICclZCDgpK7gpLngpYDgpKjgpYcnLFxuICAgICAgICAgICAgeSA6ICfgpI/gpJUg4KS14KSw4KWN4KS3JyxcbiAgICAgICAgICAgIHl5IDogJyVkIOCkteCksOCljeCktydcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Clp+ClqOClqeClquClq+ClrOClreClruClr+Clpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gSGluZGkgbm90YXRpb24gZm9yIG1lcmlkaWVtcyBhcmUgcXVpdGUgZnV6enkgaW4gcHJhY3RpY2UuIFdoaWxlIHRoZXJlIGV4aXN0c1xuICAgICAgICAvLyBhIHJpZ2lkIG5vdGlvbiBvZiBhICdQYWhhcicgaXQgaXMgbm90IHVzZWQgYXMgcmlnaWRseSBpbiBtb2Rlcm4gSGluZGkuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gpLDgpL7gpKR84KS44KWB4KSs4KS5fOCkpuCli+CkquCkueCksHzgpLbgpL7gpK4vLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4KSw4KS+4KSkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS44KWB4KSs4KS5Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkpuCli+CkquCkueCksCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS24KS+4KSuJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkuOClgeCkrOCkuSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSm4KWL4KSq4KS54KSwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLbgpL7gpK4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdqZWRuYSBtaW51dGEnIDogJ2plZG5lIG1pbnV0ZSc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0YSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0ZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnamVkYW4gc2F0JyA6ICdqZWRub2cgc2F0YSc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0aSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2Rhbic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdkYW5hJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWNpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5lJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluYSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaHIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdocicsIHtcbiAgICAgICAgbW9udGhzIDoge1xuICAgICAgICAgICAgZm9ybWF0OiAnc2lqZcSNbmphX3ZlbGphxI1lX2/FvnVqa2FfdHJhdm5qYV9zdmlibmphX2xpcG5qYV9zcnBuamFfa29sb3ZvemFfcnVqbmFfbGlzdG9wYWRhX3N0dWRlbm9nYV9wcm9zaW5jYScuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICdzaWplxI1hbmpfdmVsamHEjWFfb8W+dWpha190cmF2YW5qX3N2aWJhbmpfbGlwYW5qX3NycGFual9rb2xvdm96X3J1amFuX2xpc3RvcGFkX3N0dWRlbmlfcHJvc2luYWMnLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnc2lqLl92ZWxqLl9vxb51Ll90cmEuX3N2aS5fbGlwLl9zcnAuX2tvbC5fcnVqLl9saXMuX3N0dS5fcHJvLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnbmVkamVsamFfcG9uZWRqZWxqYWtfdXRvcmFrX3NyaWplZGFfxI1ldHZydGFrX3BldGFrX3N1Ym90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICduZWQuX3Bvbi5fdXRvLl9zcmkuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5ICA6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSAgOiAnW3N1dHJhIHVdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkamVsanVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzcmlqZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgIDogJ1tqdcSNZXIgdV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxpXSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0ICAgOiAncHJpamUgJXMnLFxuICAgICAgICAgICAgcyAgICAgIDogJ3BhciBzZWt1bmRpJyxcbiAgICAgICAgICAgIHNzICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgICAgICA6ICdkYW4nLFxuICAgICAgICAgICAgZGQgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTSAgICAgIDogJ21qZXNlYycsXG4gICAgICAgICAgICBNTSAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5ICAgICAgOiAnZ29kaW51JyxcbiAgICAgICAgICAgIHl5ICAgICA6IHRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgd2Vla0VuZGluZ3MgPSAndmFzw6FybmFwIGjDqXRmxZFuIGtlZGRlbiBzemVyZMOhbiBjc8O8dMO2cnTDtmvDtm4gcMOpbnRla2VuIHN6b21iYXRvbicuc3BsaXQoJyAnKTtcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBudW0gPSBudW1iZXI7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXgpID8gJ27DqWjDoW55IG3DoXNvZHBlcmMnIDogJ27DqWjDoW55IG3DoXNvZHBlcmNlJztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXgpID8gJyBtw6Fzb2RwZXJjJyA6ICcgbcOhc29kcGVyY2UnO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlZ3knICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIHBlcmMnIDogJyBwZXJjZScpO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgcGVyYycgOiAnIHBlcmNlJyk7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw7NyYScgOiAnIMOzcsOhamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIMOzcmEnIDogJyDDs3LDoWphJyk7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgbmFwJyA6ICcgbmFwamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIG5hcCcgOiAnIG5hcGphJyk7XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgaMOzbmFwJyA6ICcgaMOzbmFwamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIGjDs25hcCcgOiAnIGjDs25hcGphJyk7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw6l2JyA6ICcgw6l2ZScpO1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw6l2JyA6ICcgw6l2ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgZnVuY3Rpb24gd2Vlayhpc0Z1dHVyZSkge1xuICAgICAgICByZXR1cm4gKGlzRnV0dXJlID8gJycgOiAnW23Dumx0XSAnKSArICdbJyArIHdlZWtFbmRpbmdzW3RoaXMuZGF5KCldICsgJ10gTFRbLWtvcl0nO1xuICAgIH1cblxuICAgIHZhciBodSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2h1Jywge1xuICAgICAgICBtb250aHMgOiAnamFudcOhcl9mZWJydcOhcl9tw6FyY2l1c1/DoXByaWxpc19tw6FqdXNfasO6bml1c19qw7psaXVzX2F1Z3VzenR1c19zemVwdGVtYmVyX29rdMOzYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX23DoXJjX8OhcHJfbcOhal9qw7puX2rDumxfYXVnX3N6ZXB0X29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICd2YXPDoXJuYXBfaMOpdGbFkV9rZWRkX3N6ZXJkYV9jc8O8dMO2cnTDtmtfcMOpbnRla19zem9tYmF0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3Zhc19ow6l0X2tlZGRfc3plX2Nzw7x0X3DDqW5fc3pvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICd2X2hfa19zemVfY3NfcF9zem8nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVkuTU0uREQuJyxcbiAgICAgICAgICAgIExMIDogJ1lZWVkuIE1NTU0gRC4nLFxuICAgICAgICAgICAgTExMIDogJ1lZWVkuIE1NTU0gRC4gSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ1lZWVkuIE1NTU0gRC4sIGRkZGQgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2RlfGR1L2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LmNoYXJBdCgxKS50b0xvd2VyQ2FzZSgpID09PSAndSc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID09PSB0cnVlID8gJ2RlJyA6ICdERSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID09PSB0cnVlID8gJ2R1JyA6ICdEVSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbbWFdIExUWy1rb3JdJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW2hvbG5hcF0gTFRbLWtvcl0nLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdlZWsuY2FsbCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1t0ZWduYXBdIExUWy1rb3JdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3ZWVrLmNhbGwodGhpcywgZmFsc2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyBtw7psdmEnLFxuICAgICAgICAgICAgcGFzdCA6ICclcycsXG4gICAgICAgICAgICBzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3MgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBodTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGh5QW0gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdoeS1hbScsIHtcbiAgICAgICAgbW9udGhzIDoge1xuICAgICAgICAgICAgZm9ybWF0OiAn1bDVuNaC1bbVvtWh1oDVq1/Wg9Wl1b/WgNW+1aHWgNWrX9W01aHWgNW/1atf1aHVutaA1avVrNWrX9W01aHVtdWr1b3Vq1/VsNW41oLVttWr1b3Vq1/VsNW41oLVrNWr1b3Vq1/WhdWj1bjVvdW/1bjVvdWrX9W91aXVutW/1aXVtNWi1aXWgNWrX9Ww1bjVr9W/1aXVtNWi1aXWgNWrX9W21bjVtdWl1bTVotWl1oDVq1/VpNWl1a/Vv9Wl1bTVotWl1oDVqycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfVsNW41oLVttW+1aHWgF/Wg9Wl1b/WgNW+1aHWgF/VtNWh1oDVv1/VodW61oDVq9WsX9W01aHVtdWr1b1f1bDVuNaC1bbVq9W9X9Ww1bjWgtWs1avVvV/WhdWj1bjVvdW/1bjVvV/VvdWl1brVv9Wl1bTVotWl1oBf1bDVuNWv1b/VpdW01aLVpdaAX9W21bjVtdWl1bTVotWl1oBf1aTVpdWv1b/VpdW01aLVpdaAJy5zcGxpdCgnXycpXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9Ww1bbVvl/Wg9W/1oBf1bTWgNW/X9Wh1brWgF/VtNW11b1f1bDVttW9X9Ww1azVvV/WhdWj1b1f1b3VutW/X9Ww1a/Vv1/VttW01aJf1aTVr9W/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfVr9Wr1oDVodWv1atf1aXWgNWv1bjWgtW31aHVotWp1atf1aXWgNWl1oTVt9Wh1aLVqdWrX9W51bjWgNWl1oTVt9Wh1aLVqdWrX9Ww1avVttWj1bfVodWi1anVq1/VuNaC1oDVotWh1alf1bfVodWi1aHVqScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfVr9aA1a9f1aXWgNWvX9Wl1oDWhF/VudaA1oRf1bDVttWjX9W41oLWgNWiX9W31aLVqScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn1a/WgNWvX9Wl1oDVr1/VpdaA1oRf1bnWgNaEX9Ww1bbVo1/VuNaC1oDVol/Vt9Wi1aknLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWSDVqS4nLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZINWpLiwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSDVqS4sIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb1aHVtdW91oXWgF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vVvtWh1bLVqF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vVpdaA1aXVr10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgW9aF1oDVqCDVqtWh1bTVqF0gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdb1aHVttaB1aHVrl0gZGRkZCBb1oXWgNWoINWq1aHVtNWoXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg1bDVpdW/1bgnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDVodW81aHVuycsXG4gICAgICAgICAgICBzIDogJ9W01asg1oTVodW21asg1b7VodW11oDVr9W11aHVticsXG4gICAgICAgICAgICBzcyA6ICclZCDVvtWh1bXWgNWv1bXVodW2JyxcbiAgICAgICAgICAgIG0gOiAn1oDVuNW61aUnLFxuICAgICAgICAgICAgbW0gOiAnJWQg1oDVuNW61aUnLFxuICAgICAgICAgICAgaCA6ICfVqtWh1bQnLFxuICAgICAgICAgICAgaGggOiAnJWQg1arVodW0JyxcbiAgICAgICAgICAgIGQgOiAn1oXWgCcsXG4gICAgICAgICAgICBkZCA6ICclZCDWhdaAJyxcbiAgICAgICAgICAgIE0gOiAn1aHVtNWr1b0nLFxuICAgICAgICAgICAgTU0gOiAnJWQg1aHVtNWr1b0nLFxuICAgICAgICAgICAgeSA6ICfVv9Wh1oDVqycsXG4gICAgICAgICAgICB5eSA6ICclZCDVv9Wh1oDVqydcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9Wj1avVt9Wl1oDVvtWhfNWh1bzVodW+1bjVv9W+1aF81oHVpdaA1aXVr9W+1aF81aXWgNWl1a/VuNW11aHVti8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eKNaB1aXWgNWl1a/VvtWhfNWl1oDVpdWv1bjVtdWh1bYpJC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn1aPVq9W31aXWgNW+1aEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Wh1bzVodW+1bjVv9W+1aEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9aB1aXWgNWl1a/VvtWhJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfVpdaA1aXVr9W41bXVodW2JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9fFxcZHsxLDJ9LSjVq9W2fNaA1aQpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREbyc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdWr1bYnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdaA1aQnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGh5QW07XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBpZCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2lkJywge1xuICAgICAgICBtb250aHMgOiAnSmFudWFyaV9GZWJydWFyaV9NYXJldF9BcHJpbF9NZWlfSnVuaV9KdWxpX0FndXN0dXNfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGVzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NZWlfSnVuX0p1bF9BZ3RfU2VwX09rdF9Ob3ZfRGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdNaW5nZ3VfU2VuaW5fU2VsYXNhX1JhYnVfS2FtaXNfSnVtYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnTWluX1Nlbl9TZWxfUmFiX0thbV9KdW1fU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdNZ19Tbl9TbF9SYl9LbV9KbV9TYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISC5tbScsXG4gICAgICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3BhZ2l8c2lhbmd8c29yZXxtYWxhbS8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdwYWdpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NpYW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzb3JlJyB8fCBtZXJpZGllbSA9PT0gJ21hbGFtJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGFnaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NpYW5nJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc29yZSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnbWFsYW0nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW0hhcmkgaW5pIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tCZXNvayBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0tlbWFyaW4gcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2xhbHUgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdkYWxhbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHlhbmcgbGFsdScsXG4gICAgICAgICAgICBzIDogJ2JlYmVyYXBhIGRldGlrJyxcbiAgICAgICAgICAgIHNzIDogJyVkIGRldGlrJyxcbiAgICAgICAgICAgIG0gOiAnc2VtZW5pdCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtZW5pdCcsXG4gICAgICAgICAgICBoIDogJ3NlamFtJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGphbScsXG4gICAgICAgICAgICBkIDogJ3NlaGFyaScsXG4gICAgICAgICAgICBkZCA6ICclZCBoYXJpJyxcbiAgICAgICAgICAgIE0gOiAnc2VidWxhbicsXG4gICAgICAgICAgICBNTSA6ICclZCBidWxhbicsXG4gICAgICAgICAgICB5IDogJ3NldGFodW4nLFxuICAgICAgICAgICAgeXkgOiAnJWQgdGFodW4nXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGlkO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwbHVyYWwobikge1xuICAgICAgICBpZiAobiAlIDEwMCA9PT0gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKG4gJSAxMCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdub2trcmFyIHNla8O6bmR1cicgOiAnbm9ra3J1bSBzZWvDum5kdW0nO1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnc2Vrw7puZHVyJyA6ICdzZWvDum5kdW0nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdzZWvDum5kYSc7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdtw61uw7p0YScgOiAnbcOtbsO6dHUnO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbcOtbsO6dHVyJyA6ICdtw61uw7p0dW0nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw61uw7p0YSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbcOtbsO6dHUnO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAna2x1a2t1c3R1bmRpcicgOiAna2x1a2t1c3R1bmR1bScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2tsdWtrdXN0dW5kJztcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZGFndXInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnZGFnJyA6ICdkZWdpJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICBpZiAocGx1cmFsKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZGFnYXInO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnZGFnYScgOiAnZMO2Z3VtJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZGFndXInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKGlzRnV0dXJlID8gJ2RhZycgOiAnZGVnaScpO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdtw6FudcOwdXInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnbcOhbnXDsCcgOiAnbcOhbnXDsGknO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw6FudcOwaXInO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnbcOhbnXDsGknIDogJ23DoW51w7B1bScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23DoW51w7B1cic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnbcOhbnXDsCcgOiAnbcOhbnXDsGknKTtcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ8OhcicgOiAnw6FyaSc7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICfDoXInIDogJ8OhcnVtJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICfDoXInIDogJ8OhcmknKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2lzJywge1xuICAgICAgICBtb250aHMgOiAnamFuw7phcl9mZWJyw7phcl9tYXJzX2FwcsOtbF9tYcOtX2rDum7DrV9qw7psw61fw6Fnw7pzdF9zZXB0ZW1iZXJfb2t0w7NiZXJfbsOzdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWHDrV9qw7puX2rDumxfw6Fnw7pfc2VwX29rdF9uw7N2X2Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnc3VubnVkYWd1cl9tw6FudWRhZ3VyX8O+cmnDsGp1ZGFndXJfbWnDsHZpa3VkYWd1cl9maW1tdHVkYWd1cl9mw7ZzdHVkYWd1cl9sYXVnYXJkYWd1cicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzdW5fbcOhbl/DvnJpX21pw7BfZmltX2bDtnNfbGF1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nw6Ffw55yX01pX0ZpX0bDtl9MYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBba2wuXSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbw60gZGFnIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbw6EgbW9yZ3VuIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vDrSBnw6ZyIGtsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW3PDrcOwYXN0YV0gZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZWZ0aXIgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdmeXJpciAlcyBzw63DsGFuJyxcbiAgICAgICAgICAgIHMgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggOiAna2x1a2t1c3R1bmQnLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBpcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGl0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaXQnLCB7XG4gICAgICAgIG1vbnRocyA6ICdnZW5uYWlvX2ZlYmJyYWlvX21hcnpvX2FwcmlsZV9tYWdnaW9fZ2l1Z25vX2x1Z2xpb19hZ29zdG9fc2V0dGVtYnJlX290dG9icmVfbm92ZW1icmVfZGljZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2dlbl9mZWJfbWFyX2Fwcl9tYWdfZ2l1X2x1Z19hZ29fc2V0X290dF9ub3ZfZGljJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdkb21lbmljYV9sdW5lZMOsX21hcnRlZMOsX21lcmNvbGVkw6xfZ2lvdmVkw6xfdmVuZXJkw6xfc2FiYXRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RvbV9sdW5fbWFyX21lcl9naW9fdmVuX3NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZG9fbHVfbWFfbWVfZ2lfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbT2dnaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0RvbWFuaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2FsbGVdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSWVyaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tsYSBzY29yc2FdIGRkZGQgW2FsbGVdIExUJztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW2xvIHNjb3Jzb10gZGRkZCBbYWxsZV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgoL15bMC05XS4rJC8pLnRlc3QocykgPyAndHJhJyA6ICdpbicpICsgJyAnICsgcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXN0IDogJyVzIGZhJyxcbiAgICAgICAgICAgIHMgOiAnYWxjdW5pIHNlY29uZGknLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kaScsXG4gICAgICAgICAgICBtIDogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGknLFxuICAgICAgICAgICAgaCA6ICd1blxcJ29yYScsXG4gICAgICAgICAgICBoaCA6ICclZCBvcmUnLFxuICAgICAgICAgICAgZCA6ICd1biBnaW9ybm8nLFxuICAgICAgICAgICAgZGQgOiAnJWQgZ2lvcm5pJyxcbiAgICAgICAgICAgIE0gOiAndW4gbWVzZScsXG4gICAgICAgICAgICBNTSA6ICclZCBtZXNpJyxcbiAgICAgICAgICAgIHkgOiAndW4gYW5ubycsXG4gICAgICAgICAgICB5eSA6ICclZCBhbm5pJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGl0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgaXRDaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2l0LWNoJywge1xuICAgICAgICBtb250aHMgOiAnZ2VubmFpb19mZWJicmFpb19tYXJ6b19hcHJpbGVfbWFnZ2lvX2dpdWdub19sdWdsaW9fYWdvc3RvX3NldHRlbWJyZV9vdHRvYnJlX25vdmVtYnJlX2RpY2VtYnJlJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdnZW5fZmViX21hcl9hcHJfbWFnX2dpdV9sdWdfYWdvX3NldF9vdHRfbm92X2RpYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnZG9tZW5pY2FfbHVuZWTDrF9tYXJ0ZWTDrF9tZXJjb2xlZMOsX2dpb3ZlZMOsX3ZlbmVyZMOsX3NhYmF0bycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkb21fbHVuX21hcl9tZXJfZ2lvX3Zlbl9zYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RvX2x1X21hX21lX2dpX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW09nZ2kgYWxsZV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tEb21hbmkgYWxsZV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthbGxlXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0llcmkgYWxsZV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbGEgc2NvcnNhXSBkZGRkIFthbGxlXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tsbyBzY29yc29dIGRkZGQgW2FsbGVdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgICAgIHJldHVybiAoKC9eWzAtOV0uKyQvKS50ZXN0KHMpID8gJ3RyYScgOiAnaW4nKSArICcgJyArIHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFzdCA6ICclcyBmYScsXG4gICAgICAgICAgICBzIDogJ2FsY3VuaSBzZWNvbmRpJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlY29uZGknLFxuICAgICAgICAgICAgbSA6ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRpJyxcbiAgICAgICAgICAgIGggOiAndW5cXCdvcmEnLFxuICAgICAgICAgICAgaGggOiAnJWQgb3JlJyxcbiAgICAgICAgICAgIGQgOiAndW4gZ2lvcm5vJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGdpb3JuaScsXG4gICAgICAgICAgICBNIDogJ3VuIG1lc2UnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbWVzaScsXG4gICAgICAgICAgICB5IDogJ3VuIGFubm8nLFxuICAgICAgICAgICAgeXkgOiAnJWQgYW5uaSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBpdENoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgamEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdqYScsIHtcbiAgICAgICAgbW9udGhzIDogJ+S4gOaciF/kuozmnIhf5LiJ5pyIX+Wbm+aciF/kupTmnIhf5YWt5pyIX+S4g+aciF/lhavmnIhf5Lmd5pyIX+WNgeaciF/ljYHkuIDmnIhf5Y2B5LqM5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn5pel5puc5pelX+aciOabnOaXpV/ngavmm5zml6Vf5rC05puc5pelX+acqOabnOaXpV/ph5Hmm5zml6Vf5Zyf5puc5pelJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+aXpV/mnIhf54GrX+awtF/mnKhf6YeRX+Wcnycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn5pelX+aciF/ngatf5rC0X+acqF/ph5Ff5ZyfJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdZWVlZ5bm0TeaciETml6UgZGRkZCBISDptbScsXG4gICAgICAgICAgICBsIDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgbGwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIGxsbCA6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbCA6ICdZWVlZ5bm0TeaciETml6UoZGRkKSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+WNiOWJjXzljYjlvowvaSxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn5Y2I5b6MJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfljYjliY0nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+WNiOW+jCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb5LuK5pelXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vmmI7ml6VdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmIChub3cud2VlaygpIDwgdGhpcy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb5p2l6YCxXWRkZGQgTFQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+aYqOaXpV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMud2VlaygpIDwgbm93LndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vlhYjpgLFdZGRkZCBMVCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfeaXpS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclc+W+jCcsXG4gICAgICAgICAgICBwYXN0IDogJyVz5YmNJyxcbiAgICAgICAgICAgIHMgOiAn5pWw56eSJyxcbiAgICAgICAgICAgIHNzIDogJyVk56eSJyxcbiAgICAgICAgICAgIG0gOiAnMeWIhicsXG4gICAgICAgICAgICBtbSA6ICclZOWIhicsXG4gICAgICAgICAgICBoIDogJzHmmYLplpMnLFxuICAgICAgICAgICAgaGggOiAnJWTmmYLplpMnLFxuICAgICAgICAgICAgZCA6ICcx5pelJyxcbiAgICAgICAgICAgIGRkIDogJyVk5pelJyxcbiAgICAgICAgICAgIE0gOiAnMeODtuaciCcsXG4gICAgICAgICAgICBNTSA6ICclZOODtuaciCcsXG4gICAgICAgICAgICB5IDogJzHlubQnLFxuICAgICAgICAgICAgeXkgOiAnJWTlubQnXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBqYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGp2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnanYnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hcmV0X0FwcmlsX01laV9KdW5pX0p1bGlfQWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3BlbWJlcl9EZXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYXJfQXByX01laV9KdW5fSnVsX0Fnc19TZXBfT2t0X05vcF9EZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ01pbmdndV9TZW5lbl9TZWxvc29fUmVidV9LZW1pc19KZW11d2FoX1NlcHR1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ01pbl9TZW5fU2VsX1JlYl9LZW1fSmVtX1NlcCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnTWdfU25fU2xfUmJfS21fSm1fU3AnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9lbmppbmd8c2l5YW5nfHNvbnRlbnxuZGFsdS8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdlbmppbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc2l5YW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzb250ZW4nIHx8IG1lcmlkaWVtID09PSAnbmRhbHUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlbmppbmcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzaXlhbmcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzb250ZW4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ25kYWx1JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tEaW50ZW4gcHVuaWtvIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tNYmVuamFuZyBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0thbGEgd2luZ2kgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2tlcGVuZ2tlciBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3dvbnRlbiBpbmcgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBpbmdrYW5nIGtlcGVuZ2tlcicsXG4gICAgICAgICAgICBzIDogJ3Nhd2V0YXdpcyBkZXRpaycsXG4gICAgICAgICAgICBzcyA6ICclZCBkZXRpaycsXG4gICAgICAgICAgICBtIDogJ3NldHVuZ2dhbCBtZW5pdCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtZW5pdCcsXG4gICAgICAgICAgICBoIDogJ3NldHVuZ2dhbCBqYW0nLFxuICAgICAgICAgICAgaGggOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQgOiAnc2VkaW50ZW4nLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGludGVuJyxcbiAgICAgICAgICAgIE0gOiAnc2V3dWxhbicsXG4gICAgICAgICAgICBNTSA6ICclZCB3dWxhbicsXG4gICAgICAgICAgICB5IDogJ3NldGF1bicsXG4gICAgICAgICAgICB5eSA6ICclZCB0YXVuJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBqdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGthID0gbW9tZW50LmRlZmluZUxvY2FsZSgna2EnLCB7XG4gICAgICAgIG1vbnRocyA6IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfhg5jhg5Dhg5zhg5Xhg5Dhg6Dhg5hf4YOX4YOU4YOR4YOU4YOg4YOV4YOQ4YOa4YOYX+GDm+GDkOGDoOGDouGDmF/hg5Dhg57hg6Dhg5jhg5rhg5hf4YOb4YOQ4YOY4YOh4YOYX+GDmOGDleGDnOGDmOGDoeGDmF/hg5jhg5Xhg5rhg5jhg6Hhg5hf4YOQ4YOS4YOV4YOY4YOh4YOi4YOdX+GDoeGDlOGDpeGDouGDlOGDm+GDkeGDlOGDoOGDmF/hg53hg6Xhg6Lhg53hg5vhg5Hhg5Thg6Dhg5hf4YOc4YOd4YOU4YOb4YOR4YOU4YOg4YOYX+GDk+GDlOGDmeGDlOGDm+GDkeGDlOGDoOGDmCcuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIGZvcm1hdDogJ+GDmOGDkOGDnOGDleGDkOGDoOGDoV/hg5fhg5Thg5Hhg5Thg6Dhg5Xhg5Dhg5rhg6Ff4YOb4YOQ4YOg4YOi4YOhX+GDkOGDnuGDoOGDmOGDmuGDmOGDoV/hg5vhg5Dhg5jhg6Hhg6Ff4YOY4YOV4YOc4YOY4YOh4YOhX+GDmOGDleGDmuGDmOGDoeGDoV/hg5Dhg5Lhg5Xhg5jhg6Hhg6Lhg6Ff4YOh4YOU4YOl4YOi4YOU4YOb4YOR4YOU4YOg4YOhX+GDneGDpeGDouGDneGDm+GDkeGDlOGDoOGDoV/hg5zhg53hg5Thg5vhg5Hhg5Thg6Dhg6Ff4YOT4YOU4YOZ4YOU4YOb4YOR4YOU4YOg4YOhJy5zcGxpdCgnXycpXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+GDmOGDkOGDnF/hg5fhg5Thg5Ff4YOb4YOQ4YOgX+GDkOGDnuGDoF/hg5vhg5Dhg5hf4YOY4YOV4YOcX+GDmOGDleGDml/hg5Dhg5Lhg5Vf4YOh4YOU4YOlX+GDneGDpeGDol/hg5zhg53hg5Rf4YOT4YOU4YOZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfhg5nhg5Xhg5jhg6Dhg5Bf4YOd4YOg4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDoeGDkOGDm+GDqOGDkOGDkeGDkOGDl+GDmF/hg53hg5fhg67hg6jhg5Dhg5Hhg5Dhg5fhg5hf4YOu4YOj4YOX4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDnuGDkOGDoOGDkOGDoeGDmeGDlOGDleGDmF/hg6jhg5Dhg5Hhg5Dhg5fhg5gnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBmb3JtYXQ6ICfhg5nhg5Xhg5jhg6Dhg5Dhg6Ff4YOd4YOg4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDoeGDkOGDm+GDqOGDkOGDkeGDkOGDl+GDoV/hg53hg5fhg67hg6jhg5Dhg5Hhg5Dhg5fhg6Ff4YOu4YOj4YOX4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDnuGDkOGDoOGDkOGDoeGDmeGDlOGDleGDoV/hg6jhg5Dhg5Hhg5Dhg5fhg6EnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBpc0Zvcm1hdDogLyjhg6zhg5jhg5zhg5B84YOo4YOU4YOb4YOT4YOU4YOSKS9cbiAgICAgICAgfSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfhg5nhg5Xhg5hf4YOd4YOg4YOoX+GDoeGDkOGDm1/hg53hg5fhg65f4YOu4YOj4YOXX+GDnuGDkOGDoF/hg6jhg5Dhg5EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+GDmeGDlV/hg53hg6Bf4YOh4YOQX+GDneGDl1/hg67hg6Nf4YOe4YOQX+GDqOGDkCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vhg5Phg6bhg5Thg6FdIExUWy3hg5bhg5RdJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+GDruGDleGDkOGDml0gTFRbLeGDluGDlF0nLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4YOS4YOj4YOo4YOY4YOcXSBMVFst4YOW4YOUXScsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdb4YOo4YOU4YOb4YOT4YOU4YOSXSBkZGRkIExUWy3hg5bhg5RdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vhg6zhg5jhg5zhg5BdIGRkZGQgTFQt4YOW4YOUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgvKOGDrOGDkOGDm+GDmHzhg6zhg6Phg5fhg5h84YOh4YOQ4YOQ4YOX4YOYfOGDrOGDlOGDmuGDmCkvKS50ZXN0KHMpID9cbiAgICAgICAgICAgICAgICAgICAgcy5yZXBsYWNlKC/hg5gkLywgJ+GDqOGDmCcpIDpcbiAgICAgICAgICAgICAgICAgICAgcyArICfhg6jhg5gnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3QgOiBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgICAgIGlmICgoLyjhg6zhg5Dhg5vhg5h84YOs4YOj4YOX4YOYfOGDoeGDkOGDkOGDl+GDmHzhg5Phg6bhg5R84YOX4YOV4YOUKS8pLnRlc3QocykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvKOGDmHzhg5QpJC8sICfhg5jhg6Eg4YOs4YOY4YOcJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgoL+GDrOGDlOGDmuGDmC8pLnRlc3QocykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgv4YOs4YOU4YOa4YOYJC8sICfhg6zhg5rhg5jhg6Eg4YOs4YOY4YOcJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHMgOiAn4YOg4YOQ4YOb4YOT4YOU4YOc4YOY4YOb4YOUIOGDrOGDkOGDm+GDmCcsXG4gICAgICAgICAgICBzcyA6ICclZCDhg6zhg5Dhg5vhg5gnLFxuICAgICAgICAgICAgbSA6ICfhg6zhg6Phg5fhg5gnLFxuICAgICAgICAgICAgbW0gOiAnJWQg4YOs4YOj4YOX4YOYJyxcbiAgICAgICAgICAgIGggOiAn4YOh4YOQ4YOQ4YOX4YOYJyxcbiAgICAgICAgICAgIGhoIDogJyVkIOGDoeGDkOGDkOGDl+GDmCcsXG4gICAgICAgICAgICBkIDogJ+GDk+GDpuGDlCcsXG4gICAgICAgICAgICBkZCA6ICclZCDhg5Phg6bhg5QnLFxuICAgICAgICAgICAgTSA6ICfhg5fhg5Xhg5QnLFxuICAgICAgICAgICAgTU0gOiAnJWQg4YOX4YOV4YOUJyxcbiAgICAgICAgICAgIHkgOiAn4YOs4YOU4YOa4YOYJyxcbiAgICAgICAgICAgIHl5IDogJyVkIOGDrOGDlOGDmuGDmCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogLzB8MS3hg5rhg5h84YOb4YOULVxcZHsxLDJ9fFxcZHsxLDJ9LeGDlC8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3hg5rhg5gnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChudW1iZXIgPCAyMCkgfHwgKG51bWJlciA8PSAxMDAgJiYgKG51bWJlciAlIDIwID09PSAwKSkgfHwgKG51bWJlciAlIDEwMCA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+GDm+GDlC0nICsgbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct4YOUJztcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsXG4gICAgICAgICAgICBkb3kgOiA3XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBrYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAwOiAnLdGI0ZYnLFxuICAgICAgICAxOiAnLdGI0ZYnLFxuICAgICAgICAyOiAnLdGI0ZYnLFxuICAgICAgICAzOiAnLdGI0ZYnLFxuICAgICAgICA0OiAnLdGI0ZYnLFxuICAgICAgICA1OiAnLdGI0ZYnLFxuICAgICAgICA2OiAnLdGI0YsnLFxuICAgICAgICA3OiAnLdGI0ZYnLFxuICAgICAgICA4OiAnLdGI0ZYnLFxuICAgICAgICA5OiAnLdGI0YsnLFxuICAgICAgICAxMDogJy3RiNGLJyxcbiAgICAgICAgMjA6ICct0YjRiycsXG4gICAgICAgIDMwOiAnLdGI0YsnLFxuICAgICAgICA0MDogJy3RiNGLJyxcbiAgICAgICAgNTA6ICct0YjRlicsXG4gICAgICAgIDYwOiAnLdGI0YsnLFxuICAgICAgICA3MDogJy3RiNGWJyxcbiAgICAgICAgODA6ICct0YjRlicsXG4gICAgICAgIDkwOiAnLdGI0YsnLFxuICAgICAgICAxMDA6ICct0YjRlidcbiAgICB9O1xuXG4gICAgdmFyIGtrID0gbW9tZW50LmRlZmluZUxvY2FsZSgna2snLCB7XG4gICAgICAgIG1vbnRocyA6ICfSm9Cw0qPRgtCw0YBf0LDSm9C/0LDQvV/QvdCw0YPRgNGL0Ldf0YHTmdGD0ZbRgF/QvNCw0LzRi9GAX9C80LDRg9GB0YvQvF/RiNGW0LvQtNC1X9GC0LDQvNGL0Ldf0pvRi9GA0LrSr9C50LXQul/Sm9Cw0LfQsNC9X9Kb0LDRgNCw0YjQsF/QttC10LvRgtC+0pvRgdCw0L0nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9Kb0LDSo1/QsNKb0L9f0L3QsNGDX9GB05nRg1/QvNCw0Lxf0LzQsNGDX9GI0ZbQu1/RgtCw0Lxf0pvRi9GAX9Kb0LDQt1/Sm9Cw0YBf0LbQtdC7Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfQttC10LrRgdC10L3QsdGWX9C00q/QudGB0LXQvdCx0ZZf0YHQtdC50YHQtdC90LHRll/RgdOZ0YDRgdC10L3QsdGWX9Cx0LXQudGB0LXQvdCx0ZZf0LbSsdC80LBf0YHQtdC90LHRlicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfQttC10Lpf0LTSr9C5X9GB0LXQuV/RgdOZ0YBf0LHQtdC5X9C20rHQvF/RgdC10L0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9C20Lpf0LTQuV/RgdC5X9GB0YBf0LHQuV/QttC8X9GB0L0nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vQkdKv0LPRltC9INGB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9CV0YDRgtC10qMg0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb0JrQtdGI0LUg0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW9Oo0YLQutC10L0g0LDQv9GC0LDQvdGL0qNdIGRkZGQgW9GB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDRltGI0ZbQvdC00LUnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDQsdKx0YDRi9C9JyxcbiAgICAgICAgICAgIHMgOiAn0LHRltGA0L3QtdGI0LUg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIHNzIDogJyVkINGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBtIDogJ9Cx0ZbRgCDQvNC40L3Rg9GCJyxcbiAgICAgICAgICAgIG1tIDogJyVkINC80LjQvdGD0YInLFxuICAgICAgICAgICAgaCA6ICfQsdGW0YAg0YHQsNKT0LDRgicsXG4gICAgICAgICAgICBoaCA6ICclZCDRgdCw0pPQsNGCJyxcbiAgICAgICAgICAgIGQgOiAn0LHRltGAINC60q/QvScsXG4gICAgICAgICAgICBkZCA6ICclZCDQutKv0L0nLFxuICAgICAgICAgICAgTSA6ICfQsdGW0YAg0LDQuScsXG4gICAgICAgICAgICBNTSA6ICclZCDQsNC5JyxcbiAgICAgICAgICAgIHkgOiAn0LHRltGAINC20YvQuycsXG4gICAgICAgICAgICB5eSA6ICclZCDQttGL0LsnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0YjRlnzRiNGLKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGIgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbbnVtYmVyXSB8fCBzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGtrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfhn6EnLFxuICAgICAgICAnMic6ICfhn6InLFxuICAgICAgICAnMyc6ICfhn6MnLFxuICAgICAgICAnNCc6ICfhn6QnLFxuICAgICAgICAnNSc6ICfhn6UnLFxuICAgICAgICAnNic6ICfhn6YnLFxuICAgICAgICAnNyc6ICfhn6cnLFxuICAgICAgICAnOCc6ICfhn6gnLFxuICAgICAgICAnOSc6ICfhn6knLFxuICAgICAgICAnMCc6ICfhn6AnXG4gICAgfSwgbnVtYmVyTWFwID0ge1xuICAgICAgICAn4Z+hJzogJzEnLFxuICAgICAgICAn4Z+iJzogJzInLFxuICAgICAgICAn4Z+jJzogJzMnLFxuICAgICAgICAn4Z+kJzogJzQnLFxuICAgICAgICAn4Z+lJzogJzUnLFxuICAgICAgICAn4Z+mJzogJzYnLFxuICAgICAgICAn4Z+nJzogJzcnLFxuICAgICAgICAn4Z+oJzogJzgnLFxuICAgICAgICAn4Z+pJzogJzknLFxuICAgICAgICAn4Z+gJzogJzAnXG4gICAgfTtcblxuICAgIHZhciBrbSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ttJywge1xuICAgICAgICBtb250aHM6ICfhnpjhnoDhnprhnrZf4Z6A4Z674Z6Y4Z+S4Z6X4Z+IX+GemOGeuOGek+Getl/hnpjhn4Hhnp/hnrZf4Z6n4Z6f4Z6X4Z62X+GemOGet+GekOGeu+Gek+Getl/hnoDhnoDhn5LhnoDhnorhnrZf4Z6f4Z644Z6g4Z62X+GegOGeieGfkuGeieGetl/hno/hnrvhnpvhnrZf4Z6c4Z634Z6F4Z+S4Z6G4Z634Z6A4Z62X+GekuGfkuGek+GevCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfhnpjhnoDhnprhnrZf4Z6A4Z674Z6Y4Z+S4Z6X4Z+IX+GemOGeuOGek+Getl/hnpjhn4Hhnp/hnrZf4Z6n4Z6f4Z6X4Z62X+GemOGet+GekOGeu+Gek+Getl/hnoDhnoDhn5LhnoDhnorhnrZf4Z6f4Z644Z6g4Z62X+GegOGeieGfkuGeieGetl/hno/hnrvhnpvhnrZf4Z6c4Z634Z6F4Z+S4Z6G4Z634Z6A4Z62X+GekuGfkuGek+GevCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfhnqLhnrbhnpHhnrfhno/hn5Lhnplf4Z6F4Z+Q4Z6T4Z+S4Z6RX+GeouGehOGfkuGeguGetuGeml/hnpbhnrvhnpJf4Z6W4Z+S4Z6a4Z6g4Z6f4Z+S4Z6U4Z6P4Z634Z+NX+Gen+Geu+GegOGfkuGeml/hnp/hn4Xhnprhn40nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfhnqLhnrZf4Z6FX+Geol/hnpZf4Z6W4Z+S4Z6aX+Gen+Geu1/hnp8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4Z6i4Z62X+GehV/hnqJf4Z6WX+GeluGfkuGeml/hnp/hnrtf4Z6fJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4Z6W4Z+S4Z6a4Z654Z6AfOGem+GfkuGehOGetuGehS8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn4Z6b4Z+S4Z6E4Z624Z6FJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+GeluGfkuGemuGeueGegCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Z6b4Z+S4Z6E4Z624Z6FJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4Z6Q4Z+S4Z6E4Z+D4Z6T4Z+B4Z+HIOGemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vhnp/hn5LhnqLhn4LhnoAg4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW+GemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vhnpjhn5Lhnp/hnrfhnpvhnpjhnrfhnokg4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW+Gen+GelOGfkuGej+GetuGeoOGfjeGemOGeu+Gek10gW+GemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz4Z6R4Z+A4Z6PJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+GemOGeu+GekycsXG4gICAgICAgICAgICBzOiAn4Z6U4Z+J4Z674Z6T4Z+S4Z6Y4Z624Z6T4Z6c4Z634Z6T4Z624Z6R4Z64JyxcbiAgICAgICAgICAgIHNzOiAnJWQg4Z6c4Z634Z6T4Z624Z6R4Z64JyxcbiAgICAgICAgICAgIG06ICfhnpjhnr3hnpnhnpPhnrbhnpHhnrgnLFxuICAgICAgICAgICAgbW06ICclZCDhnpPhnrbhnpHhnrgnLFxuICAgICAgICAgICAgaDogJ+GemOGeveGemeGemOGfieGfhOGehCcsXG4gICAgICAgICAgICBoaDogJyVkIOGemOGfieGfhOGehCcsXG4gICAgICAgICAgICBkOiAn4Z6Y4Z694Z6Z4Z6Q4Z+S4Z6E4Z+DJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4Z6Q4Z+S4Z6E4Z+DJyxcbiAgICAgICAgICAgIE06ICfhnpjhnr3hnpnhnoHhn4InLFxuICAgICAgICAgICAgTU06ICclZCDhnoHhn4InLFxuICAgICAgICAgICAgeTogJ+GemOGeveGemeGehuGfkuGek+GetuGfhicsXG4gICAgICAgICAgICB5eTogJyVkIOGehuGfkuGek+GetuGfhidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC/hnpHhnrhcXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWwgOiAn4Z6R4Z64JWQnLFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Z+h4Z+i4Z+j4Z+k4Z+l4Z+m4Z+n4Z+o4Z+p4Z+gXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0IC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGttO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfgs6cnLFxuICAgICAgICAnMic6ICfgs6gnLFxuICAgICAgICAnMyc6ICfgs6knLFxuICAgICAgICAnNCc6ICfgs6onLFxuICAgICAgICAnNSc6ICfgs6snLFxuICAgICAgICAnNic6ICfgs6wnLFxuICAgICAgICAnNyc6ICfgs60nLFxuICAgICAgICAnOCc6ICfgs64nLFxuICAgICAgICAnOSc6ICfgs68nLFxuICAgICAgICAnMCc6ICfgs6YnXG4gICAgfSxcbiAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICfgs6cnOiAnMScsXG4gICAgICAgICfgs6gnOiAnMicsXG4gICAgICAgICfgs6knOiAnMycsXG4gICAgICAgICfgs6onOiAnNCcsXG4gICAgICAgICfgs6snOiAnNScsXG4gICAgICAgICfgs6wnOiAnNicsXG4gICAgICAgICfgs60nOiAnNycsXG4gICAgICAgICfgs64nOiAnOCcsXG4gICAgICAgICfgs68nOiAnOScsXG4gICAgICAgICfgs6YnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIGtuID0gbW9tZW50LmRlZmluZUxvY2FsZSgna24nLCB7XG4gICAgICAgIG1vbnRocyA6ICfgspzgsqjgsrXgsrDgsr9f4LKr4LOG4LKs4LON4LKw4LK14LKw4LK/X+CyruCyvuCysOCzjeCymuCzjV/gso/gsqrgs43gsrDgsr/gsrLgs41f4LKu4LOG4LOVX+CynOCzguCyqOCzjV/gspzgs4HgsrLgs4bgs5Zf4LKG4LKX4LK44LON4LKf4LONX+CyuOCzhuCyquCzjeCyn+CzhuCyguCyrOCysOCzjV/gsoXgspXgs43gsp/gs4bgs4Lgs5XgsqzgsrDgs41f4LKo4LK14LOG4LKC4LKs4LKw4LONX+CyoeCyv+CyuOCzhuCyguCyrOCysOCzjScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4LKc4LKoX+Cyq+CzhuCyrOCzjeCysF/gsq7gsr7gsrDgs43gsprgs41f4LKP4LKq4LON4LKw4LK/4LKy4LONX+CyruCzhuCzlV/gspzgs4Lgsqjgs41f4LKc4LOB4LKy4LOG4LOWX+CyhuCyl+CyuOCzjeCyn+CzjV/gsrjgs4bgsqrgs43gsp/gs4bgsoJf4LKF4LKV4LON4LKf4LOG4LOC4LOVX+CyqOCyteCzhuCygl/gsqHgsr/gsrjgs4bgsoInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ+CyreCyvuCyqOCzgeCyteCyvuCysF/gsrjgs4bgs4Lgs5Xgsq7gsrXgsr7gsrBf4LKu4LKC4LKX4LKz4LK14LK+4LKwX+CyrOCzgeCyp+CyteCyvuCysF/gspfgs4HgsrDgs4HgsrXgsr7gsrBf4LK24LOB4LKV4LON4LKw4LK14LK+4LKwX+CytuCyqOCyv+CyteCyvuCysCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgsq3gsr7gsqjgs4Ff4LK44LOG4LOC4LOV4LKuX+CyruCyguCyl+Cys1/gsqzgs4Hgsqdf4LKX4LOB4LKw4LOBX+CytuCzgeCyleCzjeCysF/gsrbgsqjgsr8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+CyreCyvl/gsrjgs4bgs4Lgs5Vf4LKu4LKCX+CyrOCzgV/gspfgs4Ff4LK24LOBX+Cyticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0EgaDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+Cyh+CyguCypuCzgV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4LKo4LK+4LKz4LOGXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgsqjgsr/gsqjgs43gsqjgs4ZdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vgspXgs4bgs4Lgsqjgs4bgsq9dIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDgsqjgsoLgsqTgsrAnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDgsrngsr/gsoLgsqbgs4YnLFxuICAgICAgICAgICAgcyA6ICfgspXgs4bgsrLgsrXgs4Eg4LKV4LON4LK34LKj4LKX4LKz4LOBJyxcbiAgICAgICAgICAgIHNzIDogJyVkIOCyuOCzhuCyleCzhuCyguCyoeCzgeCyl+Cys+CzgScsXG4gICAgICAgICAgICBtIDogJ+CykuCyguCypuCzgSDgsqjgsr/gsq7gsr/gsrcnLFxuICAgICAgICAgICAgbW0gOiAnJWQg4LKo4LK/4LKu4LK/4LK3JyxcbiAgICAgICAgICAgIGggOiAn4LKS4LKC4LKm4LOBIOCyl+CyguCyn+CzhicsXG4gICAgICAgICAgICBoaCA6ICclZCDgspfgsoLgsp/gs4YnLFxuICAgICAgICAgICAgZCA6ICfgspLgsoLgsqbgs4Eg4LKm4LK/4LKoJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOCypuCyv+CyqCcsXG4gICAgICAgICAgICBNIDogJ+CykuCyguCypuCzgSDgsqTgsr/gsoLgspfgsrPgs4EnLFxuICAgICAgICAgICAgTU0gOiAnJWQg4LKk4LK/4LKC4LKX4LKz4LOBJyxcbiAgICAgICAgICAgIHkgOiAn4LKS4LKC4LKm4LOBIOCyteCysOCzjeCytycsXG4gICAgICAgICAgICB5eSA6ICclZCDgsrXgsrDgs43gsrcnXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgs6fgs6jgs6ngs6rgs6vgs6zgs63gs67gs6/gs6ZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gsrDgsr7gsqTgs43gsrDgsr984LKs4LOG4LKz4LK/4LKX4LON4LKX4LOGfOCyruCyp+CzjeCyr+CyvuCyueCzjeCyqHzgsrjgsoLgspzgs4YvLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4LKw4LK+4LKk4LON4LKw4LK/Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LKs4LOG4LKz4LK/4LKX4LON4LKX4LOGJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CyruCyp+CzjeCyr+CyvuCyueCzjeCyqCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LK44LKC4LKc4LOGJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsrDgsr7gsqTgs43gsrDgsr8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CyrOCzhuCys+Cyv+Cyl+CzjeCyl+Czhic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LKu4LKn4LON4LKv4LK+4LK54LON4LKoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsrjgsoLgspzgs4YnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CysOCyvuCypOCzjeCysOCyvyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjgsqjgs4bgs5UpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn4LKo4LOG4LOVJztcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ga247XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBrbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2tvJywge1xuICAgICAgICBtb250aHMgOiAnMeyblF8y7JuUXzPsm5RfNOyblF817JuUXzbsm5RfN+yblF847JuUXznsm5RfMTDsm5RfMTHsm5RfMTLsm5QnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJzHsm5RfMuyblF8z7JuUXzTsm5RfNeyblF827JuUXzfsm5RfOOyblF857JuUXzEw7JuUXzEx7JuUXzEy7JuUJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfsnbzsmpTsnbxf7JuU7JqU7J28X+2ZlOyalOydvF/siJjsmpTsnbxf66qp7JqU7J28X+q4iOyalOydvF/thqDsmpTsnbwnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn7J28X+yblF/tmZRf7IiYX+uqqV/quIhf7YagJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfsnbxf7JuUX+2ZlF/siJhf66qpX+q4iF/thqAnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnQSBoOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdZWVlZLk1NLkRELicsXG4gICAgICAgICAgICBMTCA6ICdZWVlZ64WEIE1NTU0gROydvCcsXG4gICAgICAgICAgICBMTEwgOiAnWVlZWeuFhCBNTU1NIETsnbwgQSBoOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnWVlZWeuFhCBNTU1NIETsnbwgZGRkZCBBIGg6bW0nLFxuICAgICAgICAgICAgbCA6ICdZWVlZLk1NLkRELicsXG4gICAgICAgICAgICBsbCA6ICdZWVlZ64WEIE1NTU0gROydvCcsXG4gICAgICAgICAgICBsbGwgOiAnWVlZWeuFhCBNTU1NIETsnbwgQSBoOm1tJyxcbiAgICAgICAgICAgIGxsbGwgOiAnWVlZWeuFhCBNTU1NIETsnbwgZGRkZCBBIGg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICfsmKTripggTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICfrgrTsnbwgTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ+yWtOygnCBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICfsp4Drgpzso7wgZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg7ZuEJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg7KCEJyxcbiAgICAgICAgICAgIHMgOiAn66qHIOy0iCcsXG4gICAgICAgICAgICBzcyA6ICclZOy0iCcsXG4gICAgICAgICAgICBtIDogJzHrtoQnLFxuICAgICAgICAgICAgbW0gOiAnJWTrtoQnLFxuICAgICAgICAgICAgaCA6ICftlZwg7Iuc6rCEJyxcbiAgICAgICAgICAgIGhoIDogJyVk7Iuc6rCEJyxcbiAgICAgICAgICAgIGQgOiAn7ZWY66OoJyxcbiAgICAgICAgICAgIGRkIDogJyVk7J28JyxcbiAgICAgICAgICAgIE0gOiAn7ZWcIOuLrCcsXG4gICAgICAgICAgICBNTSA6ICclZOuLrCcsXG4gICAgICAgICAgICB5IDogJ+ydvCDrhYQnLFxuICAgICAgICAgICAgeXkgOiAnJWTrhYQnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn0o7J28fOyblHzso7wpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+ydvCc7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn7JuUJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfso7wnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2UgOiAv7Jik7KCEfOyYpO2bhC8sXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbiA9PT0gJ+yYpO2bhCc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNVcHBlcikge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCAxMiA/ICfsmKTsoIQnIDogJ+yYpO2bhCc7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBrbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn2aEnLFxuICAgICAgICAnMic6ICfZoicsXG4gICAgICAgICczJzogJ9mjJyxcbiAgICAgICAgJzQnOiAn2aQnLFxuICAgICAgICAnNSc6ICfZpScsXG4gICAgICAgICc2JzogJ9mmJyxcbiAgICAgICAgJzcnOiAn2acnLFxuICAgICAgICAnOCc6ICfZqCcsXG4gICAgICAgICc5JzogJ9mpJyxcbiAgICAgICAgJzAnOiAn2aAnXG4gICAgfSwgbnVtYmVyTWFwID0ge1xuICAgICAgICAn2aEnOiAnMScsXG4gICAgICAgICfZoic6ICcyJyxcbiAgICAgICAgJ9mjJzogJzMnLFxuICAgICAgICAn2aQnOiAnNCcsXG4gICAgICAgICfZpSc6ICc1JyxcbiAgICAgICAgJ9mmJzogJzYnLFxuICAgICAgICAn2acnOiAnNycsXG4gICAgICAgICfZqCc6ICc4JyxcbiAgICAgICAgJ9mpJzogJzknLFxuICAgICAgICAn2aAnOiAnMCdcbiAgICB9LFxuICAgIG1vbnRocyA9IFtcbiAgICAgICAgJ9qp2KfZhtmI2YbbjCDYr9mI2YjbldmFJyxcbiAgICAgICAgJ9i02YjYqNin2KonLFxuICAgICAgICAn2KbYp9iy2KfYsScsXG4gICAgICAgICfZhtuM2LPYp9mGJyxcbiAgICAgICAgJ9im2KfbjNin2LEnLFxuICAgICAgICAn2K3ZiNiy25XbjNix2KfZhicsXG4gICAgICAgICfYqtuV2YXZhdmI2LInLFxuICAgICAgICAn2KbYp9ioJyxcbiAgICAgICAgJ9im25XbjNmE2YjZiNmEJyxcbiAgICAgICAgJ9iq2LTYsduM2YbbjCDbjNuV2YPbldmFJyxcbiAgICAgICAgJ9iq2LTYsduM2YbbjCDYr9mI2YjbldmFJyxcbiAgICAgICAgJ9mD2KfZhtmI2YbbjCDbjNuV2qnbldmFJ1xuICAgIF07XG5cblxuICAgIHZhciBrdSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2t1Jywge1xuICAgICAgICBtb250aHMgOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0IDogbW9udGhzLFxuICAgICAgICB3ZWVrZGF5cyA6ICfbjNmH4oCM2YPYtNmH4oCM2YXZhdmH4oCMX9iv2YjZiNi02YfigIzZhdmF2YfigIxf2LPbjti02YfigIzZhdmF2YfigIxf2obZiNin2LHYtNmH4oCM2YXZhdmH4oCMX9m+247Zhtis2LTZh+KAjNmF2YXZh+KAjF/Zh9mH4oCM24zZhtuMX9i02YfigIzZhdmF2YfigIwnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn24zZh+KAjNmD2LTZh+KAjNmFX9iv2YjZiNi02YfigIzZhV/Ys9uO2LTZh+KAjNmFX9qG2YjYp9ix2LTZh+KAjNmFX9m+247Zhtis2LTZh+KAjNmFX9mH2YfigIzbjNmG24xf2LTZh+KAjNmF2YXZh+KAjCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn24xf2K9f2LNf2oZf2b5f2Ydf2LQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9im247ZiNin2LHZh+KAjHzYqNmH4oCM24zYp9mG24wvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAv2KbbjtmI2KfYsdmH4oCMLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYqNmH4oCM24zYp9mG24wnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9im247ZiNin2LHZh+KAjCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb2KbZh+KAjNmF2LHbhiDZg9in2KramNmF247YsV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb2KjZh+KAjNuM2KfZhtuMINmD2KfYqtqY2YXbjtixXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvZg9in2KramNmF247YsV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb2K/ZiNuO2YbbjiDZg9in2KramNmF247YsV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBb2YPYp9iq2pjZhduO2LFdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfZhNmH4oCMICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMnLFxuICAgICAgICAgICAgcyA6ICfahtmH4oCM2YbYryDahtix2YPZh+KAjNuM2YfigIzZgycsXG4gICAgICAgICAgICBzcyA6ICfahtix2YPZh+KAjCAlZCcsXG4gICAgICAgICAgICBtIDogJ9uM2YfigIzZgyDYrtmI2YTZh+KAjNmDJyxcbiAgICAgICAgICAgIG1tIDogJyVkINiu2YjZhNmH4oCM2YMnLFxuICAgICAgICAgICAgaCA6ICfbjNmH4oCM2YMg2YPYp9iq2pjZhduO2LEnLFxuICAgICAgICAgICAgaGggOiAnJWQg2YPYp9iq2pjZhduO2LEnLFxuICAgICAgICAgICAgZCA6ICfbjNmH4oCM2YMg2pXbhtqYJyxcbiAgICAgICAgICAgIGRkIDogJyVkINqV24bamCcsXG4gICAgICAgICAgICBNIDogJ9uM2YfigIzZgyDZhdin2YbarycsXG4gICAgICAgICAgICBNTSA6ICclZCDZhdin2YbarycsXG4gICAgICAgICAgICB5IDogJ9uM2YfigIzZgyDYs9in2rUnLFxuICAgICAgICAgICAgeXkgOiAnJWQg2LPYp9q1J1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b2aHZotmj2aTZpdmm2afZqNmp2aBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSkucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KS5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBrdTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAwOiAnLdGH0q8nLFxuICAgICAgICAxOiAnLdGH0LgnLFxuICAgICAgICAyOiAnLdGH0LgnLFxuICAgICAgICAzOiAnLdGH0q8nLFxuICAgICAgICA0OiAnLdGH0q8nLFxuICAgICAgICA1OiAnLdGH0LgnLFxuICAgICAgICA2OiAnLdGH0YsnLFxuICAgICAgICA3OiAnLdGH0LgnLFxuICAgICAgICA4OiAnLdGH0LgnLFxuICAgICAgICA5OiAnLdGH0YMnLFxuICAgICAgICAxMDogJy3Rh9GDJyxcbiAgICAgICAgMjA6ICct0YfRiycsXG4gICAgICAgIDMwOiAnLdGH0YMnLFxuICAgICAgICA0MDogJy3Rh9GLJyxcbiAgICAgICAgNTA6ICct0YfSrycsXG4gICAgICAgIDYwOiAnLdGH0YsnLFxuICAgICAgICA3MDogJy3Rh9C4JyxcbiAgICAgICAgODA6ICct0YfQuCcsXG4gICAgICAgIDkwOiAnLdGH0YMnLFxuICAgICAgICAxMDA6ICct0YfSrydcbiAgICB9O1xuXG4gICAgdmFyIGt5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgna3knLCB7XG4gICAgICAgIG1vbnRocyA6ICfRj9C90LLQsNGA0Yxf0YTQtdCy0YDQsNC70Yxf0LzQsNGA0YJf0LDQv9GA0LXQu9GMX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LPRg9GB0YJf0YHQtdC90YLRj9Cx0YDRjF/QvtC60YLRj9Cx0YDRjF/QvdC+0Y/QsdGA0Yxf0LTQtdC60LDQsdGA0YwnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9GP0L3Qsl/RhNC10LJf0LzQsNGA0YJf0LDQv9GAX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LNf0YHQtdC9X9C+0LrRgl/QvdC+0Y9f0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfQltC10LrRiNC10LzQsdC4X9CU0q/QudGI06nQvNCx0q9f0KjQtdC50YjQtdC80LHQuF/QqNCw0YDRiNC10LzQsdC4X9CR0LXQudGI0LXQvNCx0Lhf0JbRg9C80LBf0JjRiNC10LzQsdC4Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9CW0LXQul/QlNKv0Llf0KjQtdC5X9Co0LDRgF/QkdC10Llf0JbRg9C8X9CY0YjQtScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0JbQul/QlNC5X9Co0Llf0KjRgF/QkdC5X9CW0Lxf0JjRiCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9CR0q/Qs9Kv0L0g0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9Ct0YDRgtC10qMg0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9GB0LDQsNGCXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vQmtC10YfRjdGNINGB0LDQsNGCXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb06jRgtC606nQvSDQsNC/0YLQsNC90YvQvV0gZGRkZCBb0LrSr9C90q9dIFvRgdCw0LDRgl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzINC40YfQuNC90LTQtScsXG4gICAgICAgICAgICBwYXN0IDogJyVzINC80YPRgNGD0L0nLFxuICAgICAgICAgICAgcyA6ICfQsdC40YDQvdC10YfQtSDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgc3MgOiAnJWQg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIG0gOiAn0LHQuNGAINC80q/QvdOp0YInLFxuICAgICAgICAgICAgbW0gOiAnJWQg0LzSr9C906nRgicsXG4gICAgICAgICAgICBoIDogJ9Cx0LjRgCDRgdCw0LDRgicsXG4gICAgICAgICAgICBoaCA6ICclZCDRgdCw0LDRgicsXG4gICAgICAgICAgICBkIDogJ9Cx0LjRgCDQutKv0L0nLFxuICAgICAgICAgICAgZGQgOiAnJWQg0LrSr9C9JyxcbiAgICAgICAgICAgIE0gOiAn0LHQuNGAINCw0LknLFxuICAgICAgICAgICAgTU0gOiAnJWQg0LDQuScsXG4gICAgICAgICAgICB5IDogJ9Cx0LjRgCDQttGL0LsnLFxuICAgICAgICAgICAgeXkgOiAnJWQg0LbRi9C7J1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNGH0Lh80YfRi3zRh9KvfNGH0YMpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgYiA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1tudW1iZXJdIHx8IHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ga3k7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAnbSc6IFsnZW5nIE1pbnV0dCcsICdlbmdlciBNaW51dHQnXSxcbiAgICAgICAgICAgICdoJzogWydlbmcgU3Rvbm4nLCAnZW5nZXIgU3Rvbm4nXSxcbiAgICAgICAgICAgICdkJzogWydlZW4gRGFnJywgJ2VuZ2VtIERhZyddLFxuICAgICAgICAgICAgJ00nOiBbJ2VlIE1vdW50JywgJ2VuZ2VtIE1vdW50J10sXG4gICAgICAgICAgICAneSc6IFsnZWUgSm9lcicsICdlbmdlbSBKb2VyJ11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9jZXNzRnV0dXJlVGltZShzdHJpbmcpIHtcbiAgICAgICAgdmFyIG51bWJlciA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YoJyAnKSk7XG4gICAgICAgIGlmIChlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKSkge1xuICAgICAgICAgICAgcmV0dXJuICdhICcgKyBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdhbiAnICsgc3RyaW5nO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9jZXNzUGFzdFRpbWUoc3RyaW5nKSB7XG4gICAgICAgIHZhciBudW1iZXIgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKCcgJykpO1xuICAgICAgICBpZiAoZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKG51bWJlcikpIHtcbiAgICAgICAgICAgIHJldHVybiAndmlydSAnICsgc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAndmlydW4gJyArIHN0cmluZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB3b3JkIGJlZm9yZSB0aGUgZ2l2ZW4gbnVtYmVyIGxvc2VzIHRoZSAnLW4nIGVuZGluZy5cbiAgICAgKiBlLmcuICdhbiAxMCBEZWVnJyBidXQgJ2EgNSBEZWVnJ1xuICAgICAqXG4gICAgICogQHBhcmFtIG51bWJlciB7aW50ZWdlcn1cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKSB7XG4gICAgICAgIG51bWJlciA9IHBhcnNlSW50KG51bWJlciwgMTApO1xuICAgICAgICBpZiAoaXNOYU4obnVtYmVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICAvLyBOZWdhdGl2ZSBOdW1iZXIgLS0+IGFsd2F5cyB0cnVlXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCAxMCkge1xuICAgICAgICAgICAgLy8gT25seSAxIGRpZ2l0XG4gICAgICAgICAgICBpZiAoNCA8PSBudW1iZXIgJiYgbnVtYmVyIDw9IDcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCAxMDApIHtcbiAgICAgICAgICAgIC8vIDIgZGlnaXRzXG4gICAgICAgICAgICB2YXIgbGFzdERpZ2l0ID0gbnVtYmVyICUgMTAsIGZpcnN0RGlnaXQgPSBudW1iZXIgLyAxMDtcbiAgICAgICAgICAgIGlmIChsYXN0RGlnaXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKGZpcnN0RGlnaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihsYXN0RGlnaXQpO1xuICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDEwMDAwKSB7XG4gICAgICAgICAgICAvLyAzIG9yIDQgZGlnaXRzIC0tPiByZWN1cnNpdmVseSBjaGVjayBmaXJzdCBkaWdpdFxuICAgICAgICAgICAgd2hpbGUgKG51bWJlciA+PSAxMCkge1xuICAgICAgICAgICAgICAgIG51bWJlciA9IG51bWJlciAvIDEwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQW55dGhpbmcgbGFyZ2VyIHRoYW4gNCBkaWdpdHM6IHJlY3Vyc2l2ZWx5IGNoZWNrIGZpcnN0IG4tMyBkaWdpdHNcbiAgICAgICAgICAgIG51bWJlciA9IG51bWJlciAvIDEwMDA7XG4gICAgICAgICAgICByZXR1cm4gZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsYicsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyX0ZlYnJ1YXJfTcOkZXJ6X0FicsOrbGxfTWVlX0p1bmlfSnVsaV9BdWd1c3RfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGV6ZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuLl9GZWJyLl9NcnouX0Fici5fTWVlX0p1bi5fSnVsLl9BdWcuX1NlcHQuX09rdC5fTm92Ll9EZXouJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdTb25uZGVnX03DqWluZGVnX0TDq25zY2hkZWdfTcOrdHR3b2NoX0Rvbm5lc2NoZGVnX0ZyZWlkZWdfU2Ftc2NoZGVnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU28uX03DqS5fRMOrLl9Nw6suX0RvLl9Gci5fU2EuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1NvX03DqV9Ew6tfTcOrX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tIFtBdWVyXScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzIFtBdWVyXScsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbSBbQXVlcl0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tIFtBdWVyXSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSGF1dCB1bV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbTXVlciB1bV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt1bV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tHw6tzY2h0ZXIgdW1dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gRGlmZmVyZW50IGRhdGUgc3RyaW5nIGZvciAnRMOrbnNjaGRlZycgKFR1ZXNkYXkpIGFuZCAnRG9ubmVzY2hkZWcnIChUaHVyc2RheSkgZHVlIHRvIHBob25vbG9naWNhbCBydWxlXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbTGVzY2h0ZW5dIGRkZGQgW3VtXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tMZXNjaHRlXSBkZGRkIFt1bV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogcHJvY2Vzc0Z1dHVyZVRpbWUsXG4gICAgICAgICAgICBwYXN0IDogcHJvY2Vzc1Bhc3RUaW1lLFxuICAgICAgICAgICAgcyA6ICdlIHB1ZXIgU2Vrb25uZW4nLFxuICAgICAgICAgICAgc3MgOiAnJWQgU2Vrb25uZW4nLFxuICAgICAgICAgICAgbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbSA6ICclZCBNaW51dHRlbicsXG4gICAgICAgICAgICBoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoIDogJyVkIFN0b25uZW4nLFxuICAgICAgICAgICAgZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZCA6ICclZCBEZWVnJyxcbiAgICAgICAgICAgIE0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU0gOiAnJWQgTcOpaW50JyxcbiAgICAgICAgICAgIHkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXkgOiAnJWQgSm9lcidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGxiO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbG8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsbycsIHtcbiAgICAgICAgbW9udGhzIDogJ+C6oeC6seC6h+C6geC6reC6mV/guoHgurjguqHgup7gurJf4Lqh4Lq14LqZ4LqyX+C7gOC6oeC6quC6sl/gup7gurbgupTguqrgurDgup7gurJf4Lqh4Lq04LqW4Lq44LqZ4LqyX+C6geC7jeC6peC6sOC6geC6u+C6lF/guqrgurTguofguqvgurJf4LqB4Lqx4LqZ4LqN4LqyX+C6leC6uOC6peC6sl/gup7gurDguojgurTguoFf4LqX4Lqx4LqZ4Lqn4LqyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfguqHgurHguofguoHguq3guplf4LqB4Lq44Lqh4Lqe4LqyX+C6oeC6teC6meC6sl/gu4DguqHguqrgurJf4Lqe4Lq24LqU4Lqq4Lqw4Lqe4LqyX+C6oeC6tOC6luC6uOC6meC6sl/guoHgu43guqXgurDguoHgurvgupRf4Lqq4Lq04LqH4Lqr4LqyX+C6geC6seC6meC6jeC6sl/gupXgurjguqXgurJf4Lqe4Lqw4LqI4Lq04LqBX+C6l+C6seC6meC6p+C6sicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn4Lqt4Lqy4LqX4Lq04LqUX+C6iOC6seC6mV/guq3gurHguofguoTgurLguplf4Lqe4Lq44LqUX+C6nuC6sOC6q+C6seC6lF/guqrgurjguoFf4LuA4Lqq4Lq74LqyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+C6l+C6tOC6lF/guojgurHguplf4Lqt4Lqx4LqH4LqE4Lqy4LqZX+C6nuC6uOC6lF/gup7gurDguqvgurHgupRf4Lqq4Lq44LqBX+C7gOC6quC6u+C6sicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4LqXX+C6iF/guq3guoRf4LqeX+C6nuC6q1/guqrguoFf4LqqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAn4Lqn4Lqx4LqZZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+C6leC6reC6meC7gOC6iuC6u+C7ieC6snzgupXguq3gupngu4HguqXguocvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+C6leC6reC6meC7geC6peC6hyc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LqV4Lqt4LqZ4LuA4LqK4Lq74LuJ4LqyJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgupXguq3gupngu4HguqXguocnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+C6oeC6t+C7ieC6meC6teC7ieC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4Lqh4Lq34LuJ4Lqt4Lq34LuI4LqZ4LuA4Lqn4Lql4LqyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdb4Lqn4Lqx4LqZXWRkZGRb4Luc4LuJ4Lqy4LuA4Lqn4Lql4LqyXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vguqHgurfgu4nguqfgurLgupngupngurXgu4ngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vguqfgurHgupldZGRkZFvgu4HguqXgu4nguqfgupngurXgu4ngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfguq3gurXguoEgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclc+C6nOC7iOC6suC6meC6oeC6sicsXG4gICAgICAgICAgICBzIDogJ+C6muC7jeC7iOC7gOC6l+C6u+C7iOC6suC7g+C6lOC6p+C6tOC6meC6suC6l+C6tScsXG4gICAgICAgICAgICBzcyA6ICclZCDguqfgurTgupngurLgupfgurUnICxcbiAgICAgICAgICAgIG0gOiAnMSDgupngurLgupfgurUnLFxuICAgICAgICAgICAgbW0gOiAnJWQg4LqZ4Lqy4LqX4Lq1JyxcbiAgICAgICAgICAgIGggOiAnMSDguorgurvgu4jguqfgu4LguqHguocnLFxuICAgICAgICAgICAgaGggOiAnJWQg4LqK4Lq74LuI4Lqn4LuC4Lqh4LqHJyxcbiAgICAgICAgICAgIGQgOiAnMSDguqHgurfgu4knLFxuICAgICAgICAgICAgZGQgOiAnJWQg4Lqh4Lq34LuJJyxcbiAgICAgICAgICAgIE0gOiAnMSDgu4DgupTgurfguq3gupknLFxuICAgICAgICAgICAgTU0gOiAnJWQg4LuA4LqU4Lq34Lqt4LqZJyxcbiAgICAgICAgICAgIHkgOiAnMSDgupvgurUnLFxuICAgICAgICAgICAgeXkgOiAnJWQg4Lqb4Lq1J1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvKOC6l+C6teC7iClcXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+C6l+C6teC7iCcgKyBudW1iZXI7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBsbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHVuaXRzID0ge1xuICAgICAgICAnc3MnIDogJ3Nla3VuZMSXX3Nla3VuZMW+acWzX3Nla3VuZGVzJyxcbiAgICAgICAgJ20nIDogJ21pbnV0xJdfbWludXTEl3NfbWludXTEmScsXG4gICAgICAgICdtbSc6ICdtaW51dMSXc19taW51xI1pxbNfbWludXRlcycsXG4gICAgICAgICdoJyA6ICd2YWxhbmRhX3ZhbGFuZG9zX3ZhbGFuZMSFJyxcbiAgICAgICAgJ2hoJzogJ3ZhbGFuZG9zX3ZhbGFuZMWzX3ZhbGFuZGFzJyxcbiAgICAgICAgJ2QnIDogJ2RpZW5hX2RpZW5vc19kaWVuxIUnLFxuICAgICAgICAnZGQnOiAnZGllbm9zX2RpZW7Fs19kaWVuYXMnLFxuICAgICAgICAnTScgOiAnbcSXbnVvX23El25lc2lvX23El25lc8SvJyxcbiAgICAgICAgJ01NJzogJ23El25lc2lhaV9txJduZXNpxbNfbcSXbmVzaXVzJyxcbiAgICAgICAgJ3knIDogJ21ldGFpX21ldMWzX21ldHVzJyxcbiAgICAgICAgJ3l5JzogJ21ldGFpX21ldMWzX21ldHVzJ1xuICAgIH07XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlU2Vjb25kcyhudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgIHJldHVybiAna2VsaW9zIHNla3VuZMSXcyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAna2VsacWzIHNla3VuZMW+acWzJyA6ICdrZWxpYXMgc2VrdW5kZXMnO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZVNpbmd1bGFyKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1zKGtleSlbMF0gOiAoaXNGdXR1cmUgPyBmb3JtcyhrZXkpWzFdIDogZm9ybXMoa2V5KVsyXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNwZWNpYWwobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMCB8fCAobnVtYmVyID4gMTAgJiYgbnVtYmVyIDwgMjApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIHVuaXRzW2tleV0uc3BsaXQoJ18nKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgdHJhbnNsYXRlU2luZ3VsYXIobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXlbMF0sIGlzRnV0dXJlKTtcbiAgICAgICAgfSBlbHNlIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHNwZWNpYWwobnVtYmVyKSA/IGZvcm1zKGtleSlbMV0gOiBmb3JtcyhrZXkpWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyBmb3JtcyhrZXkpWzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHNwZWNpYWwobnVtYmVyKSA/IGZvcm1zKGtleSlbMV0gOiBmb3JtcyhrZXkpWzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgbHQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsdCcsIHtcbiAgICAgICAgbW9udGhzIDoge1xuICAgICAgICAgICAgZm9ybWF0OiAnc2F1c2lvX3Zhc2FyaW9fa292b19iYWxhbmTFvmlvX2dlZ3XFvsSXc19iaXLFvmVsaW9fbGllcG9zX3J1Z3BqxavEjWlvX3J1Z3PEl2pvX3NwYWxpb19sYXBrcmnEjWlvX2dydW9kxb5pbycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICdzYXVzaXNfdmFzYXJpc19rb3Zhc19iYWxhbmRpc19nZWd1xb7El19iaXLFvmVsaXNfbGllcGFfcnVncGrFq3Rpc19ydWdzxJdqaXNfc3BhbGlzX2xhcGtyaXRpc19ncnVvZGlzJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9EW29EXT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK01NTU0/fE1NTU0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStEW29EXT8vXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ3NhdV92YXNfa292X2JhbF9nZWdfYmlyX2xpZV9yZ3BfcmdzX3NwYV9sYXBfZ3JkJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ3Nla21hZGllbsSvX3Bpcm1hZGllbsSvX2FudHJhZGllbsSvX3RyZcSNaWFkaWVuxK9fa2V0dmlydGFkaWVuxK9fcGVua3RhZGllbsSvX8WhZcWhdGFkaWVuxK8nLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBzdGFuZGFsb25lOiAnc2VrbWFkaWVuaXNfcGlybWFkaWVuaXNfYW50cmFkaWVuaXNfdHJlxI1pYWRpZW5pc19rZXR2aXJ0YWRpZW5pc19wZW5rdGFkaWVuaXNfxaFlxaF0YWRpZW5pcycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvZGRkZCBISDptbS9cbiAgICAgICAgfSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTZWtfUGlyX0FudF9UcmVfS2V0X1Blbl/FoGXFoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU19QX0FfVF9LX1BuX8WgJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEwgOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0sIEhIOm1tIFt2YWwuXScsXG4gICAgICAgICAgICBMTExMIDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXSwgZGRkZCwgSEg6bW0gW3ZhbC5dJyxcbiAgICAgICAgICAgIGwgOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBsbCA6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0nLFxuICAgICAgICAgICAgbGxsIDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXSwgSEg6bW0gW3ZhbC5dJyxcbiAgICAgICAgICAgIGxsbGwgOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dLCBkZGQsIEhIOm1tIFt2YWwuXSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vFoGlhbmRpZW5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1J5dG9qXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW1Zha2FyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbUHJhxJdqdXPEr10gZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAncG8gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdwcmllxaEgJXMnLFxuICAgICAgICAgICAgcyA6IHRyYW5zbGF0ZVNlY29uZHMsXG4gICAgICAgICAgICBzcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaCA6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICBkZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE0gOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgICAgIE1NIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeSA6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LW9qaS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy1vamknO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBsdDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHVuaXRzID0ge1xuICAgICAgICAnc3MnOiAnc2VrdW5kZXNfc2VrdW5kxJNtX3Nla3VuZGVfc2VrdW5kZXMnLnNwbGl0KCdfJyksXG4gICAgICAgICdtJzogJ21pbsWrdGVzX21pbsWrdMSTbV9taW7Fq3RlX21pbsWrdGVzJy5zcGxpdCgnXycpLFxuICAgICAgICAnbW0nOiAnbWluxat0ZXNfbWluxat0xJNtX21pbsWrdGVfbWluxat0ZXMnLnNwbGl0KCdfJyksXG4gICAgICAgICdoJzogJ3N0dW5kYXNfc3R1bmTEgW1fc3R1bmRhX3N0dW5kYXMnLnNwbGl0KCdfJyksXG4gICAgICAgICdoaCc6ICdzdHVuZGFzX3N0dW5kxIFtX3N0dW5kYV9zdHVuZGFzJy5zcGxpdCgnXycpLFxuICAgICAgICAnZCc6ICdkaWVuYXNfZGllbsSBbV9kaWVuYV9kaWVuYXMnLnNwbGl0KCdfJyksXG4gICAgICAgICdkZCc6ICdkaWVuYXNfZGllbsSBbV9kaWVuYV9kaWVuYXMnLnNwbGl0KCdfJyksXG4gICAgICAgICdNJzogJ23Ek25lxaFhX23Ek25lxaFpZW1fbcSTbmVzaXNfbcSTbmXFoWknLnNwbGl0KCdfJyksXG4gICAgICAgICdNTSc6ICdtxJNuZcWhYV9txJNuZcWhaWVtX23Ek25lc2lzX23Ek25lxaFpJy5zcGxpdCgnXycpLFxuICAgICAgICAneSc6ICdnYWRhX2dhZGllbV9nYWRzX2dhZGknLnNwbGl0KCdfJyksXG4gICAgICAgICd5eSc6ICdnYWRhX2dhZGllbV9nYWRzX2dhZGknLnNwbGl0KCdfJylcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB3aXRob3V0U3VmZml4IGJvb2xlYW4gdHJ1ZSA9IGEgbGVuZ3RoIG9mIHRpbWU7IGZhbHNlID0gYmVmb3JlL2FmdGVyIGEgcGVyaW9kIG9mIHRpbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ybWF0KGZvcm1zLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgIC8vIEUuZy4gXCIyMSBtaW7Fq3RlXCIsIFwiMyBtaW7Fq3Rlc1wiLlxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciAlIDEwID09PSAxICYmIG51bWJlciAlIDEwMCAhPT0gMTEgPyBmb3Jtc1syXSA6IGZvcm1zWzNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRS5nLiBcIjIxIG1pbsWrdGVzXCIgYXMgaW4gXCJwxJNjIDIxIG1pbsWrdGVzXCIuXG4gICAgICAgICAgICAvLyBFLmcuIFwiMyBtaW7Fq3TEk21cIiBhcyBpbiBcInDEk2MgMyBtaW7Fq3TEk21cIi5cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMSAmJiBudW1iZXIgJSAxMDAgIT09IDExID8gZm9ybXNbMF0gOiBmb3Jtc1sxXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBmb3JtYXQodW5pdHNba2V5XSwgbnVtYmVyLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHJldHVybiBmb3JtYXQodW5pdHNba2V5XSwgbnVtYmVyLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVTZWNvbmRzKG51bWJlciwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdkYcW+YXMgc2VrdW5kZXMnIDogJ2Rhxb7EgW0gc2VrdW5kxJNtJztcbiAgICB9XG5cbiAgICB2YXIgbHYgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsdicsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnbEgXJpc19mZWJydcSBcmlzX21hcnRzX2FwcsSrbGlzX21haWpzX2rFq25panNfasWrbGlqc19hdWd1c3RzX3NlcHRlbWJyaXNfb2t0b2JyaXNfbm92ZW1icmlzX2RlY2VtYnJpcycuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tYXJfYXByX21haV9qxatuX2rFq2xfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnc3bEk3RkaWVuYV9waXJtZGllbmFfb3RyZGllbmFfdHJlxaFkaWVuYV9jZXR1cnRkaWVuYV9waWVrdGRpZW5hX3Nlc3RkaWVuYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTdl9QX09fVF9DX1BrX1MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1N2X1BfT19UX0NfUGtfUycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZLicsXG4gICAgICAgICAgICBMTCA6ICdZWVlZLiBbZ2FkYV0gRC4gTU1NTScsXG4gICAgICAgICAgICBMTEwgOiAnWVlZWS4gW2dhZGFdIEQuIE1NTU0sIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnWVlZWS4gW2dhZGFdIEQuIE1NTU0sIGRkZGQsIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW8Wgb2RpZW4gcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1LEq3QgcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW3B1bGtzdGVuXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tWYWthciBwdWxrc3Rlbl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW1BhZ8SBanXFocSBXSBkZGRkIFtwdWxrc3Rlbl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3DEk2MgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdwaXJtcyAlcycsXG4gICAgICAgICAgICBzIDogcmVsYXRpdmVTZWNvbmRzLFxuICAgICAgICAgICAgc3MgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbSA6IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGggOiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgICAgICBoaCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBkIDogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICAgICAgZGQgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTSA6IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgICAgIE1NIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIHkgOiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgICAgICB5eSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBsdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHRyYW5zbGF0b3IgPSB7XG4gICAgICAgIHdvcmRzOiB7IC8vRGlmZmVyZW50IGdyYW1tYXRpY2FsIGNhc2VzXG4gICAgICAgICAgICBzczogWydzZWt1bmQnLCAnc2VrdW5kYScsICdzZWt1bmRpJ10sXG4gICAgICAgICAgICBtOiBbJ2plZGFuIG1pbnV0JywgJ2plZG5vZyBtaW51dGEnXSxcbiAgICAgICAgICAgIG1tOiBbJ21pbnV0JywgJ21pbnV0YScsICdtaW51dGEnXSxcbiAgICAgICAgICAgIGg6IFsnamVkYW4gc2F0JywgJ2plZG5vZyBzYXRhJ10sXG4gICAgICAgICAgICBoaDogWydzYXQnLCAnc2F0YScsICdzYXRpJ10sXG4gICAgICAgICAgICBkZDogWydkYW4nLCAnZGFuYScsICdkYW5hJ10sXG4gICAgICAgICAgICBNTTogWydtamVzZWMnLCAnbWplc2VjYScsICdtamVzZWNpJ10sXG4gICAgICAgICAgICB5eTogWydnb2RpbmEnLCAnZ29kaW5lJywgJ2dvZGluYSddXG4gICAgICAgIH0sXG4gICAgICAgIGNvcnJlY3RHcmFtbWF0aWNhbENhc2U6IGZ1bmN0aW9uIChudW1iZXIsIHdvcmRLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgPT09IDEgPyB3b3JkS2V5WzBdIDogKG51bWJlciA+PSAyICYmIG51bWJlciA8PSA0ID8gd29yZEtleVsxXSA6IHdvcmRLZXlbMl0pO1xuICAgICAgICB9LFxuICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICAgICAgdmFyIHdvcmRLZXkgPSB0cmFuc2xhdG9yLndvcmRzW2tleV07XG4gICAgICAgICAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gd29yZEtleVswXSA6IHdvcmRLZXlbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyB0cmFuc2xhdG9yLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UobnVtYmVyLCB3b3JkS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgbWUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtZScsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFydF9hcHJpbF9tYWpfanVuX2p1bF9hdmd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuLl9mZWIuX21hci5fYXByLl9tYWpfanVuX2p1bF9hdmcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ25lZGplbGphX3BvbmVkamVsamFrX3V0b3Jha19zcmlqZWRhX8SNZXR2cnRha19wZXRha19zdWJvdGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICduZWQuX3Bvbi5fdXRvLl9zcmkuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICduZV9wb191dF9zcl/EjWVfcGVfc3UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkYW5hcyB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3NqdXRyYSB1XSBMVCcsXG5cbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRqZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyaWplZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzdWJvdHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheSAgOiAnW2p1xI1lIHVdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0V2Vla0RheXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW25lZGplbGplXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcG9uZWRqZWxqa2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFt1dG9ya2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW3NyaWplZGVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFvEjWV0dnJ0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwZXRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFdlZWtEYXlzW3RoaXMuZGF5KCldO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0ICAgOiAncHJpamUgJXMnLFxuICAgICAgICAgICAgcyAgICAgIDogJ25la29saWtvIHNla3VuZGknLFxuICAgICAgICAgICAgc3MgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtICAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaCAgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoaCAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgICAgICA6ICdkYW4nLFxuICAgICAgICAgICAgZGQgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBNICAgICAgOiAnbWplc2VjJyxcbiAgICAgICAgICAgIE1NICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgeSAgICAgIDogJ2dvZGludScsXG4gICAgICAgICAgICB5eSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1lO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbWkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtaScsIHtcbiAgICAgICAgbW9udGhzOiAnS29oaS10xIF0ZV9IdWktdGFuZ3VydV9Qb3V0xastdGUtcmFuZ2lfUGFlbmdhLXdoxIF3aMSBX0hhcmF0dWFfUGlwaXJpX0jFjW5nb2luZ29pX0hlcmUtdHVyaS1rxY1rxIFfTWFodXJ1X1doaXJpbmdhLcSBLW51a3VfV2hpcmluZ2EtxIEtcmFuZ2lfSGFraWhlYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdLb2hpX0h1aV9Qb3VfUGFlX0hhcmFfUGlwaV9IxY1uZ29pX0hlcmVfTWFodV9XaGktbnVfV2hpLXJhX0hha2knLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1JlZ2V4OiAvKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsM30vaSxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6IC8oPzpbJ2EtelxcdTAxMDFcXHUwMTREXFx1MDE2Ql0rXFwtPyl7MSwzfS9pLFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiAvKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsM30vaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogLyg/OlsnYS16XFx1MDEwMVxcdTAxNERcXHUwMTZCXStcXC0/KXsxLDJ9L2ksXG4gICAgICAgIHdlZWtkYXlzOiAnUsSBdGFwdV9NYW5lX1TFq3JlaV9XZW5lcmVpX1TEgWl0ZV9QYXJhaXJlX0jEgXRhcmVpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnVGFfTWFfVMWrX1dlX1TEgWlfUGFfSMSBJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1RhX01hX1TFq19XZV9UxIFpX1BhX0jEgScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBbaV0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIFtpXSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaSB0ZWllIG1haGFuYSwgaV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1thcG9wbyBpXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2ldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbaW5hbmFoaSBpXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW3doYWthbXV0dW5nYSBpXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaSByb3RvIGkgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGkgbXVhJyxcbiAgICAgICAgICAgIHM6ICd0ZSBoxJNrb25hIHJ1YXJ1YScsXG4gICAgICAgICAgICBzczogJyVkIGjEk2tvbmEnLFxuICAgICAgICAgICAgbTogJ2hlIG1lbmV0aScsXG4gICAgICAgICAgICBtbTogJyVkIG1lbmV0aScsXG4gICAgICAgICAgICBoOiAndGUgaGFvcmEnLFxuICAgICAgICAgICAgaGg6ICclZCBoYW9yYScsXG4gICAgICAgICAgICBkOiAnaGUgcmEnLFxuICAgICAgICAgICAgZGQ6ICclZCByYScsXG4gICAgICAgICAgICBNOiAnaGUgbWFyYW1hJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWFyYW1hJyxcbiAgICAgICAgICAgIHk6ICdoZSB0YXUnLFxuICAgICAgICAgICAgeXk6ICclZCB0YXUnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtaTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1rID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbWsnLCB7XG4gICAgICAgIG1vbnRocyA6ICfRmNCw0L3Rg9Cw0YDQuF/RhNC10LLRgNGD0LDRgNC4X9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNGYX9GY0YPQvdC4X9GY0YPQu9C4X9Cw0LLQs9GD0YHRgl/RgdC10L/RgtC10LzQstGA0Lhf0L7QutGC0L7QvNCy0YDQuF/QvdC+0LXQvNCy0YDQuF/QtNC10LrQtdC80LLRgNC4Jy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfRmNCw0L1f0YTQtdCyX9C80LDRgF/QsNC/0YBf0LzQsNGYX9GY0YPQvV/RmNGD0Ltf0LDQstCzX9GB0LXQv1/QvtC60YJf0L3QvtC1X9C00LXQuicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn0L3QtdC00LXQu9CwX9C/0L7QvdC10LTQtdC70L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00LBf0YfQtdGC0LLRgNGC0L7Qul/Qv9C10YLQvtC6X9GB0LDQsdC+0YLQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfQvdC10LRf0L/QvtC9X9Cy0YLQvl/RgdGA0LVf0YfQtdGCX9C/0LXRgl/RgdCw0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9C9ZV/Qv29f0LLRgl/RgdGAX9GH0LVf0L/QtV/RgWEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0QuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb0JTQtdC90LXRgSDQstC+XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vQo9GC0YDQtSDQstC+XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdb0JLQvl0gZGRkZCBb0LLQvl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb0JLRh9C10YDQsCDQstC+XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CY0LfQvNC40L3QsNGC0LDRgtCwXSBkZGRkIFvQstC+XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CY0LfQvNC40L3QsNGC0LjQvtGCXSBkZGRkIFvQstC+XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfQv9C+0YHQu9C1ICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn0L/RgNC10LQgJXMnLFxuICAgICAgICAgICAgcyA6ICfQvdC10LrQvtC70LrRgyDRgdC10LrRg9C90LTQuCcsXG4gICAgICAgICAgICBzcyA6ICclZCDRgdC10LrRg9C90LTQuCcsXG4gICAgICAgICAgICBtIDogJ9C80LjQvdGD0YLQsCcsXG4gICAgICAgICAgICBtbSA6ICclZCDQvNC40L3Rg9GC0LgnLFxuICAgICAgICAgICAgaCA6ICfRh9Cw0YEnLFxuICAgICAgICAgICAgaGggOiAnJWQg0YfQsNGB0LAnLFxuICAgICAgICAgICAgZCA6ICfQtNC10L0nLFxuICAgICAgICAgICAgZGQgOiAnJWQg0LTQtdC90LAnLFxuICAgICAgICAgICAgTSA6ICfQvNC10YHQtdGGJyxcbiAgICAgICAgICAgIE1NIDogJyVkINC80LXRgdC10YbQuCcsXG4gICAgICAgICAgICB5IDogJ9Cz0L7QtNC40L3QsCcsXG4gICAgICAgICAgICB5eSA6ICclZCDQs9C+0LTQuNC90LgnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0LXQsnzQtdC9fNGC0Lh80LLQuHzRgNC4fNC80LgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBsYXN0RGlnaXQgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBsYXN0MkRpZ2l0cyA9IG51bWJlciAlIDEwMDtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QtdCyJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QtdC9JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPiAxMCAmJiBsYXN0MkRpZ2l0cyA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCy0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgNC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSA3IHx8IGxhc3REaWdpdCA9PT0gOCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC80LgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgtC4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWs7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21sJywge1xuICAgICAgICBtb250aHMgOiAn4LSc4LSo4LWB4LS14LSw4LS/X+C0q+C1huC0rOC1jeC0sOC1geC0teC0sOC0v1/gtK7gtL7gtbzgtJrgtY3gtJrgtY1f4LSP4LSq4LWN4LSw4LS/4LW9X+C0ruC1h+C0r+C1jV/gtJzgtYLgtbpf4LSc4LWC4LSy4LWIX+C0k+C0l+C0uOC1jeC0seC1jeC0seC1jV/gtLjgtYbgtKrgtY3gtLHgtY3gtLHgtILgtKzgtbxf4LSS4LSV4LWN4LSf4LWL4LSs4LW8X+C0qOC0teC0guC0rOC1vF/gtKHgtL/gtLjgtILgtKzgtbwnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+C0nOC0qOC1gS5f4LSr4LWG4LSs4LWN4LSw4LWBLl/gtK7gtL7gtbwuX+C0j+C0quC1jeC0sOC0vy5f4LSu4LWH4LSv4LWNX+C0nOC1guC1ul/gtJzgtYLgtLLgtYguX+C0k+C0ly5f4LS44LWG4LSq4LWN4LSx4LWN4LSxLl/gtJLgtJXgtY3gtJ/gtYsuX+C0qOC0teC0gi5f4LSh4LS/4LS44LSCLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ+C0nuC0vuC0r+C0seC0vuC0tOC1jeC0ml/gtKTgtL/gtJngtY3gtJXgtLPgtL7gtLTgtY3gtJpf4LSa4LWK4LS14LWN4LS14LS+4LS04LWN4LSaX+C0rOC1geC0p+C0qOC0vuC0tOC1jeC0ml/gtLXgtY3gtK/gtL7gtLTgtL7gtLTgtY3gtJpf4LS14LWG4LSz4LWN4LSz4LS/4LSv4LS+4LS04LWN4LSaX+C0tuC0qOC0v+C0r+C0vuC0tOC1jeC0micuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgtJ7gtL7gtK/gtbxf4LSk4LS/4LSZ4LWN4LSV4LW+X+C0muC1iuC0teC1jeC0tV/gtKzgtYHgtKfgtbtf4LS14LWN4LSv4LS+4LS04LSCX+C0teC1huC0s+C1jeC0s+C0v1/gtLbgtKjgtL8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+C0nuC0vl/gtKTgtL9f4LSa4LWKX+C0rOC1gV/gtLXgtY3gtK/gtL5f4LS14LWGX+C0ticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0gLeC0qOC1gScsXG4gICAgICAgICAgICBMVFMgOiAnQSBoOm1tOnNzIC3gtKjgtYEnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIC3gtKjgtYEnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIC3gtKjgtYEnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb4LSH4LSo4LWN4LSo4LWNXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vgtKjgtL7gtLPgtYZdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+C0h+C0qOC1jeC0qOC0suC1hl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+C0leC0tOC0v+C0nuC1jeC0nl0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIOC0leC0tOC0v+C0nuC1jeC0nuC1jScsXG4gICAgICAgICAgICBwYXN0IDogJyVzIOC0ruC1geC1u+C0quC1jScsXG4gICAgICAgICAgICBzIDogJ+C0heC1veC0qiDgtKjgtL/gtK7gtL/gtLfgtJngtY3gtJngtb4nLFxuICAgICAgICAgICAgc3MgOiAnJWQg4LS44LWG4LSV4LWN4LSV4LW74LSh4LWNJyxcbiAgICAgICAgICAgIG0gOiAn4LSS4LSw4LWBIOC0ruC0v+C0qOC0v+C0seC1jeC0seC1jScsXG4gICAgICAgICAgICBtbSA6ICclZCDgtK7gtL/gtKjgtL/gtLHgtY3gtLHgtY0nLFxuICAgICAgICAgICAgaCA6ICfgtJLgtLDgtYEg4LSu4LSj4LS/4LSV4LWN4LSV4LWC4LW8JyxcbiAgICAgICAgICAgIGhoIDogJyVkIOC0ruC0o+C0v+C0leC1jeC0leC1guC1vCcsXG4gICAgICAgICAgICBkIDogJ+C0kuC0sOC1gSDgtKbgtL/gtLXgtLjgtIInLFxuICAgICAgICAgICAgZGQgOiAnJWQg4LSm4LS/4LS14LS44LSCJyxcbiAgICAgICAgICAgIE0gOiAn4LSS4LSw4LWBIOC0ruC0vuC0uOC0gicsXG4gICAgICAgICAgICBNTSA6ICclZCDgtK7gtL7gtLjgtIInLFxuICAgICAgICAgICAgeSA6ICfgtJLgtLDgtYEg4LS14LW84LS34LSCJyxcbiAgICAgICAgICAgIHl5IDogJyVkIOC0teC1vOC0t+C0gidcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+C0sOC0vuC0pOC1jeC0sOC0v3zgtLDgtL7gtLXgtL/gtLLgtYZ84LSJ4LSa4LWN4LSaIOC0leC0tOC0v+C0nuC1jeC0nuC1jXzgtLXgtYjgtJXgtYHgtKjgtY3gtKjgtYfgtLDgtIJ84LSw4LS+4LSk4LWN4LSw4LS/L2ksXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKG1lcmlkaWVtID09PSAn4LSw4LS+4LSk4LWN4LSw4LS/JyAmJiBob3VyID49IDQpIHx8XG4gICAgICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn4LSJ4LSa4LWN4LSaIOC0leC0tOC0v+C0nuC1jeC0nuC1jScgfHxcbiAgICAgICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgtLXgtYjgtJXgtYHgtKjgtY3gtKjgtYfgtLDgtIInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgtLDgtL7gtKTgtY3gtLDgtL8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C0sOC0vuC0teC0v+C0suC1hic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LSJ4LSa4LWN4LSaIOC0leC0tOC0v+C0nuC1jeC0nuC1jSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LS14LWI4LSV4LWB4LSo4LWN4LSo4LWH4LSw4LSCJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgtLDgtL7gtKTgtY3gtLDgtL8nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9GF0Y3QtNGF0Y3QvSDRgdC10LrRg9C90LQnIDogJ9GF0Y3QtNGF0Y3QvSDRgdC10LrRg9C90LTRi9C9JztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINGB0LXQutGD0L3QtCcgOiAnINGB0LXQutGD0L3QtNGL0L0nKTtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAod2l0aG91dFN1ZmZpeCA/ICcg0LzQuNC90YPRgicgOiAnINC80LjQvdGD0YLRi9C9Jyk7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINGG0LDQsycgOiAnINGG0LDQs9C40LnQvScpO1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDTqdC006nRgCcgOiAnINOp0LTRgNC40LnQvScpO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDRgdCw0YAnIDogJyDRgdCw0YDRi9C9Jyk7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINC20LjQuycgOiAnINC20LjQu9C40LnQvScpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1uID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbW4nLCB7XG4gICAgICAgIG1vbnRocyA6ICfQndGN0LPQtNKv0LPRjdGN0YAg0YHQsNGAX9Cl0L7RkdGA0LTRg9Cz0LDQsNGAINGB0LDRgF/Qk9GD0YDQsNCy0LTRg9Cz0LDQsNGAINGB0LDRgF/QlNOp0YDTqdCy0LTSr9Cz0Y3RjdGAINGB0LDRgF/QotCw0LLQtNGD0LPQsNCw0YAg0YHQsNGAX9CX0YPRgNCz0LDQtNGD0LPQsNCw0YAg0YHQsNGAX9CU0L7Qu9C00YPQs9Cw0LDRgCDRgdCw0YBf0J3QsNC50LzQtNGD0LPQsNCw0YAg0YHQsNGAX9CV0YHQtNKv0LPRjdGN0YAg0YHQsNGAX9CQ0YDQsNCy0LTRg9Cz0LDQsNGAINGB0LDRgF/QkNGA0LLQsNC9INC90Y3Qs9C00q/Qs9GN0Y3RgCDRgdCw0YBf0JDRgNCy0LDQvSDRhdC+0ZHRgNC00YPQs9Cw0LDRgCDRgdCw0YAnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJzEg0YHQsNGAXzIg0YHQsNGAXzMg0YHQsNGAXzQg0YHQsNGAXzUg0YHQsNGAXzYg0YHQsNGAXzcg0YHQsNGAXzgg0YHQsNGAXzkg0YHQsNGAXzEwINGB0LDRgF8xMSDRgdCw0YBfMTIg0YHQsNGAJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAn0J3Rj9C8X9CU0LDQstCw0LBf0JzRj9Cz0LzQsNGAX9Cb0YXQsNCz0LLQsF/Qn9Kv0YDRjdCyX9CR0LDQsNGB0LDQvV/QkdGP0LzQsdCwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9Cd0Y/QvF/QlNCw0LJf0JzRj9CzX9Cb0YXQsF/Qn9Kv0YBf0JHQsNCwX9CR0Y/QvCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0J3Rj1/QlNCwX9Cc0Y9f0JvRhV/Qn9KvX9CR0LBf0JHRjycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMIDogJ1lZWVkg0L7QvdGLIE1NTU3Ri9C9IEQnLFxuICAgICAgICAgICAgTExMIDogJ1lZWVkg0L7QvdGLIE1NTU3Ri9C9IEQgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBZWVlZINC+0L3RiyBNTU1N0YvQvSBEIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv0q7TqHzSrtClL2ksXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ9Ku0KUnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Ku06gnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Ku0KUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9Oo0L3TqdOp0LTTqdGAXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vQnNCw0YDQs9Cw0LDRiF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW9CY0YDRjdGFXSBkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW9Oo0YfQuNCz0LTTqdGAXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb06jQvdCz06nRgNGB06nQvV0gZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg0LTQsNGA0LDQsCcsXG4gICAgICAgICAgICBwYXN0IDogJyVzINOp0LzQvdOpJyxcbiAgICAgICAgICAgIHMgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0g06nQtNOp0YAvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINOp0LTTqdGAJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbW47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ+ClpycsXG4gICAgICAgICcyJzogJ+ClqCcsXG4gICAgICAgICczJzogJ+ClqScsXG4gICAgICAgICc0JzogJ+ClqicsXG4gICAgICAgICc1JzogJ+ClqycsXG4gICAgICAgICc2JzogJ+ClrCcsXG4gICAgICAgICc3JzogJ+ClrScsXG4gICAgICAgICc4JzogJ+ClricsXG4gICAgICAgICc5JzogJ+ClrycsXG4gICAgICAgICcwJzogJ+ClpidcbiAgICB9LFxuICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ+Clpyc6ICcxJyxcbiAgICAgICAgJ+ClqCc6ICcyJyxcbiAgICAgICAgJ+ClqSc6ICczJyxcbiAgICAgICAgJ+Clqic6ICc0JyxcbiAgICAgICAgJ+Clqyc6ICc1JyxcbiAgICAgICAgJ+ClrCc6ICc2JyxcbiAgICAgICAgJ+ClrSc6ICc3JyxcbiAgICAgICAgJ+Clric6ICc4JyxcbiAgICAgICAgJ+Clryc6ICc5JyxcbiAgICAgICAgJ+Clpic6ICcwJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVNcihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpXG4gICAge1xuICAgICAgICB2YXIgb3V0cHV0ID0gJyc7XG4gICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0cmluZykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3MnOiBvdXRwdXQgPSAn4KSV4KS+4KS54KWAIOCkuOClh+CkleCkguCkpic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NzJzogb3V0cHV0ID0gJyVkIOCkuOClh+CkleCkguCkpic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ20nOiBvdXRwdXQgPSAn4KSP4KSVIOCkruCkv+CkqOCkv+Cknyc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21tJzogb3V0cHV0ID0gJyVkIOCkruCkv+CkqOCkv+Ckn+Clhyc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOiBvdXRwdXQgPSAn4KSP4KSVIOCkpOCkvuCkuCc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hoJzogb3V0cHV0ID0gJyVkIOCkpOCkvuCkuCc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOiBvdXRwdXQgPSAn4KSP4KSVIOCkpuCkv+CkteCkuCc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RkJzogb3V0cHV0ID0gJyVkIOCkpuCkv+CkteCkuCc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOiBvdXRwdXQgPSAn4KSP4KSVIOCkruCkueCkv+CkqOCkvic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ01NJzogb3V0cHV0ID0gJyVkIOCkruCkueCkv+CkqOClhyc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3knOiBvdXRwdXQgPSAn4KSP4KSVIOCkteCksOCljeCktyc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3l5Jzogb3V0cHV0ID0gJyVkIOCkteCksOCljeCkt+Clhyc7IGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3dpdGNoIChzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzJzogb3V0cHV0ID0gJ+CkleCkvuCkueClgCDgpLjgpYfgpJXgpILgpKbgpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzcyc6IG91dHB1dCA9ICclZCDgpLjgpYfgpJXgpILgpKbgpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtJzogb3V0cHV0ID0gJ+Ckj+CkleCkviDgpK7gpL/gpKjgpL/gpJ/gpL4nOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtbSc6IG91dHB1dCA9ICclZCDgpK7gpL/gpKjgpL/gpJ/gpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdoJzogb3V0cHV0ID0gJ+Ckj+CkleCkviDgpKTgpL7gpLjgpL4nOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdoaCc6IG91dHB1dCA9ICclZCDgpKTgpL7gpLjgpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkJzogb3V0cHV0ID0gJ+Ckj+CkleCkviDgpKbgpL/gpLXgpLjgpL4nOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkZCc6IG91dHB1dCA9ICclZCDgpKbgpL/gpLXgpLjgpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdNJzogb3V0cHV0ID0gJ+Ckj+CkleCkviDgpK7gpLngpL/gpKjgpY3gpK/gpL4nOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdNTSc6IG91dHB1dCA9ICclZCDgpK7gpLngpL/gpKjgpY3gpK/gpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd5Jzogb3V0cHV0ID0gJ+Ckj+CkleCkviDgpLXgpLDgpY3gpLfgpL4nOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd5eSc6IG91dHB1dCA9ICclZCDgpLXgpLDgpY3gpLfgpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgfVxuXG4gICAgdmFyIG1yID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXInLCB7XG4gICAgICAgIG1vbnRocyA6ICfgpJzgpL7gpKjgpYfgpLXgpL7gpLDgpYBf4KSr4KWH4KSs4KWN4KSw4KWB4KS14KS+4KSw4KWAX+CkruCkvuCksOCljeCkml/gpI/gpKrgpY3gpLDgpL/gpLJf4KSu4KWHX+CknOClguCkqF/gpJzgpYHgpLLgpYhf4KSR4KSX4KS44KWN4KSfX+CkuOCkquCljeCkn+Clh+CkguCkrOCksF/gpJHgpJXgpY3gpJ/gpYvgpKzgpLBf4KSo4KWL4KS14KWN4KS54KWH4KSC4KSs4KSwX+CkoeCkv+CkuOClh+CkguCkrOCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfgpJzgpL7gpKjgpYcuX+Ckq+Clh+CkrOCljeCksOClgS5f4KSu4KS+4KSw4KWN4KSaLl/gpI/gpKrgpY3gpLDgpL8uX+CkruClhy5f4KSc4KWC4KSoLl/gpJzgpYHgpLLgpYguX+CkkeCkly5f4KS44KSq4KWN4KSf4KWH4KSCLl/gpJHgpJXgpY3gpJ/gpYsuX+CkqOCli+CkteCljeCkueClh+Ckgi5f4KSh4KS/4KS44KWH4KSCLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ+CksOCkteCkv+CkteCkvuCksF/gpLjgpYvgpK7gpLXgpL7gpLBf4KSu4KSC4KSX4KSz4KS14KS+4KSwX+CkrOClgeCkp+CkteCkvuCksF/gpJfgpYHgpLDgpYLgpLXgpL7gpLBf4KS24KWB4KSV4KWN4KSw4KS14KS+4KSwX+CktuCkqOCkv+CkteCkvuCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgpLDgpLXgpL9f4KS44KWL4KSuX+CkruCkguCkl+Cks1/gpKzgpYHgpKdf4KSX4KWB4KSw4KWCX+CktuClgeCkleCljeCksF/gpLbgpKjgpL8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+CksF/gpLjgpYtf4KSu4KSCX+CkrOClgV/gpJfgpYFf4KS24KWBX+Ckticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0g4KS14KS+4KSc4KSk4KS+JyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3Mg4KS14KS+4KSc4KSk4KS+JyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgpLXgpL7gpJzgpKTgpL4nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCkteCkvuCknOCkpOCkvidcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgpIbgpJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+CkieCkpuCljeCkr+Ckvl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4KSV4KS+4KSyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgpK7gpL7gpJfgpYDgpLJdIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz4KSu4KSn4KWN4KSv4KWHJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+CkquClguCksOCljeCkteClgCcsXG4gICAgICAgICAgICBzOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIHNzOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIG06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgbW06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgaDogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBoaDogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBkOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIGRkOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIE06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgTU06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgeTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICB5eTogcmVsYXRpdmVUaW1lTXJcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Clp+ClqOClqeClquClq+ClrOClreClruClr+Clpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CksOCkvuCkpOCljeCksOClgHzgpLjgpJXgpL7gpLPgpYB84KSm4KWB4KSq4KS+4KSw4KWAfOCkuOCkvuCkr+CkguCkleCkvuCks+ClgC8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgpLDgpL7gpKTgpY3gpLDgpYAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpJXgpL7gpLPgpYAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KSm4KWB4KSq4KS+4KSw4KWAJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpL7gpK/gpILgpJXgpL7gpLPgpYAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KWN4KSw4KWAJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLjgpJXgpL7gpLPgpYAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkpuClgeCkquCkvuCksOClgCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KS44KS+4KSv4KSC4KSV4KS+4KSz4KWAJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKTgpY3gpLDgpYAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1zID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXMnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY19BcHJpbF9NZWlfSnVuX0p1bGFpX09nb3NfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGlzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFjX0Fwcl9NZWlfSnVuX0p1bF9PZ3NfU2VwX09rdF9Ob3ZfRGlzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdBaGFkX0lzbmluX1NlbGFzYV9SYWJ1X0toYW1pc19KdW1hYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnQWhkX0lzbl9TZWxfUmFiX0toYV9KdW1fU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdBaF9Jc19TbF9SYl9LbV9KbV9TYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISC5tbScsXG4gICAgICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3BhZ2l8dGVuZ2FoYXJpfHBldGFuZ3xtYWxhbS8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3BhZ2knKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAndGVuZ2FoYXJpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdwZXRhbmcnIHx8IG1lcmlkaWVtID09PSAnbWFsYW0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwYWdpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAndGVuZ2FoYXJpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGV0YW5nJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtYWxhbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbSGFyaSBpbmkgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0Vzb2sgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW3B1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tLZWxtYXJpbiBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGVwYXMgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdkYWxhbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHlhbmcgbGVwYXMnLFxuICAgICAgICAgICAgcyA6ICdiZWJlcmFwYSBzYWF0JyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNhYXQnLFxuICAgICAgICAgICAgbSA6ICdzZW1pbml0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbml0JyxcbiAgICAgICAgICAgIGggOiAnc2VqYW0nLFxuICAgICAgICAgICAgaGggOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQgOiAnc2VoYXJpJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGhhcmknLFxuICAgICAgICAgICAgTSA6ICdzZWJ1bGFuJyxcbiAgICAgICAgICAgIE1NIDogJyVkIGJ1bGFuJyxcbiAgICAgICAgICAgIHkgOiAnc2V0YWh1bicsXG4gICAgICAgICAgICB5eSA6ICclZCB0YWh1bidcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtc015ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXMtbXknLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY19BcHJpbF9NZWlfSnVuX0p1bGFpX09nb3NfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGlzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFjX0Fwcl9NZWlfSnVuX0p1bF9PZ3NfU2VwX09rdF9Ob3ZfRGlzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdBaGFkX0lzbmluX1NlbGFzYV9SYWJ1X0toYW1pc19KdW1hYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnQWhkX0lzbl9TZWxfUmFiX0toYV9KdW1fU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdBaF9Jc19TbF9SYl9LbV9KbV9TYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISC5tbScsXG4gICAgICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3BhZ2l8dGVuZ2FoYXJpfHBldGFuZ3xtYWxhbS8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3BhZ2knKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAndGVuZ2FoYXJpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdwZXRhbmcnIHx8IG1lcmlkaWVtID09PSAnbWFsYW0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwYWdpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAndGVuZ2FoYXJpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGV0YW5nJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtYWxhbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbSGFyaSBpbmkgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0Vzb2sgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW3B1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tLZWxtYXJpbiBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGVwYXMgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdkYWxhbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHlhbmcgbGVwYXMnLFxuICAgICAgICAgICAgcyA6ICdiZWJlcmFwYSBzYWF0JyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNhYXQnLFxuICAgICAgICAgICAgbSA6ICdzZW1pbml0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbml0JyxcbiAgICAgICAgICAgIGggOiAnc2VqYW0nLFxuICAgICAgICAgICAgaGggOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQgOiAnc2VoYXJpJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGhhcmknLFxuICAgICAgICAgICAgTSA6ICdzZWJ1bGFuJyxcbiAgICAgICAgICAgIE1NIDogJyVkIGJ1bGFuJyxcbiAgICAgICAgICAgIHkgOiAnc2V0YWh1bicsXG4gICAgICAgICAgICB5eSA6ICclZCB0YWh1bidcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXNNeTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG10ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXQnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW5uYXJfRnJhcl9NYXJ6dV9BcHJpbF9NZWpqdV/EoHVuanVfTHVsanVfQXd3aXNzdV9TZXR0ZW1icnVfT3R0dWJydV9Ob3ZlbWJydV9EacSLZW1icnUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GcmFfTWFyX0Fwcl9NZWpfxKB1bl9MdWxfQXd3X1NldF9PdHRfTm92X0RpxIsnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0lsLcSmYWRkX0l0LVRuZWpuX0l0LVRsaWV0YV9MLUVyYmfEp2FfSWwtxKZhbWlzX0lsLcSgaW1nxKdhX0lzLVNpYnQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnxKZhZF9UbmVfVGxpX0VyYl/EpmFtX8SgaW1fU2liJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfEpmFfVG5fVGxfRXJfxKZhX8SgaV9TaScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW0lsbHVtIGZpbC1dTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbR8SnYWRhIGZpbC1dTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbZmlsLV1MVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tJbC1iaWVyYcSnIGZpbC1dTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGkgZ8SnYWRkYV0gW2ZpbC1dTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2bigJkgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBpbHUnLFxuICAgICAgICAgICAgcyA6ICdmdGl0IHNla29uZGknLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vrb25kaScsXG4gICAgICAgICAgICBtIDogJ21pbnV0YScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGknLFxuICAgICAgICAgICAgaCA6ICdzaWVnxKdhJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHNpZWfEp2F0JyxcbiAgICAgICAgICAgIGQgOiAnxKF1cm5hdGEnLFxuICAgICAgICAgICAgZGQgOiAnJWQgxKFyYW5ldCcsXG4gICAgICAgICAgICBNIDogJ3hhaGFyJyxcbiAgICAgICAgICAgIE1NIDogJyVkIHhodXInLFxuICAgICAgICAgICAgeSA6ICdzZW5hJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHNuaSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtdDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn4YGBJyxcbiAgICAgICAgJzInOiAn4YGCJyxcbiAgICAgICAgJzMnOiAn4YGDJyxcbiAgICAgICAgJzQnOiAn4YGEJyxcbiAgICAgICAgJzUnOiAn4YGFJyxcbiAgICAgICAgJzYnOiAn4YGGJyxcbiAgICAgICAgJzcnOiAn4YGHJyxcbiAgICAgICAgJzgnOiAn4YGIJyxcbiAgICAgICAgJzknOiAn4YGJJyxcbiAgICAgICAgJzAnOiAn4YGAJ1xuICAgIH0sIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ+GBgSc6ICcxJyxcbiAgICAgICAgJ+GBgic6ICcyJyxcbiAgICAgICAgJ+GBgyc6ICczJyxcbiAgICAgICAgJ+GBhCc6ICc0JyxcbiAgICAgICAgJ+GBhSc6ICc1JyxcbiAgICAgICAgJ+GBhic6ICc2JyxcbiAgICAgICAgJ+GBhyc6ICc3JyxcbiAgICAgICAgJ+GBiCc6ICc4JyxcbiAgICAgICAgJ+GBiSc6ICc5JyxcbiAgICAgICAgJ+GBgCc6ICcwJ1xuICAgIH07XG5cbiAgICB2YXIgbXkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdteScsIHtcbiAgICAgICAgbW9udGhzOiAn4YCH4YCU4YC64YCU4YCd4YCr4YCb4YCuX+GAluGAseGAluGAseGArOGAuuGAneGAq+GAm+GArl/hgJnhgJDhgLpf4YCn4YCV4YC84YCuX+GAmeGAsV/hgIfhgL3hgJThgLpf4YCH4YCw4YCc4YCt4YCv4YCE4YC6X+GAnuGAvOGAguGAr+GAkOGAul/hgIXhgIDhgLrhgJDhgIThgLrhgJjhgKxf4YCh4YCx4YCs4YCA4YC64YCQ4YCt4YCv4YCY4YCsX+GAlOGAreGAr+GAneGAhOGAuuGAmOGArF/hgJLhgK7hgIfhgIThgLrhgJjhgKwnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4YCH4YCU4YC6X+GAluGAsV/hgJnhgJDhgLpf4YCV4YC84YCuX+GAmeGAsV/hgIfhgL3hgJThgLpf4YCc4YCt4YCv4YCE4YC6X+GAnuGAvF/hgIXhgIDhgLpf4YCh4YCx4YCs4YCA4YC6X+GAlOGAreGAr1/hgJLhgK4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAn4YCQ4YCU4YCE4YC64YC54YCC4YCU4YC94YCxX+GAkOGAlOGAhOGAuuGAueGAnOGArF/hgKHhgIThgLrhgLnhgILhgKtf4YCX4YCv4YCS4YC54YCT4YCf4YCw4YC4X+GAgOGAvOGArOGAnuGAleGAkOGAseGAuF/hgJ7hgLHhgKzhgIDhgLzhgKxf4YCF4YCU4YCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4YCU4YC94YCxX+GAnOGArF/hgILhgKtf4YCf4YCw4YC4X+GAgOGAvOGArF/hgJ7hgLHhgKxf4YCU4YCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+GAlOGAveGAsV/hgJzhgKxf4YCC4YCrX+GAn+GAsOGAuF/hgIDhgLzhgKxf4YCe4YCx4YCsX+GAlOGAsScuc3BsaXQoJ18nKSxcblxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vhgJrhgJThgLEuXSBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+GAmeGAlOGAgOGAuuGAluGAvOGAlOGAul0gTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4YCZ4YCU4YCxLuGAgF0gTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4YCV4YC84YCu4YC44YCB4YCy4YC34YCe4YCx4YCsXSBkZGRkIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfhgJzhgKzhgJnhgIrhgLrhgLcgJXMg4YCZ4YC+4YCsJyxcbiAgICAgICAgICAgIHBhc3Q6ICfhgJzhgL3hgJThgLrhgIHhgLLhgLfhgJ7hgLHhgKwgJXMg4YCAJyxcbiAgICAgICAgICAgIHM6ICfhgIXhgIDhgLnhgIDhgJThgLou4YCh4YCU4YCK4YC64YC44YCE4YCa4YC6JyxcbiAgICAgICAgICAgIHNzIDogJyVkIOGAheGAgOGAueGAgOGAlOGAt+GAuicsXG4gICAgICAgICAgICBtOiAn4YCQ4YCF4YC64YCZ4YCt4YCU4YCF4YC6JyxcbiAgICAgICAgICAgIG1tOiAnJWQg4YCZ4YCt4YCU4YCF4YC6JyxcbiAgICAgICAgICAgIGg6ICfhgJDhgIXhgLrhgJThgKzhgJvhgK4nLFxuICAgICAgICAgICAgaGg6ICclZCDhgJThgKzhgJvhgK4nLFxuICAgICAgICAgICAgZDogJ+GAkOGAheGAuuGAm+GAgOGAuicsXG4gICAgICAgICAgICBkZDogJyVkIOGAm+GAgOGAuicsXG4gICAgICAgICAgICBNOiAn4YCQ4YCF4YC64YCcJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4YCcJyxcbiAgICAgICAgICAgIHk6ICfhgJDhgIXhgLrhgJThgL7hgIXhgLonLFxuICAgICAgICAgICAgeXk6ICclZCDhgJThgL7hgIXhgLonXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vhgYHhgYLhgYPhgYThgYXhgYbhgYfhgYjhgYnhgYBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBuYiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ25iJywge1xuICAgICAgICBtb250aHMgOiAnamFudWFyX2ZlYnJ1YXJfbWFyc19hcHJpbF9tYWlfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFuLl9mZWIuX21hcnNfYXByaWxfbWFpX2p1bmlfanVsaV9hdWcuX3NlcC5fb2t0Ll9ub3YuX2Rlcy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdzw7huZGFnX21hbmRhZ190aXJzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sw7hyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3PDuC5fbWEuX3RpLl9vbi5fdG8uX2ZyLl9sw7guJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdzw7hfbWFfdGlfb25fdG9fZnJfbMO4Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQuIE1NTU0gWVlZWSBba2wuXSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2kgZGFnIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tpIG1vcmdlbiBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2kgZ8OlciBrbC5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2ZvcnJpZ2VdIGRkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnb20gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBzaWRlbicsXG4gICAgICAgICAgICBzIDogJ25vZW4gc2VrdW5kZXInLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VrdW5kZXInLFxuICAgICAgICAgICAgbSA6ICdldHQgbWludXR0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0dGVyJyxcbiAgICAgICAgICAgIGggOiAnZW4gdGltZScsXG4gICAgICAgICAgICBoaCA6ICclZCB0aW1lcicsXG4gICAgICAgICAgICBkIDogJ2VuIGRhZycsXG4gICAgICAgICAgICBkZCA6ICclZCBkYWdlcicsXG4gICAgICAgICAgICBNIDogJ2VuIG3DpW5lZCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtw6VuZWRlcicsXG4gICAgICAgICAgICB5IDogJ2V0dCDDpXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgw6VyJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5iO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfgpacnLFxuICAgICAgICAnMic6ICfgpagnLFxuICAgICAgICAnMyc6ICfgpaknLFxuICAgICAgICAnNCc6ICfgpaonLFxuICAgICAgICAnNSc6ICfgpasnLFxuICAgICAgICAnNic6ICfgpawnLFxuICAgICAgICAnNyc6ICfgpa0nLFxuICAgICAgICAnOCc6ICfgpa4nLFxuICAgICAgICAnOSc6ICfgpa8nLFxuICAgICAgICAnMCc6ICfgpaYnXG4gICAgfSxcbiAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICfgpacnOiAnMScsXG4gICAgICAgICfgpagnOiAnMicsXG4gICAgICAgICfgpaknOiAnMycsXG4gICAgICAgICfgpaonOiAnNCcsXG4gICAgICAgICfgpasnOiAnNScsXG4gICAgICAgICfgpawnOiAnNicsXG4gICAgICAgICfgpa0nOiAnNycsXG4gICAgICAgICfgpa4nOiAnOCcsXG4gICAgICAgICfgpa8nOiAnOScsXG4gICAgICAgICfgpaYnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIG5lID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbmUnLCB7XG4gICAgICAgIG1vbnRocyA6ICfgpJzgpKjgpLXgpLDgpYBf4KSr4KWH4KSs4KWN4KSw4KWB4KS14KSw4KWAX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpL/gpLJf4KSu4KSIX+CknOClgeCkqF/gpJzgpYHgpLLgpL7gpIhf4KSF4KSX4KS34KWN4KSfX+CkuOClh+CkquCljeCkn+Clh+CkruCljeCkrOCksF/gpIXgpJXgpY3gpJ/gpYvgpKzgpLBf4KSo4KWL4KSt4KWH4KSu4KWN4KSs4KSwX+CkoeCkv+CkuOClh+CkruCljeCkrOCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4KSc4KSoLl/gpKvgpYfgpKzgpY3gpLDgpYEuX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpL8uX+CkruCkiF/gpJzgpYHgpKhf4KSc4KWB4KSy4KS+4KSILl/gpIXgpJcuX+CkuOClh+CkquCljeCkny5f4KSF4KSV4KWN4KSf4KWLLl/gpKjgpYvgpK3gpYcuX+CkoeCkv+CkuOClhy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICfgpIbgpIfgpKTgpKzgpL7gpLBf4KS44KWL4KSu4KSs4KS+4KSwX+CkruCkmeCljeCkl+CksuCkrOCkvuCksF/gpKzgpYHgpKfgpKzgpL7gpLBf4KSs4KS/4KS54KS/4KSs4KS+4KSwX+CktuClgeCkleCljeCksOCkrOCkvuCksF/gpLbgpKjgpL/gpKzgpL7gpLAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4KSG4KSH4KSkLl/gpLjgpYvgpK4uX+CkruCkmeCljeCkl+Cksi5f4KSs4KWB4KSnLl/gpKzgpL/gpLngpL8uX+CktuClgeCkleCljeCksC5f4KS24KSo4KS/Licuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4KSGLl/gpLjgpYsuX+CkruCkgi5f4KSs4KWBLl/gpKzgpL8uX+CktuClgS5f4KS2Licuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdB4KSV4KWLIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIExUUyA6ICdB4KSV4KWLIGg6bW06c3Mg4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEHgpJXgpYsgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQeCkleCliyBoOm1tIOCkrOCknOClhydcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Clp+ClqOClqeClquClq+ClrOClreClruClr+Clpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CksOCkvuCkpOCkv3zgpKzgpL/gpLngpL7gpKh84KSm4KS/4KSJ4KSB4KS44KWLfOCkuOCkvuCkgeCknS8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgpLDgpL7gpKTgpL8nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpKzgpL/gpLngpL7gpKgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KSm4KS/4KSJ4KSB4KS44KWLJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpL7gpIHgpJ0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpOCkvyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSs4KS/4KS54KS+4KSoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpKbgpL/gpIngpIHgpLjgpYsnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkuOCkvuCkgeCknSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KS/JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgpIbgpJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+CkreCli+CksuCkv10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW+CkhuCkieCkgeCkpuCli10gZGRkZFssXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgpLngpL/gpJzgpYtdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vgpJfgpI/gpJXgpYtdIGRkZGRbLF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVz4KSu4KS+JyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg4KSF4KSX4KS+4KSh4KS/JyxcbiAgICAgICAgICAgIHMgOiAn4KSV4KWH4KS54KWAIOCkleCljeCkt+CkoycsXG4gICAgICAgICAgICBzcyA6ICclZCDgpLjgpYfgpJXgpYfgpKPgpY3gpKEnLFxuICAgICAgICAgICAgbSA6ICfgpI/gpJUg4KSu4KS/4KSo4KWH4KSfJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOCkruCkv+CkqOClh+CknycsXG4gICAgICAgICAgICBoIDogJ+Ckj+CklSDgpJjgpKPgpY3gpJ/gpL4nLFxuICAgICAgICAgICAgaGggOiAnJWQg4KSY4KSj4KWN4KSf4KS+JyxcbiAgICAgICAgICAgIGQgOiAn4KSP4KSVIOCkpuCkv+CkqCcsXG4gICAgICAgICAgICBkZCA6ICclZCDgpKbgpL/gpKgnLFxuICAgICAgICAgICAgTSA6ICfgpI/gpJUg4KSu4KS54KS/4KSo4KS+JyxcbiAgICAgICAgICAgIE1NIDogJyVkIOCkruCkueCkv+CkqOCkvicsXG4gICAgICAgICAgICB5IDogJ+Ckj+CklSDgpKzgpLDgpY3gpLcnLFxuICAgICAgICAgICAgeXkgOiAnJWQg4KSs4KSw4KWN4KS3J1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBuZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0V2l0aERvdHMgPSAnamFuLl9mZWIuX21ydC5fYXByLl9tZWlfanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnRXaXRob3V0RG90cyA9ICdqYW5fZmViX21ydF9hcHJfbWVpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKTtcblxuICAgIHZhciBtb250aHNQYXJzZSA9IFsvXmphbi9pLCAvXmZlYi9pLCAvXm1hYXJ0fG1ydC4/JC9pLCAvXmFwci9pLCAvXm1laSQvaSwgL15qdW5baS5dPyQvaSwgL15qdWxbaS5dPyQvaSwgL15hdWcvaSwgL15zZXAvaSwgL15va3QvaSwgL15ub3YvaSwgL15kZWMvaV07XG4gICAgdmFyIG1vbnRoc1JlZ2V4ID0gL14oamFudWFyaXxmZWJydWFyaXxtYWFydHxhcHJpbHxtZWl8anVbbmxdaXxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcnxqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fGp1W25sXVxcLj98YXVnXFwuP3xzZXBcXC4/fG9rdFxcLj98bm92XFwuP3xkZWNcXC4/KS9pO1xuXG4gICAgdmFyIG5sID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbmwnLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJpX2ZlYnJ1YXJpX21hYXJ0X2FwcmlsX21laV9qdW5pX2p1bGlfYXVndXN0dXNfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aG91dERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDogL14oamFudWFyaXxmZWJydWFyaXxtYWFydHxhcHJpbHxtZWl8anVbbmxdaXxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogL14oamFuXFwuP3xmZWJcXC4/fG1ydFxcLj98YXByXFwuP3xtZWl8anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2ksXG5cbiAgICAgICAgbW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcblxuICAgICAgICB3ZWVrZGF5cyA6ICd6b25kYWdfbWFhbmRhZ19kaW5zZGFnX3dvZW5zZGFnX2RvbmRlcmRhZ192cmlqZGFnX3phdGVyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3pvLl9tYS5fZGkuX3dvLl9kby5fdnIuX3phLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnem9fbWFfZGlfd29fZG9fdnJfemEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQtTU0tWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbdmFuZGFhZyBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gb21dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2lzdGVyZW4gb21dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2FmZ2Vsb3Blbl0gZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ292ZXIgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBnZWxlZGVuJyxcbiAgICAgICAgICAgIHMgOiAnZWVuIHBhYXIgc2Vjb25kZW4nLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kZW4nLFxuICAgICAgICAgICAgbSA6ICfDqcOpbiBtaW51dXQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlbicsXG4gICAgICAgICAgICBoIDogJ8Opw6luIHV1cicsXG4gICAgICAgICAgICBoaCA6ICclZCB1dXInLFxuICAgICAgICAgICAgZCA6ICfDqcOpbiBkYWcnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGFnZW4nLFxuICAgICAgICAgICAgTSA6ICfDqcOpbiBtYWFuZCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtYWFuZGVuJyxcbiAgICAgICAgICAgIHkgOiAnw6nDqW4gamFhcicsXG4gICAgICAgICAgICB5eSA6ICclZCBqYWFyJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3RlfGRlKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKChudW1iZXIgPT09IDEgfHwgbnVtYmVyID09PSA4IHx8IG51bWJlciA+PSAyMCkgPyAnc3RlJyA6ICdkZScpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBubDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0V2l0aERvdHMgPSAnamFuLl9mZWIuX21ydC5fYXByLl9tZWlfanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnRXaXRob3V0RG90cyA9ICdqYW5fZmViX21ydF9hcHJfbWVpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKTtcblxuICAgIHZhciBtb250aHNQYXJzZSA9IFsvXmphbi9pLCAvXmZlYi9pLCAvXm1hYXJ0fG1ydC4/JC9pLCAvXmFwci9pLCAvXm1laSQvaSwgL15qdW5baS5dPyQvaSwgL15qdWxbaS5dPyQvaSwgL15hdWcvaSwgL15zZXAvaSwgL15va3QvaSwgL15ub3YvaSwgL15kZWMvaV07XG4gICAgdmFyIG1vbnRoc1JlZ2V4ID0gL14oamFudWFyaXxmZWJydWFyaXxtYWFydHxhcHJpbHxtZWl8anVbbmxdaXxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcnxqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fGp1W25sXVxcLj98YXVnXFwuP3xzZXBcXC4/fG9rdFxcLj98bm92XFwuP3xkZWNcXC4/KS9pO1xuXG4gICAgdmFyIG5sQmUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdubC1iZScsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnVhcmlfZmVicnVhcmlfbWFhcnRfYXByaWxfbWVpX2p1bmlfanVsaV9hdWd1c3R1c19zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90cztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRob3V0RG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxqdVtubF1pfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvXihqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fG1laXxqdVtubF1cXC4/fGF1Z1xcLj98c2VwXFwuP3xva3RcXC4/fG5vdlxcLj98ZGVjXFwuPykvaSxcblxuICAgICAgICBtb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuXG4gICAgICAgIHdlZWtkYXlzIDogJ3pvbmRhZ19tYWFuZGFnX2RpbnNkYWdfd29lbnNkYWdfZG9uZGVyZGFnX3ZyaWpkYWdfemF0ZXJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnem8uX21hLl9kaS5fd28uX2RvLl92ci5femEuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICd6b19tYV9kaV93b19kb192cl96YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1t2YW5kYWFnIG9tXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW21vcmdlbiBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tnaXN0ZXJlbiBvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbYWZnZWxvcGVuXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnb3ZlciAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGdlbGVkZW4nLFxuICAgICAgICAgICAgcyA6ICdlZW4gcGFhciBzZWNvbmRlbicsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRlbicsXG4gICAgICAgICAgICBtIDogJ8Opw6luIG1pbnV1dCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVuJyxcbiAgICAgICAgICAgIGggOiAnw6nDqW4gdXVyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHV1cicsXG4gICAgICAgICAgICBkIDogJ8Opw6luIGRhZycsXG4gICAgICAgICAgICBkZCA6ICclZCBkYWdlbicsXG4gICAgICAgICAgICBNIDogJ8Opw6luIG1hYW5kJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1hYW5kZW4nLFxuICAgICAgICAgICAgeSA6ICfDqcOpbiBqYWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGphYXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwKSA/ICdzdGUnIDogJ2RlJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5sQmU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBubiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ25uJywge1xuICAgICAgICBtb250aHMgOiAnamFudWFyX2ZlYnJ1YXJfbWFyc19hcHJpbF9tYWlfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tYXJfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ3N1bmRhZ19tw6VuZGFnX3R5c2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbGF1cmRhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzdW5fbcOlbl90eXNfb25zX3Rvcl9mcmVfbGF1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdzdV9tw6VfdHlfb25fdG9fZnJfbMO4Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgW2tsLl0gSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRC4gTU1NTSBZWVlZIFtrbC5dIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSSBkYWcga2xva2thXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0kgbW9yZ29uIGtsb2trYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtrbG9ra2FdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSSBnw6VyIGtsb2trYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbRsO4cmVnw6VhbmRlXSBkZGRkIFtrbG9ra2FdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ29tICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgc2lkYW4nLFxuICAgICAgICAgICAgcyA6ICdub2tyZSBzZWt1bmQnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VrdW5kJyxcbiAgICAgICAgICAgIG0gOiAnZWl0IG1pbnV0dCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dHQnLFxuICAgICAgICAgICAgaCA6ICdlaW4gdGltZScsXG4gICAgICAgICAgICBoaCA6ICclZCB0aW1hcicsXG4gICAgICAgICAgICBkIDogJ2VpbiBkYWcnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGFnYXInLFxuICAgICAgICAgICAgTSA6ICdlaW4gbcOlbmFkJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG3DpW5hZGVyJyxcbiAgICAgICAgICAgIHkgOiAnZWl0IMOlcicsXG4gICAgICAgICAgICB5eSA6ICclZCDDpXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbm47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ+CppycsXG4gICAgICAgICcyJzogJ+CpqCcsXG4gICAgICAgICczJzogJ+CpqScsXG4gICAgICAgICc0JzogJ+CpqicsXG4gICAgICAgICc1JzogJ+CpqycsXG4gICAgICAgICc2JzogJ+CprCcsXG4gICAgICAgICc3JzogJ+CprScsXG4gICAgICAgICc4JzogJ+CpricsXG4gICAgICAgICc5JzogJ+CprycsXG4gICAgICAgICcwJzogJ+CppidcbiAgICB9LFxuICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ+Cppyc6ICcxJyxcbiAgICAgICAgJ+CpqCc6ICcyJyxcbiAgICAgICAgJ+CpqSc6ICczJyxcbiAgICAgICAgJ+Cpqic6ICc0JyxcbiAgICAgICAgJ+Cpqyc6ICc1JyxcbiAgICAgICAgJ+CprCc6ICc2JyxcbiAgICAgICAgJ+CprSc6ICc3JyxcbiAgICAgICAgJ+Cpric6ICc4JyxcbiAgICAgICAgJ+Cpryc6ICc5JyxcbiAgICAgICAgJ+Cppic6ICcwJ1xuICAgIH07XG5cbiAgICB2YXIgcGFJbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3BhLWluJywge1xuICAgICAgICAvLyBUaGVyZSBhcmUgbW9udGhzIG5hbWUgYXMgcGVyIE5hbmFrc2hhaGkgQ2FsZW5kYXIgYnV0IHRoZXkgYXJlIG5vdCB1c2VkIGFzIHJpZ2lkbHkgaW4gbW9kZXJuIFB1bmphYmkuXG4gICAgICAgIG1vbnRocyA6ICfgqJzgqKjgqLXgqLDgqYBf4Kir4Ki84Kiw4Ki14Kiw4KmAX+CoruCovuCosOComl/gqIXgqKrgqY3gqLDgqYjgqLJf4Kiu4KiIX+ConOCpguCoqF/gqJzgqYHgqLLgqL7gqIhf4KiF4KiX4Ki44KikX+CouOCopOCpsOCorOCosF/gqIXgqJXgqKTgqYLgqKzgqLBf4Kio4Ki14Kmw4Kis4KiwX+CopuCouOCpsOCorOCosCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4Kic4Kio4Ki14Kiw4KmAX+Coq+CovOCosOCoteCosOCpgF/gqK7gqL7gqLDgqJpf4KiF4Kiq4KmN4Kiw4KmI4KiyX+CoruCoiF/gqJzgqYLgqKhf4Kic4KmB4Kiy4Ki+4KiIX+CoheCol+CouOCopF/gqLjgqKTgqbDgqKzgqLBf4KiF4KiV4Kik4KmC4Kis4KiwX+CoqOCoteCpsOCorOCosF/gqKbgqLjgqbDgqKzgqLAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ+CokOCopOCoteCovuCosF/gqLjgqYvgqK7gqLXgqL7gqLBf4Kiu4Kmw4KiX4Kiy4Ki14Ki+4KiwX+CorOCpgeCop+CoteCovuCosF/gqLXgqYDgqLDgqLXgqL7gqLBf4Ki44Ki84KmB4Kmx4KiV4Kiw4Ki14Ki+4KiwX+CouOCovOCoqOCpgOComuCosOCoteCovuCosCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgqJDgqKRf4Ki44KmL4KiuX+CoruCpsOCol+Cosl/gqKzgqYHgqKdf4Ki14KmA4KiwX+CouOCovOCpgeColeCosF/gqLjgqLzgqKjgqYAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+CokOCopF/gqLjgqYvgqK5f4Kiu4Kmw4KiX4KiyX+CorOCpgeCop1/gqLXgqYDgqLBf4Ki44Ki84KmB4KiV4KiwX+CouOCovOCoqOCpgCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0g4Ki14Kic4KmHJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3Mg4Ki14Kic4KmHJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgqLXgqJzgqYcnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCoteConOCphydcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgqIXgqJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+ColeCosl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW+CoheCol+CosuCovl0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4KiV4KiyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb4Kiq4Ki/4Kib4Kiy4KmHXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg4Ki14Ki/4Kmx4KiaJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg4Kiq4Ki/4Kib4Kiy4KmHJyxcbiAgICAgICAgICAgIHMgOiAn4KiV4KmB4KidIOCouOColeCov+CpsOConycsXG4gICAgICAgICAgICBzcyA6ICclZCDgqLjgqJXgqL/gqbDgqJ8nLFxuICAgICAgICAgICAgbSA6ICfgqIfgqJUg4Kiu4Ki/4Kmw4KifJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOCoruCov+CpsOConycsXG4gICAgICAgICAgICBoIDogJ+Coh+CpseColSDgqJjgqbDgqJ/gqL4nLFxuICAgICAgICAgICAgaGggOiAnJWQg4KiY4Kmw4Kif4KmHJyxcbiAgICAgICAgICAgIGQgOiAn4KiH4Kmx4KiVIOCopuCov+CoqCcsXG4gICAgICAgICAgICBkZCA6ICclZCDgqKbgqL/gqKgnLFxuICAgICAgICAgICAgTSA6ICfgqIfgqbHgqJUg4Kiu4Ki54KmA4Kio4Ki+JyxcbiAgICAgICAgICAgIE1NIDogJyVkIOCoruCoueCpgOCoqOCphycsXG4gICAgICAgICAgICB5IDogJ+Coh+CpseColSDgqLjgqL7gqLInLFxuICAgICAgICAgICAgeXkgOiAnJWQg4Ki44Ki+4KiyJ1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Kmn4Kmo4Kmp4Kmq4Kmr4Kms4Kmt4Kmu4Kmv4KmmXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyBQdW5qYWJpIG5vdGF0aW9uIGZvciBtZXJpZGllbXMgYXJlIHF1aXRlIGZ1enp5IGluIHByYWN0aWNlLiBXaGlsZSB0aGVyZSBleGlzdHNcbiAgICAgICAgLy8gYSByaWdpZCBub3Rpb24gb2YgYSAnUGFoYXInIGl0IGlzIG5vdCB1c2VkIGFzIHJpZ2lkbHkgaW4gbW9kZXJuIFB1bmphYmkuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gqLDgqL7gqKR84Ki44Ki14KmH4KiwfOCopuCpgeCoquCoueCov+CosHzgqLjgqLzgqL7gqK4vLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4Kiw4Ki+4KikJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Ki44Ki14KmH4KiwJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CopuCpgeCoquCoueCov+CosCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Ki44Ki84Ki+4KiuJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqLDgqL7gqKQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CouOCoteCph+CosCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kim4KmB4Kiq4Ki54Ki/4KiwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqLjgqLzgqL7gqK4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CosOCovuCopCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBhSW47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtb250aHNOb21pbmF0aXZlID0gJ3N0eWN6ZcWEX2x1dHlfbWFyemVjX2t3aWVjaWXFhF9tYWpfY3plcndpZWNfbGlwaWVjX3NpZXJwaWXFhF93cnplc2llxYRfcGHFumR6aWVybmlrX2xpc3RvcGFkX2dydWR6aWXFhCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU3ViamVjdGl2ZSA9ICdzdHljem5pYV9sdXRlZ29fbWFyY2Ffa3dpZXRuaWFfbWFqYV9jemVyd2NhX2xpcGNhX3NpZXJwbmlhX3dyemXFm25pYV9wYcW6ZHppZXJuaWthX2xpc3RvcGFkYV9ncnVkbmlhJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIHBsdXJhbChuKSB7XG4gICAgICAgIHJldHVybiAobiAlIDEwIDwgNSkgJiYgKG4gJSAxMCA+IDEpICYmICgofn4obiAvIDEwKSAlIDEwKSAhPT0gMSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnc2VrdW5keScgOiAnc2VrdW5kJyk7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdtaW51dGEnIDogJ21pbnV0xJknO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWludXR5JyA6ICdtaW51dCcpO1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggID8gJ2dvZHppbmEnICA6ICdnb2R6aW7EmSc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdnb2R6aW55JyA6ICdnb2R6aW4nKTtcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21pZXNpxIVjZScgOiAnbWllc2nEmWN5Jyk7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdsYXRhJyA6ICdsYXQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3BsJywge1xuICAgICAgICBtb250aHMgOiBmdW5jdGlvbiAobW9tZW50VG9Gb3JtYXQsIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRUb0Zvcm1hdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNOb21pbmF0aXZlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgLy8gSGFjazogaWYgZm9ybWF0IGVtcHR5IHdlIGtub3cgdGhpcyBpcyB1c2VkIHRvIGdlbmVyYXRlXG4gICAgICAgICAgICAgICAgLy8gUmVnRXhwIGJ5IG1vbWVudC4gR2l2ZSB0aGVuIGJhY2sgYm90aCB2YWxpZCBmb3JtcyBvZiBtb250aHNcbiAgICAgICAgICAgICAgICAvLyBpbiBSZWdFeHAgcmVhZHkgZm9ybWF0LlxuICAgICAgICAgICAgICAgIHJldHVybiAnKCcgKyBtb250aHNTdWJqZWN0aXZlW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldICsgJ3wnICsgbW9udGhzTm9taW5hdGl2ZVttb21lbnRUb0Zvcm1hdC5tb250aCgpXSArICcpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL0QgTU1NTS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1N1YmplY3RpdmVbbW9tZW50VG9Gb3JtYXQubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNOb21pbmF0aXZlW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydCA6ICdzdHlfbHV0X21hcl9rd2lfbWFqX2N6ZV9saXBfc2llX3dyel9wYcW6X2xpc19ncnUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ25pZWR6aWVsYV9wb25pZWR6aWHFgmVrX3d0b3Jla1/Fm3JvZGFfY3p3YXJ0ZWtfcGnEhXRla19zb2JvdGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnbmR6X3Bvbl93dF/Fm3JfY3p3X3B0X3NvYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnTmRfUG5fV3RfxZpyX0N6X1B0X1NvJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tEemnFmyBvXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0p1dHJvIG9dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgbmllZHppZWzEmSBvXSBMVCc7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbV2Ugd3RvcmVrIG9dIExUJztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIMWbcm9kxJkgb10gTFQnO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgc29ib3TEmSBvXSBMVCc7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1ddIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1tXY3pvcmFqIG9dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgemVzesWCxIUgbmllZHppZWzEmSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgemVzesWCxIUgxZtyb2TEmSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgemVzesWCxIUgc29ib3TEmSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHplc3rFgnldIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyB0ZW11JyxcbiAgICAgICAgICAgIHMgOiAna2lsa2Egc2VrdW5kJyxcbiAgICAgICAgICAgIHNzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZCA6ICcxIGR6aWXFhCcsXG4gICAgICAgICAgICBkZCA6ICclZCBkbmknLFxuICAgICAgICAgICAgTSA6ICdtaWVzacSFYycsXG4gICAgICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgOiAncm9rJyxcbiAgICAgICAgICAgIHl5IDogdHJhbnNsYXRlXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcGw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBwdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3B0Jywge1xuICAgICAgICBtb250aHMgOiAnSmFuZWlyb19GZXZlcmVpcm9fTWFyw6dvX0FicmlsX01haW9fSnVuaG9fSnVsaG9fQWdvc3RvX1NldGVtYnJvX091dHVicm9fTm92ZW1icm9fRGV6ZW1icm8nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZXZfTWFyX0Ficl9NYWlfSnVuX0p1bF9BZ29fU2V0X091dF9Ob3ZfRGV6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdEb21pbmdvX1NlZ3VuZGEtZmVpcmFfVGVyw6dhLWZlaXJhX1F1YXJ0YS1mZWlyYV9RdWludGEtZmVpcmFfU2V4dGEtZmVpcmFfU8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdEb21fU2VnX1Rlcl9RdWFfUXVpX1NleF9Tw6FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdEb18ywqpfM8KqXzTCql81wqpfNsKqX1PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSG9qZSDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQW1hbmjDoyDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BzXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW09udGVtIMOgc10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuZGF5KCkgPT09IDAgfHwgdGhpcy5kYXkoKSA9PT0gNikgP1xuICAgICAgICAgICAgICAgICAgICAnW8OabHRpbW9dIGRkZGQgW8Ogc10gTFQnIDogLy8gU2F0dXJkYXkgKyBTdW5kYXlcbiAgICAgICAgICAgICAgICAgICAgJ1vDmmx0aW1hXSBkZGRkIFvDoHNdIExUJzsgLy8gTW9uZGF5IC0gRnJpZGF5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZW0gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdow6EgJXMnLFxuICAgICAgICAgICAgcyA6ICdzZWd1bmRvcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtIDogJ3VtIG1pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGggOiAndW1hIGhvcmEnLFxuICAgICAgICAgICAgaGggOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZCA6ICd1bSBkaWEnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGlhcycsXG4gICAgICAgICAgICBNIDogJ3VtIG3DqnMnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbWVzZXMnLFxuICAgICAgICAgICAgeSA6ICd1bSBhbm8nLFxuICAgICAgICAgICAgeXkgOiAnJWQgYW5vcydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsIDogJyVkwronLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBwdDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHB0QnIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdwdC1icicsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbmVpcm9fRmV2ZXJlaXJvX01hcsOnb19BYnJpbF9NYWlvX0p1bmhvX0p1bGhvX0Fnb3N0b19TZXRlbWJyb19PdXR1YnJvX05vdmVtYnJvX0RlemVtYnJvJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmV2X01hcl9BYnJfTWFpX0p1bl9KdWxfQWdvX1NldF9PdXRfTm92X0Rleicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnRG9taW5nb19TZWd1bmRhLWZlaXJhX1RlcsOnYS1mZWlyYV9RdWFydGEtZmVpcmFfUXVpbnRhLWZlaXJhX1NleHRhLWZlaXJhX1PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnRG9tX1NlZ19UZXJfUXVhX1F1aV9TZXhfU8OhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnRG9fMsKqXzPCql80wqpfNcKqXzbCql9Tw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBbw6BzXSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBbw6BzXSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hvamUgw6BzXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0FtYW5ow6Mgw6BzXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW8Ogc10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tPbnRlbSDDoHNdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmRheSgpID09PSAwIHx8IHRoaXMuZGF5KCkgPT09IDYpID9cbiAgICAgICAgICAgICAgICAgICAgJ1vDmmx0aW1vXSBkZGRkIFvDoHNdIExUJyA6IC8vIFNhdHVyZGF5ICsgU3VuZGF5XG4gICAgICAgICAgICAgICAgICAgICdbw5psdGltYV0gZGRkZCBbw6BzXSBMVCc7IC8vIE1vbmRheSAtIEZyaWRheVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2VtICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnaMOhICVzJyxcbiAgICAgICAgICAgIHMgOiAncG91Y29zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG0gOiAndW0gbWludXRvJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaCA6ICd1bWEgaG9yYScsXG4gICAgICAgICAgICBoaCA6ICclZCBob3JhcycsXG4gICAgICAgICAgICBkIDogJ3VtIGRpYScsXG4gICAgICAgICAgICBkZCA6ICclZCBkaWFzJyxcbiAgICAgICAgICAgIE0gOiAndW0gbcOqcycsXG4gICAgICAgICAgICBNTSA6ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5IDogJ3VtIGFubycsXG4gICAgICAgICAgICB5eSA6ICclZCBhbm9zJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWwgOiAnJWTCuidcbiAgICB9KTtcblxuICAgIHJldHVybiBwdEJyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAgICAgJ3NzJzogJ3NlY3VuZGUnLFxuICAgICAgICAgICAgICAgICdtbSc6ICdtaW51dGUnLFxuICAgICAgICAgICAgICAgICdoaCc6ICdvcmUnLFxuICAgICAgICAgICAgICAgICdkZCc6ICd6aWxlJyxcbiAgICAgICAgICAgICAgICAnTU0nOiAnbHVuaScsXG4gICAgICAgICAgICAgICAgJ3l5JzogJ2FuaSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXBhcmF0b3IgPSAnICc7XG4gICAgICAgIGlmIChudW1iZXIgJSAxMDAgPj0gMjAgfHwgKG51bWJlciA+PSAxMDAgJiYgbnVtYmVyICUgMTAwID09PSAwKSkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gJyBkZSAnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBzZXBhcmF0b3IgKyBmb3JtYXRba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgcm8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdybycsIHtcbiAgICAgICAgbW9udGhzIDogJ2lhbnVhcmllX2ZlYnJ1YXJpZV9tYXJ0aWVfYXByaWxpZV9tYWlfaXVuaWVfaXVsaWVfYXVndXN0X3NlcHRlbWJyaWVfb2N0b21icmllX25vaWVtYnJpZV9kZWNlbWJyaWUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2lhbi5fZmVici5fbWFydC5fYXByLl9tYWlfaXVuLl9pdWwuX2F1Zy5fc2VwdC5fb2N0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2R1bWluaWPEg19sdW5pX21hcsibaV9taWVyY3VyaV9qb2lfdmluZXJpX3PDom1ixIN0xIMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnRHVtX0x1bl9NYXJfTWllX0pvaV9WaW5fU8OibScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnRHVfTHVfTWFfTWlfSm9fVmlfU8OiJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2F6aSBsYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttw6JpbmUgbGFdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbbGFdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbaWVyaSBsYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbZm9zdGFdIGRkZGQgW2xhXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdwZXN0ZSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIMOubiB1cm3EgycsXG4gICAgICAgICAgICBzIDogJ2PDonRldmEgc2VjdW5kZScsXG4gICAgICAgICAgICBzcyA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtIDogJ3VuIG1pbnV0JyxcbiAgICAgICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGggOiAnbyBvcsSDJyxcbiAgICAgICAgICAgIGhoIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQgOiAnbyB6aScsXG4gICAgICAgICAgICBkZCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBNIDogJ28gbHVuxIMnLFxuICAgICAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeSA6ICd1biBhbicsXG4gICAgICAgICAgICB5eSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWxcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcm87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHBsdXJhbCh3b3JkLCBudW0pIHtcbiAgICAgICAgdmFyIGZvcm1zID0gd29yZC5zcGxpdCgnXycpO1xuICAgICAgICByZXR1cm4gbnVtICUgMTAgPT09IDEgJiYgbnVtICUgMTAwICE9PSAxMSA/IGZvcm1zWzBdIDogKG51bSAlIDEwID49IDIgJiYgbnVtICUgMTAgPD0gNCAmJiAobnVtICUgMTAwIDwgMTAgfHwgbnVtICUgMTAwID49IDIwKSA/IGZvcm1zWzFdIDogZm9ybXNbMl0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAnc3MnOiB3aXRob3V0U3VmZml4ID8gJ9GB0LXQutGD0L3QtNCwX9GB0LXQutGD0L3QtNGLX9GB0LXQutGD0L3QtCcgOiAn0YHQtdC60YPQvdC00YNf0YHQtdC60YPQvdC00Ytf0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgICdtbSc6IHdpdGhvdXRTdWZmaXggPyAn0LzQuNC90YPRgtCwX9C80LjQvdGD0YLRi1/QvNC40L3Rg9GCJyA6ICfQvNC40L3Rg9GC0YNf0LzQuNC90YPRgtGLX9C80LjQvdGD0YInLFxuICAgICAgICAgICAgJ2hoJzogJ9GH0LDRgV/Rh9Cw0YHQsF/Rh9Cw0YHQvtCyJyxcbiAgICAgICAgICAgICdkZCc6ICfQtNC10L3RjF/QtNC90Y9f0LTQvdC10LknLFxuICAgICAgICAgICAgJ01NJzogJ9C80LXRgdGP0YZf0LzQtdGB0Y/RhtCwX9C80LXRgdGP0YbQtdCyJyxcbiAgICAgICAgICAgICd5eSc6ICfQs9C+0LRf0LPQvtC00LBf0LvQtdGCJ1xuICAgICAgICB9O1xuICAgICAgICBpZiAoa2V5ID09PSAnbScpIHtcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9C80LjQvdGD0YLQsCcgOiAn0LzQuNC90YPRgtGDJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBwbHVyYWwoZm9ybWF0W2tleV0sICtudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBtb250aHNQYXJzZSA9IFsvXtGP0L3Qsi9pLCAvXtGE0LXQsi9pLCAvXtC80LDRgC9pLCAvXtCw0L/RgC9pLCAvXtC80LBb0LnRj10vaSwgL17QuNGO0L0vaSwgL17QuNGO0LsvaSwgL17QsNCy0LMvaSwgL17RgdC10L0vaSwgL17QvtC60YIvaSwgL17QvdC+0Y8vaSwgL17QtNC10LovaV07XG5cbiAgICAvLyBodHRwOi8vbmV3LmdyYW1vdGEucnUvc3ByYXZrYS9ydWxlcy8xMzktcHJvcCA6IMKnIDEwM1xuICAgIC8vINCh0L7QutGA0LDRidC10L3QuNGPINC80LXRgdGP0YbQtdCyOiBodHRwOi8vbmV3LmdyYW1vdGEucnUvc3ByYXZrYS9idXJvL3NlYXJjaC1hbnN3ZXI/cz0yNDI2MzdcbiAgICAvLyBDTERSIGRhdGE6ICAgICAgICAgIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvY2xkci9jaGFydHMvMjgvc3VtbWFyeS9ydS5odG1sIzE3NTNcbiAgICB2YXIgcnUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdydScsIHtcbiAgICAgICAgbW9udGhzIDoge1xuICAgICAgICAgICAgZm9ybWF0OiAn0Y/QvdCy0LDRgNGPX9GE0LXQstGA0LDQu9GPX9C80LDRgNGC0LBf0LDQv9GA0LXQu9GPX9C80LDRj1/QuNGO0L3Rj1/QuNGO0LvRj1/QsNCy0LPRg9GB0YLQsF/RgdC10L3RgtGP0LHRgNGPX9C+0LrRgtGP0LHRgNGPX9C90L7Rj9Cx0YDRj1/QtNC10LrQsNCx0YDRjycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfRj9C90LLQsNGA0Yxf0YTQtdCy0YDQsNC70Yxf0LzQsNGA0YJf0LDQv9GA0LXQu9GMX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LPRg9GB0YJf0YHQtdC90YLRj9Cx0YDRjF/QvtC60YLRj9Cx0YDRjF/QvdC+0Y/QsdGA0Yxf0LTQtdC60LDQsdGA0YwnLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiB7XG4gICAgICAgICAgICAvLyDQv9C+IENMRFIg0LjQvNC10L3QvdC+IFwi0LjRjtC7LlwiINC4IFwi0LjRjtC9LlwiLCDQvdC+INC60LDQutC+0Lkg0YHQvNGL0YHQuyDQvNC10L3Rj9GC0Ywg0LHRg9C60LLRgyDQvdCwINGC0L7Rh9C60YMgP1xuICAgICAgICAgICAgZm9ybWF0OiAn0Y/QvdCyLl/RhNC10LLRgC5f0LzQsNGALl/QsNC/0YAuX9C80LDRj1/QuNGO0L3Rj1/QuNGO0LvRj1/QsNCy0LMuX9GB0LXQvdGCLl/QvtC60YIuX9C90L7Rj9CxLl/QtNC10LouJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ9GP0L3Qsi5f0YTQtdCy0YAuX9C80LDRgNGCX9Cw0L/RgC5f0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQsy5f0YHQtdC90YIuX9C+0LrRgi5f0L3QvtGP0LEuX9C00LXQui4nLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgd2Vla2RheXMgOiB7XG4gICAgICAgICAgICBzdGFuZGFsb25lOiAn0LLQvtGB0LrRgNC10YHQtdC90YzQtV/Qv9C+0L3QtdC00LXQu9GM0L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00LBf0YfQtdGC0LLQtdGA0LNf0L/Rj9GC0L3QuNGG0LBf0YHRg9Cx0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBmb3JtYXQ6ICfQstC+0YHQutGA0LXRgdC10L3RjNC1X9C/0L7QvdC10LTQtdC70YzQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNC10LTRg1/Rh9C10YLQstC10YDQs1/Qv9GP0YLQvdC40YbRg1/RgdGD0LHQsdC+0YLRgycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvXFxbID9b0JLQsl0gPyg/OtC/0YDQvtGI0LvRg9GOfNGB0LvQtdC00YPRjtGJ0YPRjnzRjdGC0YMpPyA/XFxdID9kZGRkL1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9Cy0YFf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9Cy0YFf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG5cbiAgICAgICAgLy8g0L/QvtC70L3Ri9C1INC90LDQt9Cy0LDQvdC40Y8g0YEg0L/QsNC00LXQttCw0LzQuCwg0L/QviDRgtGA0Lgg0LHRg9C60LLRiywg0LTQu9GPINC90LXQutC+0YLQvtGA0YvRhSwg0L/QviA0INCx0YPQutCy0YssINGB0L7QutGA0LDRidC10L3QuNGPINGBINGC0L7Rh9C60L7QuSDQuCDQsdC10Lcg0YLQvtGH0LrQuFxuICAgICAgICBtb250aHNSZWdleDogL14o0Y/QvdCy0LDRgFvRjNGPXXzRj9C90LJcXC4/fNGE0LXQstGA0LDQu1vRjNGPXXzRhNC10LLRgD9cXC4/fNC80LDRgNGC0LA/fNC80LDRgFxcLj980LDQv9GA0LXQu1vRjNGPXXzQsNC/0YBcXC4/fNC80LBb0LnRj1180LjRjtC9W9GM0Y9dfNC40Y7QvVxcLj980LjRjtC7W9GM0Y9dfNC40Y7Qu1xcLj980LDQstCz0YPRgdGC0LA/fNCw0LLQs1xcLj980YHQtdC90YLRj9Cx0YBb0YzRj1180YHQtdC90YI/XFwuP3zQvtC60YLRj9Cx0YBb0YzRj1180L7QutGCXFwuP3zQvdC+0Y/QsdGAW9GM0Y9dfNC90L7Rj9CxP1xcLj980LTQtdC60LDQsdGAW9GM0Y9dfNC00LXQulxcLj8pL2ksXG5cbiAgICAgICAgLy8g0LrQvtC/0LjRjyDQv9GA0LXQtNGL0LTRg9GJ0LXQs9C+XG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IC9eKNGP0L3QstCw0YBb0YzRj1180Y/QvdCyXFwuP3zRhNC10LLRgNCw0Ltb0YzRj1180YTQtdCy0YA/XFwuP3zQvNCw0YDRgtCwP3zQvNCw0YBcXC4/fNCw0L/RgNC10Ltb0YzRj1180LDQv9GAXFwuP3zQvNCwW9C50Y9dfNC40Y7QvVvRjNGPXXzQuNGO0L1cXC4/fNC40Y7Qu1vRjNGPXXzQuNGO0LtcXC4/fNCw0LLQs9GD0YHRgtCwP3zQsNCy0LNcXC4/fNGB0LXQvdGC0Y/QsdGAW9GM0Y9dfNGB0LXQvdGCP1xcLj980L7QutGC0Y/QsdGAW9GM0Y9dfNC+0LrRglxcLj980L3QvtGP0LHRgFvRjNGPXXzQvdC+0Y/QsT9cXC4/fNC00LXQutCw0LHRgFvRjNGPXXzQtNC10LpcXC4/KS9pLFxuXG4gICAgICAgIC8vINC/0L7Qu9C90YvQtSDQvdCw0LfQstCw0L3QuNGPINGBINC/0LDQtNC10LbQsNC80LhcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6IC9eKNGP0L3QstCw0YBb0Y/RjF180YTQtdCy0YDQsNC7W9GP0YxdfNC80LDRgNGC0LA/fNCw0L/RgNC10Ltb0Y/RjF180LzQsFvRj9C5XXzQuNGO0L1b0Y/RjF180LjRjtC7W9GP0YxdfNCw0LLQs9GD0YHRgtCwP3zRgdC10L3RgtGP0LHRgFvRj9GMXXzQvtC60YLRj9Cx0YBb0Y/RjF180L3QvtGP0LHRgFvRj9GMXXzQtNC10LrQsNCx0YBb0Y/RjF0pL2ksXG5cbiAgICAgICAgLy8g0JLRi9GA0LDQttC10L3QuNC1LCDQutC+0YLQvtGA0L7QtSDRgdC+0L7RgtCy0LXRgdGC0LLRg9C10YIg0YLQvtC70YzQutC+INGB0L7QutGA0LDRidGR0L3QvdGL0Lwg0YTQvtGA0LzQsNC8XG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6IC9eKNGP0L3QslxcLnzRhNC10LLRgD9cXC580LzQsNGAW9GCLl180LDQv9GAXFwufNC80LBb0Y/QuV180LjRjtC9W9GM0Y8uXXzQuNGO0Ltb0YzRjy5dfNCw0LLQs1xcLnzRgdC10L3Rgj9cXC580L7QutGCXFwufNC90L7Rj9CxP1xcLnzQtNC10LpcXC4pL2ksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVkg0LMuJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSDQsy4sIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSDQsy4sIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQodC10LPQvtC00L3Rjywg0LJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0JfQsNCy0YLRgNCwLCDQsl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vQktGH0LXRgNCwLCDQsl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93LndlZWsoKSAhPT0gdGhpcy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0YHQu9C10LTRg9GO0YnQtdC1XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDRgdC70LXQtNGD0Y7RidC40LldIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0YPRjl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXkoKSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JLQvl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93LndlZWsoKSAhPT0gdGhpcy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0L/RgNC+0YjQu9C+0LVdIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvRi9C5XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDQv9GA0L7RiNC70YPRjl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXkoKSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JLQvl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn0YfQtdGA0LXQtyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzINC90LDQt9Cw0LQnLFxuICAgICAgICAgICAgcyA6ICfQvdC10YHQutC+0LvRjNC60L4g0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIHNzIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbW0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaCA6ICfRh9Cw0YEnLFxuICAgICAgICAgICAgaGggOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgZCA6ICfQtNC10L3RjCcsXG4gICAgICAgICAgICBkZCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBNIDogJ9C80LXRgdGP0YYnLFxuICAgICAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeSA6ICfQs9C+0LQnLFxuICAgICAgICAgICAgeXkgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/QvdC+0YfQuHzRg9GC0YDQsHzQtNC90Y980LLQtdGH0LXRgNCwL2ksXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0LXRgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GD0YLRgNCwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQtNC90Y8nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cy0LXRh9C10YDQsCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0Ll80LPQvnzRjykvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LknO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Qs9C+JztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0Y8nO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJ1O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAn2KzZhtmI2LHZiicsXG4gICAgICAgICfZgdmK2KjYsdmI2LHZiicsXG4gICAgICAgICfZhdin2LHahicsXG4gICAgICAgICfYp9m+2LHZitmEJyxcbiAgICAgICAgJ9mF2KbZiicsXG4gICAgICAgICfYrNmI2YYnLFxuICAgICAgICAn2KzZiNmE2KfYodmQJyxcbiAgICAgICAgJ9ii2q/Ys9m9JyxcbiAgICAgICAgJ9iz2YrZvtm92YXYqNixJyxcbiAgICAgICAgJ9ii2qrZvdmI2KjYsScsXG4gICAgICAgICfZhtmI2YXYqNixJyxcbiAgICAgICAgJ9qK2LPZhdio2LEnXG4gICAgXTtcbiAgICB2YXIgZGF5cyA9IFtcbiAgICAgICAgJ9ii2obYsScsXG4gICAgICAgICfYs9mI2YXYsScsXG4gICAgICAgICfYp9qx2KfYsdmIJyxcbiAgICAgICAgJ9in2LHYqNi5JyxcbiAgICAgICAgJ9iu2YXZitizJyxcbiAgICAgICAgJ9is2YXYuScsXG4gICAgICAgICfah9mG2ofYsSdcbiAgICBdO1xuXG4gICAgdmFyIHNkID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2QnLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzIDogZGF5cyxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6IGRheXMsXG4gICAgICAgIHdlZWtkYXlzTWluIDogZGF5cyxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGTYjCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i12KjYrXzYtNin2YUvLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9i02KfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i12KjYrSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJ9i02KfZhSc7XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb2KfahF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb2LPagNin2rvZil0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb2Kfas9mK2YYg2YfZgdiq2Yog2KrZil0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb2qrYp9mE2YfZh10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW9qv2LLYsdmK2YQg2YfZgdiq2YpdIGRkZGQgW9iq2YpdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDZvtmI2KEnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDYp9qzJyxcbiAgICAgICAgICAgIHMgOiAn2obZhtivINiz2YraqtmG2oonLFxuICAgICAgICAgICAgc3MgOiAnJWQg2LPZitqq2YbaiicsXG4gICAgICAgICAgICBtIDogJ9mH2qog2YXZhtm9JyxcbiAgICAgICAgICAgIG1tIDogJyVkINmF2YbZvScsXG4gICAgICAgICAgICBoIDogJ9mH2qog2qrZhNin2qonLFxuICAgICAgICAgICAgaGggOiAnJWQg2qrZhNin2qonLFxuICAgICAgICAgICAgZCA6ICfZh9qqINqP2YrZhtmH2YYnLFxuICAgICAgICAgICAgZGQgOiAnJWQg2o/ZitmG2YfZhicsXG4gICAgICAgICAgICBNIDogJ9mH2qog2YXZh9mK2YbZiCcsXG4gICAgICAgICAgICBNTSA6ICclZCDZhdmH2YrZhtinJyxcbiAgICAgICAgICAgIHkgOiAn2YfaqiDYs9in2YQnLFxuICAgICAgICAgICAgeXkgOiAnJWQg2LPYp9mEJ1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNkO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc2UgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzZScsIHtcbiAgICAgICAgbW9udGhzIDogJ2/EkcSRYWphZ2Vtw6FubnVfZ3VvdnZhbcOhbm51X25qdWvEjWFtw6FubnVfY3VvxYtvbcOhbm51X21pZXNzZW3DoW5udV9nZWFzc2Vtw6FubnVfc3VvaWRuZW3DoW5udV9ib3JnZW3DoW5udV/EjWFrxI1hbcOhbm51X2dvbGdnb3Rtw6FubnVfc2vDoWJtYW3DoW5udV9qdW92bGFtw6FubnUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2/EkcSRal9ndW92X25qdWtfY3VvX21pZXNfZ2Vhc19zdW9pX2JvcmdfxI1ha8SNX2dvbGdfc2vDoWJfanVvdicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnc290bmFiZWFpdmlfdnVvc3PDoXJnYV9tYcWLxYtlYsOhcmdhX2dhc2thdmFoa2t1X2R1b3Jhc3RhdF9iZWFyamFkYXRfbMOhdnZhcmRhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzb3RuX3Z1b3NfbWHFi19nYXNrX2R1b3JfYmVhcl9sw6F2Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdzX3ZfbV9nX2RfYl9MJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnTU1NTSBELiBbYi5dIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ01NTU0gRC4gW2IuXSBZWVlZIFt0aS5dIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTSBELiBbYi5dIFlZWVkgW3RpLl0gSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tvdG5lIHRpXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2lodHRpbiB0aV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt0aV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tpa3RlIHRpXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tvdmRkaXRdIGRkZGQgW3RpXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyBnZWHFvmVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnbWHFi2l0ICVzJyxcbiAgICAgICAgICAgIHMgOiAnbW9hZGRlIHNla3VuZGRhdCcsXG4gICAgICAgICAgICBzczogJyVkIHNla3VuZGRhdCcsXG4gICAgICAgICAgICBtIDogJ29rdGEgbWludWh0YScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51aHRhdCcsXG4gICAgICAgICAgICBoIDogJ29rdGEgZGlpbW11JyxcbiAgICAgICAgICAgIGhoIDogJyVkIGRpaW1tdXQnLFxuICAgICAgICAgICAgZCA6ICdva3RhIGJlYWl2aScsXG4gICAgICAgICAgICBkZCA6ICclZCBiZWFpdnZpdCcsXG4gICAgICAgICAgICBNIDogJ29rdGEgbcOhbm51JyxcbiAgICAgICAgICAgIE1NIDogJyVkIG3DoW51dCcsXG4gICAgICAgICAgICB5IDogJ29rdGEgamFoa2knLFxuICAgICAgICAgICAgeXkgOiAnJWQgamFnaXQnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2U7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIC8qanNoaW50IC1XMTAwKi9cbiAgICB2YXIgc2kgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzaScsIHtcbiAgICAgICAgbW9udGhzIDogJ+C2ouC2seC3gOC3j+C2u+C3kl/gtrTgt5ngtrbgtrvgt4Dgt4/gtrvgt5Jf4La44LeP4La74LeK4Lat4LeUX+C2heC2tOC3iuKAjeC2u+C3muC2veC3il/gtrjgt5Dgtrrgt5Jf4Lai4LeW4Lax4LeSX+C2ouC3luC2veC3kl/gtoXgtpzgt53gt4Pgt4rgtq3gt5Rf4LeD4LeQ4La04LeK4Lat4LeQ4La44LeK4La24La74LeKX+C2lOC2muC3iuC2reC3neC2tuC2u+C3il/gtrHgt5zgt4Dgt5Dgtrjgt4rgtrbgtrvgt4pf4Lav4LeZ4LeD4LeQ4La44LeK4La24La74LeKJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfgtqLgtrFf4La04LeZ4La2X+C2uOC3j+C2u+C3il/gtoXgtrTgt4pf4La44LeQ4La64LeSX+C2ouC3luC2seC3kl/gtqLgt5bgtr3gt5Jf4LaF4Lac4LedX+C3g+C3kOC2tOC3il/gtpTgtprgt4pf4Lax4Lec4LeA4LeQX+C2r+C3meC3g+C3kCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn4LaJ4La74LeS4Lav4LePX+C3g+C2s+C3lOC2r+C3j1/gtoXgtp/gt4Tgtrvgt5Tgt4Dgt4/gtq/gt49f4La24Lav4LeP4Lav4LePX+C2tuC3iuKAjeC2u+C3hOC3g+C3iuC2tOC2reC3kuC2seC3iuC2r+C3j1/gt4Pgt5Lgtprgt5Tgtrvgt4/gtq/gt49f4LeD4LeZ4Lax4LeD4LeU4La74LeP4Lav4LePJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+C2ieC2u+C3kl/gt4PgtrPgt5Rf4LaF4LafX+C2tuC2r+C3j1/gtrbgt4rigI3gtrvgt4Rf4LeD4LeS4Laa4LeUX+C3g+C3meC2sScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4LaJX+C3g1/gtoVf4La2X+C2tuC3iuKAjeC2u1/gt4Pgt5Jf4LeD4LeZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ2EgaDptbScsXG4gICAgICAgICAgICBMVFMgOiAnYSBoOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBMTCA6ICdZWVlZIE1NTU0gRCcsXG4gICAgICAgICAgICBMTEwgOiAnWVlZWSBNTU1NIEQsIGEgaDptbScsXG4gICAgICAgICAgICBMTExMIDogJ1lZWVkgTU1NTSBEIFvgt4Dgt5DgtrHgt5JdIGRkZGQsIGEgaDptbTpzcydcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgtoXgtq9dIExUW+C2p10nLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4LeE4LeZ4LanXSBMVFvgtqddJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgTFRb4LanXScsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgtorgtrrgt5pdIExUW+C2p10nLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+C2tOC3g+C3lOC2nOC3kuC2ul0gZGRkZCBMVFvgtqddJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclc+C2muC3kuC2seC3iicsXG4gICAgICAgICAgICBwYXN0IDogJyVz4Laa4LanIOC2tOC3meC2uycsXG4gICAgICAgICAgICBzIDogJ+C2reC2reC3iuC2tOC2uyDgtprgt5Lgt4Tgt5LgtrTgtronLFxuICAgICAgICAgICAgc3MgOiAn4Lat4Lat4LeK4La04La7ICVkJyxcbiAgICAgICAgICAgIG0gOiAn4La44LeS4Lax4LeS4Lat4LeK4Lat4LeU4LeAJyxcbiAgICAgICAgICAgIG1tIDogJ+C2uOC3kuC2seC3kuC2reC3iuC2reC3lCAlZCcsXG4gICAgICAgICAgICBoIDogJ+C2tOC3kOC2uicsXG4gICAgICAgICAgICBoaCA6ICfgtrTgt5DgtrogJWQnLFxuICAgICAgICAgICAgZCA6ICfgtq/gt5LgtrHgtronLFxuICAgICAgICAgICAgZGQgOiAn4Lav4LeS4LaxICVkJyxcbiAgICAgICAgICAgIE0gOiAn4La44LeP4LeD4La6JyxcbiAgICAgICAgICAgIE1NIDogJ+C2uOC3j+C3gyAlZCcsXG4gICAgICAgICAgICB5IDogJ+C3gOC3g+C2uycsXG4gICAgICAgICAgICB5eSA6ICfgt4Dgt4PgtrsgJWQnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSDgt4Dgt5DgtrHgt5IvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg4LeA4LeQ4Lax4LeSJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZSA6IC/gtrTgt5ngtrsg4LeA4La74LeUfOC2tOC3g+C3iiDgt4Dgtrvgt5R84La04LeZLuC3gHzgtrQu4LeALi8sXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+C2tC7gt4AuJyB8fCBpbnB1dCA9PT0gJ+C2tOC3g+C3iiDgt4Dgtrvgt5QnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfgtrQu4LeALicgOiAn4La04LeD4LeKIOC3gOC2u+C3lCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ+C2tOC3mS7gt4AuJyA6ICfgtrTgt5ngtrsg4LeA4La74LeUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzID0gJ2phbnXDoXJfZmVicnXDoXJfbWFyZWNfYXByw61sX23DoWpfasO6bl9qw7psX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0w7NiZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2phbl9mZWJfbWFyX2Fwcl9tw6FqX2rDum5fasO6bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIHBsdXJhbChuKSB7XG4gICAgICAgIHJldHVybiAobiA+IDEpICYmIChuIDwgNSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOiAgLy8gYSBmZXcgc2Vjb25kcyAvIGluIGEgZmV3IHNlY29uZHMgLyBhIGZldyBzZWNvbmRzIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkgPyAncMOhciBzZWvDum5kJyA6ICdww6FyIHNla3VuZGFtaSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6IC8vIDkgc2Vjb25kcyAvIGluIDkgc2Vjb25kcyAvIDkgc2Vjb25kcyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ3Nla3VuZHknIDogJ3Nla8O6bmQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ3Nla3VuZGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbSc6ICAvLyBhIG1pbnV0ZSAvIGluIGEgbWludXRlIC8gYSBtaW51dGUgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnbWluw7p0YScgOiAoaXNGdXR1cmUgPyAnbWluw7p0dScgOiAnbWluw7p0b3UnKTtcbiAgICAgICAgICAgIGNhc2UgJ21tJzogLy8gOSBtaW51dGVzIC8gaW4gOSBtaW51dGVzIC8gOSBtaW51dGVzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWluw7p0eScgOiAnbWluw7p0Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtaW7DunRhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2gnOiAgLy8gYW4gaG91ciAvIGluIGFuIGhvdXIgLyBhbiBob3VyIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2hvZGluYScgOiAoaXNGdXR1cmUgPyAnaG9kaW51JyA6ICdob2Rpbm91Jyk7XG4gICAgICAgICAgICBjYXNlICdoaCc6IC8vIDkgaG91cnMgLyBpbiA5IGhvdXJzIC8gOSBob3VycyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2hvZGlueScgOiAnaG9kw61uJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdob2RpbmFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZCc6ICAvLyBhIGRheSAvIGluIGEgZGF5IC8gYSBkYXkgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSA/ICdkZcWIJyA6ICdkxYhvbSc7XG4gICAgICAgICAgICBjYXNlICdkZCc6IC8vIDkgZGF5cyAvIGluIDkgZGF5cyAvIDkgZGF5cyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2RuaScgOiAnZG7DrScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZMWIYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdNJzogIC8vIGEgbW9udGggLyBpbiBhIG1vbnRoIC8gYSBtb250aCBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ21lc2lhYycgOiAnbWVzaWFjb20nO1xuICAgICAgICAgICAgY2FzZSAnTU0nOiAvLyA5IG1vbnRocyAvIGluIDkgbW9udGhzIC8gOSBtb250aHMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtZXNpYWNlJyA6ICdtZXNpYWNvdicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbWVzaWFjbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3knOiAgLy8gYSB5ZWFyIC8gaW4gYSB5ZWFyIC8gYSB5ZWFyIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkgPyAncm9rJyA6ICdyb2tvbSc7XG4gICAgICAgICAgICBjYXNlICd5eSc6IC8vIDkgeWVhcnMgLyBpbiA5IHllYXJzIC8gOSB5ZWFycyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ3Jva3knIDogJ3Jva292Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdyb2ttaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNrID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2snLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHNTaG9ydCxcbiAgICAgICAgd2Vla2RheXMgOiAnbmVkZcS+YV9wb25kZWxva191dG9yb2tfc3RyZWRhX8WhdHZydG9rX3BpYXRva19zb2JvdGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnbmVfcG9fdXRfc3RfxaF0X3BpX3NvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICduZV9wb191dF9zdF/FoXRfcGlfc28nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2RuZXMgb10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1t6YWp0cmEgb10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBuZWRlxL51IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc3RyZWR1IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdm8gxaF0dnJ0b2sgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHBpYXRvayBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc29ib3R1IG9dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1t2xI1lcmEgb10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDuiBuZWRlxL51IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO9XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw7ogc3RyZWR1IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO9XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw7ogc29ib3R1IG9dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdwcmVkICVzJyxcbiAgICAgICAgICAgIHMgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbmVrYWogc2VrdW5kJyA6ICduZWthaiBzZWt1bmRhbWknO1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggPyAnc2VrdW5kbycgOiAnc2VrdW5kaSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnc2VrdW5kaScgOiAnc2VrdW5kYWgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdzZWt1bmRlJyA6ICdzZWt1bmRhaCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnZW5hIG1pbnV0YScgOiAnZW5vIG1pbnV0byc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCA/ICdtaW51dGEnIDogJ21pbnV0byc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWludXRpJyA6ICdtaW51dGFtYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21pbnV0ZScgOiAnbWludXRhbWknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21pbnV0JyA6ICdtaW51dGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdlbmEgdXJhJyA6ICdlbm8gdXJvJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4ID8gJ3VyYScgOiAndXJvJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICd1cmknIDogJ3VyYW1hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAndXJlJyA6ICd1cmFtaSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAndXInIDogJ3VyYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2VuIGRhbicgOiAnZW5pbSBkbmVtJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2RhbicgOiAnZG5lbSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZG5pJyA6ICdkbmV2b21hJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdkbmknIDogJ2RuZXZpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2VuIG1lc2VjJyA6ICdlbmltIG1lc2VjZW0nO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzZWMnIDogJ21lc2VjZW0nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21lc2VjYScgOiAnbWVzZWNlbWEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtZXNlY2UnIDogJ21lc2VjaSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzZWNldicgOiAnbWVzZWNpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2VubyBsZXRvJyA6ICdlbmltIGxldG9tJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2xldG8nIDogJ2xldG9tJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXRpJyA6ICdsZXRvbWEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXRhJyA6ICdsZXRpJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXQnIDogJ2xldGknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2wnLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJfZmVicnVhcl9tYXJlY19hcHJpbF9tYWpfanVuaWpfanVsaWpfYXZndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW4uX2ZlYi5fbWFyLl9hcHIuX21hai5fanVuLl9qdWwuX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnbmVkZWxqYV9wb25lZGVsamVrX3RvcmVrX3NyZWRhX8SNZXRydGVrX3BldGVrX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICduZWQuX3Bvbi5fdG9yLl9zcmUuX8SNZXQuX3BldC5fc29iLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnbmVfcG9fdG9fc3JfxI1lX3BlX3NvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5ICA6ICdbZGFuZXMgb2JdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgIDogJ1tqdXRyaSBvYl0gTFQnLFxuXG4gICAgICAgICAgICBuZXh0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gW25lZGVsam9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBbc3JlZG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBbc29ib3RvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gZGRkZCBbb2JdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheSAgOiAnW3bEjWVyYWogb2JdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcmVqxaFuam9dIFtuZWRlbGpvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJlasWhbmpvXSBbc3JlZG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcmVqxaFuam9dIFtzb2JvdG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcmVqxaFuamldIGRkZGQgW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfEjWV6ICVzJyxcbiAgICAgICAgICAgIHBhc3QgICA6ICdwcmVkICVzJyxcbiAgICAgICAgICAgIHMgICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBzcyAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbSAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGggICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGQgICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZCAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTSAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5ICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXkgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzcScsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbmFyX1Noa3VydF9NYXJzX1ByaWxsX01hal9RZXJzaG9yX0tvcnJpa19HdXNodF9TaHRhdG9yX1RldG9yX07Dq250b3JfRGhqZXRvcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX1Noa19NYXJfUHJpX01hal9RZXJfS29yX0d1c19TaHRfVGV0X07Dq25fRGhqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdFIERpZWxfRSBIw6tuw6tfRSBNYXJ0w6tfRSBNw6tya3Vyw6tfRSBFbmp0ZV9FIFByZW10ZV9FIFNodHVuw6snLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnRGllX0jDq25fTWFyX03Dq3JfRW5qX1ByZV9TaHQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0RfSF9NYV9Nw6tfRV9QX1NoJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvUER8TUQvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5jaGFyQXQoMCkgPT09ICdNJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VycyA8IDEyID8gJ1BEJyA6ICdNRCc7XG4gICAgICAgIH0sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tTb3QgbsOrXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tOZXPDq3IgbsOrXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtuw6tdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0RqZSBuw6tdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2Uga2FsdWFyIG7Dq10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ27DqyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIG3DqyBwYXLDqycsXG4gICAgICAgICAgICBzIDogJ2Rpc2Egc2Vrb25kYScsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWtvbmRhJyxcbiAgICAgICAgICAgIG0gOiAnbmrDqyBtaW51dMOrJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0YScsXG4gICAgICAgICAgICBoIDogJ25qw6sgb3LDqycsXG4gICAgICAgICAgICBoaCA6ICclZCBvcsOrJyxcbiAgICAgICAgICAgIGQgOiAnbmrDqyBkaXTDqycsXG4gICAgICAgICAgICBkZCA6ICclZCBkaXTDqycsXG4gICAgICAgICAgICBNIDogJ25qw6sgbXVhaicsXG4gICAgICAgICAgICBNTSA6ICclZCBtdWFqJyxcbiAgICAgICAgICAgIHkgOiAnbmrDqyB2aXQnLFxuICAgICAgICAgICAgeXkgOiAnJWQgdml0ZSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzcTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHRyYW5zbGF0b3IgPSB7XG4gICAgICAgIHdvcmRzOiB7IC8vRGlmZmVyZW50IGdyYW1tYXRpY2FsIGNhc2VzXG4gICAgICAgICAgICBzczogWydzZWt1bmRhJywgJ3Nla3VuZGUnLCAnc2VrdW5kaSddLFxuICAgICAgICAgICAgbTogWydqZWRhbiBtaW51dCcsICdqZWRuZSBtaW51dGUnXSxcbiAgICAgICAgICAgIG1tOiBbJ21pbnV0JywgJ21pbnV0ZScsICdtaW51dGEnXSxcbiAgICAgICAgICAgIGg6IFsnamVkYW4gc2F0JywgJ2plZG5vZyBzYXRhJ10sXG4gICAgICAgICAgICBoaDogWydzYXQnLCAnc2F0YScsICdzYXRpJ10sXG4gICAgICAgICAgICBkZDogWydkYW4nLCAnZGFuYScsICdkYW5hJ10sXG4gICAgICAgICAgICBNTTogWydtZXNlYycsICdtZXNlY2EnLCAnbWVzZWNpJ10sXG4gICAgICAgICAgICB5eTogWydnb2RpbmEnLCAnZ29kaW5lJywgJ2dvZGluYSddXG4gICAgICAgIH0sXG4gICAgICAgIGNvcnJlY3RHcmFtbWF0aWNhbENhc2U6IGZ1bmN0aW9uIChudW1iZXIsIHdvcmRLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgPT09IDEgPyB3b3JkS2V5WzBdIDogKG51bWJlciA+PSAyICYmIG51bWJlciA8PSA0ID8gd29yZEtleVsxXSA6IHdvcmRLZXlbMl0pO1xuICAgICAgICB9LFxuICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICAgICAgdmFyIHdvcmRLZXkgPSB0cmFuc2xhdG9yLndvcmRzW2tleV07XG4gICAgICAgICAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gd29yZEtleVswXSA6IHdvcmRLZXlbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyB0cmFuc2xhdG9yLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UobnVtYmVyLCB3b3JkS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgc3IgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzcicsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFydF9hcHJpbF9tYWpfanVuX2p1bF9hdmd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuLl9mZWIuX21hci5fYXByLl9tYWpfanVuX2p1bF9hdmcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnbmVkZWxqYV9wb25lZGVsamFrX3V0b3Jha19zcmVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmVkLl9wb24uX3V0by5fc3JlLl/EjWV0Ll9wZXQuX3N1Yi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tzdXRyYSB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgIDogJ1tqdcSNZSB1XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdFdlZWtEYXlzID0gW1xuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtuZWRlbGplXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcG9uZWRlbGprYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW3V0b3JrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3JlZGVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFvEjWV0dnJ0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwZXRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFdlZWtEYXlzW3RoaXMuZGF5KCldO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0ICAgOiAncHJlICVzJyxcbiAgICAgICAgICAgIHMgICAgICA6ICduZWtvbGlrbyBzZWt1bmRpJyxcbiAgICAgICAgICAgIHNzICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgbSAgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtbSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBkICAgICAgOiAnZGFuJyxcbiAgICAgICAgICAgIGRkICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgTSAgICAgIDogJ21lc2VjJyxcbiAgICAgICAgICAgIE1NICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgeSAgICAgIDogJ2dvZGludScsXG4gICAgICAgICAgICB5eSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdHJhbnNsYXRvciA9IHtcbiAgICAgICAgd29yZHM6IHsgLy9EaWZmZXJlbnQgZ3JhbW1hdGljYWwgY2FzZXNcbiAgICAgICAgICAgIHNzOiBbJ9GB0LXQutGD0L3QtNCwJywgJ9GB0LXQutGD0L3QtNC1JywgJ9GB0LXQutGD0L3QtNC4J10sXG4gICAgICAgICAgICBtOiBbJ9GY0LXQtNCw0L0g0LzQuNC90YPRgicsICfRmNC10LTQvdC1INC80LjQvdGD0YLQtSddLFxuICAgICAgICAgICAgbW06IFsn0LzQuNC90YPRgicsICfQvNC40L3Rg9GC0LUnLCAn0LzQuNC90YPRgtCwJ10sXG4gICAgICAgICAgICBoOiBbJ9GY0LXQtNCw0L0g0YHQsNGCJywgJ9GY0LXQtNC90L7QsyDRgdCw0YLQsCddLFxuICAgICAgICAgICAgaGg6IFsn0YHQsNGCJywgJ9GB0LDRgtCwJywgJ9GB0LDRgtC4J10sXG4gICAgICAgICAgICBkZDogWyfQtNCw0L0nLCAn0LTQsNC90LAnLCAn0LTQsNC90LAnXSxcbiAgICAgICAgICAgIE1NOiBbJ9C80LXRgdC10YYnLCAn0LzQtdGB0LXRhtCwJywgJ9C80LXRgdC10YbQuCddLFxuICAgICAgICAgICAgeXk6IFsn0LPQvtC00LjQvdCwJywgJ9Cz0L7QtNC40L3QtScsICfQs9C+0LTQuNC90LAnXVxuICAgICAgICB9LFxuICAgICAgICBjb3JyZWN0R3JhbW1hdGljYWxDYXNlOiBmdW5jdGlvbiAobnVtYmVyLCB3b3JkS2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyID09PSAxID8gd29yZEtleVswXSA6IChudW1iZXIgPj0gMiAmJiBudW1iZXIgPD0gNCA/IHdvcmRLZXlbMV0gOiB3b3JkS2V5WzJdKTtcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgICAgIHZhciB3b3JkS2V5ID0gdHJhbnNsYXRvci53b3Jkc1trZXldO1xuICAgICAgICAgICAgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IHdvcmRLZXlbMF0gOiB3b3JkS2V5WzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgdHJhbnNsYXRvci5jb3JyZWN0R3JhbW1hdGljYWxDYXNlKG51bWJlciwgd29yZEtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHNyQ3lybCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NyLWN5cmwnLCB7XG4gICAgICAgIG1vbnRoczogJ9GY0LDQvdGD0LDRgF/RhNC10LHRgNGD0LDRgF/QvNCw0YDRgl/QsNC/0YDQuNC7X9C80LDRmF/RmNGD0L1f0ZjRg9C7X9Cw0LLQs9GD0YHRgl/RgdC10L/RgtC10LzQsdCw0YBf0L7QutGC0L7QsdCw0YBf0L3QvtCy0LXQvNCx0LDRgF/QtNC10YbQtdC80LHQsNGAJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJ9GY0LDQvS5f0YTQtdCxLl/QvNCw0YAuX9Cw0L/RgC5f0LzQsNGYX9GY0YPQvV/RmNGD0Ltf0LDQstCzLl/RgdC10L8uX9C+0LrRgi5f0L3QvtCyLl/QtNC10YYuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ9C90LXQtNC10ZnQsF/Qv9C+0L3QtdC00LXRmdCw0Lpf0YPRgtC+0YDQsNC6X9GB0YDQtdC00LBf0YfQtdGC0LLRgNGC0LDQul/Qv9C10YLQsNC6X9GB0YPQsdC+0YLQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9C90LXQtC5f0L/QvtC9Ll/Rg9GC0L4uX9GB0YDQtS5f0YfQtdGCLl/Qv9C10YIuX9GB0YPQsS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0L3QtV/Qv9C+X9GD0YJf0YHRgF/Rh9C1X9C/0LVf0YHRgycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9C00LDQvdCw0YEg0YNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0YHRg9GC0YDQsCDRg10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0YNdIFvQvdC10LTQtdGZ0YNdIFvRg10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vRg10gW9GB0YDQtdC00YNdIFvRg10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vRg10gW9GB0YPQsdC+0YLRg10gW9GDXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9GDXSBkZGRkIFvRg10gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5ICA6ICdb0ZjRg9GH0LUg0YNdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0V2Vla0RheXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C1XSBb0L3QtdC00LXRmdC1XSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70L7Qs10gW9C/0L7QvdC10LTQtdGZ0LrQsF0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C+0LNdIFvRg9GC0L7RgNC60LBdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQtV0gW9GB0YDQtdC00LVdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQvtCzXSBb0YfQtdGC0LLRgNGC0LrQsF0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C+0LNdIFvQv9C10YLQutCwXSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70LVdIFvRgdGD0LHQvtGC0LVdIFvRg10gTFQnXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFdlZWtEYXlzW3RoaXMuZGF5KCldO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfQt9CwICVzJyxcbiAgICAgICAgICAgIHBhc3QgICA6ICfQv9GA0LUgJXMnLFxuICAgICAgICAgICAgcyAgICAgIDogJ9C90LXQutC+0LvQuNC60L4g0YHQtdC60YPQvdC00LgnLFxuICAgICAgICAgICAgc3MgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtICAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaCAgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoaCAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgICAgICA6ICfQtNCw0L0nLFxuICAgICAgICAgICAgZGQgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBNICAgICAgOiAn0LzQtdGB0LXRhicsXG4gICAgICAgICAgICBNTSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgICAgICA6ICfQs9C+0LTQuNC90YMnLFxuICAgICAgICAgICAgeXkgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzckN5cmw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NzJywge1xuICAgICAgICBtb250aHMgOiBcIkJoaW1iaWR2d2FuZV9JbmRsb3ZhbmFfSW5kbG92J2xlbmtodWx1X01hYmFzYV9Jbmtod2VraHdldGlfSW5obGFiYV9LaG9sd2FuZV9JbmdjaV9JbnlvbmlfSW1waGFsYV9Md2V0aV9JbmdvbmdvbmlcIi5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdCaGlfSW5hX0ludV9NYWJfSW5rX0luaF9LaG9fSWdjX0lueV9JbXBfTHdlX0lnbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnTGlzb250Zm9fVW1zb21idWx1a29fTGVzaWJpbGlfTGVzaXRzYXRmdV9MZXNpbmVfTGVzaWhsYW51X1VtZ2NpYmVsbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdMaXNfVW1iX0xzYl9MZXNfTHNpX0xzaF9VbWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0xpX1VzX0xiX0x0X0xzX0xoX1VnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW05hbXVobGEgbmdhXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tLdXNhc2EgbmdhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtuZ2FdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0l0b2xvIG5nYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGVsaXBoZWxpbGVdIFtuZ2FdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICduZ2EgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICd3ZW50ZWthIG5nYSAlcycsXG4gICAgICAgICAgICBzIDogJ2VtaXp1endhbmEgbG9tY2FuZScsXG4gICAgICAgICAgICBzcyA6ICclZCBtenV6d2FuYScsXG4gICAgICAgICAgICBtIDogJ3VtenV6dScsXG4gICAgICAgICAgICBtbSA6ICclZCBlbWl6dXp1JyxcbiAgICAgICAgICAgIGggOiAnbGlob3JhJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGVtYWhvcmEnLFxuICAgICAgICAgICAgZCA6ICdsaWxhbmdhJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGVtYWxhbmdhJyxcbiAgICAgICAgICAgIE0gOiAnaW55YW5nYScsXG4gICAgICAgICAgICBNTSA6ICclZCB0aW55YW5nYScsXG4gICAgICAgICAgICB5IDogJ3Vtbnlha2EnLFxuICAgICAgICAgICAgeXkgOiAnJWQgaW1pbnlha2EnXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9la3VzZW5pfGVtaW5pfGVudHNhbWJhbWF8ZWJ1c3VrdS8sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZWt1c2VuaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VtaW5pJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZW50c2FtYmFtYSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZWJ1c3VrdSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdla3VzZW5pJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ2VtaW5pJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdlbnRzYW1iYW1hJyB8fCBtZXJpZGllbSA9PT0gJ2VidXN1a3UnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhvdXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQnLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3YnLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJpX2ZlYnJ1YXJpX21hcnNfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3RpX3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnc8O2bmRhZ19tw6VuZGFnX3Rpc2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbMO2cmRhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzw7ZuX23DpW5fdGlzX29uc190b3JfZnJlX2zDtnInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ3PDtl9tw6VfdGlfb25fdG9fZnJfbMO2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIFtrbC5dIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBba2wuXSBISDptbScsXG4gICAgICAgICAgICBsbGwgOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ2RkZCBEIE1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSWRhZ10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tJbW9yZ29uXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0lnw6VyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1tQw6VdIGRkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbSV0gZGRkZFtzXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdvbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2bDtnIgJXMgc2VkYW4nLFxuICAgICAgICAgICAgcyA6ICduw6VncmEgc2VrdW5kZXInLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VrdW5kZXInLFxuICAgICAgICAgICAgbSA6ICdlbiBtaW51dCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVyJyxcbiAgICAgICAgICAgIGggOiAnZW4gdGltbWUnLFxuICAgICAgICAgICAgaGggOiAnJWQgdGltbWFyJyxcbiAgICAgICAgICAgIGQgOiAnZW4gZGFnJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRhZ2FyJyxcbiAgICAgICAgICAgIE0gOiAnZW4gbcOlbmFkJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG3DpW5hZGVyJyxcbiAgICAgICAgICAgIHkgOiAnZXR0IMOlcicsXG4gICAgICAgICAgICB5eSA6ICclZCDDpXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlfGEpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAnZScgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdhJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ2EnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAnZScgOiAnZSc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN3ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3cnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY2hpX0FwcmlsaV9NZWlfSnVuaV9KdWxhaV9BZ29zdGlfU2VwdGVtYmFfT2t0b2JhX05vdmVtYmFfRGVzZW1iYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYWNfQXByX01laV9KdW5fSnVsX0Fnb19TZXBfT2t0X05vdl9EZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0p1bWFwaWxpX0p1bWF0YXR1X0p1bWFubmVfSnVtYXRhbm9fQWxoYW1pc2lfSWp1bWFhX0p1bWFtb3NpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0pwbF9KdGF0X0pubmVfSnRhbl9BbGhfSWptX0ptb3MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0oyX0ozX0o0X0o1X0FsX0lqX0oxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbbGVvIHNhYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdba2VzaG8gc2FhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdbd2lraSBpamF5b10gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbamFuYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW3dpa2kgaWxpeW9waXRhXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMgYmFhZGF5ZScsXG4gICAgICAgICAgICBwYXN0IDogJ3Rva2VhICVzJyxcbiAgICAgICAgICAgIHMgOiAnaGl2aSBwdW5kZScsXG4gICAgICAgICAgICBzcyA6ICdzZWt1bmRlICVkJyxcbiAgICAgICAgICAgIG0gOiAnZGFraWthIG1vamEnLFxuICAgICAgICAgICAgbW0gOiAnZGFraWthICVkJyxcbiAgICAgICAgICAgIGggOiAnc2FhIGxpbW9qYScsXG4gICAgICAgICAgICBoaCA6ICdtYXNhYSAlZCcsXG4gICAgICAgICAgICBkIDogJ3Npa3UgbW9qYScsXG4gICAgICAgICAgICBkZCA6ICdtYXNpa3UgJWQnLFxuICAgICAgICAgICAgTSA6ICdtd2V6aSBtbW9qYScsXG4gICAgICAgICAgICBNTSA6ICdtaWV6aSAlZCcsXG4gICAgICAgICAgICB5IDogJ213YWthIG1tb2phJyxcbiAgICAgICAgICAgIHl5IDogJ21pYWthICVkJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzdztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn4K+nJyxcbiAgICAgICAgJzInOiAn4K+oJyxcbiAgICAgICAgJzMnOiAn4K+pJyxcbiAgICAgICAgJzQnOiAn4K+qJyxcbiAgICAgICAgJzUnOiAn4K+rJyxcbiAgICAgICAgJzYnOiAn4K+sJyxcbiAgICAgICAgJzcnOiAn4K+tJyxcbiAgICAgICAgJzgnOiAn4K+uJyxcbiAgICAgICAgJzknOiAn4K+vJyxcbiAgICAgICAgJzAnOiAn4K+mJ1xuICAgIH0sIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ+Cvpyc6ICcxJyxcbiAgICAgICAgJ+CvqCc6ICcyJyxcbiAgICAgICAgJ+CvqSc6ICczJyxcbiAgICAgICAgJ+Cvqic6ICc0JyxcbiAgICAgICAgJ+Cvqyc6ICc1JyxcbiAgICAgICAgJ+CvrCc6ICc2JyxcbiAgICAgICAgJ+CvrSc6ICc3JyxcbiAgICAgICAgJ+Cvric6ICc4JyxcbiAgICAgICAgJ+Cvryc6ICc5JyxcbiAgICAgICAgJ+Cvpic6ICcwJ1xuICAgIH07XG5cbiAgICB2YXIgdGEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0YScsIHtcbiAgICAgICAgbW9udGhzIDogJ+CunOCuqeCuteCusOCuv1/grqrgrr/grqrgr43grrDgrrXgrrDgrr9f4K6u4K6+4K6w4K+N4K6a4K+NX+Cuj+CuquCvjeCusOCusuCvjV/grq7gr4df4K6c4K+C4K6p4K+NX+CunOCvguCusuCviF/grobgrpXgrrjgr43grp/gr41f4K6a4K+G4K6q4K+N4K6f4K+G4K6u4K+N4K6q4K6w4K+NX+CuheCuleCvjeCun+Cvh+CuvuCuquCusOCvjV/grqjgrrXgrq7gr43grqrgrrDgr41f4K6f4K6/4K6a4K6u4K+N4K6q4K6w4K+NJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfgrpzgrqngrrXgrrDgrr9f4K6q4K6/4K6q4K+N4K6w4K614K6w4K6/X+CuruCuvuCusOCvjeCumuCvjV/gro/grqrgr43grrDgrrLgr41f4K6u4K+HX+CunOCvguCuqeCvjV/grpzgr4LgrrLgr4hf4K6G4K6V4K644K+N4K6f4K+NX+CumuCvhuCuquCvjeCun+CvhuCuruCvjeCuquCusOCvjV/groXgrpXgr43grp/gr4fgrr7grqrgrrDgr41f4K6o4K614K6u4K+N4K6q4K6w4K+NX+Cun+Cuv+CumuCuruCvjeCuquCusOCvjScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn4K6e4K6+4K6v4K6/4K6x4K+N4K6x4K+B4K6V4K+N4K6V4K6/4K604K6u4K+IX+CupOCuv+CumeCvjeCuleCun+CvjeCuleCuv+CutOCuruCviF/grprgr4bgrrXgr43grrXgrr7grq/gr43grpXgrr/grrTgrq7gr4hf4K6q4K+B4K6k4K6p4K+N4K6V4K6/4K604K6u4K+IX+CuteCuv+Cur+CuvuCutOCuleCvjeCuleCuv+CutOCuruCviF/grrXgr4bgrrPgr43grrPgrr/grpXgr43grpXgrr/grrTgrq7gr4hf4K6a4K6p4K6/4K6V4K+N4K6V4K6/4K604K6u4K+IJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+CunuCuvuCur+Cuv+CuseCvgV/grqTgrr/grpngr43grpXgrrPgr41f4K6a4K+G4K614K+N4K614K6+4K6v4K+NX+CuquCvgeCupOCuqeCvjV/grrXgrr/grq/grr7grrTgrqngr41f4K614K+G4K6z4K+N4K6z4K6/X+CumuCuqeCuvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4K6e4K6+X+CupOCuv1/grprgr4Zf4K6q4K+BX+CuteCuv1/grrXgr4Zf4K6aJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgrofgrqngr43grrHgr4FdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+CuqOCuvuCus+CviF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4K6o4K+H4K6x4K+N4K6x4K+BXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb4K6V4K6f4K6o4K+N4K6kIOCuteCuvuCusOCuruCvjV0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIOCuh+CusuCvjScsXG4gICAgICAgICAgICBwYXN0IDogJyVzIOCuruCvgeCuqeCvjScsXG4gICAgICAgICAgICBzIDogJ+CukuCusOCvgSDgrprgrr/grrIg4K614K6/4K6o4K6+4K6f4K6/4K6V4K6z4K+NJyxcbiAgICAgICAgICAgIHNzIDogJyVkIOCuteCuv+CuqOCuvuCun+Cuv+CuleCus+CvjScsXG4gICAgICAgICAgICBtIDogJ+CukuCusOCvgSDgrqjgrr/grq7grr/grp/grq7gr40nLFxuICAgICAgICAgICAgbW0gOiAnJWQg4K6o4K6/4K6u4K6/4K6f4K6Z4K+N4K6V4K6z4K+NJyxcbiAgICAgICAgICAgIGggOiAn4K6S4K6w4K+BIOCuruCuo+CuvyDgrqjgr4fgrrDgrq7gr40nLFxuICAgICAgICAgICAgaGggOiAnJWQg4K6u4K6j4K6/IOCuqOCvh+CusOCuruCvjScsXG4gICAgICAgICAgICBkIDogJ+CukuCusOCvgSDgrqjgrr7grrPgr40nLFxuICAgICAgICAgICAgZGQgOiAnJWQg4K6o4K6+4K6f4K+N4K6V4K6z4K+NJyxcbiAgICAgICAgICAgIE0gOiAn4K6S4K6w4K+BIOCuruCuvuCupOCuruCvjScsXG4gICAgICAgICAgICBNTSA6ICclZCDgrq7grr7grqTgrpngr43grpXgrrPgr40nLFxuICAgICAgICAgICAgeSA6ICfgrpLgrrDgr4Eg4K614K6w4K+B4K6f4K6u4K+NJyxcbiAgICAgICAgICAgIHl5IDogJyVkIOCuhuCuo+CvjeCun+CvgeCuleCus+CvjSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ94K614K6k4K+BLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn4K614K6k4K+BJztcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Cvp+CvqOCvqeCvquCvq+CvrOCvreCvruCvr+Cvpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gcmVmZXIgaHR0cDovL3RhLndpa2lwZWRpYS5vcmcvcy8xZXIxXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/grq/grr7grq7grq7gr4184K614K+I4K6V4K6x4K+IfOCuleCuvuCusuCviHzgrqjgrqPgr43grqrgrpXgrrLgr4184K6O4K6x4K+N4K6q4K6+4K6f4K+BfOCuruCuvuCusuCviC8sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K6v4K6+4K6u4K6u4K+NJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrrXgr4jgrpXgrrHgr4gnOyAgLy8g4K614K+I4K6V4K6x4K+IXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCuleCuvuCusuCviCc7IC8vIOCuleCuvuCusuCviFxuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrqjgrqPgr43grqrgrpXgrrLgr40nOyAvLyDgrqjgrqPgr43grqrgrpXgrrLgr41cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K6O4K6x4K+N4K6q4K6+4K6f4K+BJzsgLy8g4K6O4K6x4K+N4K6q4K6+4K6f4K+BXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCuruCuvuCusuCviCc7IC8vIOCuruCuvuCusuCviFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrq/grr7grq7grq7gr40nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4K6v4K6+4K6u4K6u4K+NJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgMiA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4K614K+I4K6V4K6x4K+IJyB8fCBtZXJpZGllbSA9PT0gJ+CuleCuvuCusuCviCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgrqjgrqPgr43grqrgrpXgrrLgr40nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0YTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHRlID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGUnLCB7XG4gICAgICAgIG1vbnRocyA6ICfgsJzgsKjgsLXgsLDgsL9f4LCr4LC/4LCs4LGN4LCw4LC14LCw4LC/X+CwruCwvuCwsOCxjeCwmuCwv1/gsI/gsKrgsY3gsLDgsL/gsLLgsY1f4LCu4LGHX+CwnOCxguCwqOCxjV/gsJzgsYHgsLLgsYhf4LCG4LCX4LC44LGN4LCf4LGBX+CwuOCxhuCwquCxjeCwn+CxhuCwguCwrOCwsOCxjV/gsIXgsJXgsY3gsJ/gsYvgsKzgsLDgsY1f4LCo4LC14LCC4LCs4LCw4LGNX+CwoeCwv+CwuOCxhuCwguCwrOCwsOCxjScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4LCc4LCoLl/gsKvgsL/gsKzgsY3gsLAuX+CwruCwvuCwsOCxjeCwmuCwv1/gsI/gsKrgsY3gsLDgsL8uX+CwruCxh1/gsJzgsYLgsKjgsY1f4LCc4LGB4LCy4LGIX+CwhuCwly5f4LC44LGG4LCq4LGNLl/gsIXgsJXgsY3gsJ/gsYsuX+CwqOCwtS5f4LCh4LC/4LC44LGGLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ+CwhuCwpuCwv+CwteCwvuCwsOCwgl/gsLjgsYvgsK7gsLXgsL7gsLDgsIJf4LCu4LCC4LCX4LCz4LC14LC+4LCw4LCCX+CwrOCxgeCwp+CwteCwvuCwsOCwgl/gsJfgsYHgsLDgsYHgsLXgsL7gsLDgsIJf4LC24LGB4LCV4LGN4LCw4LC14LC+4LCw4LCCX+CwtuCwqOCwv+CwteCwvuCwsOCwgicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgsIbgsKbgsL9f4LC44LGL4LCuX+CwruCwguCwl+Cws1/gsKzgsYHgsKdf4LCX4LGB4LCw4LGBX+CwtuCxgeCwleCxjeCwsF/gsLbgsKjgsL8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+Cwhl/gsLjgsYtf4LCu4LCCX+CwrOCxgV/gsJfgsYFf4LC24LGBX+Cwticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0EgaDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+CwqOCxh+CwoeCxgV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4LCw4LGH4LCq4LGBXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgsKjgsL/gsKjgsY3gsKhdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vgsJfgsKRdIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDgsLLgsYsnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDgsJXgsY3gsLDgsL/gsKTgsIInLFxuICAgICAgICAgICAgcyA6ICfgsJXgsYrgsKjgsY3gsKjgsL8g4LCV4LGN4LC34LCj4LC+4LCy4LGBJyxcbiAgICAgICAgICAgIHNzIDogJyVkIOCwuOCxhuCwleCwqOCxjeCwsuCxgScsXG4gICAgICAgICAgICBtIDogJ+CwkuCwlSDgsKjgsL/gsK7gsL/gsLfgsIInLFxuICAgICAgICAgICAgbW0gOiAnJWQg4LCo4LC/4LCu4LC/4LC34LC+4LCy4LGBJyxcbiAgICAgICAgICAgIGggOiAn4LCS4LCVIOCwl+CwguCwnycsXG4gICAgICAgICAgICBoaCA6ICclZCDgsJfgsILgsJ/gsLLgsYEnLFxuICAgICAgICAgICAgZCA6ICfgsJLgsJUg4LCw4LGL4LCc4LGBJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOCwsOCxi+CwnOCxgeCwsuCxgScsXG4gICAgICAgICAgICBNIDogJ+CwkuCwlSDgsKjgsYbgsLInLFxuICAgICAgICAgICAgTU0gOiAnJWQg4LCo4LGG4LCy4LCy4LGBJyxcbiAgICAgICAgICAgIHkgOiAn4LCS4LCVIOCwuOCwguCwteCwpOCxjeCwuOCwsOCwgicsXG4gICAgICAgICAgICB5eSA6ICclZCDgsLjgsILgsLXgsKTgsY3gsLjgsLDgsL7gsLLgsYEnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3gsLUvLFxuICAgICAgICBvcmRpbmFsIDogJyVk4LC1JyxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CwsOCwvuCwpOCxjeCwsOCwv3zgsIngsKbgsK/gsIJ84LCu4LCn4LGN4LCv4LC+4LC54LGN4LCo4LCCfOCwuOCwvuCwr+CwguCwpOCxjeCwsOCwgi8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgsLDgsL7gsKTgsY3gsLDgsL8nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsIngsKbgsK/gsIInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LCu4LCn4LGN4LCv4LC+4LC54LGN4LCo4LCCJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsLjgsL7gsK/gsILgsKTgsY3gsLDgsIInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CwsOCwvuCwpOCxjeCwsOCwvyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LCJ4LCm4LCv4LCCJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsK7gsKfgsY3gsK/gsL7gsLngsY3gsKjgsIInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CwuOCwvuCwr+CwguCwpOCxjeCwsOCwgic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LCw4LC+4LCk4LGN4LCw4LC/JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB0ZXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0ZXQnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW5laXJ1X0ZldmVyZWlydV9NYXJzdV9BYnJpbF9NYWl1X0p1w7F1X0p1bGx1X0FndXN0dV9TZXRlbWJydV9PdXR1YnJ1X05vdmVtYnJ1X0RlemVtYnJ1Jy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmV2X01hcl9BYnJfTWFpX0p1bl9KdWxfQWdvX1NldF9PdXRfTm92X0Rleicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnRG9taW5ndV9TZWd1bmRhX1RlcnNhX0t1YXJ0YV9LaW50YV9TZXN0YV9TYWJhZHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnRG9tX1NlZ19UZXJzX0t1YV9LaW50X1Nlc3RfU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdEb19TZWdfVGVfS3VfS2lfU2VzX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tPaGluIGloYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tBYmFuIGloYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtpaGFdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSG9yaXNlaWsgaWhhXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW3NlbWFuYSBrb3R1a10gW2loYV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaWhhICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgbGl1YmEnLFxuICAgICAgICAgICAgcyA6ICdtaW51dHUgYmFsdW4nLFxuICAgICAgICAgICAgc3MgOiAnbWludXR1ICVkJyxcbiAgICAgICAgICAgIG0gOiAnbWludXR1IGlkYScsXG4gICAgICAgICAgICBtbSA6ICdtaW51dHUgJWQnLFxuICAgICAgICAgICAgaCA6ICdvcmFzIGlkYScsXG4gICAgICAgICAgICBoaCA6ICdvcmFzICVkJyxcbiAgICAgICAgICAgIGQgOiAnbG9yb24gaWRhJyxcbiAgICAgICAgICAgIGRkIDogJ2xvcm9uICVkJyxcbiAgICAgICAgICAgIE0gOiAnZnVsYW4gaWRhJyxcbiAgICAgICAgICAgIE1NIDogJ2Z1bGFuICVkJyxcbiAgICAgICAgICAgIHkgOiAndGluYW4gaWRhJyxcbiAgICAgICAgICAgIHl5IDogJ3RpbmFuICVkJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRldDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAwOiAnLdGD0LwnLFxuICAgICAgICAxOiAnLdGD0LwnLFxuICAgICAgICAyOiAnLdGO0LwnLFxuICAgICAgICAzOiAnLdGO0LwnLFxuICAgICAgICA0OiAnLdGD0LwnLFxuICAgICAgICA1OiAnLdGD0LwnLFxuICAgICAgICA2OiAnLdGD0LwnLFxuICAgICAgICA3OiAnLdGD0LwnLFxuICAgICAgICA4OiAnLdGD0LwnLFxuICAgICAgICA5OiAnLdGD0LwnLFxuICAgICAgICAxMDogJy3Rg9C8JyxcbiAgICAgICAgMTI6ICct0YPQvCcsXG4gICAgICAgIDEzOiAnLdGD0LwnLFxuICAgICAgICAyMDogJy3Rg9C8JyxcbiAgICAgICAgMzA6ICct0Y7QvCcsXG4gICAgICAgIDQwOiAnLdGD0LwnLFxuICAgICAgICA1MDogJy3Rg9C8JyxcbiAgICAgICAgNjA6ICct0YPQvCcsXG4gICAgICAgIDcwOiAnLdGD0LwnLFxuICAgICAgICA4MDogJy3Rg9C8JyxcbiAgICAgICAgOTA6ICct0YPQvCcsXG4gICAgICAgIDEwMDogJy3Rg9C8J1xuICAgIH07XG5cbiAgICB2YXIgdGcgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0ZycsIHtcbiAgICAgICAgbW9udGhzIDogJ9GP0L3QstCw0YBf0YTQtdCy0YDQsNC7X9C80LDRgNGCX9Cw0L/RgNC10Ltf0LzQsNC5X9C40Y7QvV/QuNGO0Ltf0LDQstCz0YPRgdGCX9GB0LXQvdGC0Y/QsdGAX9C+0LrRgtGP0LHRgF/QvdC+0Y/QsdGAX9C00LXQutCw0LHRgCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0Y/QvdCyX9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDQuV/QuNGO0L1f0LjRjtC7X9Cw0LLQs1/RgdC10L1f0L7QutGCX9C90L7Rj1/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9GP0LrRiNCw0L3QsdC1X9C00YPRiNCw0L3QsdC1X9GB0LXRiNCw0L3QsdC1X9GH0L7RgNGI0LDQvdCx0LVf0L/QsNC90rfRiNCw0L3QsdC1X9K30YPQvNGK0LBf0YjQsNC90LHQtScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfRj9GI0LFf0LTRiNCxX9GB0YjQsV/Rh9GI0LFf0L/RiNCxX9K30YPQvF/RiNC90LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9GP0Yhf0LTRiF/RgdGIX9GH0Yhf0L/RiF/St9C8X9GI0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vQmNC80YDTr9C3INGB0L7QsNGC0LhdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9Cf0LDQs9C+0rMg0YHQvtCw0YLQuF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb0JTQuNGA06/QtyDRgdC+0LDRgtC4XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkW9C4XSBb0rPQsNGE0YLQsNC4INC+0Y/QvdC00LAg0YHQvtCw0YLQuF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZFvQuF0gW9Kz0LDRhNGC0LDQuCDQs9GD0LfQsNGI0YLQsCDRgdC+0LDRgtC4XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn0LHQsNGK0LTQuCAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzINC/0LXRiCcsXG4gICAgICAgICAgICBzIDogJ9GP0LrRh9Cw0L3QtCDRgdC+0L3QuNGPJyxcbiAgICAgICAgICAgIG0gOiAn0Y/QuiDQtNCw0pvQuNKb0LAnLFxuICAgICAgICAgICAgbW0gOiAnJWQg0LTQsNKb0LjSm9CwJyxcbiAgICAgICAgICAgIGggOiAn0Y/QuiDRgdC+0LDRgicsXG4gICAgICAgICAgICBoaCA6ICclZCDRgdC+0LDRgicsXG4gICAgICAgICAgICBkIDogJ9GP0Log0YDTr9C3JyxcbiAgICAgICAgICAgIGRkIDogJyVkINGA06/QtycsXG4gICAgICAgICAgICBNIDogJ9GP0Log0LzQvtKzJyxcbiAgICAgICAgICAgIE1NIDogJyVkINC80L7SsycsXG4gICAgICAgICAgICB5IDogJ9GP0Log0YHQvtC7JyxcbiAgICAgICAgICAgIHl5IDogJyVkINGB0L7QuydcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9GI0LDQsXzRgdGD0LHSs3zRgNOv0Ld80LHQtdCz0L7Ssy8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ9GI0LDQsScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ9GB0YPQsdKzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ9GA06/QtycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn0LHQtdCz0L7SsycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRiNCw0LEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GB0YPQsdKzJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRgNOv0LcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cx0LXQs9C+0rMnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GI0LDQsSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0YPQvHzRjtC8KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgYiA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1tudW1iZXJdIHx8IHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGc7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB0aCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RoJywge1xuICAgICAgICBtb250aHMgOiAn4Lih4LiB4Lij4Liy4LiE4LihX+C4geC4uOC4oeC4oOC4suC4nuC4seC4meC4mOC5jF/guKHguLXguJnguLLguITguKFf4LmA4Lih4Lip4Liy4Lii4LiZX+C4nuC4pOC4qeC4oOC4suC4hOC4oV/guKHguLTguJbguLjguJnguLLguKLguJlf4LiB4Lij4LiB4LiO4Liy4LiE4LihX+C4quC4tOC4h+C4q+C4suC4hOC4oV/guIHguLHguJnguKLguLLguKLguJlf4LiV4Li44Lil4Liy4LiE4LihX+C4nuC4pOC4qOC4iOC4tOC4geC4suC4ouC4mV/guJjguLHguJnguKfguLLguITguKEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+C4oS7guIQuX+C4gS7guJ4uX+C4oeC4tS7guIQuX+C5gOC4oS7guKIuX+C4ni7guIQuX+C4oeC4tC7guKIuX+C4gS7guIQuX+C4qi7guIQuX+C4gS7guKIuX+C4lS7guIQuX+C4ni7guKIuX+C4mC7guIQuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICfguK3guLLguJfguLTguJXguKLguYxf4LiI4Lix4LiZ4LiX4Lij4LmMX+C4reC4seC4h+C4hOC4suC4o1/guJ7guLjguJhf4Lie4Lik4Lir4Lix4Liq4Lia4LiU4Li1X+C4qOC4uOC4geC4o+C5jF/guYDguKrguLLguKPguYwnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4Lit4Liy4LiX4Li04LiV4Lii4LmMX+C4iOC4seC4meC4l+C4o+C5jF/guK3guLHguIfguITguLLguKNf4Lie4Li44LiYX+C4nuC4pOC4q+C4seC4ql/guKjguLjguIHguKPguYxf4LmA4Liq4Liy4Lij4LmMJy5zcGxpdCgnXycpLCAvLyB5ZXMsIHRocmVlIGNoYXJhY3RlcnMgZGlmZmVyZW5jZVxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfguK3guLIuX+C4iC5f4LitLl/guJ4uX+C4nuC4pC5f4LioLl/guKouJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSDguYDguKfguKXguLIgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ+C4p+C4seC4mWRkZGTguJfguLXguYggRCBNTU1NIFlZWVkg4LmA4Lin4Lil4LiyIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/guIHguYjguK3guJnguYDguJfguLXguYjguKLguId84Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfguKvguKXguLHguIfguYDguJfguLXguYjguKLguIcnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C4geC5iOC4reC4meC5gOC4l+C4teC5iOC4ouC4hyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vguKfguLHguJnguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vguJ7guKPguLjguYjguIfguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkW+C4q+C4meC5ieC4siDguYDguKfguKXguLJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+C5gOC4oeC4t+C5iOC4reC4p+C4suC4meC4meC4teC5iSDguYDguKfguKXguLJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vguKfguLHguJldZGRkZFvguJfguLXguYjguYHguKXguYnguKcg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn4Lit4Li14LiBICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXPguJfguLXguYjguYHguKXguYnguKcnLFxuICAgICAgICAgICAgcyA6ICfguYTguKHguYjguIHguLXguYjguKfguLTguJnguLLguJfguLUnLFxuICAgICAgICAgICAgc3MgOiAnJWQg4Lin4Li04LiZ4Liy4LiX4Li1JyxcbiAgICAgICAgICAgIG0gOiAnMSDguJnguLLguJfguLUnLFxuICAgICAgICAgICAgbW0gOiAnJWQg4LiZ4Liy4LiX4Li1JyxcbiAgICAgICAgICAgIGggOiAnMSDguIrguLHguYjguKfguYLguKHguIcnLFxuICAgICAgICAgICAgaGggOiAnJWQg4LiK4Lix4LmI4Lin4LmC4Lih4LiHJyxcbiAgICAgICAgICAgIGQgOiAnMSDguKfguLHguJknLFxuICAgICAgICAgICAgZGQgOiAnJWQg4Lin4Lix4LiZJyxcbiAgICAgICAgICAgIE0gOiAnMSDguYDguJTguLfguK3guJknLFxuICAgICAgICAgICAgTU0gOiAnJWQg4LmA4LiU4Li34Lit4LiZJyxcbiAgICAgICAgICAgIHkgOiAnMSDguJvguLUnLFxuICAgICAgICAgICAgeXkgOiAnJWQg4Lib4Li1J1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGg7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB0bFBoID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGwtcGgnLCB7XG4gICAgICAgIG1vbnRocyA6ICdFbmVyb19QZWJyZXJvX01hcnNvX0FicmlsX01heW9fSHVueW9fSHVseW9fQWdvc3RvX1NldHllbWJyZV9Pa3R1YnJlX05vYnllbWJyZV9EaXN5ZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0VuZV9QZWJfTWFyX0Ficl9NYXlfSHVuX0h1bF9BZ29fU2V0X09rdF9Ob2JfRGlzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdMaW5nZ29fTHVuZXNfTWFydGVzX01peWVya3VsZXNfSHV3ZWJlc19CaXllcm5lc19TYWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnTGluX0x1bl9NYXJfTWl5X0h1d19CaXlfU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdMaV9MdV9NYV9NaV9IdV9CaV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnTU0vRC9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnTU1NTSBELCBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTSBERCwgWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnTFQgW25nYXlvbmcgYXJhd10nLFxuICAgICAgICAgICAgbmV4dERheTogJ1tCdWthcyBuZ10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdMVCBbc2Egc3VzdW5vZCBuYV0gZGRkZCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnTFQgW2thaGFwb25dJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnTFQgW25vb25nIG5ha2FyYWFuZ10gZGRkZCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdzYSBsb29iIG5nICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgYW5nIG5ha2FsaXBhcycsXG4gICAgICAgICAgICBzIDogJ2lsYW5nIHNlZ3VuZG8nLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VndW5kbycsXG4gICAgICAgICAgICBtIDogJ2lzYW5nIG1pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dG8nLFxuICAgICAgICAgICAgaCA6ICdpc2FuZyBvcmFzJyxcbiAgICAgICAgICAgIGhoIDogJyVkIG9yYXMnLFxuICAgICAgICAgICAgZCA6ICdpc2FuZyBhcmF3JyxcbiAgICAgICAgICAgIGRkIDogJyVkIGFyYXcnLFxuICAgICAgICAgICAgTSA6ICdpc2FuZyBidXdhbicsXG4gICAgICAgICAgICBNTSA6ICclZCBidXdhbicsXG4gICAgICAgICAgICB5IDogJ2lzYW5nIHRhb24nLFxuICAgICAgICAgICAgeXkgOiAnJWQgdGFvbidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRsUGg7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBudW1iZXJzTm91bnMgPSAncGFnaF93YeKAmV9jaGHigJlfd2VqX2xvU192YWdoX2phdl9Tb2NoX2Nob3JnaF9IdXQnLnNwbGl0KCdfJyk7XG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGVGdXR1cmUob3V0cHV0KSB7XG4gICAgICAgIHZhciB0aW1lID0gb3V0cHV0O1xuICAgICAgICB0aW1lID0gKG91dHB1dC5pbmRleE9mKCdqYWonKSAhPT0gLTEpID9cbiAgICAgICAgdGltZS5zbGljZSgwLCAtMykgKyAnbGVTJyA6XG4gICAgICAgIChvdXRwdXQuaW5kZXhPZignamFyJykgIT09IC0xKSA/XG4gICAgICAgIHRpbWUuc2xpY2UoMCwgLTMpICsgJ3dhUScgOlxuICAgICAgICAob3V0cHV0LmluZGV4T2YoJ0RJUycpICE9PSAtMSkgP1xuICAgICAgICB0aW1lLnNsaWNlKDAsIC0zKSArICduZW0nIDpcbiAgICAgICAgdGltZSArICcgcElxJztcbiAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlUGFzdChvdXRwdXQpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBvdXRwdXQ7XG4gICAgICAgIHRpbWUgPSAob3V0cHV0LmluZGV4T2YoJ2phaicpICE9PSAtMSkgP1xuICAgICAgICB0aW1lLnNsaWNlKDAsIC0zKSArICdIdeKAmScgOlxuICAgICAgICAob3V0cHV0LmluZGV4T2YoJ2phcicpICE9PSAtMSkgP1xuICAgICAgICB0aW1lLnNsaWNlKDAsIC0zKSArICd3ZW4nIDpcbiAgICAgICAgKG91dHB1dC5pbmRleE9mKCdESVMnKSAhPT0gLTEpID9cbiAgICAgICAgdGltZS5zbGljZSgwLCAtMykgKyAnYmVuJyA6XG4gICAgICAgIHRpbWUgKyAnIHJldCc7XG4gICAgICAgIHJldHVybiB0aW1lO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG51bWJlck5vdW4gPSBudW1iZXJBc05vdW4obnVtYmVyKTtcbiAgICAgICAgc3dpdGNoIChzdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgbHVwJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgdHVwJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgcmVwJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgamFqJztcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgamFyJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgRElTJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG51bWJlckFzTm91bihudW1iZXIpIHtcbiAgICAgICAgdmFyIGh1bmRyZWQgPSBNYXRoLmZsb29yKChudW1iZXIgJSAxMDAwKSAvIDEwMCksXG4gICAgICAgIHRlbiA9IE1hdGguZmxvb3IoKG51bWJlciAlIDEwMCkgLyAxMCksXG4gICAgICAgIG9uZSA9IG51bWJlciAlIDEwLFxuICAgICAgICB3b3JkID0gJyc7XG4gICAgICAgIGlmIChodW5kcmVkID4gMCkge1xuICAgICAgICAgICAgd29yZCArPSBudW1iZXJzTm91bnNbaHVuZHJlZF0gKyAndmF0bGgnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZW4gPiAwKSB7XG4gICAgICAgICAgICB3b3JkICs9ICgod29yZCAhPT0gJycpID8gJyAnIDogJycpICsgbnVtYmVyc05vdW5zW3Rlbl0gKyAnbWFIJztcbiAgICAgICAgfVxuICAgICAgICBpZiAob25lID4gMCkge1xuICAgICAgICAgICAgd29yZCArPSAoKHdvcmQgIT09ICcnKSA/ICcgJyA6ICcnKSArIG51bWJlcnNOb3Vuc1tvbmVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAod29yZCA9PT0gJycpID8gJ3BhZ2gnIDogd29yZDtcbiAgICB9XG5cbiAgICB2YXIgdGxoID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGxoJywge1xuICAgICAgICBtb250aHMgOiAndGVyYeKAmSBqYXIgd2HigJlfdGVyYeKAmSBqYXIgY2hh4oCZX3RlcmHigJkgamFyIHdlal90ZXJh4oCZIGphciBsb1NfdGVyYeKAmSBqYXIgdmFnaF90ZXJh4oCZIGphciBqYXZfdGVyYeKAmSBqYXIgU29jaF90ZXJh4oCZIGphciBjaG9yZ2hfdGVyYeKAmSBqYXIgSHV0X3RlcmHigJkgamFyIHdh4oCZbWFIX3RlcmHigJkgamFyIHdh4oCZbWFIIHdh4oCZX3RlcmHigJkgamFyIHdh4oCZbWFIIGNoYeKAmScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFyIHdh4oCZX2phciBjaGHigJlfamFyIHdlal9qYXIgbG9TX2phciB2YWdoX2phciBqYXZfamFyIFNvY2hfamFyIGNob3JnaF9qYXIgSHV0X2phciB3YeKAmW1hSF9qYXIgd2HigJltYUggd2HigJlfamFyIHdh4oCZbWFIIGNoYeKAmScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2xvam1JdGphal9EYVNqYWpfcG92amFqX2doSXRsaGphal9sb2doamFqX2J1cWphal9naEluamFqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2xvam1JdGphal9EYVNqYWpfcG92amFqX2doSXRsaGphal9sb2doamFqX2J1cWphal9naEluamFqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdsb2ptSXRqYWpfRGFTamFqX3Bvdmphal9naEl0bGhqYWpfbG9naGphal9idXFqYWpfZ2hJbmphaicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbRGFIamFqXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3dh4oCZbGVTXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ0xMTCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW3dh4oCZSHXigJldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnTExMJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogdHJhbnNsYXRlRnV0dXJlLFxuICAgICAgICAgICAgcGFzdCA6IHRyYW5zbGF0ZVBhc3QsXG4gICAgICAgICAgICBzIDogJ3B1UyBsdXAnLFxuICAgICAgICAgICAgc3MgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtIDogJ3dh4oCZIHR1cCcsXG4gICAgICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggOiAnd2HigJkgcmVwJyxcbiAgICAgICAgICAgIGhoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZCA6ICd3YeKAmSBqYWonLFxuICAgICAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNIDogJ3dh4oCZIGphcicsXG4gICAgICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgOiAnd2HigJkgRElTJyxcbiAgICAgICAgICAgIHl5IDogdHJhbnNsYXRlXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGxoO1xuXG59KSkpO1xuIiwiXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAxOiAnXFwnaW5jaScsXG4gICAgICAgIDU6ICdcXCdpbmNpJyxcbiAgICAgICAgODogJ1xcJ2luY2knLFxuICAgICAgICA3MDogJ1xcJ2luY2knLFxuICAgICAgICA4MDogJ1xcJ2luY2knLFxuICAgICAgICAyOiAnXFwnbmNpJyxcbiAgICAgICAgNzogJ1xcJ25jaScsXG4gICAgICAgIDIwOiAnXFwnbmNpJyxcbiAgICAgICAgNTA6ICdcXCduY2knLFxuICAgICAgICAzOiAnXFwnw7xuY8O8JyxcbiAgICAgICAgNDogJ1xcJ8O8bmPDvCcsXG4gICAgICAgIDEwMDogJ1xcJ8O8bmPDvCcsXG4gICAgICAgIDY6ICdcXCduY8SxJyxcbiAgICAgICAgOTogJ1xcJ3VuY3UnLFxuICAgICAgICAxMDogJ1xcJ3VuY3UnLFxuICAgICAgICAzMDogJ1xcJ3VuY3UnLFxuICAgICAgICA2MDogJ1xcJ8SxbmPEsScsXG4gICAgICAgIDkwOiAnXFwnxLFuY8SxJ1xuICAgIH07XG5cbiAgICB2YXIgdHIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0cicsIHtcbiAgICAgICAgbW9udGhzIDogJ09jYWtfxZ51YmF0X01hcnRfTmlzYW5fTWF5xLFzX0hhemlyYW5fVGVtbXV6X0HEn3VzdG9zX0V5bMO8bF9Fa2ltX0thc8SxbV9BcmFsxLFrJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdPY2FfxZ51Yl9NYXJfTmlzX01heV9IYXpfVGVtX0HEn3VfRXlsX0VraV9LYXNfQXJhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdQYXphcl9QYXphcnRlc2lfU2FsxLFfw4dhcsWfYW1iYV9QZXLFn2VtYmVfQ3VtYV9DdW1hcnRlc2knLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnUGF6X1B0c19TYWxfw4dhcl9QZXJfQ3VtX0N0cycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnUHpfUHRfU2Ffw4dhX1BlX0N1X0N0Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbYnVnw7xuIHNhYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW3lhcsSxbiBzYWF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdbZ2VsZWNla10gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbZMO8bl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW2dlw6dlbl0gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIHNvbnJhJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgw7ZuY2UnLFxuICAgICAgICAgICAgcyA6ICdiaXJrYcOnIHNhbml5ZScsXG4gICAgICAgICAgICBzcyA6ICclZCBzYW5peWUnLFxuICAgICAgICAgICAgbSA6ICdiaXIgZGFraWthJyxcbiAgICAgICAgICAgIG1tIDogJyVkIGRha2lrYScsXG4gICAgICAgICAgICBoIDogJ2JpciBzYWF0JyxcbiAgICAgICAgICAgIGhoIDogJyVkIHNhYXQnLFxuICAgICAgICAgICAgZCA6ICdiaXIgZ8O8bicsXG4gICAgICAgICAgICBkZCA6ICclZCBnw7xuJyxcbiAgICAgICAgICAgIE0gOiAnYmlyIGF5JyxcbiAgICAgICAgICAgIE1NIDogJyVkIGF5JyxcbiAgICAgICAgICAgIHkgOiAnYmlyIHnEsWwnLFxuICAgICAgICAgICAgeXkgOiAnJWQgecSxbCdcbiAgICAgICAgfSxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RvJzpcbiAgICAgICAgICAgICAgICBjYXNlICdERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkgeyAgLy8gc3BlY2lhbCBjYXNlIGZvciB6ZXJvXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ1xcJ8SxbmPEsSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBudW1iZXIgJSAxMDAgLSBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgYyA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdIHx8IHN1ZmZpeGVzW2NdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIC8vIEFmdGVyIHRoZSB5ZWFyIHRoZXJlIHNob3VsZCBiZSBhIHNsYXNoIGFuZCB0aGUgYW1vdW50IG9mIHllYXJzIHNpbmNlIERlY2VtYmVyIDI2LCAxOTc5IGluIFJvbWFuIG51bWVyYWxzLlxuICAgIC8vIFRoaXMgaXMgY3VycmVudGx5IHRvbyBkaWZmaWN1bHQgKG1heWJlIGV2ZW4gaW1wb3NzaWJsZSkgdG8gYWRkLlxuICAgIHZhciB0emwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0emwnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJfRmV2cmFnbGhfTWFyw6dfQXZyw691X01haV9Hw7xuX0p1bGlhX0d1c2NodF9TZXRlbXZhcl9MaXN0b3DDpHRzX05vZW12YXJfWmVjZW12YXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZXZfTWFyX0F2cl9NYWlfR8O8bl9KdWxfR3VzX1NldF9MaXNfTm9lX1plYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU8O6bGFkaV9Mw7puZcOnaV9NYWl0emlfTcOhcmN1cmlfWGjDumFkaV9WacOpbmVyw6dpX1PDoXR1cmknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU8O6bF9Mw7puX01haV9Nw6FyX1how7pfVmnDqV9Tw6F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTw7pfTMO6X01hX03DoV9YaF9WaV9Tw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFtkYWxsYXNdIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gW2RhbGxhc10gWVlZWSBISC5tbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIFtsaV0gRC4gTU1NTSBbZGFsbGFzXSBZWVlZIEhILm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvZFxcJ298ZFxcJ2EvaSxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICdkXFwnbycgPT09IGlucHV0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2RcXCdvJyA6ICdEXFwnTyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2RcXCdhJyA6ICdEXFwnQSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbb3hoaSDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbZGVtw6Agw6BdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW8OgXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tpZWlyaSDDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW3PDvHIgZWxdIGRkZGQgW2xhc3RldSDDoF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ29zcHJlaSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2phJXMnLFxuICAgICAgICAgICAgcyA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBzcyA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGggOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGggOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ3MnOiBbJ3ZpZW5zYXMgc2VjdW5kcycsICdcXCdpZW5zYXMgc2VjdW5kcyddLFxuICAgICAgICAgICAgJ3NzJzogW251bWJlciArICcgc2VjdW5kcycsICcnICsgbnVtYmVyICsgJyBzZWN1bmRzJ10sXG4gICAgICAgICAgICAnbSc6IFsnXFwnbiBtw611dCcsICdcXCdpZW5zIG3DrXV0J10sXG4gICAgICAgICAgICAnbW0nOiBbbnVtYmVyICsgJyBtw611dHMnLCAnJyArIG51bWJlciArICcgbcOtdXRzJ10sXG4gICAgICAgICAgICAnaCc6IFsnXFwnbiDDvm9yYScsICdcXCdpZW5zYSDDvm9yYSddLFxuICAgICAgICAgICAgJ2hoJzogW251bWJlciArICcgw75vcmFzJywgJycgKyBudW1iZXIgKyAnIMO+b3JhcyddLFxuICAgICAgICAgICAgJ2QnOiBbJ1xcJ24geml1YScsICdcXCdpZW5zYSB6aXVhJ10sXG4gICAgICAgICAgICAnZGQnOiBbbnVtYmVyICsgJyB6aXVhcycsICcnICsgbnVtYmVyICsgJyB6aXVhcyddLFxuICAgICAgICAgICAgJ00nOiBbJ1xcJ24gbWVzJywgJ1xcJ2llbnMgbWVzJ10sXG4gICAgICAgICAgICAnTU0nOiBbbnVtYmVyICsgJyBtZXNlbicsICcnICsgbnVtYmVyICsgJyBtZXNlbiddLFxuICAgICAgICAgICAgJ3knOiBbJ1xcJ24gYXInLCAnXFwnaWVucyBhciddLFxuICAgICAgICAgICAgJ3l5JzogW251bWJlciArICcgYXJzJywgJycgKyBudW1iZXIgKyAnIGFycyddXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpc0Z1dHVyZSA/IGZvcm1hdFtrZXldWzBdIDogKHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHpsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdHptID0gbW9tZW50LmRlZmluZUxvY2FsZSgndHptJywge1xuICAgICAgICBtb250aHMgOiAn4rWJ4rWP4rWP4rSw4rWi4rWUX+K0seK1leK0sOK1ouK1lV/itY7itLDitZXitZpf4rWJ4rSx4rWU4rWJ4rWUX+K1juK0sOK1ouK1ouK1k1/itaLitZPitY/itaLitZNf4rWi4rWT4rWN4rWi4rWT4rWjX+K1luK1k+K1m+K1nF/itZvitZPitZzitLDitY/itLHitYnitZRf4rS94rWf4rWT4rSx4rWVX+K1j+K1k+K1oeK0sOK1j+K0seK1ieK1lF/itLfitZPitYritY/itLHitYnitZQnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+K1ieK1j+K1j+K0sOK1ouK1lF/itLHitZXitLDitaLitZVf4rWO4rSw4rWV4rWaX+K1ieK0seK1lOK1ieK1lF/itY7itLDitaLitaLitZNf4rWi4rWT4rWP4rWi4rWTX+K1ouK1k+K1jeK1ouK1k+K1o1/itZbitZPitZvitZxf4rWb4rWT4rWc4rSw4rWP4rSx4rWJ4rWUX+K0veK1n+K1k+K0seK1lV/itY/itZPitaHitLDitY/itLHitYnitZRf4rS34rWT4rWK4rWP4rSx4rWJ4rWUJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfitLDitZnitLDitY7itLDitZlf4rSw4rWi4rWP4rSw4rWZX+K0sOK1meK1ieK1j+K0sOK1mV/itLDitL3itZTitLDitZlf4rSw4rS94rWh4rSw4rWZX+K0sOK1meK1ieK1juK1oeK0sOK1mV/itLDitZnitYnitLnitaLitLDitZknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4rSw4rWZ4rSw4rWO4rSw4rWZX+K0sOK1ouK1j+K0sOK1mV/itLDitZnitYnitY/itLDitZlf4rSw4rS94rWU4rSw4rWZX+K0sOK0veK1oeK0sOK1mV/itLDitZnitYnitY7itaHitLDitZlf4rSw4rWZ4rWJ4rS54rWi4rSw4rWZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfitLDitZnitLDitY7itLDitZlf4rSw4rWi4rWP4rSw4rWZX+K0sOK1meK1ieK1j+K0sOK1mV/itLDitL3itZTitLDitZlf4rSw4rS94rWh4rSw4rWZX+K0sOK1meK1ieK1juK1oeK0sOK1mV/itLDitZnitYnitLnitaLitLDitZknLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vitLDitZnitLfitYUg4rS0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+K0sOK1meK0veK0sCDitLRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb4rS0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+K0sOK1muK0sOK1j+K1nCDitLRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb4rS0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfitLfitLDitLfitYUg4rWZIOK1ouK0sOK1jyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ+K1ouK0sOK1jyAlcycsXG4gICAgICAgICAgICBzIDogJ+K1ieK1juK1ieK0vScsXG4gICAgICAgICAgICBzcyA6ICclZCDitYnitY7itYnitL0nLFxuICAgICAgICAgICAgbSA6ICfitY7itYnitY/itZPitLonLFxuICAgICAgICAgICAgbW0gOiAnJWQg4rWO4rWJ4rWP4rWT4rS6JyxcbiAgICAgICAgICAgIGggOiAn4rWZ4rSw4rWE4rSwJyxcbiAgICAgICAgICAgIGhoIDogJyVkIOK1nOK0sOK1meK1meK0sOK1hOK1ieK1jycsXG4gICAgICAgICAgICBkIDogJ+K0sOK1meK1mScsXG4gICAgICAgICAgICBkZCA6ICclZCBv4rWZ4rWZ4rSw4rWPJyxcbiAgICAgICAgICAgIE0gOiAn4rSw4rWib+K1k+K1lCcsXG4gICAgICAgICAgICBNTSA6ICclZCDitYnitaLitaLitYnitZTitY8nLFxuICAgICAgICAgICAgeSA6ICfitLDitZnitLPitLDitZknLFxuICAgICAgICAgICAgeXkgOiAnJWQg4rWJ4rWZ4rSz4rSw4rWZ4rWPJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHptO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdHptTGF0biA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3R6bS1sYXRuJywge1xuICAgICAgICBtb250aHMgOiAnaW5uYXlyX2Jyy6RheXLLpF9tYXLLpHPLpF9pYnJpcl9tYXl5d195d255d195d2x5d3pfyaN3xaF0X8Whd3RhbmJpcl9rdMukd2Jyy6Rfbnd3YW5iaXJfZHdqbmJpcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnaW5uYXlyX2Jyy6RheXLLpF9tYXLLpHPLpF9pYnJpcl9tYXl5d195d255d195d2x5d3pfyaN3xaF0X8Whd3RhbmJpcl9rdMukd2Jyy6Rfbnd3YW5iaXJfZHdqbmJpcicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnYXNhbWFzX2F5bmFzX2FzaW5hc19ha3Jhc19ha3dhc19hc2ltd2FzX2FzaeG4jXlhcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdhc2FtYXNfYXluYXNfYXNpbmFzX2FrcmFzX2Frd2FzX2FzaW13YXNfYXNp4biNeWFzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdhc2FtYXNfYXluYXNfYXNpbmFzX2FrcmFzX2Frd2FzX2FzaW13YXNfYXNp4biNeWFzJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2FzZGtoIGddIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbYXNrYSBnXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2ddIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbYXNzYW50IGddIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbZ10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZGFka2ggcyB5YW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICd5YW4gJXMnLFxuICAgICAgICAgICAgcyA6ICdpbWlrJyxcbiAgICAgICAgICAgIHNzIDogJyVkIGltaWsnLFxuICAgICAgICAgICAgbSA6ICdtaW514biNJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnXhuI0nLFxuICAgICAgICAgICAgaCA6ICdzYcmbYScsXG4gICAgICAgICAgICBoaCA6ICclZCB0YXNzYcmbaW4nLFxuICAgICAgICAgICAgZCA6ICdhc3MnLFxuICAgICAgICAgICAgZGQgOiAnJWQgb3NzYW4nLFxuICAgICAgICAgICAgTSA6ICdheW93cicsXG4gICAgICAgICAgICBNTSA6ICclZCBpeXlpcm4nLFxuICAgICAgICAgICAgeSA6ICdhc2dhcycsXG4gICAgICAgICAgICB5eSA6ICclZCBpc2dhc24nXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0em1MYXRuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsYW5ndWFnZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB1Z0NuID0gbW9tZW50LmRlZmluZUxvY2FsZSgndWctY24nLCB7XG4gICAgICAgIG1vbnRoczogJ9mK2KfZhtuL2KfYsV/ZgduQ24vYsdin2YRf2YXYp9ix2Kpf2KbYp9m+2LHbkNmEX9mF2KfZil/YptmJ2Yrbh9mGX9im2YnZituH2YRf2KbYp9uL2Lrbh9iz2Kpf2LPbkNmG2Krbldio2YnYsV/YptuG2YPYqtuV2KjZidixX9mG2YjZitin2KjZidixX9iv25DZg9in2KjZidixJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ9mK2KfZhtuL2KfYsV/ZgduQ24vYsdin2YRf2YXYp9ix2Kpf2KbYp9m+2LHbkNmEX9mF2KfZil/YptmJ2Yrbh9mGX9im2YnZituH2YRf2KbYp9uL2Lrbh9iz2Kpf2LPbkNmG2Krbldio2YnYsV/YptuG2YPYqtuV2KjZidixX9mG2YjZitin2KjZidixX9iv25DZg9in2KjZidixJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ9mK25XZg9i025XZhtio25Vf2K/biNi025XZhtio25Vf2LPbldmK2LTbldmG2KjblV/ahtin2LHYtNuV2YbYqNuVX9m+25XZiti025XZhtio25Vf2KzbiNmF25Vf2LTbldmG2KjblScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9mK25Vf2K/biF/Ys9uVX9qG2Kdf2b7blV/YrNuIX9i025UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn2YrblV/Yr9uIX9iz25Vf2obYp1/ZvtuVX9is24hf2LTblScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEw6ICdZWVlZLdmK2YnZhNmJTS3Yptin2YrZhtmJ2q1ELdmD24jZhtmJJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVkt2YrZidmE2YlNLdim2KfZitmG2YnarUQt2YPbiNmG2YnYjCBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZNiMIFlZWVkt2YrZidmE2YlNLdim2KfZitmG2YnarUQt2YPbiNmG2YnYjCBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9mK25DYsdmJ2YUg2YPbkNqG25V82LPbldq+25XYsXzahtuI2LTYqtmJ2YYg2Kjbh9ix24fZhnzahtuI2LR82obbiNi02KrZidmGINmD25DZitmJ2YZ82YPbldqGLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn2YrbkNix2YnZhSDZg9uQ2obblScgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ9iz25XavtuV2LEnIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfahtuI2LTYqtmJ2YYg2Kjbh9ix24fZhidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ9qG24jYtNiq2YnZhiDZg9uQ2YrZidmGJyB8fCBtZXJpZGllbSA9PT0gJ9mD25XahicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZituQ2LHZidmFINmD25DahtuVJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9iz25XavtuV2LEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDExMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9qG24jYtNiq2YnZhiDYqNuH2LHbh9mGJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfahtuI2LQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9qG24jYtNiq2YnZhiDZg9uQ2YrZidmGJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZg9uV2oYnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYqNuI2q/biNmGINiz2KfYptuV2KpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2Kbbldiq25Ug2LPYp9im25XYql0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb2YPbkNmE25XYsdmD2YldIGRkZGQgW9iz2KfYptuV2KpdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KrbhtmG24jar9uI2YZdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9im2KfZhNiv2YnZhtmC2YldIGRkZGQgW9iz2KfYptuV2KpdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDZg9uQ2YrZidmGJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDYqNuH2LHbh9mGJyxcbiAgICAgICAgICAgIHM6ICfZhtuV2obahtuVINiz25DZg9mI2YbYqicsXG4gICAgICAgICAgICBzczogJyVkINiz25DZg9mI2YbYqicsXG4gICAgICAgICAgICBtOiAn2KjZidixINmF2YnZhtuH2KonLFxuICAgICAgICAgICAgbW06ICclZCDZhdmJ2Ybbh9iqJyxcbiAgICAgICAgICAgIGg6ICfYqNmJ2LEg2LPYp9im25XYqicsXG4gICAgICAgICAgICBoaDogJyVkINiz2KfYptuV2KonLFxuICAgICAgICAgICAgZDogJ9io2YnYsSDZg9uI2YYnLFxuICAgICAgICAgICAgZGQ6ICclZCDZg9uI2YYnLFxuICAgICAgICAgICAgTTogJ9io2YnYsSDYptin2YonLFxuICAgICAgICAgICAgTU06ICclZCDYptin2YonLFxuICAgICAgICAgICAgeTogJ9io2YnYsSDZitmJ2YQnLFxuICAgICAgICAgICAgeXk6ICclZCDZitmJ2YQnXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KC3Zg9uI2YbZiXwt2KbYp9mKfC3avtuV2b7YqtuVKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Zg9uI2YbZiSc7XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdq+25XZvtiq25UnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgLy8gR0IvVCA3NDA4LTE5OTTjgIrmlbDmja7lhYPlkozkuqTmjaLmoLzlvI/Ct+S/oeaBr+S6pOaNosK35pel5pyf5ZKM5pe26Ze06KGo56S65rOV44CL5LiOSVNPIDg2MDE6MTk4OOetieaViFxuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNyAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB1Z0NuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwbHVyYWwod29yZCwgbnVtKSB7XG4gICAgICAgIHZhciBmb3JtcyA9IHdvcmQuc3BsaXQoJ18nKTtcbiAgICAgICAgcmV0dXJuIG51bSAlIDEwID09PSAxICYmIG51bSAlIDEwMCAhPT0gMTEgPyBmb3Jtc1swXSA6IChudW0gJSAxMCA+PSAyICYmIG51bSAlIDEwIDw9IDQgJiYgKG51bSAlIDEwMCA8IDEwIHx8IG51bSAlIDEwMCA+PSAyMCkgPyBmb3Jtc1sxXSA6IGZvcm1zWzJdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ3NzJzogd2l0aG91dFN1ZmZpeCA/ICfRgdC10LrRg9C90LTQsF/RgdC10LrRg9C90LTQuF/RgdC10LrRg9C90LQnIDogJ9GB0LXQutGD0L3QtNGDX9GB0LXQutGD0L3QtNC4X9GB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICAnbW0nOiB3aXRob3V0U3VmZml4ID8gJ9GF0LLQuNC70LjQvdCwX9GF0LLQuNC70LjQvdC4X9GF0LLQuNC70LjQvScgOiAn0YXQstC40LvQuNC90YNf0YXQstC40LvQuNC90Lhf0YXQstC40LvQuNC9JyxcbiAgICAgICAgICAgICdoaCc6IHdpdGhvdXRTdWZmaXggPyAn0LPQvtC00LjQvdCwX9Cz0L7QtNC40L3QuF/Qs9C+0LTQuNC9JyA6ICfQs9C+0LTQuNC90YNf0LPQvtC00LjQvdC4X9Cz0L7QtNC40L0nLFxuICAgICAgICAgICAgJ2RkJzogJ9C00LXQvdGMX9C00L3Rll/QtNC90ZbQsicsXG4gICAgICAgICAgICAnTU0nOiAn0LzRltGB0Y/RhtGMX9C80ZbRgdGP0YbRll/QvNGW0YHRj9GG0ZbQsicsXG4gICAgICAgICAgICAneXknOiAn0YDRltC6X9GA0L7QutC4X9GA0L7QutGW0LInXG4gICAgICAgIH07XG4gICAgICAgIGlmIChrZXkgPT09ICdtJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0YXQstC40LvQuNC90LAnIDogJ9GF0LLQuNC70LjQvdGDJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdoJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0LPQvtC00LjQvdCwJyA6ICfQs9C+0LTQuNC90YMnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHBsdXJhbChmb3JtYXRba2V5XSwgK251bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gd2Vla2RheXNDYXNlUmVwbGFjZShtLCBmb3JtYXQpIHtcbiAgICAgICAgdmFyIHdlZWtkYXlzID0ge1xuICAgICAgICAgICAgJ25vbWluYXRpdmUnOiAn0L3QtdC00ZbQu9GPX9C/0L7QvdC10LTRltC70L7Qul/QstGW0LLRgtC+0YDQvtC6X9GB0LXRgNC10LTQsF/Rh9C10YLQstC10YBf0L/igJnRj9GC0L3QuNGG0Y9f0YHRg9Cx0L7RgtCwJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgJ2FjY3VzYXRpdmUnOiAn0L3QtdC00ZbQu9GOX9C/0L7QvdC10LTRltC70L7Qul/QstGW0LLRgtC+0YDQvtC6X9GB0LXRgNC10LTRg1/Rh9C10YLQstC10YBf0L/igJnRj9GC0L3QuNGG0Y5f0YHRg9Cx0L7RgtGDJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgJ2dlbml0aXZlJzogJ9C90LXQtNGW0LvRll/Qv9C+0L3QtdC00ZbQu9C60LBf0LLRltCy0YLQvtGA0LrQsF/RgdC10YDQtdC00Lhf0YfQtdGC0LLQtdGA0LPQsF/Qv+KAmdGP0YLQvdC40YbRll/RgdGD0LHQvtGC0LgnLnNwbGl0KCdfJylcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXlzWydub21pbmF0aXZlJ10uc2xpY2UoMSwgNykuY29uY2F0KHdlZWtkYXlzWydub21pbmF0aXZlJ10uc2xpY2UoMCwgMSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXlzWydub21pbmF0aXZlJ107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbm91bkNhc2UgPSAoLyhcXFtb0JLQstCj0YNdXFxdKSA/ZGRkZC8pLnRlc3QoZm9ybWF0KSA/XG4gICAgICAgICAgICAnYWNjdXNhdGl2ZScgOlxuICAgICAgICAgICAgKCgvXFxbPyg/OtC80LjQvdGD0LvQvtGXfNC90LDRgdGC0YPQv9C90L7Rlyk/ID9cXF0gP2RkZGQvKS50ZXN0KGZvcm1hdCkgP1xuICAgICAgICAgICAgICAgICdnZW5pdGl2ZScgOlxuICAgICAgICAgICAgICAgICdub21pbmF0aXZlJyk7XG4gICAgICAgIHJldHVybiB3ZWVrZGF5c1tub3VuQ2FzZV1bbS5kYXkoKV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKHN0cikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ciArICfQvicgKyAodGhpcy5ob3VycygpID09PSAxMSA/ICfQsScgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHVrID0gbW9tZW50LmRlZmluZUxvY2FsZSgndWsnLCB7XG4gICAgICAgIG1vbnRocyA6IHtcbiAgICAgICAgICAgICdmb3JtYXQnOiAn0YHRltGH0L3Rj1/Qu9GO0YLQvtCz0L5f0LHQtdGA0LXQt9C90Y9f0LrQstGW0YLQvdGPX9GC0YDQsNCy0L3Rj1/Rh9C10YDQstC90Y9f0LvQuNC/0L3Rj1/RgdC10YDQv9C90Y9f0LLQtdGA0LXRgdC90Y9f0LbQvtCy0YLQvdGPX9C70LjRgdGC0L7Qv9Cw0LTQsF/Qs9GA0YPQtNC90Y8nLnNwbGl0KCdfJyksXG4gICAgICAgICAgICAnc3RhbmRhbG9uZSc6ICfRgdGW0YfQtdC90Yxf0LvRjtGC0LjQuV/QsdC10YDQtdC30LXQvdGMX9C60LLRltGC0LXQvdGMX9GC0YDQsNCy0LXQvdGMX9GH0LXRgNCy0LXQvdGMX9C70LjQv9C10L3RjF/RgdC10YDQv9C10L3RjF/QstC10YDQtdGB0LXQvdGMX9C20L7QstGC0LXQvdGMX9C70LjRgdGC0L7Qv9Cw0LRf0LPRgNGD0LTQtdC90YwnLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0YHRltGHX9C70Y7Rgl/QsdC10YBf0LrQstGW0YJf0YLRgNCw0LJf0YfQtdGA0LJf0LvQuNC/X9GB0LXRgNC/X9Cy0LXRgF/QttC+0LLRgl/Qu9C40YHRgl/Qs9GA0YPQtCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiB3ZWVrZGF5c0Nhc2VSZXBsYWNlLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9C90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9C90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWSDRgC4nLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZINGALiwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSDRgC4sIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0KHRjNC+0LPQvtC00L3RliAnKSxcbiAgICAgICAgICAgIG5leHREYXk6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JfQsNCy0YLRgNCwICcpLFxuICAgICAgICAgICAgbGFzdERheTogcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQktGH0L7RgNCwICcpLFxuICAgICAgICAgICAgbmV4dFdlZWs6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0KNdIGRkZGQgWycpLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JzQuNC90YPQu9C+0ZddIGRkZGQgWycpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQnNC40L3Rg9C70L7Qs9C+XSBkZGRkIFsnKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfQt9CwICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg0YLQvtC80YMnLFxuICAgICAgICAgICAgcyA6ICfQtNC10LrRltC70YzQutCwINGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBzcyA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGggOiAn0LPQvtC00LjQvdGDJyxcbiAgICAgICAgICAgIGhoIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQgOiAn0LTQtdC90YwnLFxuICAgICAgICAgICAgZGQgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTSA6ICfQvNGW0YHRj9GG0YwnLFxuICAgICAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeSA6ICfRgNGW0LonLFxuICAgICAgICAgICAgeXkgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsXG4gICAgICAgIH0sXG4gICAgICAgIC8vIE0uIEUuOiB0aG9zZSB0d28gYXJlIHZpcnR1YWxseSB1bnVzZWQgYnV0IGEgdXNlciBtaWdodCB3YW50IHRvIGltcGxlbWVudCB0aGVtIGZvciBoaXMvaGVyIHdlYnNpdGUgZm9yIHNvbWUgcmVhc29uXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/QvdC+0YfRlnzRgNCw0L3QutGDfNC00L3Rj3zQstC10YfQvtGA0LAvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0L7RgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0ZYnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GA0LDQvdC60YMnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C00L3Rjyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LLQtdGH0L7RgNCwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjQuXzQs9C+KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QuSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCz0L4nO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHVrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAn2KzZhtmI2LHbjCcsXG4gICAgICAgICfZgdix2YjYsduMJyxcbiAgICAgICAgJ9mF2KfYsdqGJyxcbiAgICAgICAgJ9in2b7YsduM2YQnLFxuICAgICAgICAn2YXYptuMJyxcbiAgICAgICAgJ9is2YjZhicsXG4gICAgICAgICfYrNmI2YTYp9im24wnLFxuICAgICAgICAn2Kfar9iz2KonLFxuICAgICAgICAn2LPYqtmF2KjYsScsXG4gICAgICAgICfYp9qp2KrZiNio2LEnLFxuICAgICAgICAn2YbZiNmF2KjYsScsXG4gICAgICAgICfYr9iz2YXYqNixJ1xuICAgIF07XG4gICAgdmFyIGRheXMgPSBbXG4gICAgICAgICfYp9iq2YjYp9ixJyxcbiAgICAgICAgJ9m+24zYsScsXG4gICAgICAgICfZhdmG2q/ZhCcsXG4gICAgICAgICfYqNiv2r4nLFxuICAgICAgICAn2KzZhdi52LHYp9iqJyxcbiAgICAgICAgJ9is2YXYuduBJyxcbiAgICAgICAgJ9uB2YHYqtuBJ1xuICAgIF07XG5cbiAgICB2YXIgdXIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1cicsIHtcbiAgICAgICAgbW9udGhzIDogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydCA6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXMgOiBkYXlzLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW4gOiBkYXlzLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZNiMIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LXYqNitfNi02KfZhS8sXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2LTYp9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LXYqNitJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAn2LTYp9mFJztcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vYotisINio2YjZgtiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vaqdmEINio2YjZgtiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvYqNmI2YLYql0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb2q/YsNi02KrbgSDYsdmI2LIg2KjZiNmC2KpdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1var9iw2LTYqtuBXSBkZGRkIFvYqNmI2YLYql0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzINio2LnYrycsXG4gICAgICAgICAgICBwYXN0IDogJyVzINmC2KjZhCcsXG4gICAgICAgICAgICBzIDogJ9qG2YbYryDYs9uM2qnZhtqIJyxcbiAgICAgICAgICAgIHNzIDogJyVkINiz24zaqdmG2ognLFxuICAgICAgICAgICAgbSA6ICfYp9uM2qkg2YXZhtm5JyxcbiAgICAgICAgICAgIG1tIDogJyVkINmF2YbZuScsXG4gICAgICAgICAgICBoIDogJ9in24zaqSDar9q+2YbZuduBJyxcbiAgICAgICAgICAgIGhoIDogJyVkINqv2r7Zhtm525InLFxuICAgICAgICAgICAgZCA6ICfYp9uM2qkg2K/ZhicsXG4gICAgICAgICAgICBkZCA6ICclZCDYr9mGJyxcbiAgICAgICAgICAgIE0gOiAn2KfbjNqpINmF2KfbgScsXG4gICAgICAgICAgICBNTSA6ICclZCDZhdin24EnLFxuICAgICAgICAgICAgeSA6ICfYp9uM2qkg2LPYp9mEJyxcbiAgICAgICAgICAgIHl5IDogJyVkINiz2KfZhCdcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB1cjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHV6ID0gbW9tZW50LmRlZmluZUxvY2FsZSgndXonLCB7XG4gICAgICAgIG1vbnRocyA6ICfRj9C90LLQsNGAX9GE0LXQstGA0LDQu1/QvNCw0YDRgl/QsNC/0YDQtdC7X9C80LDQuV/QuNGO0L1f0LjRjtC7X9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgF/QvtC60YLRj9Cx0YBf0L3QvtGP0LHRgF/QtNC10LrQsNCx0YAnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9GP0L3Qsl/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Llf0LjRjtC9X9C40Y7Qu1/QsNCy0LNf0YHQtdC9X9C+0LrRgl/QvdC+0Y9f0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfQr9C60YjQsNC90LHQsF/QlNGD0YjQsNC90LHQsF/QodC10YjQsNC90LHQsF/Qp9C+0YDRiNCw0L3QsdCwX9Cf0LDQudGI0LDQvdCx0LBf0JbRg9C80LBf0KjQsNC90LHQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfQr9C60Yhf0JTRg9GIX9Ch0LXRiF/Qp9C+0YBf0J/QsNC5X9CW0YPQvF/QqNCw0L0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9Cv0Lpf0JTRg1/QodC1X9Cn0L5f0J/QsF/QltGDX9Co0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdEIE1NTU0gWVlZWSwgZGRkZCBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vQkdGD0LPRg9C9INGB0L7QsNGCXSBMVCBb0LTQsF0nLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb0K3RgNGC0LDQs9CwXSBMVCBb0LTQsF0nLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb0LrRg9C90Lgg0YHQvtCw0YJdIExUIFvQtNCwXScsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vQmtC10YfQsCDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vQo9GC0LPQsNC9XSBkZGRkIFvQutGD0L3QuCDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfQr9C60LjQvSAlcyDQuNGH0LjQtNCwJyxcbiAgICAgICAgICAgIHBhc3QgOiAn0JHQuNGAINC90LXRh9CwICVzINC+0LvQtNC40L0nLFxuICAgICAgICAgICAgcyA6ICfRhNGD0YDRgdCw0YInLFxuICAgICAgICAgICAgc3MgOiAnJWQg0YTRg9GA0YHQsNGCJyxcbiAgICAgICAgICAgIG0gOiAn0LHQuNGAINC00LDQutC40LrQsCcsXG4gICAgICAgICAgICBtbSA6ICclZCDQtNCw0LrQuNC60LAnLFxuICAgICAgICAgICAgaCA6ICfQsdC40YAg0YHQvtCw0YInLFxuICAgICAgICAgICAgaGggOiAnJWQg0YHQvtCw0YInLFxuICAgICAgICAgICAgZCA6ICfQsdC40YAg0LrRg9C9JyxcbiAgICAgICAgICAgIGRkIDogJyVkINC60YPQvScsXG4gICAgICAgICAgICBNIDogJ9Cx0LjRgCDQvtC5JyxcbiAgICAgICAgICAgIE1NIDogJyVkINC+0LknLFxuICAgICAgICAgICAgeSA6ICfQsdC40YAg0LnQuNC7JyxcbiAgICAgICAgICAgIHl5IDogJyVkINC50LjQuydcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdXo7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB1ekxhdG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1ei1sYXRuJywge1xuICAgICAgICBtb250aHMgOiAnWWFudmFyX0ZldnJhbF9NYXJ0X0FwcmVsX01heV9JeXVuX0l5dWxfQXZndXN0X1NlbnRhYnJfT2t0YWJyX05veWFicl9EZWthYnInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ1lhbl9GZXZfTWFyX0Fwcl9NYXlfSXl1bl9JeXVsX0F2Z19TZW5fT2t0X05veV9EZWsnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ1lha3NoYW5iYV9EdXNoYW5iYV9TZXNoYW5iYV9DaG9yc2hhbmJhX1BheXNoYW5iYV9KdW1hX1NoYW5iYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdZYWtfRHVzaF9TZXNoX0Nob3JfUGF5X0p1bV9TaGFuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdZYV9EdV9TZV9DaG9fUGFfSnVfU2hhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnRCBNTU1NIFlZWVksIGRkZGQgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbQnVndW4gc29hdF0gTFQgW2RhXScsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tFcnRhZ2FdIExUIFtkYV0nLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBba3VuaSBzb2F0XSBMVCBbZGFdJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0tlY2hhIHNvYXRdIExUIFtkYV0nLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW09cXCd0Z2FuXSBkZGRkIFtrdW5pIHNvYXRdIExUIFtkYV0nLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ1lhcWluICVzIGljaGlkYScsXG4gICAgICAgICAgICBwYXN0IDogJ0JpciBuZWNoYSAlcyBvbGRpbicsXG4gICAgICAgICAgICBzIDogJ3Nvbml5YScsXG4gICAgICAgICAgICBzcyA6ICclZCBzb25peWEnLFxuICAgICAgICAgICAgbSA6ICdiaXIgZGFxaXFhJyxcbiAgICAgICAgICAgIG1tIDogJyVkIGRhcWlxYScsXG4gICAgICAgICAgICBoIDogJ2JpciBzb2F0JyxcbiAgICAgICAgICAgIGhoIDogJyVkIHNvYXQnLFxuICAgICAgICAgICAgZCA6ICdiaXIga3VuJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGt1bicsXG4gICAgICAgICAgICBNIDogJ2JpciBveScsXG4gICAgICAgICAgICBNTSA6ICclZCBveScsXG4gICAgICAgICAgICB5IDogJ2JpciB5aWwnLFxuICAgICAgICAgICAgeXkgOiAnJWQgeWlsJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB1ekxhdG47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB2aSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3ZpJywge1xuICAgICAgICBtb250aHMgOiAndGjDoW5nIDFfdGjDoW5nIDJfdGjDoW5nIDNfdGjDoW5nIDRfdGjDoW5nIDVfdGjDoW5nIDZfdGjDoW5nIDdfdGjDoW5nIDhfdGjDoW5nIDlfdGjDoW5nIDEwX3Row6FuZyAxMV90aMOhbmcgMTInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ1RoMDFfVGgwMl9UaDAzX1RoMDRfVGgwNV9UaDA2X1RoMDdfVGgwOF9UaDA5X1RoMTBfVGgxMV9UaDEyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnY2jhu6cgbmjhuq10X3Ro4bupIGhhaV90aOG7qSBiYV90aOG7qSB0xrBfdGjhu6kgbsSDbV90aOG7qSBzw6F1X3Ro4bupIGLhuqN5Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0NOX1QyX1QzX1Q0X1Q1X1Q2X1Q3Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdDTl9UMl9UM19UNF9UNV9UNl9UNycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3NhfGNoL2ksXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXmNoJC9pLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdzYScgOiAnU0EnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdjaCcgOiAnQ0gnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFtuxINtXSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gW27Eg21dIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gW27Eg21dIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgbCA6ICdERC9NL1lZWVknLFxuICAgICAgICAgICAgbGwgOiAnRCBNTU0gWVlZWScsXG4gICAgICAgICAgICBsbGwgOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ2RkZCwgRCBNTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0jDtG0gbmF5IGzDumNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbTmfDoHkgbWFpIGzDumNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdHXhuqduIHThu5tpIGzDumNdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSMO0bSBxdWEgbMO6Y10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFt0deG6p24gcuG7k2kgbMO6Y10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMgdOG7m2knLFxuICAgICAgICAgICAgcGFzdCA6ICclcyB0csaw4bubYycsXG4gICAgICAgICAgICBzIDogJ3bDoGkgZ2nDonknLFxuICAgICAgICAgICAgc3MgOiAnJWQgZ2nDonknICxcbiAgICAgICAgICAgIG0gOiAnbeG7mXQgcGjDunQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgcGjDunQnLFxuICAgICAgICAgICAgaCA6ICdt4buZdCBnaeG7nScsXG4gICAgICAgICAgICBoaCA6ICclZCBnaeG7nScsXG4gICAgICAgICAgICBkIDogJ23hu5l0IG5nw6B5JyxcbiAgICAgICAgICAgIGRkIDogJyVkIG5nw6B5JyxcbiAgICAgICAgICAgIE0gOiAnbeG7mXQgdGjDoW5nJyxcbiAgICAgICAgICAgIE1NIDogJyVkIHRow6FuZycsXG4gICAgICAgICAgICB5IDogJ23hu5l0IG7Eg20nLFxuICAgICAgICAgICAgeXkgOiAnJWQgbsSDbSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgeFBzZXVkbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3gtcHNldWRvJywge1xuICAgICAgICBtb250aHMgOiAnSn7DocOxw7rDoX5yw71fRn7DqWJyw7p+w6Fyw71ffk3DoXJjfmhfw4FwfnLDrWxffk3DocO9X35Kw7rDscOpfl9Kw7psfsO9X8OBw7p+Z8O6c3R+X1PDqXB+dMOpbWJ+w6lyX8OTfmN0w7NifsOpcl/DkX7Ds3bDqW1+YsOpcl9+RMOpY8Opfm1iw6lyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKfsOhw7FffkbDqWJffk3DoXJffsOBcHJffk3DocO9X35Kw7rDsV9+SsO6bF9+w4HDumdfflPDqXBffsOTY3RffsORw7N2X35Ew6ljJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnU37DusOxZMOhfsO9X03Ds37DsWTDocO9fl9Uw7rDqX5zZMOhw71+X1fDqWR+w7HDqXNkfsOhw71fVH5ow7pyc35kw6HDvV9+RnLDrWR+w6HDvV9TfsOhdMO6cn5kw6HDvScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTfsO6w7Fffk3Ds8OxX35Uw7rDqV9+V8OpZF9+VGjDul9+RnLDrV9+U8OhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU37Dul9Nw7N+X1TDul9+V8OpX1R+aF9Gcn5fU8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tUfsOzZMOhfsO9IMOhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbVH7Ds23Ds35ycsOzfncgw6F0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvDoXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW8OdfsOpc3R+w6lyZMOhfsO9IMOhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW0x+w6FzdF0gZGRkZCBbw6F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnw61+w7EgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDDoX5nw7MnLFxuICAgICAgICAgICAgcyA6ICfDoSB+ZsOpdyB+c8OpY8OzfsOxZHMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc37DqWPDs8OxfmRzJyxcbiAgICAgICAgICAgIG0gOiAnw6Egfm3DrcOxfsO6dMOpJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1+w63DscO6fnTDqXMnLFxuICAgICAgICAgICAgaCA6ICfDoX7DsSBow7N+w7pyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGh+w7PDunJzJyxcbiAgICAgICAgICAgIGQgOiAnw6EgfmTDocO9JyxcbiAgICAgICAgICAgIGRkIDogJyVkIGR+w6HDvXMnLFxuICAgICAgICAgICAgTSA6ICfDoSB+bcOzw7F+dGgnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbX7Ds8OxdH5ocycsXG4gICAgICAgICAgICB5IDogJ8OhIH7DvcOpw6FyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIMO9fsOpw6FycydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHRofHN0fG5kfHJkKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB4UHNldWRvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgeW8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd5bycsIHtcbiAgICAgICAgbW9udGhzIDogJ1PhurnMgXLhurnMgV9FzIByZcyAbGXMgF/hurhy4bq5zIBuYcyAX0nMgGdiZcyBX0XMgGJpYmlfT8yAa3XMgGR1X0Fn4bq5bW9fT8yAZ3XMgW5fT3dld2Vf4buMzIB3YcyAcmHMgF9CZcyBbHXMgV/hu4zMgHDhurnMgMyAJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdT4bq5zIFyX0XMgHJsX+G6uHJuX0nMgGdiX0XMgGJpX0/MgGt1zIBfQWfhurlfT8yAZ3XMgV9Pd2Vf4buMzIB3YcyAX0JlzIFsX+G7jMyAcOG6ucyAzIAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0HMgGnMgGt1zIFfQWplzIFfScyAc+G6ucyBZ3VuX+G7jGrhu43MgXJ1zIFf4buMauG7jcyBYuG7jV/hurh0acyAX0HMgGJhzIFt4bq5zIF0YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdBzIBpzIBrX0FqZcyBX0nMgHPhurnMgV/hu4xqcl/hu4xqYl/hurh0acyAX0HMgGJhzIEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0HMgGnMgF9Bal9JzIBzX+G7jHJf4buMYl/hurh0X0HMgGInLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUyA6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbT8yAbmnMgCBuaV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4buMzIBsYSBuaV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb4buMc+G6ucyAIHRvzIFuXFwnYuG7jV0gW25pXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tBzIBuYSBuaV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBb4buMc+G6ucyAIHRvzIFs4buNzIFdIFtuaV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ25pzIEgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBr4buNamHMgScsXG4gICAgICAgICAgICBzIDogJ2nMgHPhurlqdcyBIGFheWHMgSBkaWUnLFxuICAgICAgICAgICAgc3MgOidhYXlhzIEgJWQnLFxuICAgICAgICAgICAgbSA6ICdpzIBz4bq5anXMgSBrYW4nLFxuICAgICAgICAgICAgbW0gOiAnacyAc+G6uWp1zIEgJWQnLFxuICAgICAgICAgICAgaCA6ICd3YcyBa2F0aSBrYW4nLFxuICAgICAgICAgICAgaGggOiAnd2HMgWthdGkgJWQnLFxuICAgICAgICAgICAgZCA6ICfhu41q4buNzIEga2FuJyxcbiAgICAgICAgICAgIGRkIDogJ+G7jWrhu43MgSAlZCcsXG4gICAgICAgICAgICBNIDogJ29zdcyAIGthbicsXG4gICAgICAgICAgICBNTSA6ICdvc3XMgCAlZCcsXG4gICAgICAgICAgICB5IDogJ+G7jWR1zIFuIGthbicsXG4gICAgICAgICAgICB5eSA6ICfhu41kdcyBbiAlZCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC/hu41q4buNzIFcXHNcXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWwgOiAn4buNauG7jcyBICVkJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB5bztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHpoQ24gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd6aC1jbicsIHtcbiAgICAgICAgbW9udGhzIDogJ+S4gOaciF/kuozmnIhf5LiJ5pyIX+Wbm+aciF/kupTmnIhf5YWt5pyIX+S4g+aciF/lhavmnIhf5Lmd5pyIX+WNgeaciF/ljYHkuIDmnIhf5Y2B5LqM5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn5pif5pyf5pelX+aYn+acn+S4gF/mmJ/mnJ/kuoxf5pif5pyf5LiJX+aYn+acn+Wbm1/mmJ/mnJ/kupRf5pif5pyf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+WRqOaXpV/lkajkuIBf5ZGo5LqMX+WRqOS4iV/lkajlm5tf5ZGo5LqUX+WRqOWFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZ5bm0TeaciETml6VBaOeCuW1t5YiGJyxcbiAgICAgICAgICAgIExMTEwgOiAnWVlZWeW5tE3mnIhE5pelZGRkZEFo54K5bW3liIYnLFxuICAgICAgICAgICAgbCA6ICdZWVlZL00vRCcsXG4gICAgICAgICAgICBsbCA6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgbGxsIDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+WHjOaZqCcgfHwgbWVyaWRpZW0gPT09ICfml6nkuIonIHx8XG4gICAgICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn5LiK5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4i+WNiCcgfHwgbWVyaWRpZW0gPT09ICfmmZrkuIonKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gJ+S4reWNiCdcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgICAgIGlmIChobSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5YeM5pmoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aXqeS4iic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuK3ljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4i+WNiCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pma5LiKJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vku4rlpKldTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb5piO5aSpXUxUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1vkuItdZGRkZExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+aYqOWkqV1MVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb5LiKXWRkZGRMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o5pelfOaciHzlkagpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pyIJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICflkagnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclc+WGhScsXG4gICAgICAgICAgICBwYXN0IDogJyVz5YmNJyxcbiAgICAgICAgICAgIHMgOiAn5Yeg56eSJyxcbiAgICAgICAgICAgIHNzIDogJyVkIOenkicsXG4gICAgICAgICAgICBtIDogJzEg5YiG6ZKfJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOWIhumSnycsXG4gICAgICAgICAgICBoIDogJzEg5bCP5pe2JyxcbiAgICAgICAgICAgIGhoIDogJyVkIOWwj+aXticsXG4gICAgICAgICAgICBkIDogJzEg5aSpJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOWkqScsXG4gICAgICAgICAgICBNIDogJzEg5Liq5pyIJyxcbiAgICAgICAgICAgIE1NIDogJyVkIOS4quaciCcsXG4gICAgICAgICAgICB5IDogJzEg5bm0JyxcbiAgICAgICAgICAgIHl5IDogJyVkIOW5tCdcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIC8vIEdCL1QgNzQwOC0xOTk044CK5pWw5o2u5YWD5ZKM5Lqk5o2i5qC85byPwrfkv6Hmga/kuqTmjaLCt+aXpeacn+WSjOaXtumXtOihqOekuuazleOAi+S4jklTTyA4NjAxOjE5ODjnrYnmlYhcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gemhDbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHpoSGsgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd6aC1oaycsIHtcbiAgICAgICAgbW9udGhzIDogJ+S4gOaciF/kuozmnIhf5LiJ5pyIX+Wbm+aciF/kupTmnIhf5YWt5pyIX+S4g+aciF/lhavmnIhf5Lmd5pyIX+WNgeaciF/ljYHkuIDmnIhf5Y2B5LqM5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn5pif5pyf5pelX+aYn+acn+S4gF/mmJ/mnJ/kuoxf5pif5pyf5LiJX+aYn+acn+Wbm1/mmJ/mnJ/kupRf5pif5pyf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+mAseaXpV/pgLHkuIBf6YCx5LqMX+mAseS4iV/pgLHlm5tf6YCx5LqUX+mAseWFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdZWVlZ5bm0TeaciETml6VkZGRkIEhIOm1tJyxcbiAgICAgICAgICAgIGwgOiAnWVlZWS9NL0QnLFxuICAgICAgICAgICAgbGwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIGxsbCA6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbCA6ICdZWVlZ5bm0TeaciETml6VkZGRkIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv5YeM5pmofOaXqeS4inzkuIrljYh85Lit5Y2IfOS4i+WNiHzmmZrkuIovLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn5YeM5pmoJyB8fCBtZXJpZGllbSA9PT0gJ+aXqeS4iicgfHwgbWVyaWRpZW0gPT09ICfkuIrljYgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5Lit5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuIvljYgnIHx8IG1lcmlkaWVtID09PSAn5pma5LiKJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgICAgIGlmIChobSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5YeM5pmoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aXqeS4iic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuK3ljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4i+WNiCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pma5LiKJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vku4rlpKldTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb5piO5aSpXUxUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1vkuItdZGRkZExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+aYqOWkqV1MVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb5LiKXWRkZGRMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o5pelfOaciHzpgLEpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJyA6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCcgOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCcgOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnTScgOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aciCc7XG4gICAgICAgICAgICAgICAgY2FzZSAndycgOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnIDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfpgLEnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQgOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXPlhacnLFxuICAgICAgICAgICAgcGFzdCA6ICclc+WJjScsXG4gICAgICAgICAgICBzIDogJ+W5vuenkicsXG4gICAgICAgICAgICBzcyA6ICclZCDnp5InLFxuICAgICAgICAgICAgbSA6ICcxIOWIhumQmCcsXG4gICAgICAgICAgICBtbSA6ICclZCDliIbpkJgnLFxuICAgICAgICAgICAgaCA6ICcxIOWwj+aZgicsXG4gICAgICAgICAgICBoaCA6ICclZCDlsI/mmYInLFxuICAgICAgICAgICAgZCA6ICcxIOWkqScsXG4gICAgICAgICAgICBkZCA6ICclZCDlpKknLFxuICAgICAgICAgICAgTSA6ICcxIOWAi+aciCcsXG4gICAgICAgICAgICBNTSA6ICclZCDlgIvmnIgnLFxuICAgICAgICAgICAgeSA6ICcxIOW5tCcsXG4gICAgICAgICAgICB5eSA6ICclZCDlubQnXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB6aEhrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgemhUdyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3poLXR3Jywge1xuICAgICAgICBtb250aHMgOiAn5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIgnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfmmJ/mnJ/ml6Vf5pif5pyf5LiAX+aYn+acn+S6jF/mmJ/mnJ/kuIlf5pif5pyf5ZubX+aYn+acn+S6lF/mmJ/mnJ/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn6YCx5pelX+mAseS4gF/pgLHkuoxf6YCx5LiJX+mAseWbm1/pgLHkupRf6YCx5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfml6Vf5LiAX+S6jF/kuIlf5ZubX+S6lF/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBMTCA6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgTExMIDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nLFxuICAgICAgICAgICAgbCA6ICdZWVlZL00vRCcsXG4gICAgICAgICAgICBsbCA6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgbGxsIDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICflh4zmmagnIHx8IG1lcmlkaWVtID09PSAn5pep5LiKJyB8fCBtZXJpZGllbSA9PT0gJ+S4iuWNiCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuK3ljYgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4i+WNiCcgfHwgbWVyaWRpZW0gPT09ICfmmZrkuIonKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICflh4zmmagnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDkwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pep5LiKJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMTMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuIrljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4reWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiL5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfmmZrkuIonO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+S7iuWkqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb5piO5aSpXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdb5LiLXWRkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb5pio5aSpXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb5LiKXWRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KOaXpXzmnIh86YCxKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCcgOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnIDpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnIDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nIDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfmnIgnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3cnIDpcbiAgICAgICAgICAgICAgICBjYXNlICdXJyA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn6YCxJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVz5YWnJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXPliY0nLFxuICAgICAgICAgICAgcyA6ICflub7np5InLFxuICAgICAgICAgICAgc3MgOiAnJWQg56eSJyxcbiAgICAgICAgICAgIG0gOiAnMSDliIbpkJgnLFxuICAgICAgICAgICAgbW0gOiAnJWQg5YiG6ZCYJyxcbiAgICAgICAgICAgIGggOiAnMSDlsI/mmYInLFxuICAgICAgICAgICAgaGggOiAnJWQg5bCP5pmCJyxcbiAgICAgICAgICAgIGQgOiAnMSDlpKknLFxuICAgICAgICAgICAgZGQgOiAnJWQg5aSpJyxcbiAgICAgICAgICAgIE0gOiAnMSDlgIvmnIgnLFxuICAgICAgICAgICAgTU0gOiAnJWQg5YCL5pyIJyxcbiAgICAgICAgICAgIHkgOiAnMSDlubQnLFxuICAgICAgICAgICAgeXkgOiAnJWQg5bm0J1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gemhUdztcblxufSkpKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHR2YXIgc3RyID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG5cdHZhciBpc0FyZ3MgPSBzdHIgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXHRpZiAoIWlzQXJncykge1xuXHRcdGlzQXJncyA9IHN0ciAhPT0gJ1tvYmplY3QgQXJyYXldJyAmJlxuXHRcdFx0dmFsdWUgIT09IG51bGwgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0XHR2YWx1ZS5sZW5ndGggPj0gMCAmJlxuXHRcdFx0dG9TdHIuY2FsbCh2YWx1ZS5jYWxsZWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHR9XG5cdHJldHVybiBpc0FyZ3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczYtc2hpbVxudmFyIGtleXMgPSByZXF1aXJlKCdvYmplY3Qta2V5cycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgY2FuQmVPYmplY3QgPSBmdW5jdGlvbiAob2JqKSB7XG5cdHJldHVybiB0eXBlb2Ygb2JqICE9PSAndW5kZWZpbmVkJyAmJiBvYmogIT09IG51bGw7XG59O1xudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scy9zaGFtcycpKCk7XG52YXIgdG9PYmplY3QgPSBPYmplY3Q7XG52YXIgcHVzaCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBBcnJheS5wcm90b3R5cGUucHVzaCk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlKTtcbnZhciBvcmlnaW5hbEdldFN5bWJvbHMgPSBoYXNTeW1ib2xzID8gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA6IG51bGw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlMSkge1xuXHRpZiAoIWNhbkJlT2JqZWN0KHRhcmdldCkpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigndGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0Jyk7IH1cblx0dmFyIG9ialRhcmdldCA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzLCBzb3VyY2UsIGksIHByb3BzLCBzeW1zLCB2YWx1ZSwga2V5O1xuXHRmb3IgKHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgKytzKSB7XG5cdFx0c291cmNlID0gdG9PYmplY3QoYXJndW1lbnRzW3NdKTtcblx0XHRwcm9wcyA9IGtleXMoc291cmNlKTtcblx0XHR2YXIgZ2V0U3ltYm9scyA9IGhhc1N5bWJvbHMgJiYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgfHwgb3JpZ2luYWxHZXRTeW1ib2xzKTtcblx0XHRpZiAoZ2V0U3ltYm9scykge1xuXHRcdFx0c3ltcyA9IGdldFN5bWJvbHMoc291cmNlKTtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBzeW1zLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdGtleSA9IHN5bXNbaV07XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlKHNvdXJjZSwga2V5KSkge1xuXHRcdFx0XHRcdHB1c2gocHJvcHMsIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0Zm9yIChpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRrZXkgPSBwcm9wc1tpXTtcblx0XHRcdHZhbHVlID0gc291cmNlW2tleV07XG5cdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZShzb3VyY2UsIGtleSkpIHtcblx0XHRcdFx0b2JqVGFyZ2V0W2tleV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIG9ialRhcmdldDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBjb21wbGV4aXR5OiBbMiwgMTddLCBtYXgtc3RhdGVtZW50czogWzIsIDMzXSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnKSB7IHJldHVybiB0cnVlOyB9XG5cblx0dmFyIG9iaiA9IHt9O1xuXHR2YXIgc3ltID0gU3ltYm9sKCd0ZXN0Jyk7XG5cdHZhciBzeW1PYmogPSBPYmplY3Qoc3ltKTtcblx0aWYgKHR5cGVvZiBzeW0gPT09ICdzdHJpbmcnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltT2JqKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9vYmplY3QuYXNzaWduL2lzc3Vlcy8xN1xuXHQvLyBpZiAoc3ltIGluc3RhbmNlb2YgU3ltYm9sKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi9nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMvaXNzdWVzLzRcblx0Ly8gaWYgKCEoc3ltT2JqIGluc3RhbmNlb2YgU3ltYm9sKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyBpZiAodHlwZW9mIFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIGlmIChTdHJpbmcoc3ltKSAhPT0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bVZhbCA9IDQyO1xuXHRvYmpbc3ltXSA9IHN5bVZhbDtcblx0Zm9yIChzeW0gaW4gb2JqKSB7IHJldHVybiBmYWxzZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cdGlmICh0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKTtcblx0aWYgKHN5bXMubGVuZ3RoICE9PSAxIHx8IHN5bXNbMF0gIT09IHN5bSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgc3ltKTtcblx0XHRpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gc3ltVmFsIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSAhPT0gdHJ1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG52YXIgbGFja3NQcm9wZXJFbnVtZXJhdGlvbk9yZGVyID0gZnVuY3Rpb24gKCkge1xuXHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0Ly8gdjgsIHNwZWNpZmljYWxseSBpbiBub2RlIDQueCwgaGFzIGEgYnVnIHdpdGggaW5jb3JyZWN0IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyXG5cdC8vIG5vdGU6IHRoaXMgZG9lcyBub3QgZGV0ZWN0IHRoZSBidWcgdW5sZXNzIHRoZXJlJ3MgMjAgY2hhcmFjdGVyc1xuXHR2YXIgc3RyID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0Jztcblx0dmFyIGxldHRlcnMgPSBzdHIuc3BsaXQoJycpO1xuXHR2YXIgbWFwID0ge307XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGV0dGVycy5sZW5ndGg7ICsraSkge1xuXHRcdG1hcFtsZXR0ZXJzW2ldXSA9IGxldHRlcnNbaV07XG5cdH1cblx0dmFyIG9iaiA9IE9iamVjdC5hc3NpZ24oe30sIG1hcCk7XG5cdHZhciBhY3R1YWwgPSAnJztcblx0Zm9yICh2YXIgayBpbiBvYmopIHtcblx0XHRhY3R1YWwgKz0gaztcblx0fVxuXHRyZXR1cm4gc3RyICE9PSBhY3R1YWw7XG59O1xuXG52YXIgYXNzaWduSGFzUGVuZGluZ0V4Y2VwdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG5cdGlmICghT2JqZWN0LmFzc2lnbiB8fCAhT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdC8vIEZpcmVmb3ggMzcgc3RpbGwgaGFzIFwicGVuZGluZyBleGNlcHRpb25cIiBsb2dpYyBpbiBpdHMgT2JqZWN0LmFzc2lnbiBpbXBsZW1lbnRhdGlvbixcblx0Ly8gd2hpY2ggaXMgNzIlIHNsb3dlciB0aGFuIG91ciBzaGltLCBhbmQgRmlyZWZveCA0MCdzIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbi5cblx0dmFyIHRocm93ZXIgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoeyAxOiAyIH0pO1xuXHR0cnkge1xuXHRcdE9iamVjdC5hc3NpZ24odGhyb3dlciwgJ3h5Jyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gdGhyb3dlclsxXSA9PT0gJ3knO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcblx0fVxuXHRpZiAobGFja3NQcm9wZXJFbnVtZXJhdGlvbk9yZGVyKCkpIHtcblx0XHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG5cdH1cblx0aWYgKGFzc2lnbkhhc1BlbmRpbmdFeGNlcHRpb25zKCkpIHtcblx0XHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG5cdH1cblx0cmV0dXJuIE9iamVjdC5hc3NpZ247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIHN0eWxlSW50ZXJmYWNlID0gdm9pZCAwO1xudmFyIHN0eWxlVGhlbWUgPSB2b2lkIDA7XG5cbnZhciBTVEFSVF9NQVJLID0gJ3JlYWN0LXdpdGgtc3R5bGVzLnJlc29sdmUuc3RhcnQnO1xudmFyIEVORF9NQVJLID0gJ3JlYWN0LXdpdGgtc3R5bGVzLnJlc29sdmUuZW5kJztcbnZhciBNRUFTVVJFX01BUksgPSAnXFx1RDgzRFxcdURDNjlcXHUyMDBEXFx1RDgzQ1xcdURGQTggW3Jlc29sdmVdJztcblxuZnVuY3Rpb24gcmVnaXN0ZXJUaGVtZSh0aGVtZSkge1xuICBzdHlsZVRoZW1lID0gdGhlbWU7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySW50ZXJmYWNlKGludGVyZmFjZVRvUmVnaXN0ZXIpIHtcbiAgc3R5bGVJbnRlcmZhY2UgPSBpbnRlcmZhY2VUb1JlZ2lzdGVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGUobWFrZUZyb21UaGVtZSwgY3JlYXRlV2l0aERpcmVjdGlvbikge1xuICB2YXIgc3R5bGVzID0gY3JlYXRlV2l0aERpcmVjdGlvbihtYWtlRnJvbVRoZW1lKHN0eWxlVGhlbWUpKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMVFIobWFrZUZyb21UaGVtZSkge1xuICByZXR1cm4gY3JlYXRlKG1ha2VGcm9tVGhlbWUsIHN0eWxlSW50ZXJmYWNlLmNyZWF0ZUxUUiB8fCBzdHlsZUludGVyZmFjZS5jcmVhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSVEwobWFrZUZyb21UaGVtZSkge1xuICByZXR1cm4gY3JlYXRlKG1ha2VGcm9tVGhlbWUsIHN0eWxlSW50ZXJmYWNlLmNyZWF0ZVJUTCB8fCBzdHlsZUludGVyZmFjZS5jcmVhdGUpO1xufVxuXG5mdW5jdGlvbiBnZXQoKSB7XG4gIHJldHVybiBzdHlsZVRoZW1lO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnICYmIHBlcmZvcm1hbmNlLm1hcmsgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHBlcmZvcm1hbmNlLmNsZWFyTWFya3MoU1RBUlRfTUFSSyk7XG4gICAgcGVyZm9ybWFuY2UubWFyayhTVEFSVF9NQVJLKTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzdHlsZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBzdHlsZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gc3R5bGVJbnRlcmZhY2UucmVzb2x2ZShzdHlsZXMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gJ3VuZGVmaW5lZCcgJiYgcGVyZm9ybWFuY2UubWFyayAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5jbGVhck1hcmtzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyhFTkRfTUFSSyk7XG4gICAgcGVyZm9ybWFuY2UubWFyayhFTkRfTUFSSyk7XG5cbiAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKE1FQVNVUkVfTUFSSywgU1RBUlRfTUFSSywgRU5EX01BUkspO1xuICAgIHBlcmZvcm1hbmNlLmNsZWFyTWFya3MoTUVBU1VSRV9NQVJLKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVMVFIoKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgc3R5bGVzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBzdHlsZXNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIGlmIChzdHlsZUludGVyZmFjZS5yZXNvbHZlTFRSKSB7XG4gICAgcmV0dXJuIHN0eWxlSW50ZXJmYWNlLnJlc29sdmVMVFIoc3R5bGVzKTtcbiAgfVxuXG4gIHJldHVybiByZXNvbHZlKHN0eWxlcyk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVSVEwoKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgc3R5bGVzID0gQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBzdHlsZXNbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIGlmIChzdHlsZUludGVyZmFjZS5yZXNvbHZlUlRMKSB7XG4gICAgcmV0dXJuIHN0eWxlSW50ZXJmYWNlLnJlc29sdmVSVEwoc3R5bGVzKTtcbiAgfVxuXG4gIHJldHVybiByZXNvbHZlKHN0eWxlcyk7XG59XG5cbmZ1bmN0aW9uIGZsdXNoKCkge1xuICBpZiAoc3R5bGVJbnRlcmZhY2UuZmx1c2gpIHtcbiAgICBzdHlsZUludGVyZmFjZS5mbHVzaCgpO1xuICB9XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgcmVnaXN0ZXJUaGVtZTogcmVnaXN0ZXJUaGVtZSxcbiAgcmVnaXN0ZXJJbnRlcmZhY2U6IHJlZ2lzdGVySW50ZXJmYWNlLFxuICBjcmVhdGU6IGNyZWF0ZUxUUixcbiAgY3JlYXRlTFRSOiBjcmVhdGVMVFIsXG4gIGNyZWF0ZVJUTDogY3JlYXRlUlRMLFxuICBnZXQ6IGdldCxcbiAgcmVzb2x2ZTogcmVzb2x2ZUxUUixcbiAgcmVzb2x2ZUxUUjogcmVzb2x2ZUxUUixcbiAgcmVzb2x2ZVJUTDogcmVzb2x2ZVJUTCxcbiAgZmx1c2g6IGZsdXNoXG59OyIsInZhciBub3cgPSByZXF1aXJlKCdwZXJmb3JtYW5jZS1ub3cnKVxuICAsIHJvb3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHdpbmRvd1xuICAsIHZlbmRvcnMgPSBbJ21veicsICd3ZWJraXQnXVxuICAsIHN1ZmZpeCA9ICdBbmltYXRpb25GcmFtZSdcbiAgLCByYWYgPSByb290WydyZXF1ZXN0JyArIHN1ZmZpeF1cbiAgLCBjYWYgPSByb290WydjYW5jZWwnICsgc3VmZml4XSB8fCByb290WydjYW5jZWxSZXF1ZXN0JyArIHN1ZmZpeF1cblxuZm9yKHZhciBpID0gMDsgIXJhZiAmJiBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICByYWYgPSByb290W3ZlbmRvcnNbaV0gKyAnUmVxdWVzdCcgKyBzdWZmaXhdXG4gIGNhZiA9IHJvb3RbdmVuZG9yc1tpXSArICdDYW5jZWwnICsgc3VmZml4XVxuICAgICAgfHwgcm9vdFt2ZW5kb3JzW2ldICsgJ0NhbmNlbFJlcXVlc3QnICsgc3VmZml4XVxufVxuXG4vLyBTb21lIHZlcnNpb25zIG9mIEZGIGhhdmUgckFGIGJ1dCBub3QgY0FGXG5pZighcmFmIHx8ICFjYWYpIHtcbiAgdmFyIGxhc3QgPSAwXG4gICAgLCBpZCA9IDBcbiAgICAsIHF1ZXVlID0gW11cbiAgICAsIGZyYW1lRHVyYXRpb24gPSAxMDAwIC8gNjBcblxuICByYWYgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmKHF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdmFyIF9ub3cgPSBub3coKVxuICAgICAgICAsIG5leHQgPSBNYXRoLm1heCgwLCBmcmFtZUR1cmF0aW9uIC0gKF9ub3cgLSBsYXN0KSlcbiAgICAgIGxhc3QgPSBuZXh0ICsgX25vd1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNwID0gcXVldWUuc2xpY2UoMClcbiAgICAgICAgLy8gQ2xlYXIgcXVldWUgaGVyZSB0byBwcmV2ZW50XG4gICAgICAgIC8vIGNhbGxiYWNrcyBmcm9tIGFwcGVuZGluZyBsaXN0ZW5lcnNcbiAgICAgICAgLy8gdG8gdGhlIGN1cnJlbnQgZnJhbWUncyBxdWV1ZVxuICAgICAgICBxdWV1ZS5sZW5ndGggPSAwXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmKCFjcFtpXS5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgY3BbaV0uY2FsbGJhY2sobGFzdClcbiAgICAgICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0aHJvdyBlIH0sIDApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBNYXRoLnJvdW5kKG5leHQpKVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKHtcbiAgICAgIGhhbmRsZTogKytpZCxcbiAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgIGNhbmNlbGxlZDogZmFsc2VcbiAgICB9KVxuICAgIHJldHVybiBpZFxuICB9XG5cbiAgY2FmID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZihxdWV1ZVtpXS5oYW5kbGUgPT09IGhhbmRsZSkge1xuICAgICAgICBxdWV1ZVtpXS5jYW5jZWxsZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4pIHtcbiAgLy8gV3JhcCBpbiBhIG5ldyBmdW5jdGlvbiB0byBwcmV2ZW50XG4gIC8vIGBjYW5jZWxgIHBvdGVudGlhbGx5IGJlaW5nIGFzc2lnbmVkXG4gIC8vIHRvIHRoZSBuYXRpdmUgckFGIGZ1bmN0aW9uXG4gIHJldHVybiByYWYuY2FsbChyb290LCBmbilcbn1cbm1vZHVsZS5leHBvcnRzLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICBjYWYuYXBwbHkocm9vdCwgYXJndW1lbnRzKVxufVxubW9kdWxlLmV4cG9ydHMucG9seWZpbGwgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKCFvYmplY3QpIHtcbiAgICBvYmplY3QgPSByb290O1xuICB9XG4gIG9iamVjdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByYWZcbiAgb2JqZWN0LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gY2FmXG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGdldENhbGVuZGFyRGF5U2V0dGluZ3M7XG5cbnZhciBfZ2V0UGhyYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9nZXRQaHJhc2VcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbmZ1bmN0aW9uIGlzU2VsZWN0ZWQobW9kaWZpZXJzKSB7XG4gIHJldHVybiBtb2RpZmllcnMuaGFzKCdzZWxlY3RlZCcpIHx8IG1vZGlmaWVycy5oYXMoJ3NlbGVjdGVkLXNwYW4nKSB8fCBtb2RpZmllcnMuaGFzKCdzZWxlY3RlZC1zdGFydCcpIHx8IG1vZGlmaWVycy5oYXMoJ3NlbGVjdGVkLWVuZCcpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VEZWZhdWx0Q3Vyc29yKG1vZGlmaWVycykge1xuICByZXR1cm4gbW9kaWZpZXJzLmhhcygnYmxvY2tlZC1taW5pbXVtLW5pZ2h0cycpIHx8IG1vZGlmaWVycy5oYXMoJ2Jsb2NrZWQtY2FsZW5kYXInKSB8fCBtb2RpZmllcnMuaGFzKCdibG9ja2VkLW91dC1vZi1yYW5nZScpO1xufVxuXG5mdW5jdGlvbiBpc0hvdmVyZWRTcGFuKG1vZGlmaWVycykge1xuICBpZiAoaXNTZWxlY3RlZChtb2RpZmllcnMpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBtb2RpZmllcnMuaGFzKCdob3ZlcmVkLXNwYW4nKSB8fCBtb2RpZmllcnMuaGFzKCdhZnRlci1ob3ZlcmVkLXN0YXJ0Jyk7XG59XG5cbmZ1bmN0aW9uIGdldEFyaWFMYWJlbChwaHJhc2VzLCBtb2RpZmllcnMsIGRheSwgYXJpYUxhYmVsRm9ybWF0KSB7XG4gIHZhciBjaG9vc2VBdmFpbGFibGVEYXRlID0gcGhyYXNlcy5jaG9vc2VBdmFpbGFibGVEYXRlLFxuICAgICAgZGF0ZUlzVW5hdmFpbGFibGUgPSBwaHJhc2VzLmRhdGVJc1VuYXZhaWxhYmxlLFxuICAgICAgZGF0ZUlzU2VsZWN0ZWQgPSBwaHJhc2VzLmRhdGVJc1NlbGVjdGVkLFxuICAgICAgZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZSA9IHBocmFzZXMuZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZSxcbiAgICAgIGRhdGVJc1NlbGVjdGVkQXNFbmREYXRlID0gcGhyYXNlcy5kYXRlSXNTZWxlY3RlZEFzRW5kRGF0ZTtcbiAgdmFyIGZvcm1hdHRlZERhdGUgPSB7XG4gICAgZGF0ZTogZGF5LmZvcm1hdChhcmlhTGFiZWxGb3JtYXQpXG4gIH07XG5cbiAgaWYgKG1vZGlmaWVycy5oYXMoJ3NlbGVjdGVkLXN0YXJ0JykgJiYgZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZSkge1xuICAgIHJldHVybiAoMCwgX2dldFBocmFzZVtcImRlZmF1bHRcIl0pKGRhdGVJc1NlbGVjdGVkQXNTdGFydERhdGUsIGZvcm1hdHRlZERhdGUpO1xuICB9XG5cbiAgaWYgKG1vZGlmaWVycy5oYXMoJ3NlbGVjdGVkLWVuZCcpICYmIGRhdGVJc1NlbGVjdGVkQXNFbmREYXRlKSB7XG4gICAgcmV0dXJuICgwLCBfZ2V0UGhyYXNlW1wiZGVmYXVsdFwiXSkoZGF0ZUlzU2VsZWN0ZWRBc0VuZERhdGUsIGZvcm1hdHRlZERhdGUpO1xuICB9XG5cbiAgaWYgKGlzU2VsZWN0ZWQobW9kaWZpZXJzKSAmJiBkYXRlSXNTZWxlY3RlZCkge1xuICAgIHJldHVybiAoMCwgX2dldFBocmFzZVtcImRlZmF1bHRcIl0pKGRhdGVJc1NlbGVjdGVkLCBmb3JtYXR0ZWREYXRlKTtcbiAgfVxuXG4gIGlmIChtb2RpZmllcnMuaGFzKF9jb25zdGFudHMuQkxPQ0tFRF9NT0RJRklFUikpIHtcbiAgICByZXR1cm4gKDAsIF9nZXRQaHJhc2VbXCJkZWZhdWx0XCJdKShkYXRlSXNVbmF2YWlsYWJsZSwgZm9ybWF0dGVkRGF0ZSk7XG4gIH1cblxuICByZXR1cm4gKDAsIF9nZXRQaHJhc2VbXCJkZWZhdWx0XCJdKShjaG9vc2VBdmFpbGFibGVEYXRlLCBmb3JtYXR0ZWREYXRlKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2FsZW5kYXJEYXlTZXR0aW5ncyhkYXksIGFyaWFMYWJlbEZvcm1hdCwgZGF5U2l6ZSwgbW9kaWZpZXJzLCBwaHJhc2VzKSB7XG4gIHJldHVybiB7XG4gICAgYXJpYUxhYmVsOiBnZXRBcmlhTGFiZWwocGhyYXNlcywgbW9kaWZpZXJzLCBkYXksIGFyaWFMYWJlbEZvcm1hdCksXG4gICAgaG92ZXJlZFNwYW46IGlzSG92ZXJlZFNwYW4obW9kaWZpZXJzKSxcbiAgICBpc091dHNpZGVSYW5nZTogbW9kaWZpZXJzLmhhcygnYmxvY2tlZC1vdXQtb2YtcmFuZ2UnKSxcbiAgICBzZWxlY3RlZDogaXNTZWxlY3RlZChtb2RpZmllcnMpLFxuICAgIHVzZURlZmF1bHRDdXJzb3I6IHNob3VsZFVzZURlZmF1bHRDdXJzb3IobW9kaWZpZXJzKSxcbiAgICBkYXlTaXplU3R5bGVzOiB7XG4gICAgICB3aWR0aDogZGF5U2l6ZSxcbiAgICAgIGhlaWdodDogZGF5U2l6ZSAtIDFcbiAgICB9XG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfZW56eW1lU2hhbGxvd0VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZW56eW1lLXNoYWxsb3ctZXF1YWxcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0TW9tZW50UHJvcHR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtbW9tZW50LXByb3B0eXBlc1wiKSk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG52YXIgX3JlYWN0V2l0aFN0eWxlcyA9IHJlcXVpcmUoXCJyZWFjdC13aXRoLXN0eWxlc1wiKTtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKSk7XG5cbnZhciBfQ2FsZW5kYXJXZWVrID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYWxlbmRhcldlZWtcIikpO1xuXG52YXIgX0NhbGVuZGFyRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYWxlbmRhckRheVwiKSk7XG5cbnZhciBfY2FsY3VsYXRlRGltZW5zaW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvY2FsY3VsYXRlRGltZW5zaW9uXCIpKTtcblxudmFyIF9nZXRDYWxlbmRhck1vbnRoV2Vla3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRDYWxlbmRhck1vbnRoV2Vla3NcIikpO1xuXG52YXIgX2lzU2FtZURheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzU2FtZURheVwiKSk7XG5cbnZhciBfdG9JU09EYXRlU3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvdG9JU09EYXRlU3RyaW5nXCIpKTtcblxudmFyIF9Nb2RpZmllcnNTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9Nb2RpZmllcnNTaGFwZVwiKSk7XG5cbnZhciBfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGVcIikpO1xuXG52YXIgX0RheU9mV2Vla1NoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL0RheU9mV2Vla1NoYXBlXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG4vKiBlc2xpbnQgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5OiAwICovXG52YXIgcHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9haXJibmJQcm9wVHlwZXMuZm9yYmlkRXh0cmFQcm9wcykoKDAsIF9vYmplY3RTcHJlYWQzW1wiZGVmYXVsdFwiXSkoe30sIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlc1Byb3BUeXBlcywge1xuICBtb250aDogX3JlYWN0TW9tZW50UHJvcHR5cGVzW1wiZGVmYXVsdFwiXS5tb21lbnRPYmosXG4gIGhvcml6b250YWxNb250aFBhZGRpbmc6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBpc1Zpc2libGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGVuYWJsZU91dHNpZGVEYXlzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBtb2RpZmllcnM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdE9mKF9Nb2RpZmllcnNTaGFwZVtcImRlZmF1bHRcIl0pLFxuICBvcmllbnRhdGlvbjogX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgZGF5U2l6ZTogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIG9uRGF5Q2xpY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uRGF5TW91c2VFbnRlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25EYXlNb3VzZUxlYXZlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbk1vbnRoU2VsZWN0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvblllYXJTZWxlY3Q6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlck1vbnRoVGV4dDogKDAsIF9haXJibmJQcm9wVHlwZXMubXV0dWFsbHlFeGNsdXNpdmVQcm9wcykoX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYywgJ3JlbmRlck1vbnRoVGV4dCcsICdyZW5kZXJNb250aEVsZW1lbnQnKSxcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlckRheUNvbnRlbnRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJNb250aEVsZW1lbnQ6ICgwLCBfYWlyYm5iUHJvcFR5cGVzLm11dHVhbGx5RXhjbHVzaXZlUHJvcHMpKF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsICdyZW5kZXJNb250aFRleHQnLCAncmVuZGVyTW9udGhFbGVtZW50JyksXG4gIGZpcnN0RGF5T2ZXZWVrOiBfRGF5T2ZXZWVrU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBzZXRNb250aFRpdGxlSGVpZ2h0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICB2ZXJ0aWNhbEJvcmRlclNwYWNpbmc6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBmb2N1c2VkRGF0ZTogX3JlYWN0TW9tZW50UHJvcHR5cGVzW1wiZGVmYXVsdFwiXS5tb21lbnRPYmosXG4gIC8vIGluZGljYXRlcyBmb2N1c2FibGUgZGF5XG4gIGlzRm9jdXNlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgLy8gaW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRvIG1vdmUgZm9jdXMgdG8gZm9jdXNhYmxlIGRheVxuICAvLyBpMThuXG4gIG1vbnRoRm9ybWF0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHBocmFzZXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzW1wiZGVmYXVsdFwiXSkoX2RlZmF1bHRQaHJhc2VzLkNhbGVuZGFyRGF5UGhyYXNlcykpLFxuICBkYXlBcmlhTGFiZWxGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZ1xufSkpIDoge307XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBtb250aDogKDAsIF9tb21lbnRbXCJkZWZhdWx0XCJdKSgpLFxuICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiAxMyxcbiAgaXNWaXNpYmxlOiB0cnVlLFxuICBlbmFibGVPdXRzaWRlRGF5czogZmFsc2UsXG4gIG1vZGlmaWVyczoge30sXG4gIG9yaWVudGF0aW9uOiBfY29uc3RhbnRzLkhPUklaT05UQUxfT1JJRU5UQVRJT04sXG4gIGRheVNpemU6IF9jb25zdGFudHMuREFZX1NJWkUsXG4gIG9uRGF5Q2xpY2s6IGZ1bmN0aW9uIG9uRGF5Q2xpY2soKSB7fSxcbiAgb25EYXlNb3VzZUVudGVyOiBmdW5jdGlvbiBvbkRheU1vdXNlRW50ZXIoKSB7fSxcbiAgb25EYXlNb3VzZUxlYXZlOiBmdW5jdGlvbiBvbkRheU1vdXNlTGVhdmUoKSB7fSxcbiAgb25Nb250aFNlbGVjdDogZnVuY3Rpb24gb25Nb250aFNlbGVjdCgpIHt9LFxuICBvblllYXJTZWxlY3Q6IGZ1bmN0aW9uIG9uWWVhclNlbGVjdCgpIHt9LFxuICByZW5kZXJNb250aFRleHQ6IG51bGwsXG4gIHJlbmRlckNhbGVuZGFyRGF5OiBmdW5jdGlvbiByZW5kZXJDYWxlbmRhckRheShwcm9wcykge1xuICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0NhbGVuZGFyRGF5W1wiZGVmYXVsdFwiXSwgcHJvcHMpO1xuICB9LFxuICByZW5kZXJEYXlDb250ZW50czogbnVsbCxcbiAgcmVuZGVyTW9udGhFbGVtZW50OiBudWxsLFxuICBmaXJzdERheU9mV2VlazogbnVsbCxcbiAgc2V0TW9udGhUaXRsZUhlaWdodDogbnVsbCxcbiAgZm9jdXNlZERhdGU6IG51bGwsXG4gIGlzRm9jdXNlZDogZmFsc2UsXG4gIC8vIGkxOG5cbiAgbW9udGhGb3JtYXQ6ICdNTU1NIFlZWVknLFxuICAvLyBlbmdsaXNoIGxvY2FsZVxuICBwaHJhc2VzOiBfZGVmYXVsdFBocmFzZXMuQ2FsZW5kYXJEYXlQaHJhc2VzLFxuICBkYXlBcmlhTGFiZWxGb3JtYXQ6IHVuZGVmaW5lZCxcbiAgdmVydGljYWxCb3JkZXJTcGFjaW5nOiB1bmRlZmluZWRcbn07XG5cbnZhciBDYWxlbmRhck1vbnRoID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfcmVmKSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTJbXCJkZWZhdWx0XCJdKShDYWxlbmRhck1vbnRoLCBfcmVmKTtcbiAgdmFyIF9wcm90byA9IENhbGVuZGFyTW9udGgucHJvdG90eXBlO1xuXG4gIF9wcm90b1shX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICYmIFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCJdID0gZnVuY3Rpb24gKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgcmV0dXJuICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKTtcbiAgfTtcblxuICBmdW5jdGlvbiBDYWxlbmRhck1vbnRoKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfcmVmLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICB3ZWVrczogKDAsIF9nZXRDYWxlbmRhck1vbnRoV2Vla3NbXCJkZWZhdWx0XCJdKShwcm9wcy5tb250aCwgcHJvcHMuZW5hYmxlT3V0c2lkZURheXMsIHByb3BzLmZpcnN0RGF5T2ZXZWVrID09IG51bGwgPyBfbW9tZW50W1wiZGVmYXVsdFwiXS5sb2NhbGVEYXRhKCkuZmlyc3REYXlPZldlZWsoKSA6IHByb3BzLmZpcnN0RGF5T2ZXZWVrKVxuICAgIH07XG4gICAgX3RoaXMuc2V0Q2FwdGlvblJlZiA9IF90aGlzLnNldENhcHRpb25SZWYuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLnNldE1vbnRoVGl0bGVIZWlnaHQgPSBfdGhpcy5zZXRNb250aFRpdGxlSGVpZ2h0LmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnNldE1vbnRoVGl0bGVIZWlnaHRUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLnNldE1vbnRoVGl0bGVIZWlnaHQsIDApO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgbW9udGggPSBuZXh0UHJvcHMubW9udGgsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gbmV4dFByb3BzLmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICBmaXJzdERheU9mV2VlayA9IG5leHRQcm9wcy5maXJzdERheU9mV2VlaztcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBwcmV2TW9udGggPSBfdGhpcyRwcm9wcy5tb250aCxcbiAgICAgICAgcHJldkVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHMuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgIHByZXZGaXJzdERheU9mV2VlayA9IF90aGlzJHByb3BzLmZpcnN0RGF5T2ZXZWVrO1xuXG4gICAgaWYgKCFtb250aC5pc1NhbWUocHJldk1vbnRoKSB8fCBlbmFibGVPdXRzaWRlRGF5cyAhPT0gcHJldkVuYWJsZU91dHNpZGVEYXlzIHx8IGZpcnN0RGF5T2ZXZWVrICE9PSBwcmV2Rmlyc3REYXlPZldlZWspIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICB3ZWVrczogKDAsIF9nZXRDYWxlbmRhck1vbnRoV2Vla3NbXCJkZWZhdWx0XCJdKShtb250aCwgZW5hYmxlT3V0c2lkZURheXMsIGZpcnN0RGF5T2ZXZWVrID09IG51bGwgPyBfbW9tZW50W1wiZGVmYXVsdFwiXS5sb2NhbGVEYXRhKCkuZmlyc3REYXlPZldlZWsoKSA6IGZpcnN0RGF5T2ZXZWVrKVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnNldE1vbnRoVGl0bGVIZWlnaHRUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5zZXRNb250aFRpdGxlSGVpZ2h0VGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zZXRNb250aFRpdGxlSGVpZ2h0ID0gZnVuY3Rpb24gc2V0TW9udGhUaXRsZUhlaWdodCgpIHtcbiAgICB2YXIgc2V0TW9udGhUaXRsZUhlaWdodCA9IHRoaXMucHJvcHMuc2V0TW9udGhUaXRsZUhlaWdodDtcblxuICAgIGlmIChzZXRNb250aFRpdGxlSGVpZ2h0KSB7XG4gICAgICB2YXIgY2FwdGlvbkhlaWdodCA9ICgwLCBfY2FsY3VsYXRlRGltZW5zaW9uW1wiZGVmYXVsdFwiXSkodGhpcy5jYXB0aW9uUmVmLCAnaGVpZ2h0JywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBzZXRNb250aFRpdGxlSGVpZ2h0KGNhcHRpb25IZWlnaHQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2V0Q2FwdGlvblJlZiA9IGZ1bmN0aW9uIHNldENhcHRpb25SZWYocmVmKSB7XG4gICAgdGhpcy5jYXB0aW9uUmVmID0gcmVmO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRheUFyaWFMYWJlbEZvcm1hdCA9IF90aGlzJHByb3BzMi5kYXlBcmlhTGFiZWxGb3JtYXQsXG4gICAgICAgIGRheVNpemUgPSBfdGhpcyRwcm9wczIuZGF5U2l6ZSxcbiAgICAgICAgZm9jdXNlZERhdGUgPSBfdGhpcyRwcm9wczIuZm9jdXNlZERhdGUsXG4gICAgICAgIGhvcml6b250YWxNb250aFBhZGRpbmcgPSBfdGhpcyRwcm9wczIuaG9yaXpvbnRhbE1vbnRoUGFkZGluZyxcbiAgICAgICAgaXNGb2N1c2VkID0gX3RoaXMkcHJvcHMyLmlzRm9jdXNlZCxcbiAgICAgICAgaXNWaXNpYmxlID0gX3RoaXMkcHJvcHMyLmlzVmlzaWJsZSxcbiAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMkcHJvcHMyLm1vZGlmaWVycyxcbiAgICAgICAgbW9udGggPSBfdGhpcyRwcm9wczIubW9udGgsXG4gICAgICAgIG1vbnRoRm9ybWF0ID0gX3RoaXMkcHJvcHMyLm1vbnRoRm9ybWF0LFxuICAgICAgICBvbkRheUNsaWNrID0gX3RoaXMkcHJvcHMyLm9uRGF5Q2xpY2ssXG4gICAgICAgIG9uRGF5TW91c2VFbnRlciA9IF90aGlzJHByb3BzMi5vbkRheU1vdXNlRW50ZXIsXG4gICAgICAgIG9uRGF5TW91c2VMZWF2ZSA9IF90aGlzJHByb3BzMi5vbkRheU1vdXNlTGVhdmUsXG4gICAgICAgIG9uTW9udGhTZWxlY3QgPSBfdGhpcyRwcm9wczIub25Nb250aFNlbGVjdCxcbiAgICAgICAgb25ZZWFyU2VsZWN0ID0gX3RoaXMkcHJvcHMyLm9uWWVhclNlbGVjdCxcbiAgICAgICAgb3JpZW50YXRpb24gPSBfdGhpcyRwcm9wczIub3JpZW50YXRpb24sXG4gICAgICAgIHBocmFzZXMgPSBfdGhpcyRwcm9wczIucGhyYXNlcyxcbiAgICAgICAgcmVuZGVyQ2FsZW5kYXJEYXkgPSBfdGhpcyRwcm9wczIucmVuZGVyQ2FsZW5kYXJEYXksXG4gICAgICAgIHJlbmRlckRheUNvbnRlbnRzID0gX3RoaXMkcHJvcHMyLnJlbmRlckRheUNvbnRlbnRzLFxuICAgICAgICByZW5kZXJNb250aEVsZW1lbnQgPSBfdGhpcyRwcm9wczIucmVuZGVyTW9udGhFbGVtZW50LFxuICAgICAgICByZW5kZXJNb250aFRleHQgPSBfdGhpcyRwcm9wczIucmVuZGVyTW9udGhUZXh0LFxuICAgICAgICBzdHlsZXMgPSBfdGhpcyRwcm9wczIuc3R5bGVzLFxuICAgICAgICB2ZXJ0aWNhbEJvcmRlclNwYWNpbmcgPSBfdGhpcyRwcm9wczIudmVydGljYWxCb3JkZXJTcGFjaW5nO1xuICAgIHZhciB3ZWVrcyA9IHRoaXMuc3RhdGUud2Vla3M7XG4gICAgdmFyIG1vbnRoVGl0bGUgPSByZW5kZXJNb250aFRleHQgPyByZW5kZXJNb250aFRleHQobW9udGgpIDogbW9udGguZm9ybWF0KG1vbnRoRm9ybWF0KTtcbiAgICB2YXIgdmVydGljYWxTY3JvbGxhYmxlID0gb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRTtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuQ2FsZW5kYXJNb250aCwge1xuICAgICAgcGFkZGluZzogXCIwIFwiLmNvbmNhdChob3Jpem9udGFsTW9udGhQYWRkaW5nLCBcInB4XCIpXG4gICAgfSksIHtcbiAgICAgIFwiZGF0YS12aXNpYmxlXCI6IGlzVmlzaWJsZVxuICAgIH0pLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHtcbiAgICAgIHJlZjogdGhpcy5zZXRDYXB0aW9uUmVmXG4gICAgfSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuQ2FsZW5kYXJNb250aF9jYXB0aW9uLCB2ZXJ0aWNhbFNjcm9sbGFibGUgJiYgc3R5bGVzLkNhbGVuZGFyTW9udGhfY2FwdGlvbl9fdmVydGljYWxTY3JvbGxhYmxlKSksIHJlbmRlck1vbnRoRWxlbWVudCA/IHJlbmRlck1vbnRoRWxlbWVudCh7XG4gICAgICBtb250aDogbW9udGgsXG4gICAgICBvbk1vbnRoU2VsZWN0OiBvbk1vbnRoU2VsZWN0LFxuICAgICAgb25ZZWFyU2VsZWN0OiBvblllYXJTZWxlY3QsXG4gICAgICBpc1Zpc2libGU6IGlzVmlzaWJsZVxuICAgIH0pIDogX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3Ryb25nXCIsIG51bGwsIG1vbnRoVGl0bGUpKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwidGFibGVcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKCF2ZXJ0aWNhbEJvcmRlclNwYWNpbmcgJiYgc3R5bGVzLkNhbGVuZGFyTW9udGhfdGFibGUsIHZlcnRpY2FsQm9yZGVyU3BhY2luZyAmJiBzdHlsZXMuQ2FsZW5kYXJNb250aF92ZXJ0aWNhbFNwYWNpbmcsIHZlcnRpY2FsQm9yZGVyU3BhY2luZyAmJiB7XG4gICAgICBib3JkZXJTcGFjaW5nOiBcIjBweCBcIi5jb25jYXQodmVydGljYWxCb3JkZXJTcGFjaW5nLCBcInB4XCIpXG4gICAgfSksIHtcbiAgICAgIHJvbGU6IFwicHJlc2VudGF0aW9uXCJcbiAgICB9KSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwidGJvZHlcIiwgbnVsbCwgd2Vla3MubWFwKGZ1bmN0aW9uICh3ZWVrLCBpKSB7XG4gICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9DYWxlbmRhcldlZWtbXCJkZWZhdWx0XCJdLCB7XG4gICAgICAgIGtleTogaVxuICAgICAgfSwgd2Vlay5tYXAoZnVuY3Rpb24gKGRheSwgZGF5T2ZXZWVrKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJDYWxlbmRhckRheSh7XG4gICAgICAgICAga2V5OiBkYXlPZldlZWssXG4gICAgICAgICAgZGF5OiBkYXksXG4gICAgICAgICAgZGF5U2l6ZTogZGF5U2l6ZSxcbiAgICAgICAgICBpc091dHNpZGVEYXk6ICFkYXkgfHwgZGF5Lm1vbnRoKCkgIT09IG1vbnRoLm1vbnRoKCksXG4gICAgICAgICAgdGFiSW5kZXg6IGlzVmlzaWJsZSAmJiAoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKGRheSwgZm9jdXNlZERhdGUpID8gMCA6IC0xLFxuICAgICAgICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkLFxuICAgICAgICAgIG9uRGF5TW91c2VFbnRlcjogb25EYXlNb3VzZUVudGVyLFxuICAgICAgICAgIG9uRGF5TW91c2VMZWF2ZTogb25EYXlNb3VzZUxlYXZlLFxuICAgICAgICAgIG9uRGF5Q2xpY2s6IG9uRGF5Q2xpY2ssXG4gICAgICAgICAgcmVuZGVyRGF5Q29udGVudHM6IHJlbmRlckRheUNvbnRlbnRzLFxuICAgICAgICAgIHBocmFzZXM6IHBocmFzZXMsXG4gICAgICAgICAgbW9kaWZpZXJzOiBtb2RpZmllcnNbKDAsIF90b0lTT0RhdGVTdHJpbmdbXCJkZWZhdWx0XCJdKShkYXkpXSxcbiAgICAgICAgICBhcmlhTGFiZWxGb3JtYXQ6IGRheUFyaWFMYWJlbEZvcm1hdFxuICAgICAgICB9KTtcbiAgICAgIH0pKTtcbiAgICB9KSkpKTtcbiAgfTtcblxuICByZXR1cm4gQ2FsZW5kYXJNb250aDtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuQ2FsZW5kYXJNb250aC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBwcm9wVHlwZXMgOiB7fTtcbkNhbGVuZGFyTW9udGguZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3JlYWN0V2l0aFN0eWxlcy53aXRoU3R5bGVzKShmdW5jdGlvbiAoX3JlZjIpIHtcbiAgdmFyIF9yZWYyJHJlYWN0RGF0ZXMgPSBfcmVmMi5yZWFjdERhdGVzLFxuICAgICAgY29sb3IgPSBfcmVmMiRyZWFjdERhdGVzLmNvbG9yLFxuICAgICAgZm9udCA9IF9yZWYyJHJlYWN0RGF0ZXMuZm9udCxcbiAgICAgIHNwYWNpbmcgPSBfcmVmMiRyZWFjdERhdGVzLnNwYWNpbmc7XG4gIHJldHVybiB7XG4gICAgQ2FsZW5kYXJNb250aDoge1xuICAgICAgYmFja2dyb3VuZDogY29sb3IuYmFja2dyb3VuZCxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJyxcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJ1xuICAgIH0sXG4gICAgQ2FsZW5kYXJNb250aF90YWJsZToge1xuICAgICAgYm9yZGVyQ29sbGFwc2U6ICdjb2xsYXBzZScsXG4gICAgICBib3JkZXJTcGFjaW5nOiAwXG4gICAgfSxcbiAgICBDYWxlbmRhck1vbnRoX3ZlcnRpY2FsU3BhY2luZzoge1xuICAgICAgYm9yZGVyQ29sbGFwc2U6ICdzZXBhcmF0ZSdcbiAgICB9LFxuICAgIENhbGVuZGFyTW9udGhfY2FwdGlvbjoge1xuICAgICAgY29sb3I6IGNvbG9yLnRleHQsXG4gICAgICBmb250U2l6ZTogZm9udC5jYXB0aW9uU2l6ZSxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICBwYWRkaW5nVG9wOiBzcGFjaW5nLmNhcHRpb25QYWRkaW5nVG9wLFxuICAgICAgcGFkZGluZ0JvdHRvbTogc3BhY2luZy5jYXB0aW9uUGFkZGluZ0JvdHRvbSxcbiAgICAgIGNhcHRpb25TaWRlOiAnaW5pdGlhbCdcbiAgICB9LFxuICAgIENhbGVuZGFyTW9udGhfY2FwdGlvbl9fdmVydGljYWxTY3JvbGxhYmxlOiB7XG4gICAgICBwYWRkaW5nVG9wOiAxMixcbiAgICAgIHBhZGRpbmdCb3R0b206IDdcbiAgICB9XG4gIH07XG59LCB7XG4gIHB1cmVDb21wb25lbnQ6IHR5cGVvZiBfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgIT09ICd1bmRlZmluZWQnXG59KShDYWxlbmRhck1vbnRoKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIGNvcmUgPSB7XG4gIHdoaXRlOiAnI2ZmZicsXG4gIGdyYXk6ICcjNDg0ODQ4JyxcbiAgZ3JheUxpZ2h0OiAnIzgyODg4YScsXG4gIGdyYXlMaWdodGVyOiAnI2NhY2NjZCcsXG4gIGdyYXlMaWdodGVzdDogJyNmMmYyZjInLFxuICBib3JkZXJNZWRpdW06ICcjYzRjNGM0JyxcbiAgYm9yZGVyOiAnI2RiZGJkYicsXG4gIGJvcmRlckxpZ2h0OiAnI2U0ZTdlNycsXG4gIGJvcmRlckxpZ2h0ZXI6ICcjZWNlZWVlJyxcbiAgYm9yZGVyQnJpZ2h0OiAnI2Y0ZjVmNScsXG4gIHByaW1hcnk6ICcjMDBhNjk5JyxcbiAgcHJpbWFyeVNoYWRlXzE6ICcjMzNkYWNkJyxcbiAgcHJpbWFyeVNoYWRlXzI6ICcjNjZlMmRhJyxcbiAgcHJpbWFyeVNoYWRlXzM6ICcjODBlOGUwJyxcbiAgcHJpbWFyeVNoYWRlXzQ6ICcjYjJmMWVjJyxcbiAgcHJpbWFyeV9kYXJrOiAnIzAwODQ4OScsXG4gIHNlY29uZGFyeTogJyMwMDdhODcnLFxuICB5ZWxsb3c6ICcjZmZlOGJjJyxcbiAgeWVsbG93X2Rhcms6ICcjZmZjZTcxJ1xufTtcbnZhciBfZGVmYXVsdCA9IHtcbiAgcmVhY3REYXRlczoge1xuICAgIHpJbmRleDogMCxcbiAgICBib3JkZXI6IHtcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIGJvcmRlcjogMCxcbiAgICAgICAgYm9yZGVyVG9wOiAwLFxuICAgICAgICBib3JkZXJSaWdodDogMCxcbiAgICAgICAgYm9yZGVyQm90dG9tOiAnMnB4IHNvbGlkIHRyYW5zcGFyZW50JyxcbiAgICAgICAgYm9yZGVyTGVmdDogMCxcbiAgICAgICAgb3V0bGluZUZvY3VzZWQ6IDAsXG4gICAgICAgIGJvcmRlckZvY3VzZWQ6IDAsXG4gICAgICAgIGJvcmRlclRvcEZvY3VzZWQ6IDAsXG4gICAgICAgIGJvcmRlckxlZnRGb2N1c2VkOiAwLFxuICAgICAgICBib3JkZXJCb3R0b21Gb2N1c2VkOiBcIjJweCBzb2xpZCBcIi5jb25jYXQoY29yZS5wcmltYXJ5X2RhcmspLFxuICAgICAgICBib3JkZXJSaWdodEZvY3VzZWQ6IDAsXG4gICAgICAgIGJvcmRlclJhZGl1czogMFxuICAgICAgfSxcbiAgICAgIHBpY2tlcklucHV0OiB7XG4gICAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAyXG4gICAgICB9XG4gICAgfSxcbiAgICBjb2xvcjoge1xuICAgICAgY29yZTogY29yZSxcbiAgICAgIGRpc2FibGVkOiBjb3JlLmdyYXlMaWdodGVzdCxcbiAgICAgIGJhY2tncm91bmQ6IGNvcmUud2hpdGUsXG4gICAgICBiYWNrZ3JvdW5kRGFyazogJyNmMmYyZjInLFxuICAgICAgYmFja2dyb3VuZEZvY3VzZWQ6IGNvcmUud2hpdGUsXG4gICAgICBib3JkZXI6ICdyZ2IoMjE5LCAyMTksIDIxOSknLFxuICAgICAgdGV4dDogY29yZS5ncmF5LFxuICAgICAgdGV4dERpc2FibGVkOiBjb3JlLmJvcmRlcixcbiAgICAgIHRleHRGb2N1c2VkOiAnIzAwN2E4NycsXG4gICAgICBwbGFjZWhvbGRlclRleHQ6ICcjNzU3NTc1JyxcbiAgICAgIG91dHNpZGU6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb3JlLndoaXRlLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JfYWN0aXZlOiBjb3JlLndoaXRlLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JfaG92ZXI6IGNvcmUud2hpdGUsXG4gICAgICAgIGNvbG9yOiBjb3JlLmdyYXksXG4gICAgICAgIGNvbG9yX2FjdGl2ZTogY29yZS5ncmF5LFxuICAgICAgICBjb2xvcl9ob3ZlcjogY29yZS5ncmF5XG4gICAgICB9LFxuICAgICAgaGlnaGxpZ2h0ZWQ6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb3JlLnllbGxvdyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yX2FjdGl2ZTogY29yZS55ZWxsb3dfZGFyayxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yX2hvdmVyOiBjb3JlLnllbGxvd19kYXJrLFxuICAgICAgICBjb2xvcjogY29yZS5ncmF5LFxuICAgICAgICBjb2xvcl9hY3RpdmU6IGNvcmUuZ3JheSxcbiAgICAgICAgY29sb3JfaG92ZXI6IGNvcmUuZ3JheVxuICAgICAgfSxcbiAgICAgIG1pbmltdW1OaWdodHM6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb3JlLndoaXRlLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JfYWN0aXZlOiBjb3JlLndoaXRlLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JfaG92ZXI6IGNvcmUud2hpdGUsXG4gICAgICAgIGJvcmRlckNvbG9yOiBjb3JlLmJvcmRlckxpZ2h0ZXIsXG4gICAgICAgIGNvbG9yOiBjb3JlLmdyYXlMaWdodGVyLFxuICAgICAgICBjb2xvcl9hY3RpdmU6IGNvcmUuZ3JheUxpZ2h0ZXIsXG4gICAgICAgIGNvbG9yX2hvdmVyOiBjb3JlLmdyYXlMaWdodGVyXG4gICAgICB9LFxuICAgICAgaG92ZXJlZFNwYW46IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb3JlLnByaW1hcnlTaGFkZV80LFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JfYWN0aXZlOiBjb3JlLnByaW1hcnlTaGFkZV8zLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JfaG92ZXI6IGNvcmUucHJpbWFyeVNoYWRlXzQsXG4gICAgICAgIGJvcmRlckNvbG9yOiBjb3JlLnByaW1hcnlTaGFkZV8zLFxuICAgICAgICBib3JkZXJDb2xvcl9hY3RpdmU6IGNvcmUucHJpbWFyeVNoYWRlXzMsXG4gICAgICAgIGJvcmRlckNvbG9yX2hvdmVyOiBjb3JlLnByaW1hcnlTaGFkZV8zLFxuICAgICAgICBjb2xvcjogY29yZS5zZWNvbmRhcnksXG4gICAgICAgIGNvbG9yX2FjdGl2ZTogY29yZS5zZWNvbmRhcnksXG4gICAgICAgIGNvbG9yX2hvdmVyOiBjb3JlLnNlY29uZGFyeVxuICAgICAgfSxcbiAgICAgIHNlbGVjdGVkU3Bhbjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvcmUucHJpbWFyeVNoYWRlXzIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcl9hY3RpdmU6IGNvcmUucHJpbWFyeVNoYWRlXzEsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcl9ob3ZlcjogY29yZS5wcmltYXJ5U2hhZGVfMSxcbiAgICAgICAgYm9yZGVyQ29sb3I6IGNvcmUucHJpbWFyeVNoYWRlXzEsXG4gICAgICAgIGJvcmRlckNvbG9yX2FjdGl2ZTogY29yZS5wcmltYXJ5LFxuICAgICAgICBib3JkZXJDb2xvcl9ob3ZlcjogY29yZS5wcmltYXJ5LFxuICAgICAgICBjb2xvcjogY29yZS53aGl0ZSxcbiAgICAgICAgY29sb3JfYWN0aXZlOiBjb3JlLndoaXRlLFxuICAgICAgICBjb2xvcl9ob3ZlcjogY29yZS53aGl0ZVxuICAgICAgfSxcbiAgICAgIHNlbGVjdGVkOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogY29yZS5wcmltYXJ5LFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JfYWN0aXZlOiBjb3JlLnByaW1hcnksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcl9ob3ZlcjogY29yZS5wcmltYXJ5LFxuICAgICAgICBib3JkZXJDb2xvcjogY29yZS5wcmltYXJ5LFxuICAgICAgICBib3JkZXJDb2xvcl9hY3RpdmU6IGNvcmUucHJpbWFyeSxcbiAgICAgICAgYm9yZGVyQ29sb3JfaG92ZXI6IGNvcmUucHJpbWFyeSxcbiAgICAgICAgY29sb3I6IGNvcmUud2hpdGUsXG4gICAgICAgIGNvbG9yX2FjdGl2ZTogY29yZS53aGl0ZSxcbiAgICAgICAgY29sb3JfaG92ZXI6IGNvcmUud2hpdGVcbiAgICAgIH0sXG4gICAgICBibG9ja2VkX2NhbGVuZGFyOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogY29yZS5ncmF5TGlnaHRlcixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yX2FjdGl2ZTogY29yZS5ncmF5TGlnaHRlcixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yX2hvdmVyOiBjb3JlLmdyYXlMaWdodGVyLFxuICAgICAgICBib3JkZXJDb2xvcjogY29yZS5ncmF5TGlnaHRlcixcbiAgICAgICAgYm9yZGVyQ29sb3JfYWN0aXZlOiBjb3JlLmdyYXlMaWdodGVyLFxuICAgICAgICBib3JkZXJDb2xvcl9ob3ZlcjogY29yZS5ncmF5TGlnaHRlcixcbiAgICAgICAgY29sb3I6IGNvcmUuZ3JheUxpZ2h0LFxuICAgICAgICBjb2xvcl9hY3RpdmU6IGNvcmUuZ3JheUxpZ2h0LFxuICAgICAgICBjb2xvcl9ob3ZlcjogY29yZS5ncmF5TGlnaHRcbiAgICAgIH0sXG4gICAgICBibG9ja2VkX291dF9vZl9yYW5nZToge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvcmUud2hpdGUsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcl9hY3RpdmU6IGNvcmUud2hpdGUsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcl9ob3ZlcjogY29yZS53aGl0ZSxcbiAgICAgICAgYm9yZGVyQ29sb3I6IGNvcmUuYm9yZGVyTGlnaHQsXG4gICAgICAgIGJvcmRlckNvbG9yX2FjdGl2ZTogY29yZS5ib3JkZXJMaWdodCxcbiAgICAgICAgYm9yZGVyQ29sb3JfaG92ZXI6IGNvcmUuYm9yZGVyTGlnaHQsXG4gICAgICAgIGNvbG9yOiBjb3JlLmdyYXlMaWdodGVyLFxuICAgICAgICBjb2xvcl9hY3RpdmU6IGNvcmUuZ3JheUxpZ2h0ZXIsXG4gICAgICAgIGNvbG9yX2hvdmVyOiBjb3JlLmdyYXlMaWdodGVyXG4gICAgICB9XG4gICAgfSxcbiAgICBzcGFjaW5nOiB7XG4gICAgICBkYXlQaWNrZXJIb3Jpem9udGFsUGFkZGluZzogOSxcbiAgICAgIGNhcHRpb25QYWRkaW5nVG9wOiAyMixcbiAgICAgIGNhcHRpb25QYWRkaW5nQm90dG9tOiAzNyxcbiAgICAgIGlucHV0UGFkZGluZzogMCxcbiAgICAgIGRpc3BsYXlUZXh0UGFkZGluZ1ZlcnRpY2FsOiB1bmRlZmluZWQsXG4gICAgICBkaXNwbGF5VGV4dFBhZGRpbmdUb3A6IDExLFxuICAgICAgZGlzcGxheVRleHRQYWRkaW5nQm90dG9tOiA5LFxuICAgICAgZGlzcGxheVRleHRQYWRkaW5nSG9yaXpvbnRhbDogdW5kZWZpbmVkLFxuICAgICAgZGlzcGxheVRleHRQYWRkaW5nTGVmdDogMTEsXG4gICAgICBkaXNwbGF5VGV4dFBhZGRpbmdSaWdodDogMTEsXG4gICAgICBkaXNwbGF5VGV4dFBhZGRpbmdWZXJ0aWNhbF9zbWFsbDogdW5kZWZpbmVkLFxuICAgICAgZGlzcGxheVRleHRQYWRkaW5nVG9wX3NtYWxsOiA3LFxuICAgICAgZGlzcGxheVRleHRQYWRkaW5nQm90dG9tX3NtYWxsOiA1LFxuICAgICAgZGlzcGxheVRleHRQYWRkaW5nSG9yaXpvbnRhbF9zbWFsbDogdW5kZWZpbmVkLFxuICAgICAgZGlzcGxheVRleHRQYWRkaW5nTGVmdF9zbWFsbDogNyxcbiAgICAgIGRpc3BsYXlUZXh0UGFkZGluZ1JpZ2h0X3NtYWxsOiA3XG4gICAgfSxcbiAgICBzaXppbmc6IHtcbiAgICAgIGlucHV0V2lkdGg6IDEzMCxcbiAgICAgIGlucHV0V2lkdGhfc21hbGw6IDk3LFxuICAgICAgYXJyb3dXaWR0aDogMjRcbiAgICB9LFxuICAgIG5vU2Nyb2xsQmFyT25WZXJ0aWNhbFNjcm9sbGFibGU6IGZhbHNlLFxuICAgIGZvbnQ6IHtcbiAgICAgIHNpemU6IDE0LFxuICAgICAgY2FwdGlvblNpemU6IDE4LFxuICAgICAgaW5wdXQ6IHtcbiAgICAgICAgc2l6ZTogMTksXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcyNHB4JyxcbiAgICAgICAgc2l6ZV9zbWFsbDogMTUsXG4gICAgICAgIGxpbmVIZWlnaHRfc21hbGw6ICcxOHB4JyxcbiAgICAgICAgbGV0dGVyU3BhY2luZ19zbWFsbDogJzAuMnB4JyxcbiAgICAgICAgc3R5bGVEaXNhYmxlZDogJ2l0YWxpYydcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBjYWxjdWxhdGVEaW1lbnNpb247XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZURpbWVuc2lvbihlbCwgYXhpcykge1xuICB2YXIgYm9yZGVyQm94ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcbiAgdmFyIHdpdGhNYXJnaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlO1xuXG4gIGlmICghZWwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciBheGlzU3RhcnQgPSBheGlzID09PSAnd2lkdGgnID8gJ0xlZnQnIDogJ1RvcCc7XG4gIHZhciBheGlzRW5kID0gYXhpcyA9PT0gJ3dpZHRoJyA/ICdSaWdodCcgOiAnQm90dG9tJzsgLy8gT25seSByZWFkIHN0eWxlcyBpZiB3ZSBuZWVkIHRvXG5cbiAgdmFyIHN0eWxlID0gIWJvcmRlckJveCB8fCB3aXRoTWFyZ2luID8gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpIDogbnVsbDsgLy8gT2Zmc2V0IGluY2x1ZGVzIGJvcmRlciBhbmQgcGFkZGluZ1xuXG4gIHZhciBvZmZzZXRXaWR0aCA9IGVsLm9mZnNldFdpZHRoLFxuICAgICAgb2Zmc2V0SGVpZ2h0ID0gZWwub2Zmc2V0SGVpZ2h0O1xuICB2YXIgc2l6ZSA9IGF4aXMgPT09ICd3aWR0aCcgPyBvZmZzZXRXaWR0aCA6IG9mZnNldEhlaWdodDsgLy8gR2V0IHRoZSBpbm5lciBzaXplXG5cbiAgaWYgKCFib3JkZXJCb3gpIHtcbiAgICBzaXplIC09IHBhcnNlRmxvYXQoc3R5bGVbXCJwYWRkaW5nXCIuY29uY2F0KGF4aXNTdGFydCldKSArIHBhcnNlRmxvYXQoc3R5bGVbXCJwYWRkaW5nXCIuY29uY2F0KGF4aXNFbmQpXSkgKyBwYXJzZUZsb2F0KHN0eWxlW1wiYm9yZGVyXCIuY29uY2F0KGF4aXNTdGFydCwgXCJXaWR0aFwiKV0pICsgcGFyc2VGbG9hdChzdHlsZVtcImJvcmRlclwiLmNvbmNhdChheGlzRW5kLCBcIldpZHRoXCIpXSk7XG4gIH0gLy8gQXBwbHkgbWFyZ2luXG5cblxuICBpZiAod2l0aE1hcmdpbikge1xuICAgIHNpemUgKz0gcGFyc2VGbG9hdChzdHlsZVtcIm1hcmdpblwiLmNvbmNhdChheGlzU3RhcnQpXSkgKyBwYXJzZUZsb2F0KHN0eWxlW1wibWFyZ2luXCIuY29uY2F0KGF4aXNFbmQpXSk7XG4gIH1cblxuICByZXR1cm4gc2l6ZTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9lbnp5bWVTaGFsbG93RXF1YWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJlbnp5bWUtc2hhbGxvdy1lcXVhbFwiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3RNb21lbnRQcm9wdHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1tb21lbnQtcHJvcHR5cGVzXCIpKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbnZhciBfcmVhY3RXaXRoU3R5bGVzID0gcmVxdWlyZShcInJlYWN0LXdpdGgtc3R5bGVzXCIpO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfY29uc29saWRhdGVkRXZlbnRzID0gcmVxdWlyZShcImNvbnNvbGlkYXRlZC1ldmVudHNcIik7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0UGhyYXNlUHJvcFR5cGVzXCIpKTtcblxudmFyIF9ub2ZsaXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9ub2ZsaXBcIikpO1xuXG52YXIgX0NhbGVuZGFyTW9udGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NhbGVuZGFyTW9udGhcIikpO1xuXG52YXIgX2lzVHJhbnNpdGlvbkVuZFN1cHBvcnRlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzVHJhbnNpdGlvbkVuZFN1cHBvcnRlZFwiKSk7XG5cbnZhciBfZ2V0VHJhbnNmb3JtU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0VHJhbnNmb3JtU3R5bGVzXCIpKTtcblxudmFyIF9nZXRDYWxlbmRhck1vbnRoV2lkdGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRDYWxlbmRhck1vbnRoV2lkdGhcIikpO1xuXG52YXIgX3RvSVNPTW9udGhTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy90b0lTT01vbnRoU3RyaW5nXCIpKTtcblxudmFyIF9pc1ByZXZNb250aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzUHJldk1vbnRoXCIpKTtcblxudmFyIF9pc05leHRNb250aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzTmV4dE1vbnRoXCIpKTtcblxudmFyIF9Nb2RpZmllcnNTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9Nb2RpZmllcnNTaGFwZVwiKSk7XG5cbnZhciBfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGVcIikpO1xuXG52YXIgX0RheU9mV2Vla1NoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL0RheU9mV2Vla1NoYXBlXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG52YXIgcHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9haXJibmJQcm9wVHlwZXMuZm9yYmlkRXh0cmFQcm9wcykoKDAsIF9vYmplY3RTcHJlYWQ1W1wiZGVmYXVsdFwiXSkoe30sIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlc1Byb3BUeXBlcywge1xuICBlbmFibGVPdXRzaWRlRGF5czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgZmlyc3RWaXNpYmxlTW9udGhJbmRleDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLFxuICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgaW5pdGlhbE1vbnRoOiBfcmVhY3RNb21lbnRQcm9wdHlwZXNbXCJkZWZhdWx0XCJdLm1vbWVudE9iaixcbiAgaXNBbmltYXRpbmc6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG51bWJlck9mTW9udGhzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIG1vZGlmaWVyczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0T2YoX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0T2YoX01vZGlmaWVyc1NoYXBlW1wiZGVmYXVsdFwiXSkpLFxuICBvcmllbnRhdGlvbjogX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgb25EYXlDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25EYXlNb3VzZUVudGVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkRheU1vdXNlTGVhdmU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uTW9udGhUcmFuc2l0aW9uRW5kOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbk1vbnRoQ2hhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvblllYXJDaGFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlck1vbnRoVGV4dDogKDAsIF9haXJibmJQcm9wVHlwZXMubXV0dWFsbHlFeGNsdXNpdmVQcm9wcykoX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYywgJ3JlbmRlck1vbnRoVGV4dCcsICdyZW5kZXJNb250aEVsZW1lbnQnKSxcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlckRheUNvbnRlbnRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICB0cmFuc2xhdGlvblZhbHVlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIHJlbmRlck1vbnRoRWxlbWVudDogKDAsIF9haXJibmJQcm9wVHlwZXMubXV0dWFsbHlFeGNsdXNpdmVQcm9wcykoX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYywgJ3JlbmRlck1vbnRoVGV4dCcsICdyZW5kZXJNb250aEVsZW1lbnQnKSxcbiAgZGF5U2l6ZTogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIGZvY3VzZWREYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXNbXCJkZWZhdWx0XCJdLm1vbWVudE9iaixcbiAgLy8gaW5kaWNhdGVzIGZvY3VzYWJsZSBkYXlcbiAgaXNGb2N1c2VkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICAvLyBpbmRpY2F0ZXMgd2hldGhlciBvciBub3QgdG8gbW92ZSBmb2N1cyB0byBmb2N1c2FibGUgZGF5XG4gIGZpcnN0RGF5T2ZXZWVrOiBfRGF5T2ZXZWVrU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBzZXRNb250aFRpdGxlSGVpZ2h0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBpc1JUTDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgdmVydGljYWxCb3JkZXJTcGFjaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgLy8gaTE4blxuICBtb250aEZvcm1hdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBwaHJhc2VzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zaGFwZSgoMCwgX2dldFBocmFzZVByb3BUeXBlc1tcImRlZmF1bHRcIl0pKF9kZWZhdWx0UGhyYXNlcy5DYWxlbmRhckRheVBocmFzZXMpKSxcbiAgZGF5QXJpYUxhYmVsRm9ybWF0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmdcbn0pKSA6IHt9O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZW5hYmxlT3V0c2lkZURheXM6IGZhbHNlLFxuICBmaXJzdFZpc2libGVNb250aEluZGV4OiAwLFxuICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiAxMyxcbiAgaW5pdGlhbE1vbnRoOiAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCksXG4gIGlzQW5pbWF0aW5nOiBmYWxzZSxcbiAgbnVtYmVyT2ZNb250aHM6IDEsXG4gIG1vZGlmaWVyczoge30sXG4gIG9yaWVudGF0aW9uOiBfY29uc3RhbnRzLkhPUklaT05UQUxfT1JJRU5UQVRJT04sXG4gIG9uRGF5Q2xpY2s6IGZ1bmN0aW9uIG9uRGF5Q2xpY2soKSB7fSxcbiAgb25EYXlNb3VzZUVudGVyOiBmdW5jdGlvbiBvbkRheU1vdXNlRW50ZXIoKSB7fSxcbiAgb25EYXlNb3VzZUxlYXZlOiBmdW5jdGlvbiBvbkRheU1vdXNlTGVhdmUoKSB7fSxcbiAgb25Nb250aENoYW5nZTogZnVuY3Rpb24gb25Nb250aENoYW5nZSgpIHt9LFxuICBvblllYXJDaGFuZ2U6IGZ1bmN0aW9uIG9uWWVhckNoYW5nZSgpIHt9LFxuICBvbk1vbnRoVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gb25Nb250aFRyYW5zaXRpb25FbmQoKSB7fSxcbiAgcmVuZGVyTW9udGhUZXh0OiBudWxsLFxuICByZW5kZXJDYWxlbmRhckRheTogdW5kZWZpbmVkLFxuICByZW5kZXJEYXlDb250ZW50czogbnVsbCxcbiAgdHJhbnNsYXRpb25WYWx1ZTogbnVsbCxcbiAgcmVuZGVyTW9udGhFbGVtZW50OiBudWxsLFxuICBkYXlTaXplOiBfY29uc3RhbnRzLkRBWV9TSVpFLFxuICBmb2N1c2VkRGF0ZTogbnVsbCxcbiAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgZmlyc3REYXlPZldlZWs6IG51bGwsXG4gIHNldE1vbnRoVGl0bGVIZWlnaHQ6IG51bGwsXG4gIGlzUlRMOiBmYWxzZSxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAyMDAsXG4gIHZlcnRpY2FsQm9yZGVyU3BhY2luZzogdW5kZWZpbmVkLFxuICAvLyBpMThuXG4gIG1vbnRoRm9ybWF0OiAnTU1NTSBZWVlZJyxcbiAgLy8gZW5nbGlzaCBsb2NhbGVcbiAgcGhyYXNlczogX2RlZmF1bHRQaHJhc2VzLkNhbGVuZGFyRGF5UGhyYXNlcyxcbiAgZGF5QXJpYUxhYmVsRm9ybWF0OiB1bmRlZmluZWRcbn07XG5cbmZ1bmN0aW9uIGdldE1vbnRocyhpbml0aWFsTW9udGgsIG51bWJlck9mTW9udGhzLCB3aXRob3V0VHJhbnNpdGlvbk1vbnRocykge1xuICB2YXIgbW9udGggPSBpbml0aWFsTW9udGguY2xvbmUoKTtcbiAgaWYgKCF3aXRob3V0VHJhbnNpdGlvbk1vbnRocykgbW9udGggPSBtb250aC5zdWJ0cmFjdCgxLCAnbW9udGgnKTtcbiAgdmFyIG1vbnRocyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgKHdpdGhvdXRUcmFuc2l0aW9uTW9udGhzID8gbnVtYmVyT2ZNb250aHMgOiBudW1iZXJPZk1vbnRocyArIDIpOyBpICs9IDEpIHtcbiAgICBtb250aHMucHVzaChtb250aCk7XG4gICAgbW9udGggPSBtb250aC5jbG9uZSgpLmFkZCgxLCAnbW9udGgnKTtcbiAgfVxuXG4gIHJldHVybiBtb250aHM7XG59XG5cbnZhciBDYWxlbmRhck1vbnRoR3JpZCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX3JlZikge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyW1wiZGVmYXVsdFwiXSkoQ2FsZW5kYXJNb250aEdyaWQsIF9yZWYpO1xuICB2YXIgX3Byb3RvID0gQ2FsZW5kYXJNb250aEdyaWQucHJvdG90eXBlO1xuXG4gIF9wcm90b1shX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICYmIFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCJdID0gZnVuY3Rpb24gKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgcmV0dXJuICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKTtcbiAgfTtcblxuICBmdW5jdGlvbiBDYWxlbmRhck1vbnRoR3JpZChwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX3JlZi5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIHZhciB3aXRob3V0VHJhbnNpdGlvbk1vbnRocyA9IHByb3BzLm9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEU7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtb250aHM6IGdldE1vbnRocyhwcm9wcy5pbml0aWFsTW9udGgsIHByb3BzLm51bWJlck9mTW9udGhzLCB3aXRob3V0VHJhbnNpdGlvbk1vbnRocylcbiAgICB9O1xuICAgIF90aGlzLmlzVHJhbnNpdGlvbkVuZFN1cHBvcnRlZCA9ICgwLCBfaXNUcmFuc2l0aW9uRW5kU3VwcG9ydGVkW1wiZGVmYXVsdFwiXSkoKTtcbiAgICBfdGhpcy5vblRyYW5zaXRpb25FbmQgPSBfdGhpcy5vblRyYW5zaXRpb25FbmQuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLnNldENvbnRhaW5lclJlZiA9IF90aGlzLnNldENvbnRhaW5lclJlZi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMubG9jYWxlID0gX21vbWVudFtcImRlZmF1bHRcIl0ubG9jYWxlKCk7XG4gICAgX3RoaXMub25Nb250aFNlbGVjdCA9IF90aGlzLm9uTW9udGhTZWxlY3QuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uWWVhclNlbGVjdCA9IF90aGlzLm9uWWVhclNlbGVjdC5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyID0gKDAsIF9jb25zb2xpZGF0ZWRFdmVudHMuYWRkRXZlbnRMaXN0ZW5lcikodGhpcy5jb250YWluZXIsICd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmQpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBpbml0aWFsTW9udGggPSBuZXh0UHJvcHMuaW5pdGlhbE1vbnRoLFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IG5leHRQcm9wcy5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgb3JpZW50YXRpb24gPSBuZXh0UHJvcHMub3JpZW50YXRpb247XG4gICAgdmFyIG1vbnRocyA9IHRoaXMuc3RhdGUubW9udGhzO1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHByZXZJbml0aWFsTW9udGggPSBfdGhpcyRwcm9wcy5pbml0aWFsTW9udGgsXG4gICAgICAgIHByZXZOdW1iZXJPZk1vbnRocyA9IF90aGlzJHByb3BzLm51bWJlck9mTW9udGhzO1xuICAgIHZhciBoYXNNb250aENoYW5nZWQgPSAhcHJldkluaXRpYWxNb250aC5pc1NhbWUoaW5pdGlhbE1vbnRoLCAnbW9udGgnKTtcbiAgICB2YXIgaGFzTnVtYmVyT2ZNb250aHNDaGFuZ2VkID0gcHJldk51bWJlck9mTW9udGhzICE9PSBudW1iZXJPZk1vbnRocztcbiAgICB2YXIgbmV3TW9udGhzID0gbW9udGhzO1xuXG4gICAgaWYgKGhhc01vbnRoQ2hhbmdlZCAmJiAhaGFzTnVtYmVyT2ZNb250aHNDaGFuZ2VkKSB7XG4gICAgICBpZiAoKDAsIF9pc05leHRNb250aFtcImRlZmF1bHRcIl0pKHByZXZJbml0aWFsTW9udGgsIGluaXRpYWxNb250aCkpIHtcbiAgICAgICAgbmV3TW9udGhzID0gbW9udGhzLnNsaWNlKDEpO1xuICAgICAgICBuZXdNb250aHMucHVzaChtb250aHNbbW9udGhzLmxlbmd0aCAtIDFdLmNsb25lKCkuYWRkKDEsICdtb250aCcpKTtcbiAgICAgIH0gZWxzZSBpZiAoKDAsIF9pc1ByZXZNb250aFtcImRlZmF1bHRcIl0pKHByZXZJbml0aWFsTW9udGgsIGluaXRpYWxNb250aCkpIHtcbiAgICAgICAgbmV3TW9udGhzID0gbW9udGhzLnNsaWNlKDAsIG1vbnRocy5sZW5ndGggLSAxKTtcbiAgICAgICAgbmV3TW9udGhzLnVuc2hpZnQobW9udGhzWzBdLmNsb25lKCkuc3VidHJhY3QoMSwgJ21vbnRoJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHdpdGhvdXRUcmFuc2l0aW9uTW9udGhzID0gb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRTtcbiAgICAgICAgbmV3TW9udGhzID0gZ2V0TW9udGhzKGluaXRpYWxNb250aCwgbnVtYmVyT2ZNb250aHMsIHdpdGhvdXRUcmFuc2l0aW9uTW9udGhzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaGFzTnVtYmVyT2ZNb250aHNDaGFuZ2VkKSB7XG4gICAgICB2YXIgX3dpdGhvdXRUcmFuc2l0aW9uTW9udGhzID0gb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRTtcblxuICAgICAgbmV3TW9udGhzID0gZ2V0TW9udGhzKGluaXRpYWxNb250aCwgbnVtYmVyT2ZNb250aHMsIF93aXRob3V0VHJhbnNpdGlvbk1vbnRocyk7XG4gICAgfVxuXG4gICAgdmFyIG1vbWVudExvY2FsZSA9IF9tb21lbnRbXCJkZWZhdWx0XCJdLmxvY2FsZSgpO1xuXG4gICAgaWYgKHRoaXMubG9jYWxlICE9PSBtb21lbnRMb2NhbGUpIHtcbiAgICAgIHRoaXMubG9jYWxlID0gbW9tZW50TG9jYWxlO1xuICAgICAgbmV3TW9udGhzID0gbmV3TW9udGhzLm1hcChmdW5jdGlvbiAobSkge1xuICAgICAgICByZXR1cm4gbS5sb2NhbGUoX3RoaXMyLmxvY2FsZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1vbnRoczogbmV3TW9udGhzXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaXNBbmltYXRpbmcgPSBfdGhpcyRwcm9wczIuaXNBbmltYXRpbmcsXG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF90aGlzJHByb3BzMi50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICAgIG9uTW9udGhUcmFuc2l0aW9uRW5kID0gX3RoaXMkcHJvcHMyLm9uTW9udGhUcmFuc2l0aW9uRW5kOyAvLyBGb3IgSUU5LCBpbW1lZGlhdGVseSBjYWxsIG9uTW9udGhUcmFuc2l0aW9uRW5kIGluc3RlYWQgb2ZcbiAgICAvLyB3YWl0aW5nIGZvciB0aGUgYW5pbWF0aW9uIHRvIGNvbXBsZXRlLiBTaW1pbGFybHksIGlmIHRyYW5zaXRpb25EdXJhdGlvblxuICAgIC8vIGlzIHNldCB0byAwLCBhbHNvIGltbWVkaWF0ZWx5IGludm9rZSB0aGUgb25Nb250aFRyYW5zaXRpb25FbmQgY2FsbGJhY2tcblxuICAgIGlmICgoIXRoaXMuaXNUcmFuc2l0aW9uRW5kU3VwcG9ydGVkIHx8ICF0cmFuc2l0aW9uRHVyYXRpb24pICYmIGlzQW5pbWF0aW5nKSB7XG4gICAgICBvbk1vbnRoVHJhbnNpdGlvbkVuZCgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKSB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoKTtcbiAgfTtcblxuICBfcHJvdG8ub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKCkge1xuICAgIHZhciBvbk1vbnRoVHJhbnNpdGlvbkVuZCA9IHRoaXMucHJvcHMub25Nb250aFRyYW5zaXRpb25FbmQ7XG4gICAgb25Nb250aFRyYW5zaXRpb25FbmQoKTtcbiAgfTtcblxuICBfcHJvdG8ub25Nb250aFNlbGVjdCA9IGZ1bmN0aW9uIG9uTW9udGhTZWxlY3QoY3VycmVudE1vbnRoLCBuZXdNb250aFZhbCkge1xuICAgIHZhciBuZXdNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpO1xuICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBvbk1vbnRoQ2hhbmdlID0gX3RoaXMkcHJvcHMzLm9uTW9udGhDaGFuZ2UsXG4gICAgICAgIG9yaWVudGF0aW9uID0gX3RoaXMkcHJvcHMzLm9yaWVudGF0aW9uO1xuICAgIHZhciBtb250aHMgPSB0aGlzLnN0YXRlLm1vbnRocztcbiAgICB2YXIgd2l0aG91dFRyYW5zaXRpb25Nb250aHMgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuICAgIHZhciBpbml0aWFsTW9udGhTdWJ0cmFjdGlvbiA9IG1vbnRocy5pbmRleE9mKGN1cnJlbnRNb250aCk7XG5cbiAgICBpZiAoIXdpdGhvdXRUcmFuc2l0aW9uTW9udGhzKSB7XG4gICAgICBpbml0aWFsTW9udGhTdWJ0cmFjdGlvbiAtPSAxO1xuICAgIH1cblxuICAgIG5ld01vbnRoLnNldCgnbW9udGgnLCBuZXdNb250aFZhbCkuc3VidHJhY3QoaW5pdGlhbE1vbnRoU3VidHJhY3Rpb24sICdtb250aHMnKTtcbiAgICBvbk1vbnRoQ2hhbmdlKG5ld01vbnRoKTtcbiAgfTtcblxuICBfcHJvdG8ub25ZZWFyU2VsZWN0ID0gZnVuY3Rpb24gb25ZZWFyU2VsZWN0KGN1cnJlbnRNb250aCwgbmV3WWVhclZhbCkge1xuICAgIHZhciBuZXdNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpO1xuICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICBvblllYXJDaGFuZ2UgPSBfdGhpcyRwcm9wczQub25ZZWFyQ2hhbmdlLFxuICAgICAgICBvcmllbnRhdGlvbiA9IF90aGlzJHByb3BzNC5vcmllbnRhdGlvbjtcbiAgICB2YXIgbW9udGhzID0gdGhpcy5zdGF0ZS5tb250aHM7XG4gICAgdmFyIHdpdGhvdXRUcmFuc2l0aW9uTW9udGhzID0gb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRTtcbiAgICB2YXIgaW5pdGlhbE1vbnRoU3VidHJhY3Rpb24gPSBtb250aHMuaW5kZXhPZihjdXJyZW50TW9udGgpO1xuXG4gICAgaWYgKCF3aXRob3V0VHJhbnNpdGlvbk1vbnRocykge1xuICAgICAgaW5pdGlhbE1vbnRoU3VidHJhY3Rpb24gLT0gMTtcbiAgICB9XG5cbiAgICBuZXdNb250aC5zZXQoJ3llYXInLCBuZXdZZWFyVmFsKS5zdWJ0cmFjdChpbml0aWFsTW9udGhTdWJ0cmFjdGlvbiwgJ21vbnRocycpO1xuICAgIG9uWWVhckNoYW5nZShuZXdNb250aCk7XG4gIH07XG5cbiAgX3Byb3RvLnNldENvbnRhaW5lclJlZiA9IGZ1bmN0aW9uIHNldENvbnRhaW5lclJlZihyZWYpIHtcbiAgICB0aGlzLmNvbnRhaW5lciA9IHJlZjtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHM1LmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICBmaXJzdFZpc2libGVNb250aEluZGV4ID0gX3RoaXMkcHJvcHM1LmZpcnN0VmlzaWJsZU1vbnRoSW5kZXgsXG4gICAgICAgIGhvcml6b250YWxNb250aFBhZGRpbmcgPSBfdGhpcyRwcm9wczUuaG9yaXpvbnRhbE1vbnRoUGFkZGluZyxcbiAgICAgICAgaXNBbmltYXRpbmcgPSBfdGhpcyRwcm9wczUuaXNBbmltYXRpbmcsXG4gICAgICAgIG1vZGlmaWVycyA9IF90aGlzJHByb3BzNS5tb2RpZmllcnMsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHM1Lm51bWJlck9mTW9udGhzLFxuICAgICAgICBtb250aEZvcm1hdCA9IF90aGlzJHByb3BzNS5tb250aEZvcm1hdCxcbiAgICAgICAgb3JpZW50YXRpb24gPSBfdGhpcyRwcm9wczUub3JpZW50YXRpb24sXG4gICAgICAgIHRyYW5zbGF0aW9uVmFsdWUgPSBfdGhpcyRwcm9wczUudHJhbnNsYXRpb25WYWx1ZSxcbiAgICAgICAgZGF5U2l6ZSA9IF90aGlzJHByb3BzNS5kYXlTaXplLFxuICAgICAgICBvbkRheU1vdXNlRW50ZXIgPSBfdGhpcyRwcm9wczUub25EYXlNb3VzZUVudGVyLFxuICAgICAgICBvbkRheU1vdXNlTGVhdmUgPSBfdGhpcyRwcm9wczUub25EYXlNb3VzZUxlYXZlLFxuICAgICAgICBvbkRheUNsaWNrID0gX3RoaXMkcHJvcHM1Lm9uRGF5Q2xpY2ssXG4gICAgICAgIHJlbmRlck1vbnRoVGV4dCA9IF90aGlzJHByb3BzNS5yZW5kZXJNb250aFRleHQsXG4gICAgICAgIHJlbmRlckNhbGVuZGFyRGF5ID0gX3RoaXMkcHJvcHM1LnJlbmRlckNhbGVuZGFyRGF5LFxuICAgICAgICByZW5kZXJEYXlDb250ZW50cyA9IF90aGlzJHByb3BzNS5yZW5kZXJEYXlDb250ZW50cyxcbiAgICAgICAgcmVuZGVyTW9udGhFbGVtZW50ID0gX3RoaXMkcHJvcHM1LnJlbmRlck1vbnRoRWxlbWVudCxcbiAgICAgICAgb25Nb250aFRyYW5zaXRpb25FbmQgPSBfdGhpcyRwcm9wczUub25Nb250aFRyYW5zaXRpb25FbmQsXG4gICAgICAgIGZpcnN0RGF5T2ZXZWVrID0gX3RoaXMkcHJvcHM1LmZpcnN0RGF5T2ZXZWVrLFxuICAgICAgICBmb2N1c2VkRGF0ZSA9IF90aGlzJHByb3BzNS5mb2N1c2VkRGF0ZSxcbiAgICAgICAgaXNGb2N1c2VkID0gX3RoaXMkcHJvcHM1LmlzRm9jdXNlZCxcbiAgICAgICAgaXNSVEwgPSBfdGhpcyRwcm9wczUuaXNSVEwsXG4gICAgICAgIHN0eWxlcyA9IF90aGlzJHByb3BzNS5zdHlsZXMsXG4gICAgICAgIHBocmFzZXMgPSBfdGhpcyRwcm9wczUucGhyYXNlcyxcbiAgICAgICAgZGF5QXJpYUxhYmVsRm9ybWF0ID0gX3RoaXMkcHJvcHM1LmRheUFyaWFMYWJlbEZvcm1hdCxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX3RoaXMkcHJvcHM1LnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgICAgdmVydGljYWxCb3JkZXJTcGFjaW5nID0gX3RoaXMkcHJvcHM1LnZlcnRpY2FsQm9yZGVyU3BhY2luZyxcbiAgICAgICAgc2V0TW9udGhUaXRsZUhlaWdodCA9IF90aGlzJHByb3BzNS5zZXRNb250aFRpdGxlSGVpZ2h0O1xuICAgIHZhciBtb250aHMgPSB0aGlzLnN0YXRlLm1vbnRocztcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX09SSUVOVEFUSU9OO1xuICAgIHZhciBpc1ZlcnRpY2FsU2Nyb2xsYWJsZSA9IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEU7XG4gICAgdmFyIGlzSG9yaXpvbnRhbCA9IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLkhPUklaT05UQUxfT1JJRU5UQVRJT047XG4gICAgdmFyIGNhbGVuZGFyTW9udGhXaWR0aCA9ICgwLCBfZ2V0Q2FsZW5kYXJNb250aFdpZHRoW1wiZGVmYXVsdFwiXSkoZGF5U2l6ZSwgaG9yaXpvbnRhbE1vbnRoUGFkZGluZyk7XG4gICAgdmFyIHdpZHRoID0gaXNWZXJ0aWNhbCB8fCBpc1ZlcnRpY2FsU2Nyb2xsYWJsZSA/IGNhbGVuZGFyTW9udGhXaWR0aCA6IChudW1iZXJPZk1vbnRocyArIDIpICogY2FsZW5kYXJNb250aFdpZHRoO1xuICAgIHZhciB0cmFuc2Zvcm1UeXBlID0gaXNWZXJ0aWNhbCB8fCBpc1ZlcnRpY2FsU2Nyb2xsYWJsZSA/ICd0cmFuc2xhdGVZJyA6ICd0cmFuc2xhdGVYJztcbiAgICB2YXIgdHJhbnNmb3JtVmFsdWUgPSBcIlwiLmNvbmNhdCh0cmFuc2Zvcm1UeXBlLCBcIihcIikuY29uY2F0KHRyYW5zbGF0aW9uVmFsdWUsIFwicHgpXCIpO1xuICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5DYWxlbmRhck1vbnRoR3JpZCwgaXNIb3Jpem9udGFsICYmIHN0eWxlcy5DYWxlbmRhck1vbnRoR3JpZF9faG9yaXpvbnRhbCwgaXNWZXJ0aWNhbCAmJiBzdHlsZXMuQ2FsZW5kYXJNb250aEdyaWRfX3ZlcnRpY2FsLCBpc1ZlcnRpY2FsU2Nyb2xsYWJsZSAmJiBzdHlsZXMuQ2FsZW5kYXJNb250aEdyaWRfX3ZlcnRpY2FsX3Njcm9sbGFibGUsIGlzQW5pbWF0aW5nICYmIHN0eWxlcy5DYWxlbmRhck1vbnRoR3JpZF9fYW5pbWF0aW5nLCBpc0FuaW1hdGluZyAmJiB0cmFuc2l0aW9uRHVyYXRpb24gJiYge1xuICAgICAgdHJhbnNpdGlvbjogXCJ0cmFuc2Zvcm0gXCIuY29uY2F0KHRyYW5zaXRpb25EdXJhdGlvbiwgXCJtcyBlYXNlLWluLW91dFwiKVxuICAgIH0sICgwLCBfb2JqZWN0U3ByZWFkNVtcImRlZmF1bHRcIl0pKHt9LCAoMCwgX2dldFRyYW5zZm9ybVN0eWxlc1tcImRlZmF1bHRcIl0pKHRyYW5zZm9ybVZhbHVlKSwge1xuICAgICAgd2lkdGg6IHdpZHRoXG4gICAgfSkpLCB7XG4gICAgICByZWY6IHRoaXMuc2V0Q29udGFpbmVyUmVmLFxuICAgICAgb25UcmFuc2l0aW9uRW5kOiBvbk1vbnRoVHJhbnNpdGlvbkVuZFxuICAgIH0pLCBtb250aHMubWFwKGZ1bmN0aW9uIChtb250aCwgaSkge1xuICAgICAgdmFyIGlzVmlzaWJsZSA9IGkgPj0gZmlyc3RWaXNpYmxlTW9udGhJbmRleCAmJiBpIDwgZmlyc3RWaXNpYmxlTW9udGhJbmRleCArIG51bWJlck9mTW9udGhzO1xuICAgICAgdmFyIGhpZGVGb3JBbmltYXRpb24gPSBpID09PSAwICYmICFpc1Zpc2libGU7XG4gICAgICB2YXIgc2hvd0ZvckFuaW1hdGlvbiA9IGkgPT09IDAgJiYgaXNBbmltYXRpbmcgJiYgaXNWaXNpYmxlO1xuICAgICAgdmFyIG1vbnRoU3RyaW5nID0gKDAsIF90b0lTT01vbnRoU3RyaW5nW1wiZGVmYXVsdFwiXSkobW9udGgpO1xuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe1xuICAgICAgICBrZXk6IG1vbnRoU3RyaW5nXG4gICAgICB9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKGlzSG9yaXpvbnRhbCAmJiBzdHlsZXMuQ2FsZW5kYXJNb250aEdyaWRfbW9udGhfX2hvcml6b250YWwsIGhpZGVGb3JBbmltYXRpb24gJiYgc3R5bGVzLkNhbGVuZGFyTW9udGhHcmlkX21vbnRoX19oaWRlRm9yQW5pbWF0aW9uLCBzaG93Rm9yQW5pbWF0aW9uICYmICFpc1ZlcnRpY2FsICYmICFpc1JUTCAmJiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBsZWZ0OiAtY2FsZW5kYXJNb250aFdpZHRoXG4gICAgICB9LCBzaG93Rm9yQW5pbWF0aW9uICYmICFpc1ZlcnRpY2FsICYmIGlzUlRMICYmIHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHJpZ2h0OiAwXG4gICAgICB9LCBzaG93Rm9yQW5pbWF0aW9uICYmIGlzVmVydGljYWwgJiYge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAtdHJhbnNsYXRpb25WYWx1ZVxuICAgICAgfSwgIWlzVmlzaWJsZSAmJiAhaXNBbmltYXRpbmcgJiYgc3R5bGVzLkNhbGVuZGFyTW9udGhHcmlkX21vbnRoX19oaWRkZW4pKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9DYWxlbmRhck1vbnRoW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICBtb250aDogbW9udGgsXG4gICAgICAgIGlzVmlzaWJsZTogaXNWaXNpYmxlLFxuICAgICAgICBlbmFibGVPdXRzaWRlRGF5czogZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgIG1vZGlmaWVyczogbW9kaWZpZXJzW21vbnRoU3RyaW5nXSxcbiAgICAgICAgbW9udGhGb3JtYXQ6IG1vbnRoRm9ybWF0LFxuICAgICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb24sXG4gICAgICAgIG9uRGF5TW91c2VFbnRlcjogb25EYXlNb3VzZUVudGVyLFxuICAgICAgICBvbkRheU1vdXNlTGVhdmU6IG9uRGF5TW91c2VMZWF2ZSxcbiAgICAgICAgb25EYXlDbGljazogb25EYXlDbGljayxcbiAgICAgICAgb25Nb250aFNlbGVjdDogX3RoaXMzLm9uTW9udGhTZWxlY3QsXG4gICAgICAgIG9uWWVhclNlbGVjdDogX3RoaXMzLm9uWWVhclNlbGVjdCxcbiAgICAgICAgcmVuZGVyTW9udGhUZXh0OiByZW5kZXJNb250aFRleHQsXG4gICAgICAgIHJlbmRlckNhbGVuZGFyRGF5OiByZW5kZXJDYWxlbmRhckRheSxcbiAgICAgICAgcmVuZGVyRGF5Q29udGVudHM6IHJlbmRlckRheUNvbnRlbnRzLFxuICAgICAgICByZW5kZXJNb250aEVsZW1lbnQ6IHJlbmRlck1vbnRoRWxlbWVudCxcbiAgICAgICAgZmlyc3REYXlPZldlZWs6IGZpcnN0RGF5T2ZXZWVrLFxuICAgICAgICBkYXlTaXplOiBkYXlTaXplLFxuICAgICAgICBmb2N1c2VkRGF0ZTogaXNWaXNpYmxlID8gZm9jdXNlZERhdGUgOiBudWxsLFxuICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZCxcbiAgICAgICAgcGhyYXNlczogcGhyYXNlcyxcbiAgICAgICAgc2V0TW9udGhUaXRsZUhlaWdodDogc2V0TW9udGhUaXRsZUhlaWdodCxcbiAgICAgICAgZGF5QXJpYUxhYmVsRm9ybWF0OiBkYXlBcmlhTGFiZWxGb3JtYXQsXG4gICAgICAgIHZlcnRpY2FsQm9yZGVyU3BhY2luZzogdmVydGljYWxCb3JkZXJTcGFjaW5nLFxuICAgICAgICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiBob3Jpem9udGFsTW9udGhQYWRkaW5nXG4gICAgICB9KSk7XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBDYWxlbmRhck1vbnRoR3JpZDtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuQ2FsZW5kYXJNb250aEdyaWQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5DYWxlbmRhck1vbnRoR3JpZC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXMpKGZ1bmN0aW9uIChfcmVmMikge1xuICB2YXIgX3JlZjIkcmVhY3REYXRlcyA9IF9yZWYyLnJlYWN0RGF0ZXMsXG4gICAgICBjb2xvciA9IF9yZWYyJHJlYWN0RGF0ZXMuY29sb3IsXG4gICAgICBub1Njcm9sbEJhck9uVmVydGljYWxTY3JvbGxhYmxlID0gX3JlZjIkcmVhY3REYXRlcy5ub1Njcm9sbEJhck9uVmVydGljYWxTY3JvbGxhYmxlLFxuICAgICAgc3BhY2luZyA9IF9yZWYyJHJlYWN0RGF0ZXMuc3BhY2luZyxcbiAgICAgIHpJbmRleCA9IF9yZWYyJHJlYWN0RGF0ZXMuekluZGV4O1xuICByZXR1cm4ge1xuICAgIENhbGVuZGFyTW9udGhHcmlkOiB7XG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5iYWNrZ3JvdW5kLFxuICAgICAgdGV4dEFsaWduOiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKCdsZWZ0JyksXG4gICAgICB6SW5kZXg6IHpJbmRleFxuICAgIH0sXG4gICAgQ2FsZW5kYXJNb250aEdyaWRfX2FuaW1hdGluZzoge1xuICAgICAgekluZGV4OiB6SW5kZXggKyAxXG4gICAgfSxcbiAgICBDYWxlbmRhck1vbnRoR3JpZF9faG9yaXpvbnRhbDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBsZWZ0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKHNwYWNpbmcuZGF5UGlja2VySG9yaXpvbnRhbFBhZGRpbmcpXG4gICAgfSxcbiAgICBDYWxlbmRhck1vbnRoR3JpZF9fdmVydGljYWw6IHtcbiAgICAgIG1hcmdpbjogJzAgYXV0bydcbiAgICB9LFxuICAgIENhbGVuZGFyTW9udGhHcmlkX192ZXJ0aWNhbF9zY3JvbGxhYmxlOiAoMCwgX29iamVjdFNwcmVhZDVbXCJkZWZhdWx0XCJdKSh7XG4gICAgICBtYXJnaW46ICcwIGF1dG8nLFxuICAgICAgb3ZlcmZsb3dZOiAnc2Nyb2xsJ1xuICAgIH0sIG5vU2Nyb2xsQmFyT25WZXJ0aWNhbFNjcm9sbGFibGUgJiYge1xuICAgICAgJy13ZWJraXRPdmVyZmxvd1Njcm9sbGluZyc6ICd0b3VjaCcsXG4gICAgICAnOjotd2Via2l0LXNjcm9sbGJhcic6IHtcbiAgICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfSksXG4gICAgQ2FsZW5kYXJNb250aEdyaWRfbW9udGhfX2hvcml6b250YWw6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgICBtaW5IZWlnaHQ6ICcxMDAlJ1xuICAgIH0sXG4gICAgQ2FsZW5kYXJNb250aEdyaWRfbW9udGhfX2hpZGVGb3JBbmltYXRpb246IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgekluZGV4OiB6SW5kZXggLSAxLFxuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICAgIH0sXG4gICAgQ2FsZW5kYXJNb250aEdyaWRfbW9udGhfX2hpZGRlbjoge1xuICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbidcbiAgICB9XG4gIH07XG59LCB7XG4gIHB1cmVDb21wb25lbnQ6IHR5cGVvZiBfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgIT09ICd1bmRlZmluZWQnXG59KShDYWxlbmRhck1vbnRoR3JpZCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGdldENhbGVuZGFyTW9udGhXaWR0aDtcblxuZnVuY3Rpb24gZ2V0Q2FsZW5kYXJNb250aFdpZHRoKGRheVNpemUpIHtcbiAgdmFyIGNhbGVuZGFyTW9udGhQYWRkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICByZXR1cm4gNyAqIGRheVNpemUgKyAyICogY2FsZW5kYXJNb250aFBhZGRpbmcgKyAxO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gaXNTYW1lTW9udGg7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxuZnVuY3Rpb24gaXNTYW1lTW9udGgoYSwgYikge1xuICBpZiAoIV9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGEpIHx8ICFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChiKSkgcmV0dXJuIGZhbHNlOyAvLyBDb21wYXJlIGxlYXN0IHNpZ25pZmljYW50LCBtb3N0IGxpa2VseSB0byBjaGFuZ2UgdW5pdHMgZmlyc3RcbiAgLy8gTW9tZW50J3MgaXNTYW1lIGNsb25lcyBtb21lbnQgaW5wdXRzIGFuZCBpcyBhIHRhZCBzbG93XG5cbiAgcmV0dXJuIGEubW9udGgoKSA9PT0gYi5tb250aCgpICYmIGEueWVhcigpID09PSBiLnllYXIoKTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBFUyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2VzNycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgaXNFbnVtZXJhYmxlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHZhbHVlcyhPKSB7XG5cdHZhciBvYmogPSBFUy5SZXF1aXJlT2JqZWN0Q29lcmNpYmxlKE8pO1xuXHR2YXIgdmFscyA9IFtdO1xuXHRmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG5cdFx0aWYgKGhhcyhvYmosIGtleSkgJiYgaXNFbnVtZXJhYmxlKG9iaiwga2V5KSkge1xuXHRcdFx0dmFscy5wdXNoKG9ialtrZXldKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHZhbHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVMyMDE1ID0gcmVxdWlyZSgnLi9lczIwMTUnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL2hlbHBlcnMvYXNzaWduJyk7XG5cbnZhciBFUzIwMTYgPSBhc3NpZ24oYXNzaWduKHt9LCBFUzIwMTUpLCB7XG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L2VjbWEyNjIvcHVsbC82MFxuXHRTYW1lVmFsdWVOb25OdW1iZXI6IGZ1bmN0aW9uIFNhbWVWYWx1ZU5vbk51bWJlcih4LCB5KSB7XG5cdFx0aWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgeCAhPT0gdHlwZW9mIHkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1NhbWVWYWx1ZU5vbk51bWJlciByZXF1aXJlcyB0d28gbm9uLW51bWJlciB2YWx1ZXMgb2YgdGhlIHNhbWUgdHlwZS4nKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuU2FtZVZhbHVlKHgsIHkpO1xuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBFUzIwMTY7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xuXG5pZiAoaGFzU3ltYm9scykge1xuXHR2YXIgc3ltVG9TdHIgPSBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nO1xuXHR2YXIgc3ltU3RyaW5nUmVnZXggPSAvXlN5bWJvbFxcKC4qXFwpJC87XG5cdHZhciBpc1N5bWJvbE9iamVjdCA9IGZ1bmN0aW9uIGlzUmVhbFN5bWJvbE9iamVjdCh2YWx1ZSkge1xuXHRcdGlmICh0eXBlb2YgdmFsdWUudmFsdWVPZigpICE9PSAnc3ltYm9sJykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gc3ltU3RyaW5nUmVnZXgudGVzdChzeW1Ub1N0ci5jYWxsKHZhbHVlKSk7XG5cdH07XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0aWYgKHRvU3RyLmNhbGwodmFsdWUpICE9PSAnW29iamVjdCBTeW1ib2xdJykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIGlzU3ltYm9sT2JqZWN0KHZhbHVlKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9O1xufSBlbHNlIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG5cdFx0Ly8gdGhpcyBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IFN5bWJvbHMuXG5cdFx0cmV0dXJuIGZhbHNlICYmIHZhbHVlO1xuXHR9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyICRTeW50YXhFcnJvciA9IEdldEludHJpbnNpYygnJVN5bnRheEVycm9yJScpO1xuXG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG5cbnZhciBwcmVkaWNhdGVzID0ge1xuICAvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtcHJvcGVydHktZGVzY3JpcHRvci1zcGVjaWZpY2F0aW9uLXR5cGVcbiAgJ1Byb3BlcnR5IERlc2NyaXB0b3InOiBmdW5jdGlvbiBpc1Byb3BlcnR5RGVzY3JpcHRvcihFUywgRGVzYykge1xuICAgIGlmIChFUy5UeXBlKERlc2MpICE9PSAnT2JqZWN0Jykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgYWxsb3dlZCA9IHtcbiAgICAgICdbW0NvbmZpZ3VyYWJsZV1dJzogdHJ1ZSxcbiAgICAgICdbW0VudW1lcmFibGVdXSc6IHRydWUsXG4gICAgICAnW1tHZXRdXSc6IHRydWUsXG4gICAgICAnW1tTZXRdXSc6IHRydWUsXG4gICAgICAnW1tWYWx1ZV1dJzogdHJ1ZSxcbiAgICAgICdbW1dyaXRhYmxlXV0nOiB0cnVlXG4gICAgfTtcblxuICAgIGZvciAodmFyIGtleSBpbiBEZXNjKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIGlmIChoYXMoRGVzYywga2V5KSAmJiAhYWxsb3dlZFtrZXldKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaXNEYXRhID0gaGFzKERlc2MsICdbW1ZhbHVlXV0nKTtcbiAgICB2YXIgSXNBY2Nlc3NvciA9IGhhcyhEZXNjLCAnW1tHZXRdXScpIHx8IGhhcyhEZXNjLCAnW1tTZXRdXScpO1xuICAgIGlmIChpc0RhdGEgJiYgSXNBY2Nlc3Nvcikge1xuICAgICAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1Byb3BlcnR5IERlc2NyaXB0b3JzIG1heSBub3QgYmUgYm90aCBhY2Nlc3NvciBhbmQgZGF0YSBkZXNjcmlwdG9ycycpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhc3NlcnRSZWNvcmQoRVMsIHJlY29yZFR5cGUsIGFyZ3VtZW50TmFtZSwgdmFsdWUpIHtcbiAgdmFyIHByZWRpY2F0ZSA9IHByZWRpY2F0ZXNbcmVjb3JkVHlwZV07XG4gIGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3ICRTeW50YXhFcnJvcigndW5rbm93biByZWNvcmQgdHlwZTogJyArIHJlY29yZFR5cGUpO1xuICB9XG4gIGlmICghcHJlZGljYXRlKEVTLCB2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgJFR5cGVFcnJvcihhcmd1bWVudE5hbWUgKyAnIG11c3QgYmUgYSAnICsgcmVjb3JkVHlwZSk7XG4gIH1cbiAgY29uc29sZS5sb2cocHJlZGljYXRlKEVTLCB2YWx1ZSksIHZhbHVlKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBpc05hTihhKSB7XG5cdHJldHVybiBhICE9PSBhO1xufTtcbiIsInZhciAkaXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEgIT09IGE7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzRmluaXRlIHx8IGZ1bmN0aW9uICh4KSB7IHJldHVybiB0eXBlb2YgeCA9PT0gJ251bWJlcicgJiYgISRpc05hTih4KSAmJiB4ICE9PSBJbmZpbml0eSAmJiB4ICE9PSAtSW5maW5pdHk7IH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNpZ24obnVtYmVyKSB7XG5cdHJldHVybiBudW1iZXIgPj0gMCA/IDEgOiAtMTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1vZChudW1iZXIsIG1vZHVsbykge1xuXHR2YXIgcmVtYWluID0gbnVtYmVyICUgbW9kdWxvO1xuXHRyZXR1cm4gTWF0aC5mbG9vcihyZW1haW4gPj0gMCA/IHJlbWFpbiA6IHJlbWFpbiArIG1vZHVsbyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJldHVybiB0eXBlb2YgT2JqZWN0LnZhbHVlcyA9PT0gJ2Z1bmN0aW9uJyA/IE9iamVjdC52YWx1ZXMgOiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29udGFpbnMob3RoZXIpIHtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuXHR9XG5cdGlmICh0eXBlb2Ygb3RoZXIgIT09ICdvYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgMSAo4oCdb3RoZXLigJwpIHRvIE5vZGUuY29udGFpbnMgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBOb2RlJyk7XG5cdH1cblxuXHR2YXIgbm9kZSA9IG90aGVyO1xuXHRkbyB7XG5cdFx0aWYgKHRoaXMgPT09IG5vZGUpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRpZiAobm9kZSkge1xuXHRcdFx0bm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcblx0XHR9XG5cdH0gd2hpbGUgKG5vZGUpO1xuXG5cdHJldHVybiBmYWxzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRpZiAoZG9jdW1lbnQuY29udGFpbnMpIHtcblx0XHRcdHJldHVybiBkb2N1bWVudC5jb250YWlucztcblx0XHR9XG5cdFx0aWYgKGRvY3VtZW50LmJvZHkgJiYgZG9jdW1lbnQuYm9keS5jb250YWlucykge1xuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmJvZHkuY29udGFpbnM7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdE1vbWVudFByb3B0eXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LW1vbWVudC1wcm9wdHlwZXNcIikpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxudmFyIF9kZWZhdWx0UGhyYXNlcyA9IHJlcXVpcmUoXCIuLi9kZWZhdWx0UGhyYXNlc1wiKTtcblxudmFyIF9nZXRQaHJhc2VQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRQaHJhc2VQcm9wVHlwZXNcIikpO1xuXG52YXIgX0ZvY3VzZWRJbnB1dFNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Gb2N1c2VkSW5wdXRTaGFwZVwiKSk7XG5cbnZhciBfSWNvblBvc2l0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0ljb25Qb3NpdGlvblNoYXBlXCIpKTtcblxudmFyIF9PcmllbnRhdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9PcmllbnRhdGlvblNoYXBlXCIpKTtcblxudmFyIF9EaXNhYmxlZFNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9EaXNhYmxlZFNoYXBlXCIpKTtcblxudmFyIF9BbmNob3JEaXJlY3Rpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQW5jaG9yRGlyZWN0aW9uU2hhcGVcIikpO1xuXG52YXIgX09wZW5EaXJlY3Rpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vT3BlbkRpcmVjdGlvblNoYXBlXCIpKTtcblxudmFyIF9EYXlPZldlZWtTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRGF5T2ZXZWVrU2hhcGVcIikpO1xuXG52YXIgX0NhbGVuZGFySW5mb1Bvc2l0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NhbGVuZGFySW5mb1Bvc2l0aW9uU2hhcGVcIikpO1xuXG52YXIgX2RlZmF1bHQgPSB7XG4gIC8vIHJlcXVpcmVkIHByb3BzIGZvciBhIGZ1bmN0aW9uYWwgaW50ZXJhY3RpdmUgRGF0ZVJhbmdlUGlja2VyXG4gIHN0YXJ0RGF0ZTogX3JlYWN0TW9tZW50UHJvcHR5cGVzW1wiZGVmYXVsdFwiXS5tb21lbnRPYmosXG4gIGVuZERhdGU6IF9yZWFjdE1vbWVudFByb3B0eXBlc1tcImRlZmF1bHRcIl0ubW9tZW50T2JqLFxuICBvbkRhdGVzQ2hhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGZvY3VzZWRJbnB1dDogX0ZvY3VzZWRJbnB1dFNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgb25Gb2N1c0NoYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICBvbkNsb3NlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICAvLyBpbnB1dCByZWxhdGVkIHByb3BzXG4gIHN0YXJ0RGF0ZUlkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHN0YXJ0RGF0ZU9mZnNldDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgZW5kRGF0ZU9mZnNldDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgZW5kRGF0ZUlkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgZW5kRGF0ZVBsYWNlaG9sZGVyVGV4dDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBzdGFydERhdGVBcmlhTGFiZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgZW5kRGF0ZUFyaWFMYWJlbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBkaXNhYmxlZDogX0Rpc2FibGVkU2hhcGVbXCJkZWZhdWx0XCJdLFxuICByZXF1aXJlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVhZE9ubHk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHNjcmVlblJlYWRlcklucHV0TWVzc2FnZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBzaG93Q2xlYXJEYXRlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgc2hvd0RlZmF1bHRJbnB1dEljb246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGlucHV0SWNvblBvc2l0aW9uOiBfSWNvblBvc2l0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBjdXN0b21JbnB1dEljb246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIGN1c3RvbUFycm93SWNvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZSxcbiAgY3VzdG9tQ2xvc2VJY29uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBub0JvcmRlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgYmxvY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHNtYWxsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICByZWd1bGFyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBrZWVwRm9jdXNPbklucHV0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICAvLyBjYWxlbmRhciBwcmVzZW50YXRpb24gYW5kIGludGVyYWN0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgcmVuZGVyTW9udGhUZXh0OiAoMCwgX2FpcmJuYlByb3BUeXBlcy5tdXR1YWxseUV4Y2x1c2l2ZVByb3BzKShfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLCAncmVuZGVyTW9udGhUZXh0JywgJ3JlbmRlck1vbnRoRWxlbWVudCcpLFxuICByZW5kZXJNb250aEVsZW1lbnQ6ICgwLCBfYWlyYm5iUHJvcFR5cGVzLm11dHVhbGx5RXhjbHVzaXZlUHJvcHMpKF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsICdyZW5kZXJNb250aFRleHQnLCAncmVuZGVyTW9udGhFbGVtZW50JyksXG4gIG9yaWVudGF0aW9uOiBfT3JpZW50YXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIGFuY2hvckRpcmVjdGlvbjogX0FuY2hvckRpcmVjdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgb3BlbkRpcmVjdGlvbjogX09wZW5EaXJlY3Rpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIGhvcml6b250YWxNYXJnaW46IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgd2l0aFBvcnRhbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGFwcGVuZFRvQm9keTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgZGlzYWJsZVNjcm9sbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgZGF5U2l6ZTogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIGlzUlRMOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBmaXJzdERheU9mV2VlazogX0RheU9mV2Vla1NoYXBlW1wiZGVmYXVsdFwiXSxcbiAgaW5pdGlhbFZpc2libGVNb250aDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgbnVtYmVyT2ZNb250aHM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAga2VlcE9wZW5PbkRhdGVTZWxlY3Q6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVuZGVyQ2FsZW5kYXJJbmZvOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBjYWxlbmRhckluZm9Qb3NpdGlvbjogX0NhbGVuZGFySW5mb1Bvc2l0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgdmVydGljYWxIZWlnaHQ6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICB0cmFuc2l0aW9uRHVyYXRpb246IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICB2ZXJ0aWNhbFNwYWNpbmc6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgLy8gbmF2aWdhdGlvbiByZWxhdGVkIHByb3BzXG4gIG5hdlByZXY6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIG5hdk5leHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIG9uUHJldk1vbnRoQ2xpY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uTmV4dE1vbnRoQ2xpY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIC8vIGRheSBwcmVzZW50YXRpb24gYW5kIGludGVyYWN0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlckRheUNvbnRlbnRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBtaW5pbXVtTmlnaHRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIGVuYWJsZU91dHNpZGVEYXlzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBpc0RheUJsb2NrZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGlzT3V0c2lkZVJhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBpc0RheUhpZ2hsaWdodGVkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICAvLyBpbnRlcm5hdGlvbmFsaXphdGlvbiBwcm9wc1xuICBkaXNwbGF5Rm9ybWF0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZlR5cGUoW19wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZywgX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuY10pLFxuICBtb250aEZvcm1hdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICB3ZWVrRGF5Rm9ybWF0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHBocmFzZXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzW1wiZGVmYXVsdFwiXSkoX2RlZmF1bHRQaHJhc2VzLkRhdGVSYW5nZVBpY2tlclBocmFzZXMpKSxcbiAgZGF5QXJpYUxhYmVsRm9ybWF0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmdcbn07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbnZhciBfZGVmYXVsdCA9IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mKFtfY29uc3RhbnRzLlNUQVJUX0RBVEUsIF9jb25zdGFudHMuRU5EX0RBVEVdKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG52YXIgX2RlZmF1bHQgPSBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZihbX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OLCBfY29uc3RhbnRzLlZFUlRJQ0FMX09SSUVOVEFUSU9OXSk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxudmFyIF9kZWZhdWx0ID0gX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2YoW19jb25zdGFudHMuQU5DSE9SX0xFRlQsIF9jb25zdGFudHMuQU5DSE9SX1JJR0hUXSk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBnZXRSZXNwb25zaXZlQ29udGFpbmVyU3R5bGVzO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbmZ1bmN0aW9uIGdldFJlc3BvbnNpdmVDb250YWluZXJTdHlsZXMoYW5jaG9yRGlyZWN0aW9uLCBjdXJyZW50T2Zmc2V0LCBjb250YWluZXJFZGdlLCBtYXJnaW4pIHtcbiAgdmFyIHdpbmRvd1dpZHRoID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cuaW5uZXJXaWR0aCA6IDA7XG4gIHZhciBjYWxjdWxhdGVkT2Zmc2V0ID0gYW5jaG9yRGlyZWN0aW9uID09PSBfY29uc3RhbnRzLkFOQ0hPUl9MRUZUID8gd2luZG93V2lkdGggLSBjb250YWluZXJFZGdlIDogY29udGFpbmVyRWRnZTtcbiAgdmFyIGNhbGN1bGF0ZWRNYXJnaW4gPSBtYXJnaW4gfHwgMDtcbiAgcmV0dXJuICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIGFuY2hvckRpcmVjdGlvbiwgTWF0aC5taW4oY3VycmVudE9mZnNldCArIGNhbGN1bGF0ZWRPZmZzZXQgLSBjYWxjdWxhdGVkTWFyZ2luLCAwKSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGdldERldGFjaGVkQ29udGFpbmVyU3R5bGVzO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbi8qKlxuICogQ2FsY3VsYXRlIGFuZCByZXR1cm4gYSBDU1MgdHJhbnNmb3JtIHN0eWxlIHRvIHBvc2l0aW9uIGEgZGV0YWNoZWQgZWxlbWVudFxuICogbmV4dCB0byBhIHJlZmVyZW5jZSBlbGVtZW50LiBUaGUgb3BlbiBhbmQgYW5jaG9yIGRpcmVjdGlvbiBpbmRpY2F0ZSB3ZXRoZXJcbiAqIGl0IHNob3VsZCBiZSBwb3NpdGlvbmVkIGFib3ZlL2JlbG93IGFuZC9vciB0byB0aGUgbGVmdC9yaWdodCBvZiB0aGVcbiAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICpcbiAqIEFzc3VtaW5nIHIoMCwwKSwgcigxLDEpLCBkKDAsMCksIGQoMSwxKSBmb3IgdGhlIGJvdHRvbS1sZWZ0IGFuZCB0b3AtcmlnaHRcbiAqIGNvcm5lcnMgb2YgdGhlIHJlZmVyZW5jZSBhbmQgZGV0YWNoZWQgZWxlbWVudHMsIHJlc3BlY3RpdmVseTpcbiAqICAtIG9wZW5EaXJlY3Rpb24gPSBET1dOLCBhbmNob3JEaXJlY3Rpb24gPSBMRUZUID0+IGQoMCwxKSA9PSByKDAsMSlcbiAqICAtIG9wZW5EaXJlY3Rpb24gPSBVUCwgYW5jaG9yRGlyZWN0aW9uID0gTEVGVCA9PiBkKDAsMCkgPT0gcigwLDApXG4gKiAgLSBvcGVuRGlyZWN0aW9uID0gRE9XTiwgYW5jaG9yRGlyZWN0aW9uID0gUklHSFQgPT4gZCgxLDEpID09IHIoMSwxKVxuICogIC0gb3BlbkRpcmVjdGlvbiA9IFVQLCBhbmNob3JEaXJlY3Rpb24gPSBSSUdIVCA9PiBkKDEsMCkgPT0gcigxLDApXG4gKlxuICogQnkgdXNpbmcgYSBDU1MgdHJhbnNmb3JtLCB3ZSBhbGxvdyB0byBmdXJ0aGVyIHBvc2l0aW9uIGl0IHVzaW5nXG4gKiB0b3AvYm90dG9tIENTUyBwcm9wZXJ0aWVzIGZvciB0aGUgYW5jaG9yIGd1dHRlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gb3BlbkRpcmVjdGlvbiBUaGUgdmVydGljYWwgcG9zaXRpb25pbmcgb2YgdGhlIHBvcHVwXG4gKiBAcGFyYW0ge3N0cmluZ30gYW5jaG9yRGlyZWN0aW9uIFRoZSBob3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSBwb3B1cFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlRWwgVGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGdldERldGFjaGVkQ29udGFpbmVyU3R5bGVzKG9wZW5EaXJlY3Rpb24sIGFuY2hvckRpcmVjdGlvbiwgcmVmZXJlbmNlRWwpIHtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSByZWZlcmVuY2VFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIG9mZnNldFggPSByZWZlcmVuY2VSZWN0LmxlZnQ7XG4gIHZhciBvZmZzZXRZID0gcmVmZXJlbmNlUmVjdC50b3A7XG5cbiAgaWYgKG9wZW5EaXJlY3Rpb24gPT09IF9jb25zdGFudHMuT1BFTl9VUCkge1xuICAgIG9mZnNldFkgPSAtKHdpbmRvdy5pbm5lckhlaWdodCAtIHJlZmVyZW5jZVJlY3QuYm90dG9tKTtcbiAgfVxuXG4gIGlmIChhbmNob3JEaXJlY3Rpb24gPT09IF9jb25zdGFudHMuQU5DSE9SX1JJR0hUKSB7XG4gICAgb2Zmc2V0WCA9IC0od2luZG93LmlubmVyV2lkdGggLSByZWZlcmVuY2VSZWN0LnJpZ2h0KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKFwiLmNvbmNhdChNYXRoLnJvdW5kKG9mZnNldFgpLCBcInB4LCBcIikuY29uY2F0KE1hdGgucm91bmQob2Zmc2V0WSksIFwicHgsIDApXCIpXG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldFNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudDtcbmV4cG9ydHMuZ2V0U2Nyb2xsQW5jZXN0b3JzT3ZlcmZsb3dZID0gZ2V0U2Nyb2xsQW5jZXN0b3JzT3ZlcmZsb3dZO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBkaXNhYmxlU2Nyb2xsO1xuXG52YXIgZ2V0U2Nyb2xsaW5nUm9vdCA9IGZ1bmN0aW9uIGdldFNjcm9sbGluZ1Jvb3QoKSB7XG4gIHJldHVybiBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn07XG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGZpbmRzIHRoZSBzY3JvbGwgcGFyZW50IG9mIGEgbm9kZS4gVGhlIHNjcm9sbCBwYXJyZW50IG9mIGEgbm9kZVxuICogaXMgdGhlIGNsb3Nlc3Qgbm9kZSB0aGF0IGlzIHNjcm9sbGFibGUuIEEgbm9kZSBpcyBzY3JvbGxhYmxlIGlmOlxuICogIC0gaXQgaXMgYWxsb3dlZCB0byBzY3JvbGwgdmlhIENTUyAoJ292ZXJmbG93LXknIG5vdCB2aXNpYmxlIG9yIGhpZGRlbik7XG4gKiAgLSBhbmQgaXRzIGNoaWxkcmVuL2NvbnRlbnQgYXJlIFwiYmlnZ2VyXCIgdGhhbiB0aGUgbm9kZSdzIGJveCBoZWlnaHQuXG4gKlxuICogVGhlIHJvb3Qgb2YgdGhlIGRvY3VtZW50IGFsd2F5cyBzY3JvbGxzIGJ5IGRlZmF1bHQuXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbm9kZSBBbnkgRE9NIGVsZW1lbnQuXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gVGhlIHNjcm9sbCBwYXJlbnQgZWxlbWVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChub2RlKSB7XG4gIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudEVsZW1lbnQ7XG4gIGlmIChwYXJlbnQgPT0gbnVsbCkgcmV0dXJuIGdldFNjcm9sbGluZ1Jvb3QoKTtcblxuICB2YXIgX3dpbmRvdyRnZXRDb21wdXRlZFN0ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KSxcbiAgICAgIG92ZXJmbG93WSA9IF93aW5kb3ckZ2V0Q29tcHV0ZWRTdC5vdmVyZmxvd1k7XG5cbiAgdmFyIGNhblNjcm9sbCA9IG92ZXJmbG93WSAhPT0gJ3Zpc2libGUnICYmIG92ZXJmbG93WSAhPT0gJ2hpZGRlbic7XG5cbiAgaWYgKGNhblNjcm9sbCAmJiBwYXJlbnQuc2Nyb2xsSGVpZ2h0ID4gcGFyZW50LmNsaWVudEhlaWdodCkge1xuICAgIHJldHVybiBwYXJlbnQ7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KHBhcmVudCk7XG59XG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlcyB0aGUgdHJlZSB1cHdhcmRzIGZyb20gdGhlIGdpdmVuIG5vZGUsIGNhcHR1cmluZyBhbGxcbiAqIGFuY2VzdG9yIG5vZGVzIHRoYXQgc2Nyb2xsIGFsb25nIHdpdGggdGhlaXIgY3VycmVudCAnb3ZlcmZsb3cteScgQ1NTXG4gKiBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlIEFueSBET00gZWxlbWVudC5cbiAqIEBwYXJhbSB7TWFwPEhUTUxFbGVtZW50LHN0cmluZz59IFthY2NdIEFjY3VtdWxhdG9yIG1hcC5cbiAqIEByZXR1cm4ge01hcDxIVE1MRWxlbWVudCxzdHJpbmc+fSBNYXAgb2YgYW5jZXN0b3JzIHdpdGggdGhlaXIgJ292ZXJmbG93LXknIHZhbHVlLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsQW5jZXN0b3JzT3ZlcmZsb3dZKG5vZGUpIHtcbiAgdmFyIGFjYyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbmV3IE1hcCgpO1xuICB2YXIgc2Nyb2xsaW5nUm9vdCA9IGdldFNjcm9sbGluZ1Jvb3QoKTtcbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChub2RlKTtcbiAgYWNjLnNldChzY3JvbGxQYXJlbnQsIHNjcm9sbFBhcmVudC5zdHlsZS5vdmVyZmxvd1kpO1xuICBpZiAoc2Nyb2xsUGFyZW50ID09PSBzY3JvbGxpbmdSb290KSByZXR1cm4gYWNjO1xuICByZXR1cm4gZ2V0U2Nyb2xsQW5jZXN0b3JzT3ZlcmZsb3dZKHNjcm9sbFBhcmVudCwgYWNjKTtcbn1cbi8qKlxuICogRGlzYWJsaW5nIHRoZSBzY3JvbGwgb24gYSBub2RlIGludm9sdmVzIGZpbmRpbmcgYWxsIHRoZSBzY3JvbGxhYmxlIGFuY2VzdG9yc1xuICogYW5kIHNldCB0aGVpciAnb3ZlcmZsb3cteScgQ1NTIHByb3BlcnR5IHRvICdoaWRkZW4nLiBXaGVuIGFsbCBhbmNlc3RvcnMgaGF2ZVxuICogJ292ZXJmbG93LXk6IGhpZGRlbicgKHVwIHRvIHRoZSBkb2N1bWVudCBlbGVtZW50KSB0aGVyZSBpcyBubyBzY3JvbGxcbiAqIGNvbnRhaW5lciwgdGh1cyBhbGwgdGhlIHNjcm9sbCBvdXRzaWRlIG9mIHRoZSBub2RlIGlzIGRpc2FibGVkLiBJbiBvcmRlciB0b1xuICogZW5hYmxlIHNjcm9sbCBhZ2Fpbiwgd2Ugc3RvcmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSAnb3ZlcmZsb3cteScgZm9yXG4gKiBldmVyeSBhbmNlc3RvciBpbiBhIGNsb3N1cmUgYW5kIHJlc2V0IGl0IGJhY2suXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbm9kZSBBbnkgRE9NIGVsZW1lbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBkaXNhYmxlU2Nyb2xsKG5vZGUpIHtcbiAgdmFyIHNjcm9sbEFuY2VzdG9yc092ZXJmbG93WSA9IGdldFNjcm9sbEFuY2VzdG9yc092ZXJmbG93WShub2RlKTtcblxuICB2YXIgdG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKG9uKSB7XG4gICAgcmV0dXJuIHNjcm9sbEFuY2VzdG9yc092ZXJmbG93WS5mb3JFYWNoKGZ1bmN0aW9uIChvdmVyZmxvd1ksIGFuY2VzdG9yKSB7XG4gICAgICBhbmNlc3Rvci5zdHlsZS5zZXRQcm9wZXJ0eSgnb3ZlcmZsb3cteScsIG9uID8gJ2hpZGRlbicgOiBvdmVyZmxvd1kpO1xuICAgIH0pO1xuICB9O1xuXG4gIHRvZ2dsZSh0cnVlKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdG9nZ2xlKGZhbHNlKTtcbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9lbnp5bWVTaGFsbG93RXF1YWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJlbnp5bWUtc2hhbGxvdy1lcXVhbFwiKSk7XG5cbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF9yZWFjdE1vbWVudFByb3B0eXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LW1vbWVudC1wcm9wdHlwZXNcIikpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxudmFyIF9PcGVuRGlyZWN0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvT3BlbkRpcmVjdGlvblNoYXBlXCIpKTtcblxudmFyIF9kZWZhdWx0UGhyYXNlcyA9IHJlcXVpcmUoXCIuLi9kZWZhdWx0UGhyYXNlc1wiKTtcblxudmFyIF9nZXRQaHJhc2VQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRQaHJhc2VQcm9wVHlwZXNcIikpO1xuXG52YXIgX0RhdGVSYW5nZVBpY2tlcklucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9EYXRlUmFuZ2VQaWNrZXJJbnB1dFwiKSk7XG5cbnZhciBfSWNvblBvc2l0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvSWNvblBvc2l0aW9uU2hhcGVcIikpO1xuXG52YXIgX0Rpc2FibGVkU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvRGlzYWJsZWRTaGFwZVwiKSk7XG5cbnZhciBfdG9Nb21lbnRPYmplY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy90b01vbWVudE9iamVjdFwiKSk7XG5cbnZhciBfdG9Mb2NhbGl6ZWREYXRlU3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvdG9Mb2NhbGl6ZWREYXRlU3RyaW5nXCIpKTtcblxudmFyIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXlcIikpO1xuXG52YXIgX2lzQmVmb3JlRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvaXNCZWZvcmVEYXlcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbnZhciBwcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKSh7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBzdGFydERhdGU6IF9yZWFjdE1vbWVudFByb3B0eXBlc1tcImRlZmF1bHRcIl0ubW9tZW50T2JqLFxuICBzdGFydERhdGVJZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBzdGFydERhdGVQbGFjZWhvbGRlclRleHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgaXNTdGFydERhdGVGb2N1c2VkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzdGFydERhdGVBcmlhTGFiZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgZW5kRGF0ZTogX3JlYWN0TW9tZW50UHJvcHR5cGVzW1wiZGVmYXVsdFwiXS5tb21lbnRPYmosXG4gIGVuZERhdGVJZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBlbmREYXRlUGxhY2Vob2xkZXJUZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGlzRW5kRGF0ZUZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGVuZERhdGVBcmlhTGFiZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgc2NyZWVuUmVhZGVyTWVzc2FnZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBzaG93Q2xlYXJEYXRlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgc2hvd0NhcmV0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzaG93RGVmYXVsdElucHV0SWNvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgaW5wdXRJY29uUG9zaXRpb246IF9JY29uUG9zaXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIGRpc2FibGVkOiBfRGlzYWJsZWRTaGFwZVtcImRlZmF1bHRcIl0sXG4gIHJlcXVpcmVkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICByZWFkT25seTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgb3BlbkRpcmVjdGlvbjogX09wZW5EaXJlY3Rpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIG5vQm9yZGVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBibG9jazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgc21hbGw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlZ3VsYXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHZlcnRpY2FsU3BhY2luZzogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIGtlZXBPcGVuT25EYXRlU2VsZWN0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHdpdGhGdWxsU2NyZWVuUG9ydGFsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBtaW5pbXVtTmlnaHRzOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgaXNPdXRzaWRlUmFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGRpc3BsYXlGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mVHlwZShbX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLCBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jXSksXG4gIG9uRm9jdXNDaGFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uQ2xvc2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uRGF0ZXNDaGFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uS2V5RG93bkFycm93RG93bjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBjdXN0b21JbnB1dEljb246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIGN1c3RvbUFycm93SWNvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZSxcbiAgY3VzdG9tQ2xvc2VJY29uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICAvLyBhY2Nlc3NpYmlsaXR5XG4gIGlzRm9jdXNlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgLy8gaTE4blxuICBwaHJhc2VzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zaGFwZSgoMCwgX2dldFBocmFzZVByb3BUeXBlc1tcImRlZmF1bHRcIl0pKF9kZWZhdWx0UGhyYXNlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXMpKSxcbiAgaXNSVEw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2xcbn0pIDoge307XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjaGlsZHJlbjogbnVsbCxcbiAgc3RhcnREYXRlOiBudWxsLFxuICBzdGFydERhdGVJZDogX2NvbnN0YW50cy5TVEFSVF9EQVRFLFxuICBzdGFydERhdGVQbGFjZWhvbGRlclRleHQ6ICdTdGFydCBEYXRlJyxcbiAgaXNTdGFydERhdGVGb2N1c2VkOiBmYWxzZSxcbiAgc3RhcnREYXRlQXJpYUxhYmVsOiB1bmRlZmluZWQsXG4gIGVuZERhdGU6IG51bGwsXG4gIGVuZERhdGVJZDogX2NvbnN0YW50cy5FTkRfREFURSxcbiAgZW5kRGF0ZVBsYWNlaG9sZGVyVGV4dDogJ0VuZCBEYXRlJyxcbiAgaXNFbmREYXRlRm9jdXNlZDogZmFsc2UsXG4gIGVuZERhdGVBcmlhTGFiZWw6IHVuZGVmaW5lZCxcbiAgc2NyZWVuUmVhZGVyTWVzc2FnZTogJycsXG4gIHNob3dDbGVhckRhdGVzOiBmYWxzZSxcbiAgc2hvd0NhcmV0OiBmYWxzZSxcbiAgc2hvd0RlZmF1bHRJbnB1dEljb246IGZhbHNlLFxuICBpbnB1dEljb25Qb3NpdGlvbjogX2NvbnN0YW50cy5JQ09OX0JFRk9SRV9QT1NJVElPTixcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICByZXF1aXJlZDogZmFsc2UsXG4gIHJlYWRPbmx5OiBmYWxzZSxcbiAgb3BlbkRpcmVjdGlvbjogX2NvbnN0YW50cy5PUEVOX0RPV04sXG4gIG5vQm9yZGVyOiBmYWxzZSxcbiAgYmxvY2s6IGZhbHNlLFxuICBzbWFsbDogZmFsc2UsXG4gIHJlZ3VsYXI6IGZhbHNlLFxuICB2ZXJ0aWNhbFNwYWNpbmc6IHVuZGVmaW5lZCxcbiAga2VlcE9wZW5PbkRhdGVTZWxlY3Q6IGZhbHNlLFxuICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZXM6IGZhbHNlLFxuICB3aXRoRnVsbFNjcmVlblBvcnRhbDogZmFsc2UsXG4gIG1pbmltdW1OaWdodHM6IDEsXG4gIGlzT3V0c2lkZVJhbmdlOiBmdW5jdGlvbiBpc091dHNpZGVSYW5nZShkYXkpIHtcbiAgICByZXR1cm4gISgwLCBfaXNJbmNsdXNpdmVseUFmdGVyRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCkpO1xuICB9LFxuICBkaXNwbGF5Rm9ybWF0OiBmdW5jdGlvbiBkaXNwbGF5Rm9ybWF0KCkge1xuICAgIHJldHVybiBfbW9tZW50W1wiZGVmYXVsdFwiXS5sb2NhbGVEYXRhKCkubG9uZ0RhdGVGb3JtYXQoJ0wnKTtcbiAgfSxcbiAgb25Gb2N1c0NoYW5nZTogZnVuY3Rpb24gb25Gb2N1c0NoYW5nZSgpIHt9LFxuICBvbkNsb3NlOiBmdW5jdGlvbiBvbkNsb3NlKCkge30sXG4gIG9uRGF0ZXNDaGFuZ2U6IGZ1bmN0aW9uIG9uRGF0ZXNDaGFuZ2UoKSB7fSxcbiAgb25LZXlEb3duQXJyb3dEb3duOiBmdW5jdGlvbiBvbktleURvd25BcnJvd0Rvd24oKSB7fSxcbiAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiBmdW5jdGlvbiBvbktleURvd25RdWVzdGlvbk1hcmsoKSB7fSxcbiAgY3VzdG9tSW5wdXRJY29uOiBudWxsLFxuICBjdXN0b21BcnJvd0ljb246IG51bGwsXG4gIGN1c3RvbUNsb3NlSWNvbjogbnVsbCxcbiAgLy8gYWNjZXNzaWJpbGl0eVxuICBpc0ZvY3VzZWQ6IGZhbHNlLFxuICAvLyBpMThuXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXMsXG4gIGlzUlRMOiBmYWxzZVxufTtcblxudmFyIERhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX3JlZikge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyW1wiZGVmYXVsdFwiXSkoRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyLCBfcmVmKTtcbiAgdmFyIF9wcm90byA9IERhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvWyFfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgJiYgXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIl0gPSBmdW5jdGlvbiAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIERhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX3JlZi5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLm9uQ2xlYXJGb2N1cyA9IF90aGlzLm9uQ2xlYXJGb2N1cy5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25TdGFydERhdGVDaGFuZ2UgPSBfdGhpcy5vblN0YXJ0RGF0ZUNoYW5nZS5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25TdGFydERhdGVGb2N1cyA9IF90aGlzLm9uU3RhcnREYXRlRm9jdXMuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uRW5kRGF0ZUNoYW5nZSA9IF90aGlzLm9uRW5kRGF0ZUNoYW5nZS5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25FbmREYXRlRm9jdXMgPSBfdGhpcy5vbkVuZERhdGVGb2N1cy5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMuY2xlYXJEYXRlcyA9IF90aGlzLmNsZWFyRGF0ZXMuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9wcm90by5vbkNsZWFyRm9jdXMgPSBmdW5jdGlvbiBvbkNsZWFyRm9jdXMoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25Gb2N1c0NoYW5nZSA9IF90aGlzJHByb3BzLm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgIG9uQ2xvc2UgPSBfdGhpcyRwcm9wcy5vbkNsb3NlLFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wcy5zdGFydERhdGUsXG4gICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wcy5lbmREYXRlO1xuICAgIG9uRm9jdXNDaGFuZ2UobnVsbCk7XG4gICAgb25DbG9zZSh7XG4gICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICAgIGVuZERhdGU6IGVuZERhdGVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25FbmREYXRlQ2hhbmdlID0gZnVuY3Rpb24gb25FbmREYXRlQ2hhbmdlKGVuZERhdGVTdHJpbmcpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHMyLnN0YXJ0RGF0ZSxcbiAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBfdGhpcyRwcm9wczIuaXNPdXRzaWRlUmFuZ2UsXG4gICAgICAgIG1pbmltdW1OaWdodHMgPSBfdGhpcyRwcm9wczIubWluaW11bU5pZ2h0cyxcbiAgICAgICAga2VlcE9wZW5PbkRhdGVTZWxlY3QgPSBfdGhpcyRwcm9wczIua2VlcE9wZW5PbkRhdGVTZWxlY3QsXG4gICAgICAgIG9uRGF0ZXNDaGFuZ2UgPSBfdGhpcyRwcm9wczIub25EYXRlc0NoYW5nZTtcbiAgICB2YXIgZW5kRGF0ZSA9ICgwLCBfdG9Nb21lbnRPYmplY3RbXCJkZWZhdWx0XCJdKShlbmREYXRlU3RyaW5nLCB0aGlzLmdldERpc3BsYXlGb3JtYXQoKSk7XG4gICAgdmFyIGlzRW5kRGF0ZVZhbGlkID0gZW5kRGF0ZSAmJiAhaXNPdXRzaWRlUmFuZ2UoZW5kRGF0ZSkgJiYgIShzdGFydERhdGUgJiYgKDAsIF9pc0JlZm9yZURheVtcImRlZmF1bHRcIl0pKGVuZERhdGUsIHN0YXJ0RGF0ZS5jbG9uZSgpLmFkZChtaW5pbXVtTmlnaHRzLCAnZGF5cycpKSk7XG5cbiAgICBpZiAoaXNFbmREYXRlVmFsaWQpIHtcbiAgICAgIG9uRGF0ZXNDaGFuZ2Uoe1xuICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZTogZW5kRGF0ZVxuICAgICAgfSk7XG4gICAgICBpZiAoIWtlZXBPcGVuT25EYXRlU2VsZWN0KSB0aGlzLm9uQ2xlYXJGb2N1cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbkRhdGVzQ2hhbmdlKHtcbiAgICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUsXG4gICAgICAgIGVuZERhdGU6IG51bGxcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25FbmREYXRlRm9jdXMgPSBmdW5jdGlvbiBvbkVuZERhdGVGb2N1cygpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHMzLnN0YXJ0RGF0ZSxcbiAgICAgICAgb25Gb2N1c0NoYW5nZSA9IF90aGlzJHByb3BzMy5vbkZvY3VzQ2hhbmdlLFxuICAgICAgICB3aXRoRnVsbFNjcmVlblBvcnRhbCA9IF90aGlzJHByb3BzMy53aXRoRnVsbFNjcmVlblBvcnRhbCxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczMuZGlzYWJsZWQ7XG5cbiAgICBpZiAoIXN0YXJ0RGF0ZSAmJiB3aXRoRnVsbFNjcmVlblBvcnRhbCAmJiAoIWRpc2FibGVkIHx8IGRpc2FibGVkID09PSBfY29uc3RhbnRzLkVORF9EQVRFKSkge1xuICAgICAgLy8gV2hlbiB0aGUgZGF0ZXBpY2tlciBpcyBmdWxsIHNjcmVlbiwgd2UgbmV2ZXIgd2FudCB0byBmb2N1cyB0aGUgZW5kIGRhdGUgZmlyc3RcbiAgICAgIC8vIGJlY2F1c2UgdGhlcmUncyBubyBpbmRpY2F0aW9uIHRoYXQgdGhhdCBpcyB0aGUgY2FzZSBvbmNlIHRoZSBkYXRlcGlja2VyIGlzIG9wZW4gYW5kIGl0XG4gICAgICAvLyBtaWdodCBjb25mdXNlIHRoZSB1c2VyXG4gICAgICBvbkZvY3VzQ2hhbmdlKF9jb25zdGFudHMuU1RBUlRfREFURSk7XG4gICAgfSBlbHNlIGlmICghZGlzYWJsZWQgfHwgZGlzYWJsZWQgPT09IF9jb25zdGFudHMuU1RBUlRfREFURSkge1xuICAgICAgb25Gb2N1c0NoYW5nZShfY29uc3RhbnRzLkVORF9EQVRFKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uU3RhcnREYXRlQ2hhbmdlID0gZnVuY3Rpb24gb25TdGFydERhdGVDaGFuZ2Uoc3RhcnREYXRlU3RyaW5nKSB7XG4gICAgdmFyIGVuZERhdGUgPSB0aGlzLnByb3BzLmVuZERhdGU7XG4gICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlzT3V0c2lkZVJhbmdlID0gX3RoaXMkcHJvcHM0LmlzT3V0c2lkZVJhbmdlLFxuICAgICAgICBtaW5pbXVtTmlnaHRzID0gX3RoaXMkcHJvcHM0Lm1pbmltdW1OaWdodHMsXG4gICAgICAgIG9uRGF0ZXNDaGFuZ2UgPSBfdGhpcyRwcm9wczQub25EYXRlc0NoYW5nZSxcbiAgICAgICAgb25Gb2N1c0NoYW5nZSA9IF90aGlzJHByb3BzNC5vbkZvY3VzQ2hhbmdlLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzNC5kaXNhYmxlZDtcbiAgICB2YXIgc3RhcnREYXRlID0gKDAsIF90b01vbWVudE9iamVjdFtcImRlZmF1bHRcIl0pKHN0YXJ0RGF0ZVN0cmluZywgdGhpcy5nZXREaXNwbGF5Rm9ybWF0KCkpO1xuICAgIHZhciBpc0VuZERhdGVCZWZvcmVTdGFydERhdGUgPSBzdGFydERhdGUgJiYgKDAsIF9pc0JlZm9yZURheVtcImRlZmF1bHRcIl0pKGVuZERhdGUsIHN0YXJ0RGF0ZS5jbG9uZSgpLmFkZChtaW5pbXVtTmlnaHRzLCAnZGF5cycpKTtcbiAgICB2YXIgaXNTdGFydERhdGVWYWxpZCA9IHN0YXJ0RGF0ZSAmJiAhaXNPdXRzaWRlUmFuZ2Uoc3RhcnREYXRlKSAmJiAhKGRpc2FibGVkID09PSBfY29uc3RhbnRzLkVORF9EQVRFICYmIGlzRW5kRGF0ZUJlZm9yZVN0YXJ0RGF0ZSk7XG5cbiAgICBpZiAoaXNTdGFydERhdGVWYWxpZCkge1xuICAgICAgaWYgKGlzRW5kRGF0ZUJlZm9yZVN0YXJ0RGF0ZSkge1xuICAgICAgICBlbmREYXRlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgb25EYXRlc0NoYW5nZSh7XG4gICAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLFxuICAgICAgICBlbmREYXRlOiBlbmREYXRlXG4gICAgICB9KTtcbiAgICAgIG9uRm9jdXNDaGFuZ2UoX2NvbnN0YW50cy5FTkRfREFURSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uRGF0ZXNDaGFuZ2Uoe1xuICAgICAgICBzdGFydERhdGU6IG51bGwsXG4gICAgICAgIGVuZERhdGU6IGVuZERhdGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25TdGFydERhdGVGb2N1cyA9IGZ1bmN0aW9uIG9uU3RhcnREYXRlRm9jdXMoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHM1LmRpc2FibGVkLFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHM1Lm9uRm9jdXNDaGFuZ2U7XG5cbiAgICBpZiAoIWRpc2FibGVkIHx8IGRpc2FibGVkID09PSBfY29uc3RhbnRzLkVORF9EQVRFKSB7XG4gICAgICBvbkZvY3VzQ2hhbmdlKF9jb25zdGFudHMuU1RBUlRfREFURSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXREaXNwbGF5Rm9ybWF0ID0gZnVuY3Rpb24gZ2V0RGlzcGxheUZvcm1hdCgpIHtcbiAgICB2YXIgZGlzcGxheUZvcm1hdCA9IHRoaXMucHJvcHMuZGlzcGxheUZvcm1hdDtcbiAgICByZXR1cm4gdHlwZW9mIGRpc3BsYXlGb3JtYXQgPT09ICdzdHJpbmcnID8gZGlzcGxheUZvcm1hdCA6IGRpc3BsYXlGb3JtYXQoKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0RGF0ZVN0cmluZyA9IGZ1bmN0aW9uIGdldERhdGVTdHJpbmcoZGF0ZSkge1xuICAgIHZhciBkaXNwbGF5Rm9ybWF0ID0gdGhpcy5nZXREaXNwbGF5Rm9ybWF0KCk7XG5cbiAgICBpZiAoZGF0ZSAmJiBkaXNwbGF5Rm9ybWF0KSB7XG4gICAgICByZXR1cm4gZGF0ZSAmJiBkYXRlLmZvcm1hdChkaXNwbGF5Rm9ybWF0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF90b0xvY2FsaXplZERhdGVTdHJpbmdbXCJkZWZhdWx0XCJdKShkYXRlKTtcbiAgfTtcblxuICBfcHJvdG8uY2xlYXJEYXRlcyA9IGZ1bmN0aW9uIGNsZWFyRGF0ZXMoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNiA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uRGF0ZXNDaGFuZ2UgPSBfdGhpcyRwcm9wczYub25EYXRlc0NoYW5nZSxcbiAgICAgICAgcmVvcGVuUGlja2VyT25DbGVhckRhdGVzID0gX3RoaXMkcHJvcHM2LnJlb3BlblBpY2tlck9uQ2xlYXJEYXRlcyxcbiAgICAgICAgb25Gb2N1c0NoYW5nZSA9IF90aGlzJHByb3BzNi5vbkZvY3VzQ2hhbmdlO1xuICAgIG9uRGF0ZXNDaGFuZ2Uoe1xuICAgICAgc3RhcnREYXRlOiBudWxsLFxuICAgICAgZW5kRGF0ZTogbnVsbFxuICAgIH0pO1xuXG4gICAgaWYgKHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlcykge1xuICAgICAgb25Gb2N1c0NoYW5nZShfY29uc3RhbnRzLlNUQVJUX0RBVEUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczcgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzNy5jaGlsZHJlbixcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHM3LnN0YXJ0RGF0ZSxcbiAgICAgICAgc3RhcnREYXRlSWQgPSBfdGhpcyRwcm9wczcuc3RhcnREYXRlSWQsXG4gICAgICAgIHN0YXJ0RGF0ZVBsYWNlaG9sZGVyVGV4dCA9IF90aGlzJHByb3BzNy5zdGFydERhdGVQbGFjZWhvbGRlclRleHQsXG4gICAgICAgIGlzU3RhcnREYXRlRm9jdXNlZCA9IF90aGlzJHByb3BzNy5pc1N0YXJ0RGF0ZUZvY3VzZWQsXG4gICAgICAgIHN0YXJ0RGF0ZUFyaWFMYWJlbCA9IF90aGlzJHByb3BzNy5zdGFydERhdGVBcmlhTGFiZWwsXG4gICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wczcuZW5kRGF0ZSxcbiAgICAgICAgZW5kRGF0ZUlkID0gX3RoaXMkcHJvcHM3LmVuZERhdGVJZCxcbiAgICAgICAgZW5kRGF0ZVBsYWNlaG9sZGVyVGV4dCA9IF90aGlzJHByb3BzNy5lbmREYXRlUGxhY2Vob2xkZXJUZXh0LFxuICAgICAgICBlbmREYXRlQXJpYUxhYmVsID0gX3RoaXMkcHJvcHM3LmVuZERhdGVBcmlhTGFiZWwsXG4gICAgICAgIGlzRW5kRGF0ZUZvY3VzZWQgPSBfdGhpcyRwcm9wczcuaXNFbmREYXRlRm9jdXNlZCxcbiAgICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZSA9IF90aGlzJHByb3BzNy5zY3JlZW5SZWFkZXJNZXNzYWdlLFxuICAgICAgICBzaG93Q2xlYXJEYXRlcyA9IF90aGlzJHByb3BzNy5zaG93Q2xlYXJEYXRlcyxcbiAgICAgICAgc2hvd0NhcmV0ID0gX3RoaXMkcHJvcHM3LnNob3dDYXJldCxcbiAgICAgICAgc2hvd0RlZmF1bHRJbnB1dEljb24gPSBfdGhpcyRwcm9wczcuc2hvd0RlZmF1bHRJbnB1dEljb24sXG4gICAgICAgIGlucHV0SWNvblBvc2l0aW9uID0gX3RoaXMkcHJvcHM3LmlucHV0SWNvblBvc2l0aW9uLFxuICAgICAgICBjdXN0b21JbnB1dEljb24gPSBfdGhpcyRwcm9wczcuY3VzdG9tSW5wdXRJY29uLFxuICAgICAgICBjdXN0b21BcnJvd0ljb24gPSBfdGhpcyRwcm9wczcuY3VzdG9tQXJyb3dJY29uLFxuICAgICAgICBjdXN0b21DbG9zZUljb24gPSBfdGhpcyRwcm9wczcuY3VzdG9tQ2xvc2VJY29uLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzNy5kaXNhYmxlZCxcbiAgICAgICAgcmVxdWlyZWQgPSBfdGhpcyRwcm9wczcucmVxdWlyZWQsXG4gICAgICAgIHJlYWRPbmx5ID0gX3RoaXMkcHJvcHM3LnJlYWRPbmx5LFxuICAgICAgICBvcGVuRGlyZWN0aW9uID0gX3RoaXMkcHJvcHM3Lm9wZW5EaXJlY3Rpb24sXG4gICAgICAgIGlzRm9jdXNlZCA9IF90aGlzJHByb3BzNy5pc0ZvY3VzZWQsXG4gICAgICAgIHBocmFzZXMgPSBfdGhpcyRwcm9wczcucGhyYXNlcyxcbiAgICAgICAgb25LZXlEb3duQXJyb3dEb3duID0gX3RoaXMkcHJvcHM3Lm9uS2V5RG93bkFycm93RG93bixcbiAgICAgICAgb25LZXlEb3duUXVlc3Rpb25NYXJrID0gX3RoaXMkcHJvcHM3Lm9uS2V5RG93blF1ZXN0aW9uTWFyayxcbiAgICAgICAgaXNSVEwgPSBfdGhpcyRwcm9wczcuaXNSVEwsXG4gICAgICAgIG5vQm9yZGVyID0gX3RoaXMkcHJvcHM3Lm5vQm9yZGVyLFxuICAgICAgICBibG9jayA9IF90aGlzJHByb3BzNy5ibG9jayxcbiAgICAgICAgc21hbGwgPSBfdGhpcyRwcm9wczcuc21hbGwsXG4gICAgICAgIHJlZ3VsYXIgPSBfdGhpcyRwcm9wczcucmVndWxhcixcbiAgICAgICAgdmVydGljYWxTcGFjaW5nID0gX3RoaXMkcHJvcHM3LnZlcnRpY2FsU3BhY2luZztcbiAgICB2YXIgc3RhcnREYXRlU3RyaW5nID0gdGhpcy5nZXREYXRlU3RyaW5nKHN0YXJ0RGF0ZSk7XG4gICAgdmFyIGVuZERhdGVTdHJpbmcgPSB0aGlzLmdldERhdGVTdHJpbmcoZW5kRGF0ZSk7XG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfRGF0ZVJhbmdlUGlja2VySW5wdXRbXCJkZWZhdWx0XCJdLCB7XG4gICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZVN0cmluZyxcbiAgICAgIHN0YXJ0RGF0ZUlkOiBzdGFydERhdGVJZCxcbiAgICAgIHN0YXJ0RGF0ZVBsYWNlaG9sZGVyVGV4dDogc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0LFxuICAgICAgaXNTdGFydERhdGVGb2N1c2VkOiBpc1N0YXJ0RGF0ZUZvY3VzZWQsXG4gICAgICBzdGFydERhdGVBcmlhTGFiZWw6IHN0YXJ0RGF0ZUFyaWFMYWJlbCxcbiAgICAgIGVuZERhdGU6IGVuZERhdGVTdHJpbmcsXG4gICAgICBlbmREYXRlSWQ6IGVuZERhdGVJZCxcbiAgICAgIGVuZERhdGVQbGFjZWhvbGRlclRleHQ6IGVuZERhdGVQbGFjZWhvbGRlclRleHQsXG4gICAgICBpc0VuZERhdGVGb2N1c2VkOiBpc0VuZERhdGVGb2N1c2VkLFxuICAgICAgZW5kRGF0ZUFyaWFMYWJlbDogZW5kRGF0ZUFyaWFMYWJlbCxcbiAgICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgICAgb3BlbkRpcmVjdGlvbjogb3BlbkRpcmVjdGlvbixcbiAgICAgIHNob3dDYXJldDogc2hvd0NhcmV0LFxuICAgICAgc2hvd0RlZmF1bHRJbnB1dEljb246IHNob3dEZWZhdWx0SW5wdXRJY29uLFxuICAgICAgaW5wdXRJY29uUG9zaXRpb246IGlucHV0SWNvblBvc2l0aW9uLFxuICAgICAgY3VzdG9tSW5wdXRJY29uOiBjdXN0b21JbnB1dEljb24sXG4gICAgICBjdXN0b21BcnJvd0ljb246IGN1c3RvbUFycm93SWNvbixcbiAgICAgIGN1c3RvbUNsb3NlSWNvbjogY3VzdG9tQ2xvc2VJY29uLFxuICAgICAgcGhyYXNlczogcGhyYXNlcyxcbiAgICAgIG9uU3RhcnREYXRlQ2hhbmdlOiB0aGlzLm9uU3RhcnREYXRlQ2hhbmdlLFxuICAgICAgb25TdGFydERhdGVGb2N1czogdGhpcy5vblN0YXJ0RGF0ZUZvY3VzLFxuICAgICAgb25TdGFydERhdGVTaGlmdFRhYjogdGhpcy5vbkNsZWFyRm9jdXMsXG4gICAgICBvbkVuZERhdGVDaGFuZ2U6IHRoaXMub25FbmREYXRlQ2hhbmdlLFxuICAgICAgb25FbmREYXRlRm9jdXM6IHRoaXMub25FbmREYXRlRm9jdXMsXG4gICAgICBzaG93Q2xlYXJEYXRlczogc2hvd0NsZWFyRGF0ZXMsXG4gICAgICBvbkNsZWFyRGF0ZXM6IHRoaXMuY2xlYXJEYXRlcyxcbiAgICAgIHNjcmVlblJlYWRlck1lc3NhZ2U6IHNjcmVlblJlYWRlck1lc3NhZ2UsXG4gICAgICBvbktleURvd25BcnJvd0Rvd246IG9uS2V5RG93bkFycm93RG93bixcbiAgICAgIG9uS2V5RG93blF1ZXN0aW9uTWFyazogb25LZXlEb3duUXVlc3Rpb25NYXJrLFxuICAgICAgaXNSVEw6IGlzUlRMLFxuICAgICAgbm9Cb3JkZXI6IG5vQm9yZGVyLFxuICAgICAgYmxvY2s6IGJsb2NrLFxuICAgICAgc21hbGw6IHNtYWxsLFxuICAgICAgcmVndWxhcjogcmVndWxhcixcbiAgICAgIHZlcnRpY2FsU3BhY2luZzogdmVydGljYWxTcGFjaW5nXG4gICAgfSwgY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBEYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXI7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyO1xuRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wczsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbnZhciBfcmVhY3RXaXRoU3R5bGVzID0gcmVxdWlyZShcInJlYWN0LXdpdGgtc3R5bGVzXCIpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKSk7XG5cbnZhciBfbm9mbGlwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvbm9mbGlwXCIpKTtcblxudmFyIF9PcGVuRGlyZWN0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvT3BlbkRpcmVjdGlvblNoYXBlXCIpKTtcblxudmFyIF9EYXRlSW5wdXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0RhdGVJbnB1dFwiKSk7XG5cbnZhciBfSWNvblBvc2l0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvSWNvblBvc2l0aW9uU2hhcGVcIikpO1xuXG52YXIgX0Rpc2FibGVkU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvRGlzYWJsZWRTaGFwZVwiKSk7XG5cbnZhciBfUmlnaHRBcnJvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUmlnaHRBcnJvd1wiKSk7XG5cbnZhciBfTGVmdEFycm93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9MZWZ0QXJyb3dcIikpO1xuXG52YXIgX0Nsb3NlQnV0dG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DbG9zZUJ1dHRvblwiKSk7XG5cbnZhciBfQ2FsZW5kYXJJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYWxlbmRhckljb25cIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbnZhciBwcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKSgoMCwgX29iamVjdFNwcmVhZDNbXCJkZWZhdWx0XCJdKSh7fSwgX3JlYWN0V2l0aFN0eWxlcy53aXRoU3R5bGVzUHJvcFR5cGVzLCB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBzdGFydERhdGVJZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBzdGFydERhdGVQbGFjZWhvbGRlclRleHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgc3RhcnREYXRlQXJpYUxhYmVsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHNjcmVlblJlYWRlck1lc3NhZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgZW5kRGF0ZUlkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGVuZERhdGVQbGFjZWhvbGRlclRleHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgZW5kRGF0ZUFyaWFMYWJlbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBvblN0YXJ0RGF0ZUZvY3VzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkVuZERhdGVGb2N1czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25TdGFydERhdGVDaGFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uRW5kRGF0ZUNoYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25TdGFydERhdGVTaGlmdFRhYjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25FbmREYXRlVGFiOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkNsZWFyRGF0ZXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uS2V5RG93bkFycm93RG93bjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBzdGFydERhdGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgZW5kRGF0ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBpc1N0YXJ0RGF0ZUZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGlzRW5kRGF0ZUZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHNob3dDbGVhckRhdGVzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBkaXNhYmxlZDogX0Rpc2FibGVkU2hhcGVbXCJkZWZhdWx0XCJdLFxuICByZXF1aXJlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVhZE9ubHk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG9wZW5EaXJlY3Rpb246IF9PcGVuRGlyZWN0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBzaG93Q2FyZXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHNob3dEZWZhdWx0SW5wdXRJY29uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBpbnB1dEljb25Qb3NpdGlvbjogX0ljb25Qb3NpdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgY3VzdG9tSW5wdXRJY29uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBjdXN0b21BcnJvd0ljb246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIGN1c3RvbUNsb3NlSWNvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZSxcbiAgbm9Cb3JkZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGJsb2NrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzbWFsbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVndWxhcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgdmVydGljYWxTcGFjaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgLy8gYWNjZXNzaWJpbGl0eVxuICBpc0ZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIC8vIGRlc2NyaWJlcyBhY3R1YWwgRE9NIGZvY3VzXG4gIC8vIGkxOG5cbiAgcGhyYXNlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc2hhcGUoKDAsIF9nZXRQaHJhc2VQcm9wVHlwZXNbXCJkZWZhdWx0XCJdKShfZGVmYXVsdFBocmFzZXMuRGF0ZVJhbmdlUGlja2VySW5wdXRQaHJhc2VzKSksXG4gIGlzUlRMOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sXG59KSkgOiB7fTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBudWxsLFxuICBzdGFydERhdGVJZDogX2NvbnN0YW50cy5TVEFSVF9EQVRFLFxuICBlbmREYXRlSWQ6IF9jb25zdGFudHMuRU5EX0RBVEUsXG4gIHN0YXJ0RGF0ZVBsYWNlaG9sZGVyVGV4dDogJ1N0YXJ0IERhdGUnLFxuICBlbmREYXRlUGxhY2Vob2xkZXJUZXh0OiAnRW5kIERhdGUnLFxuICBzdGFydERhdGVBcmlhTGFiZWw6IHVuZGVmaW5lZCxcbiAgZW5kRGF0ZUFyaWFMYWJlbDogdW5kZWZpbmVkLFxuICBzY3JlZW5SZWFkZXJNZXNzYWdlOiAnJyxcbiAgb25TdGFydERhdGVGb2N1czogZnVuY3Rpb24gb25TdGFydERhdGVGb2N1cygpIHt9LFxuICBvbkVuZERhdGVGb2N1czogZnVuY3Rpb24gb25FbmREYXRlRm9jdXMoKSB7fSxcbiAgb25TdGFydERhdGVDaGFuZ2U6IGZ1bmN0aW9uIG9uU3RhcnREYXRlQ2hhbmdlKCkge30sXG4gIG9uRW5kRGF0ZUNoYW5nZTogZnVuY3Rpb24gb25FbmREYXRlQ2hhbmdlKCkge30sXG4gIG9uU3RhcnREYXRlU2hpZnRUYWI6IGZ1bmN0aW9uIG9uU3RhcnREYXRlU2hpZnRUYWIoKSB7fSxcbiAgb25FbmREYXRlVGFiOiBmdW5jdGlvbiBvbkVuZERhdGVUYWIoKSB7fSxcbiAgb25DbGVhckRhdGVzOiBmdW5jdGlvbiBvbkNsZWFyRGF0ZXMoKSB7fSxcbiAgb25LZXlEb3duQXJyb3dEb3duOiBmdW5jdGlvbiBvbktleURvd25BcnJvd0Rvd24oKSB7fSxcbiAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiBmdW5jdGlvbiBvbktleURvd25RdWVzdGlvbk1hcmsoKSB7fSxcbiAgc3RhcnREYXRlOiAnJyxcbiAgZW5kRGF0ZTogJycsXG4gIGlzU3RhcnREYXRlRm9jdXNlZDogZmFsc2UsXG4gIGlzRW5kRGF0ZUZvY3VzZWQ6IGZhbHNlLFxuICBzaG93Q2xlYXJEYXRlczogZmFsc2UsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgcmVxdWlyZWQ6IGZhbHNlLFxuICByZWFkT25seTogZmFsc2UsXG4gIG9wZW5EaXJlY3Rpb246IF9jb25zdGFudHMuT1BFTl9ET1dOLFxuICBzaG93Q2FyZXQ6IGZhbHNlLFxuICBzaG93RGVmYXVsdElucHV0SWNvbjogZmFsc2UsXG4gIGlucHV0SWNvblBvc2l0aW9uOiBfY29uc3RhbnRzLklDT05fQkVGT1JFX1BPU0lUSU9OLFxuICBjdXN0b21JbnB1dEljb246IG51bGwsXG4gIGN1c3RvbUFycm93SWNvbjogbnVsbCxcbiAgY3VzdG9tQ2xvc2VJY29uOiBudWxsLFxuICBub0JvcmRlcjogZmFsc2UsXG4gIGJsb2NrOiBmYWxzZSxcbiAgc21hbGw6IGZhbHNlLFxuICByZWd1bGFyOiBmYWxzZSxcbiAgdmVydGljYWxTcGFjaW5nOiB1bmRlZmluZWQsXG4gIC8vIGFjY2Vzc2liaWxpdHlcbiAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgLy8gaTE4blxuICBwaHJhc2VzOiBfZGVmYXVsdFBocmFzZXMuRGF0ZVJhbmdlUGlja2VySW5wdXRQaHJhc2VzLFxuICBpc1JUTDogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIERhdGVSYW5nZVBpY2tlcklucHV0KF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIHN0YXJ0RGF0ZSA9IF9yZWYuc3RhcnREYXRlLFxuICAgICAgc3RhcnREYXRlSWQgPSBfcmVmLnN0YXJ0RGF0ZUlkLFxuICAgICAgc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0ID0gX3JlZi5zdGFydERhdGVQbGFjZWhvbGRlclRleHQsXG4gICAgICBzY3JlZW5SZWFkZXJNZXNzYWdlID0gX3JlZi5zY3JlZW5SZWFkZXJNZXNzYWdlLFxuICAgICAgaXNTdGFydERhdGVGb2N1c2VkID0gX3JlZi5pc1N0YXJ0RGF0ZUZvY3VzZWQsXG4gICAgICBvblN0YXJ0RGF0ZUNoYW5nZSA9IF9yZWYub25TdGFydERhdGVDaGFuZ2UsXG4gICAgICBvblN0YXJ0RGF0ZUZvY3VzID0gX3JlZi5vblN0YXJ0RGF0ZUZvY3VzLFxuICAgICAgb25TdGFydERhdGVTaGlmdFRhYiA9IF9yZWYub25TdGFydERhdGVTaGlmdFRhYixcbiAgICAgIHN0YXJ0RGF0ZUFyaWFMYWJlbCA9IF9yZWYuc3RhcnREYXRlQXJpYUxhYmVsLFxuICAgICAgZW5kRGF0ZSA9IF9yZWYuZW5kRGF0ZSxcbiAgICAgIGVuZERhdGVJZCA9IF9yZWYuZW5kRGF0ZUlkLFxuICAgICAgZW5kRGF0ZVBsYWNlaG9sZGVyVGV4dCA9IF9yZWYuZW5kRGF0ZVBsYWNlaG9sZGVyVGV4dCxcbiAgICAgIGlzRW5kRGF0ZUZvY3VzZWQgPSBfcmVmLmlzRW5kRGF0ZUZvY3VzZWQsXG4gICAgICBvbkVuZERhdGVDaGFuZ2UgPSBfcmVmLm9uRW5kRGF0ZUNoYW5nZSxcbiAgICAgIG9uRW5kRGF0ZUZvY3VzID0gX3JlZi5vbkVuZERhdGVGb2N1cyxcbiAgICAgIG9uRW5kRGF0ZVRhYiA9IF9yZWYub25FbmREYXRlVGFiLFxuICAgICAgZW5kRGF0ZUFyaWFMYWJlbCA9IF9yZWYuZW5kRGF0ZUFyaWFMYWJlbCxcbiAgICAgIG9uS2V5RG93bkFycm93RG93biA9IF9yZWYub25LZXlEb3duQXJyb3dEb3duLFxuICAgICAgb25LZXlEb3duUXVlc3Rpb25NYXJrID0gX3JlZi5vbktleURvd25RdWVzdGlvbk1hcmssXG4gICAgICBvbkNsZWFyRGF0ZXMgPSBfcmVmLm9uQ2xlYXJEYXRlcyxcbiAgICAgIHNob3dDbGVhckRhdGVzID0gX3JlZi5zaG93Q2xlYXJEYXRlcyxcbiAgICAgIGRpc2FibGVkID0gX3JlZi5kaXNhYmxlZCxcbiAgICAgIHJlcXVpcmVkID0gX3JlZi5yZXF1aXJlZCxcbiAgICAgIHJlYWRPbmx5ID0gX3JlZi5yZWFkT25seSxcbiAgICAgIHNob3dDYXJldCA9IF9yZWYuc2hvd0NhcmV0LFxuICAgICAgb3BlbkRpcmVjdGlvbiA9IF9yZWYub3BlbkRpcmVjdGlvbixcbiAgICAgIHNob3dEZWZhdWx0SW5wdXRJY29uID0gX3JlZi5zaG93RGVmYXVsdElucHV0SWNvbixcbiAgICAgIGlucHV0SWNvblBvc2l0aW9uID0gX3JlZi5pbnB1dEljb25Qb3NpdGlvbixcbiAgICAgIGN1c3RvbUlucHV0SWNvbiA9IF9yZWYuY3VzdG9tSW5wdXRJY29uLFxuICAgICAgY3VzdG9tQXJyb3dJY29uID0gX3JlZi5jdXN0b21BcnJvd0ljb24sXG4gICAgICBjdXN0b21DbG9zZUljb24gPSBfcmVmLmN1c3RvbUNsb3NlSWNvbixcbiAgICAgIGlzRm9jdXNlZCA9IF9yZWYuaXNGb2N1c2VkLFxuICAgICAgcGhyYXNlcyA9IF9yZWYucGhyYXNlcyxcbiAgICAgIGlzUlRMID0gX3JlZi5pc1JUTCxcbiAgICAgIG5vQm9yZGVyID0gX3JlZi5ub0JvcmRlcixcbiAgICAgIGJsb2NrID0gX3JlZi5ibG9jayxcbiAgICAgIHZlcnRpY2FsU3BhY2luZyA9IF9yZWYudmVydGljYWxTcGFjaW5nLFxuICAgICAgc21hbGwgPSBfcmVmLnNtYWxsLFxuICAgICAgcmVndWxhciA9IF9yZWYucmVndWxhcixcbiAgICAgIHN0eWxlcyA9IF9yZWYuc3R5bGVzO1xuXG4gIHZhciBjYWxlbmRhckljb24gPSBjdXN0b21JbnB1dEljb24gfHwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9DYWxlbmRhckljb25bXCJkZWZhdWx0XCJdLCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dF9jYWxlbmRhckljb25fc3ZnKSk7XG5cbiAgdmFyIGFycm93SWNvbiA9IGN1c3RvbUFycm93SWNvbiB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX1JpZ2h0QXJyb3dbXCJkZWZhdWx0XCJdLCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dF9hcnJvd19zdmcpKTtcblxuICBpZiAoaXNSVEwpIGFycm93SWNvbiA9IF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfTGVmdEFycm93W1wiZGVmYXVsdFwiXSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF0ZVJhbmdlUGlja2VySW5wdXRfYXJyb3dfc3ZnKSk7XG4gIGlmIChzbWFsbCkgYXJyb3dJY29uID0gJy0nO1xuXG4gIHZhciBjbG9zZUljb24gPSBjdXN0b21DbG9zZUljb24gfHwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9DbG9zZUJ1dHRvbltcImRlZmF1bHRcIl0sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXNfc3ZnLCBzbWFsbCAmJiBzdHlsZXMuRGF0ZVJhbmdlUGlja2VySW5wdXRfY2xlYXJEYXRlc19zdmdfX3NtYWxsKSk7XG5cbiAgdmFyIHNjcmVlblJlYWRlclN0YXJ0RGF0ZVRleHQgPSBzY3JlZW5SZWFkZXJNZXNzYWdlIHx8IHBocmFzZXMua2V5Ym9hcmRGb3J3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9ucztcbiAgdmFyIHNjcmVlblJlYWRlckVuZERhdGVUZXh0ID0gc2NyZWVuUmVhZGVyTWVzc2FnZSB8fCBwaHJhc2VzLmtleWJvYXJkQmFja3dhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zO1xuXG4gIHZhciBpbnB1dEljb24gPSAoc2hvd0RlZmF1bHRJbnB1dEljb24gfHwgY3VzdG9tSW5wdXRJY29uICE9PSBudWxsKSAmJiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dF9jYWxlbmRhckljb24pLCB7XG4gICAgdHlwZTogXCJidXR0b25cIixcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgXCJhcmlhLWxhYmVsXCI6IHBocmFzZXMuZm9jdXNTdGFydERhdGUsXG4gICAgb25DbGljazogb25LZXlEb3duQXJyb3dEb3duXG4gIH0pLCBjYWxlbmRhckljb24pO1xuXG4gIHZhciBzdGFydERhdGVEaXNhYmxlZCA9IGRpc2FibGVkID09PSBfY29uc3RhbnRzLlNUQVJUX0RBVEUgfHwgZGlzYWJsZWQgPT09IHRydWU7XG4gIHZhciBlbmREYXRlRGlzYWJsZWQgPSBkaXNhYmxlZCA9PT0gX2NvbnN0YW50cy5FTkRfREFURSB8fCBkaXNhYmxlZCA9PT0gdHJ1ZTtcbiAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dCwgZGlzYWJsZWQgJiYgc3R5bGVzLkRhdGVSYW5nZVBpY2tlcklucHV0X19kaXNhYmxlZCwgaXNSVEwgJiYgc3R5bGVzLkRhdGVSYW5nZVBpY2tlcklucHV0X19ydGwsICFub0JvcmRlciAmJiBzdHlsZXMuRGF0ZVJhbmdlUGlja2VySW5wdXRfX3dpdGhCb3JkZXIsIGJsb2NrICYmIHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dF9fYmxvY2ssIHNob3dDbGVhckRhdGVzICYmIHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dF9fc2hvd0NsZWFyRGF0ZXMpLCBpbnB1dEljb25Qb3NpdGlvbiA9PT0gX2NvbnN0YW50cy5JQ09OX0JFRk9SRV9QT1NJVElPTiAmJiBpbnB1dEljb24sIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfRGF0ZUlucHV0W1wiZGVmYXVsdFwiXSwge1xuICAgIGlkOiBzdGFydERhdGVJZCxcbiAgICBwbGFjZWhvbGRlcjogc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0LFxuICAgIGFyaWFMYWJlbDogc3RhcnREYXRlQXJpYUxhYmVsLFxuICAgIGRpc3BsYXlWYWx1ZTogc3RhcnREYXRlLFxuICAgIHNjcmVlblJlYWRlck1lc3NhZ2U6IHNjcmVlblJlYWRlclN0YXJ0RGF0ZVRleHQsXG4gICAgZm9jdXNlZDogaXNTdGFydERhdGVGb2N1c2VkLFxuICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkLFxuICAgIGRpc2FibGVkOiBzdGFydERhdGVEaXNhYmxlZCxcbiAgICByZXF1aXJlZDogcmVxdWlyZWQsXG4gICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgIHNob3dDYXJldDogc2hvd0NhcmV0LFxuICAgIG9wZW5EaXJlY3Rpb246IG9wZW5EaXJlY3Rpb24sXG4gICAgb25DaGFuZ2U6IG9uU3RhcnREYXRlQ2hhbmdlLFxuICAgIG9uRm9jdXM6IG9uU3RhcnREYXRlRm9jdXMsXG4gICAgb25LZXlEb3duU2hpZnRUYWI6IG9uU3RhcnREYXRlU2hpZnRUYWIsXG4gICAgb25LZXlEb3duQXJyb3dEb3duOiBvbktleURvd25BcnJvd0Rvd24sXG4gICAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiBvbktleURvd25RdWVzdGlvbk1hcmssXG4gICAgdmVydGljYWxTcGFjaW5nOiB2ZXJ0aWNhbFNwYWNpbmcsXG4gICAgc21hbGw6IHNtYWxsLFxuICAgIHJlZ3VsYXI6IHJlZ3VsYXJcbiAgfSksIGNoaWxkcmVuLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dF9hcnJvdyksIHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuICAgIHJvbGU6IFwicHJlc2VudGF0aW9uXCJcbiAgfSksIGFycm93SWNvbiksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfRGF0ZUlucHV0W1wiZGVmYXVsdFwiXSwge1xuICAgIGlkOiBlbmREYXRlSWQsXG4gICAgcGxhY2Vob2xkZXI6IGVuZERhdGVQbGFjZWhvbGRlclRleHQsXG4gICAgYXJpYUxhYmVsOiBlbmREYXRlQXJpYUxhYmVsLFxuICAgIGRpc3BsYXlWYWx1ZTogZW5kRGF0ZSxcbiAgICBzY3JlZW5SZWFkZXJNZXNzYWdlOiBzY3JlZW5SZWFkZXJFbmREYXRlVGV4dCxcbiAgICBmb2N1c2VkOiBpc0VuZERhdGVGb2N1c2VkLFxuICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkLFxuICAgIGRpc2FibGVkOiBlbmREYXRlRGlzYWJsZWQsXG4gICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICBzaG93Q2FyZXQ6IHNob3dDYXJldCxcbiAgICBvcGVuRGlyZWN0aW9uOiBvcGVuRGlyZWN0aW9uLFxuICAgIG9uQ2hhbmdlOiBvbkVuZERhdGVDaGFuZ2UsXG4gICAgb25Gb2N1czogb25FbmREYXRlRm9jdXMsXG4gICAgb25LZXlEb3duQXJyb3dEb3duOiBvbktleURvd25BcnJvd0Rvd24sXG4gICAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiBvbktleURvd25RdWVzdGlvbk1hcmssXG4gICAgb25LZXlEb3duVGFiOiBvbkVuZERhdGVUYWIsXG4gICAgdmVydGljYWxTcGFjaW5nOiB2ZXJ0aWNhbFNwYWNpbmcsXG4gICAgc21hbGw6IHNtYWxsLFxuICAgIHJlZ3VsYXI6IHJlZ3VsYXJcbiAgfSksIHNob3dDbGVhckRhdGVzICYmIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe1xuICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgXCJhcmlhLWxhYmVsXCI6IHBocmFzZXMuY2xlYXJEYXRlc1xuICB9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dF9jbGVhckRhdGVzLCBzbWFsbCAmJiBzdHlsZXMuRGF0ZVJhbmdlUGlja2VySW5wdXRfY2xlYXJEYXRlc19fc21hbGwsICFjdXN0b21DbG9zZUljb24gJiYgc3R5bGVzLkRhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXNfZGVmYXVsdCwgIShzdGFydERhdGUgfHwgZW5kRGF0ZSkgJiYgc3R5bGVzLkRhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXNfX2hpZGUpLCB7XG4gICAgb25DbGljazogb25DbGVhckRhdGVzLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICB9KSwgY2xvc2VJY29uKSwgaW5wdXRJY29uUG9zaXRpb24gPT09IF9jb25zdGFudHMuSUNPTl9BRlRFUl9QT1NJVElPTiAmJiBpbnB1dEljb24pO1xufVxuXG5EYXRlUmFuZ2VQaWNrZXJJbnB1dC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBwcm9wVHlwZXMgOiB7fTtcbkRhdGVSYW5nZVBpY2tlcklucHV0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlcykoZnVuY3Rpb24gKF9yZWYyKSB7XG4gIHZhciBfcmVmMiRyZWFjdERhdGVzID0gX3JlZjIucmVhY3REYXRlcyxcbiAgICAgIGJvcmRlciA9IF9yZWYyJHJlYWN0RGF0ZXMuYm9yZGVyLFxuICAgICAgY29sb3IgPSBfcmVmMiRyZWFjdERhdGVzLmNvbG9yLFxuICAgICAgc2l6aW5nID0gX3JlZjIkcmVhY3REYXRlcy5zaXppbmc7XG4gIHJldHVybiB7XG4gICAgRGF0ZVJhbmdlUGlja2VySW5wdXQ6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IuYmFja2dyb3VuZCxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgfSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJJbnB1dF9fZGlzYWJsZWQ6IHtcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmRpc2FibGVkXG4gICAgfSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJJbnB1dF9fd2l0aEJvcmRlcjoge1xuICAgICAgYm9yZGVyQ29sb3I6IGNvbG9yLmJvcmRlcixcbiAgICAgIGJvcmRlcldpZHRoOiBib3JkZXIucGlja2VySW5wdXQuYm9yZGVyV2lkdGgsXG4gICAgICBib3JkZXJTdHlsZTogYm9yZGVyLnBpY2tlcklucHV0LmJvcmRlclN0eWxlLFxuICAgICAgYm9yZGVyUmFkaXVzOiBib3JkZXIucGlja2VySW5wdXQuYm9yZGVyUmFkaXVzXG4gICAgfSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJJbnB1dF9fcnRsOiB7XG4gICAgICBkaXJlY3Rpb246ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoJ3J0bCcpXG4gICAgfSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJJbnB1dF9fYmxvY2s6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcklucHV0X19zaG93Q2xlYXJEYXRlczoge1xuICAgICAgcGFkZGluZ1JpZ2h0OiAzMCAvLyBUT0RPOiBzaG91bGQgYmUgbm9mbGlwIHdyYXBwZWQgYW5kIGhhbmRsZWQgYnkgYW4gaXNSVEwgcHJvcFxuXG4gICAgfSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJJbnB1dF9hcnJvdzoge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgIGNvbG9yOiBjb2xvci50ZXh0XG4gICAgfSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJJbnB1dF9hcnJvd19zdmc6IHtcbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgZmlsbDogY29sb3IudGV4dCxcbiAgICAgIGhlaWdodDogc2l6aW5nLmFycm93V2lkdGgsXG4gICAgICB3aWR0aDogc2l6aW5nLmFycm93V2lkdGhcbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXM6IHtcbiAgICAgIGJhY2tncm91bmQ6ICdub25lJyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICBmb250OiAnaW5oZXJpdCcsXG4gICAgICBsaW5lSGVpZ2h0OiAnbm9ybWFsJyxcbiAgICAgIG92ZXJmbG93OiAndmlzaWJsZScsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgbWFyZ2luOiAnMCAxMHB4IDAgNXB4JyxcbiAgICAgIC8vIFRPRE86IHNob3VsZCBiZSBub2ZsaXAgd3JhcHBlZCBhbmQgaGFuZGxlZCBieSBhbiBpc1JUTCBwcm9wXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgLy8gVE9ETzogc2hvdWxkIGJlIG5vZmxpcCB3cmFwcGVkIGFuZCBoYW5kbGVkIGJ5IGFuIGlzUlRMIHByb3BcbiAgICAgIHRvcDogJzUwJScsXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJ1xuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VySW5wdXRfY2xlYXJEYXRlc19fc21hbGw6IHtcbiAgICAgIHBhZGRpbmc6IDZcbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXNfZGVmYXVsdDoge1xuICAgICAgJzpmb2N1cyc6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3IuY29yZS5ib3JkZXIsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJSdcbiAgICAgIH0sXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5jb3JlLmJvcmRlcixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJ1xuICAgICAgfVxuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VySW5wdXRfY2xlYXJEYXRlc19faGlkZToge1xuICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbidcbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXNfc3ZnOiB7XG4gICAgICBmaWxsOiBjb2xvci5jb3JlLmdyYXlMaWdodCxcbiAgICAgIGhlaWdodDogMTIsXG4gICAgICB3aWR0aDogMTUsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJ1xuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VySW5wdXRfY2xlYXJEYXRlc19zdmdfX3NtYWxsOiB7XG4gICAgICBoZWlnaHQ6IDlcbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcklucHV0X2NhbGVuZGFySWNvbjoge1xuICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICAgIGxpbmVIZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJyxcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgbWFyZ2luOiAnMCA1cHggMCAxMHB4JyAvLyBUT0RPOiBzaG91bGQgYmUgbm9mbGlwIHdyYXBwZWQgYW5kIGhhbmRsZWQgYnkgYW4gaXNSVEwgcHJvcFxuXG4gICAgfSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJJbnB1dF9jYWxlbmRhckljb25fc3ZnOiB7XG4gICAgICBmaWxsOiBjb2xvci5jb3JlLmdyYXlMaWdodCxcbiAgICAgIGhlaWdodDogMTUsXG4gICAgICB3aWR0aDogMTQsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJ1xuICAgIH1cbiAgfTtcbn0sIHtcbiAgcHVyZUNvbXBvbmVudDogdHlwZW9mIF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAhPT0gJ3VuZGVmaW5lZCdcbn0pKERhdGVSYW5nZVBpY2tlcklucHV0KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9lbnp5bWVTaGFsbG93RXF1YWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJlbnp5bWUtc2hhbGxvdy1lcXVhbFwiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG52YXIgX3JlYWN0V2l0aFN0eWxlcyA9IHJlcXVpcmUoXCJyZWFjdC13aXRoLXN0eWxlc1wiKTtcblxudmFyIF90aHJvdHRsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImxvZGFzaC90aHJvdHRsZVwiKSk7XG5cbnZhciBfaXNUb3VjaERldmljZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlzLXRvdWNoLWRldmljZVwiKSk7XG5cbnZhciBfbm9mbGlwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvbm9mbGlwXCIpKTtcblxudmFyIF9nZXRJbnB1dEhlaWdodCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldElucHV0SGVpZ2h0XCIpKTtcblxudmFyIF9PcGVuRGlyZWN0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvT3BlbkRpcmVjdGlvblNoYXBlXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG52YXIgRkFOR19QQVRIX1RPUCA9IFwiTTAsXCIuY29uY2F0KF9jb25zdGFudHMuRkFOR19IRUlHSFRfUFgsIFwiIFwiKS5jb25jYXQoX2NvbnN0YW50cy5GQU5HX1dJRFRIX1BYLCBcIixcIikuY29uY2F0KF9jb25zdGFudHMuRkFOR19IRUlHSFRfUFgsIFwiIFwiKS5jb25jYXQoX2NvbnN0YW50cy5GQU5HX1dJRFRIX1BYIC8gMiwgXCIsMHpcIik7XG52YXIgRkFOR19TVFJPS0VfVE9QID0gXCJNMCxcIi5jb25jYXQoX2NvbnN0YW50cy5GQU5HX0hFSUdIVF9QWCwgXCIgXCIpLmNvbmNhdChfY29uc3RhbnRzLkZBTkdfV0lEVEhfUFggLyAyLCBcIiwwIFwiKS5jb25jYXQoX2NvbnN0YW50cy5GQU5HX1dJRFRIX1BYLCBcIixcIikuY29uY2F0KF9jb25zdGFudHMuRkFOR19IRUlHSFRfUFgpO1xudmFyIEZBTkdfUEFUSF9CT1RUT00gPSBcIk0wLDAgXCIuY29uY2F0KF9jb25zdGFudHMuRkFOR19XSURUSF9QWCwgXCIsMCBcIikuY29uY2F0KF9jb25zdGFudHMuRkFOR19XSURUSF9QWCAvIDIsIFwiLFwiKS5jb25jYXQoX2NvbnN0YW50cy5GQU5HX0hFSUdIVF9QWCwgXCJ6XCIpO1xudmFyIEZBTkdfU1RST0tFX0JPVFRPTSA9IFwiTTAsMCBcIi5jb25jYXQoX2NvbnN0YW50cy5GQU5HX1dJRFRIX1BYIC8gMiwgXCIsXCIpLmNvbmNhdChfY29uc3RhbnRzLkZBTkdfSEVJR0hUX1BYLCBcIiBcIikuY29uY2F0KF9jb25zdGFudHMuRkFOR19XSURUSF9QWCwgXCIsMFwiKTtcbnZhciBwcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKSgoMCwgX29iamVjdFNwcmVhZDNbXCJkZWZhdWx0XCJdKSh7fSwgX3JlYWN0V2l0aFN0eWxlcy53aXRoU3R5bGVzUHJvcFR5cGVzLCB7XG4gIGlkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcGxhY2Vob2xkZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgZGlzcGxheVZhbHVlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGFyaWFMYWJlbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBzY3JlZW5SZWFkZXJNZXNzYWdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICByZXF1aXJlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVhZE9ubHk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG9wZW5EaXJlY3Rpb246IF9PcGVuRGlyZWN0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBzaG93Q2FyZXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHZlcnRpY2FsU3BhY2luZzogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIHNtYWxsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBibG9jazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVndWxhcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uRm9jdXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uS2V5RG93blNoaWZ0VGFiOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbktleURvd25UYWI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uS2V5RG93bkFycm93RG93bjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICAvLyBhY2Nlc3NpYmlsaXR5XG4gIGlzRm9jdXNlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCAvLyBkZXNjcmliZXMgYWN0dWFsIERPTSBmb2N1c1xuXG59KSkgOiB7fTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHBsYWNlaG9sZGVyOiAnU2VsZWN0IERhdGUnLFxuICBkaXNwbGF5VmFsdWU6ICcnLFxuICBhcmlhTGFiZWw6IHVuZGVmaW5lZCxcbiAgc2NyZWVuUmVhZGVyTWVzc2FnZTogJycsXG4gIGZvY3VzZWQ6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHJlcXVpcmVkOiBmYWxzZSxcbiAgcmVhZE9ubHk6IG51bGwsXG4gIG9wZW5EaXJlY3Rpb246IF9jb25zdGFudHMuT1BFTl9ET1dOLFxuICBzaG93Q2FyZXQ6IGZhbHNlLFxuICB2ZXJ0aWNhbFNwYWNpbmc6IF9jb25zdGFudHMuREVGQVVMVF9WRVJUSUNBTF9TUEFDSU5HLFxuICBzbWFsbDogZmFsc2UsXG4gIGJsb2NrOiBmYWxzZSxcbiAgcmVndWxhcjogZmFsc2UsXG4gIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSgpIHt9LFxuICBvbkZvY3VzOiBmdW5jdGlvbiBvbkZvY3VzKCkge30sXG4gIG9uS2V5RG93blNoaWZ0VGFiOiBmdW5jdGlvbiBvbktleURvd25TaGlmdFRhYigpIHt9LFxuICBvbktleURvd25UYWI6IGZ1bmN0aW9uIG9uS2V5RG93blRhYigpIHt9LFxuICBvbktleURvd25BcnJvd0Rvd246IGZ1bmN0aW9uIG9uS2V5RG93bkFycm93RG93bigpIHt9LFxuICBvbktleURvd25RdWVzdGlvbk1hcms6IGZ1bmN0aW9uIG9uS2V5RG93blF1ZXN0aW9uTWFyaygpIHt9LFxuICAvLyBhY2Nlc3NpYmlsaXR5XG4gIGlzRm9jdXNlZDogZmFsc2Vcbn07XG5cbnZhciBEYXRlSW5wdXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9yZWYpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMltcImRlZmF1bHRcIl0pKERhdGVJbnB1dCwgX3JlZik7XG4gIHZhciBfcHJvdG8gPSBEYXRlSW5wdXQucHJvdG90eXBlO1xuXG4gIF9wcm90b1shX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICYmIFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCJdID0gZnVuY3Rpb24gKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgcmV0dXJuICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKTtcbiAgfTtcblxuICBmdW5jdGlvbiBEYXRlSW5wdXQocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9yZWYuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRhdGVTdHJpbmc6ICcnLFxuICAgICAgaXNUb3VjaERldmljZTogZmFsc2VcbiAgICB9O1xuICAgIF90aGlzLm9uQ2hhbmdlID0gX3RoaXMub25DaGFuZ2UuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uS2V5RG93biA9IF90aGlzLm9uS2V5RG93bi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMuc2V0SW5wdXRSZWYgPSBfdGhpcy5zZXRJbnB1dFJlZi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMudGhyb3R0bGVkS2V5RG93biA9ICgwLCBfdGhyb3R0bGVbXCJkZWZhdWx0XCJdKShfdGhpcy5vbkZpbmFsS2V5RG93biwgMzAwLCB7XG4gICAgICB0cmFpbGluZzogZmFsc2VcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzVG91Y2hEZXZpY2U6ICgwLCBfaXNUb3VjaERldmljZVtcImRlZmF1bHRcIl0pKClcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdmFyIGRhdGVTdHJpbmcgPSB0aGlzLnN0YXRlLmRhdGVTdHJpbmc7XG5cbiAgICBpZiAoZGF0ZVN0cmluZyAmJiBuZXh0UHJvcHMuZGlzcGxheVZhbHVlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGF0ZVN0cmluZzogJydcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGZvY3VzZWQgPSBfdGhpcyRwcm9wcy5mb2N1c2VkLFxuICAgICAgICBpc0ZvY3VzZWQgPSBfdGhpcyRwcm9wcy5pc0ZvY3VzZWQ7XG4gICAgaWYgKHByZXZQcm9wcy5mb2N1c2VkID09PSBmb2N1c2VkICYmIHByZXZQcm9wcy5pc0ZvY3VzZWQgPT09IGlzRm9jdXNlZCkgcmV0dXJuO1xuXG4gICAgaWYgKGZvY3VzZWQgJiYgaXNGb2N1c2VkKSB7XG4gICAgICB0aGlzLmlucHV0UmVmLmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbkNoYW5nZSA9IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25DaGFuZ2UgPSBfdGhpcyRwcm9wczIub25DaGFuZ2UsXG4gICAgICAgIG9uS2V5RG93blF1ZXN0aW9uTWFyayA9IF90aGlzJHByb3BzMi5vbktleURvd25RdWVzdGlvbk1hcms7XG4gICAgdmFyIGRhdGVTdHJpbmcgPSBlLnRhcmdldC52YWx1ZTsgLy8gSW4gU2FmYXJpLCBvbktleURvd24gZG9lcyBub3QgY29uc2lzdGVudGx5IGZpcmUgYWhlYWQgb2Ygb25DaGFuZ2UuIEFzIGEgcmVzdWx0LCB3ZSBuZWVkIHRvXG4gICAgLy8gc3BlY2lhbCBjYXNlIHRoZSBgP2Aga2V5IHNvIHRoYXQgaXQgYWx3YXlzIHRyaWdnZXJzIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFjaywgaW5zdGVhZCBvZlxuICAgIC8vIG1vZGlmeWluZyB0aGUgaW5wdXQgdmFsdWVcblxuICAgIGlmIChkYXRlU3RyaW5nW2RhdGVTdHJpbmcubGVuZ3RoIC0gMV0gPT09ICc/Jykge1xuICAgICAgb25LZXlEb3duUXVlc3Rpb25NYXJrKGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGF0ZVN0cmluZzogZGF0ZVN0cmluZ1xuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gb25DaGFuZ2UoZGF0ZVN0cmluZyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uS2V5RG93biA9IGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGlmICghX2NvbnN0YW50cy5NT0RJRklFUl9LRVlfTkFNRVMuaGFzKGUua2V5KSkge1xuICAgICAgdGhpcy50aHJvdHRsZWRLZXlEb3duKGUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25GaW5hbEtleURvd24gPSBmdW5jdGlvbiBvbkZpbmFsS2V5RG93bihlKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uS2V5RG93blNoaWZ0VGFiID0gX3RoaXMkcHJvcHMzLm9uS2V5RG93blNoaWZ0VGFiLFxuICAgICAgICBvbktleURvd25UYWIgPSBfdGhpcyRwcm9wczMub25LZXlEb3duVGFiLFxuICAgICAgICBvbktleURvd25BcnJvd0Rvd24gPSBfdGhpcyRwcm9wczMub25LZXlEb3duQXJyb3dEb3duLFxuICAgICAgICBvbktleURvd25RdWVzdGlvbk1hcmsgPSBfdGhpcyRwcm9wczMub25LZXlEb3duUXVlc3Rpb25NYXJrO1xuICAgIHZhciBrZXkgPSBlLmtleTtcblxuICAgIGlmIChrZXkgPT09ICdUYWInKSB7XG4gICAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICBvbktleURvd25TaGlmdFRhYihlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uS2V5RG93blRhYihlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0Fycm93RG93bicpIHtcbiAgICAgIG9uS2V5RG93bkFycm93RG93bihlKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJz8nKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBvbktleURvd25RdWVzdGlvbk1hcmsoZSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zZXRJbnB1dFJlZiA9IGZ1bmN0aW9uIHNldElucHV0UmVmKHJlZikge1xuICAgIHRoaXMuaW5wdXRSZWYgPSByZWY7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICBkYXRlU3RyaW5nID0gX3RoaXMkc3RhdGUuZGF0ZVN0cmluZyxcbiAgICAgICAgaXNUb3VjaCA9IF90aGlzJHN0YXRlLmlzVG91Y2hEZXZpY2U7XG4gICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlkID0gX3RoaXMkcHJvcHM0LmlkLFxuICAgICAgICBwbGFjZWhvbGRlciA9IF90aGlzJHByb3BzNC5wbGFjZWhvbGRlcixcbiAgICAgICAgYXJpYUxhYmVsID0gX3RoaXMkcHJvcHM0LmFyaWFMYWJlbCxcbiAgICAgICAgZGlzcGxheVZhbHVlID0gX3RoaXMkcHJvcHM0LmRpc3BsYXlWYWx1ZSxcbiAgICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZSA9IF90aGlzJHByb3BzNC5zY3JlZW5SZWFkZXJNZXNzYWdlLFxuICAgICAgICBmb2N1c2VkID0gX3RoaXMkcHJvcHM0LmZvY3VzZWQsXG4gICAgICAgIHNob3dDYXJldCA9IF90aGlzJHByb3BzNC5zaG93Q2FyZXQsXG4gICAgICAgIG9uRm9jdXMgPSBfdGhpcyRwcm9wczQub25Gb2N1cyxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczQuZGlzYWJsZWQsXG4gICAgICAgIHJlcXVpcmVkID0gX3RoaXMkcHJvcHM0LnJlcXVpcmVkLFxuICAgICAgICByZWFkT25seSA9IF90aGlzJHByb3BzNC5yZWFkT25seSxcbiAgICAgICAgb3BlbkRpcmVjdGlvbiA9IF90aGlzJHByb3BzNC5vcGVuRGlyZWN0aW9uLFxuICAgICAgICB2ZXJ0aWNhbFNwYWNpbmcgPSBfdGhpcyRwcm9wczQudmVydGljYWxTcGFjaW5nLFxuICAgICAgICBzbWFsbCA9IF90aGlzJHByb3BzNC5zbWFsbCxcbiAgICAgICAgcmVndWxhciA9IF90aGlzJHByb3BzNC5yZWd1bGFyLFxuICAgICAgICBibG9jayA9IF90aGlzJHByb3BzNC5ibG9jayxcbiAgICAgICAgc3R5bGVzID0gX3RoaXMkcHJvcHM0LnN0eWxlcyxcbiAgICAgICAgcmVhY3REYXRlcyA9IF90aGlzJHByb3BzNC50aGVtZS5yZWFjdERhdGVzO1xuICAgIHZhciB2YWx1ZSA9IGRhdGVTdHJpbmcgfHwgZGlzcGxheVZhbHVlIHx8ICcnO1xuICAgIHZhciBzY3JlZW5SZWFkZXJNZXNzYWdlSWQgPSBcIkRhdGVJbnB1dF9fc2NyZWVuLXJlYWRlci1tZXNzYWdlLVwiLmNvbmNhdChpZCk7XG4gICAgdmFyIHdpdGhGYW5nID0gc2hvd0NhcmV0ICYmIGZvY3VzZWQ7XG4gICAgdmFyIGlucHV0SGVpZ2h0ID0gKDAsIF9nZXRJbnB1dEhlaWdodFtcImRlZmF1bHRcIl0pKHJlYWN0RGF0ZXMsIHNtYWxsKTtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRhdGVJbnB1dCwgc21hbGwgJiYgc3R5bGVzLkRhdGVJbnB1dF9fc21hbGwsIGJsb2NrICYmIHN0eWxlcy5EYXRlSW5wdXRfX2Jsb2NrLCB3aXRoRmFuZyAmJiBzdHlsZXMuRGF0ZUlucHV0X193aXRoRmFuZywgZGlzYWJsZWQgJiYgc3R5bGVzLkRhdGVJbnB1dF9fZGlzYWJsZWQsIHdpdGhGYW5nICYmIG9wZW5EaXJlY3Rpb24gPT09IF9jb25zdGFudHMuT1BFTl9ET1dOICYmIHN0eWxlcy5EYXRlSW5wdXRfX29wZW5Eb3duLCB3aXRoRmFuZyAmJiBvcGVuRGlyZWN0aW9uID09PSBfY29uc3RhbnRzLk9QRU5fVVAgJiYgc3R5bGVzLkRhdGVJbnB1dF9fb3BlblVwKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXRlSW5wdXRfaW5wdXQsIHNtYWxsICYmIHN0eWxlcy5EYXRlSW5wdXRfaW5wdXRfX3NtYWxsLCByZWd1bGFyICYmIHN0eWxlcy5EYXRlSW5wdXRfaW5wdXRfX3JlZ3VsYXIsIHJlYWRPbmx5ICYmIHN0eWxlcy5EYXRlSW5wdXRfaW5wdXRfX3JlYWRPbmx5LCBmb2N1c2VkICYmIHN0eWxlcy5EYXRlSW5wdXRfaW5wdXRfX2ZvY3VzZWQsIGRpc2FibGVkICYmIHN0eWxlcy5EYXRlSW5wdXRfaW5wdXRfX2Rpc2FibGVkKSwge1xuICAgICAgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbCA9PT0gdW5kZWZpbmVkID8gcGxhY2Vob2xkZXIgOiBhcmlhTGFiZWwsXG4gICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5hbWU6IGlkLFxuICAgICAgcmVmOiB0aGlzLnNldElucHV0UmVmLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgb25DaGFuZ2U6IHRoaXMub25DaGFuZ2UsXG4gICAgICBvbktleURvd246IHRoaXMub25LZXlEb3duLFxuICAgICAgb25Gb2N1czogb25Gb2N1cyxcbiAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgIGF1dG9Db21wbGV0ZTogXCJvZmZcIixcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIHJlYWRPbmx5OiB0eXBlb2YgcmVhZE9ubHkgPT09ICdib29sZWFuJyA/IHJlYWRPbmx5IDogaXNUb3VjaCxcbiAgICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBzY3JlZW5SZWFkZXJNZXNzYWdlICYmIHNjcmVlblJlYWRlck1lc3NhZ2VJZFxuICAgIH0pKSwgd2l0aEZhbmcgJiYgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgICByb2xlOiBcInByZXNlbnRhdGlvblwiLFxuICAgICAgZm9jdXNhYmxlOiBcImZhbHNlXCJcbiAgICB9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXRlSW5wdXRfZmFuZywgb3BlbkRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5PUEVOX0RPV04gJiYge1xuICAgICAgdG9wOiBpbnB1dEhlaWdodCArIHZlcnRpY2FsU3BhY2luZyAtIF9jb25zdGFudHMuRkFOR19IRUlHSFRfUFggLSAxXG4gICAgfSwgb3BlbkRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5PUEVOX1VQICYmIHtcbiAgICAgIGJvdHRvbTogaW5wdXRIZWlnaHQgKyB2ZXJ0aWNhbFNwYWNpbmcgLSBfY29uc3RhbnRzLkZBTkdfSEVJR0hUX1BYIC0gMVxuICAgIH0pKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRhdGVJbnB1dF9mYW5nU2hhcGUpLCB7XG4gICAgICBkOiBvcGVuRGlyZWN0aW9uID09PSBfY29uc3RhbnRzLk9QRU5fRE9XTiA/IEZBTkdfUEFUSF9UT1AgOiBGQU5HX1BBVEhfQk9UVE9NXG4gICAgfSkpLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF0ZUlucHV0X2ZhbmdTdHJva2UpLCB7XG4gICAgICBkOiBvcGVuRGlyZWN0aW9uID09PSBfY29uc3RhbnRzLk9QRU5fRE9XTiA/IEZBTkdfU1RST0tFX1RPUCA6IEZBTkdfU1RST0tFX0JPVFRPTVxuICAgIH0pKSksIHNjcmVlblJlYWRlck1lc3NhZ2UgJiYgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwicFwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRhdGVJbnB1dF9zY3JlZW5SZWFkZXJNZXNzYWdlKSwge1xuICAgICAgaWQ6IHNjcmVlblJlYWRlck1lc3NhZ2VJZFxuICAgIH0pLCBzY3JlZW5SZWFkZXJNZXNzYWdlKSk7XG4gIH07XG5cbiAgcmV0dXJuIERhdGVJbnB1dDtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuRGF0ZUlucHV0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuRGF0ZUlucHV0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlcykoZnVuY3Rpb24gKF9yZWYyKSB7XG4gIHZhciBfcmVmMiRyZWFjdERhdGVzID0gX3JlZjIucmVhY3REYXRlcyxcbiAgICAgIGJvcmRlciA9IF9yZWYyJHJlYWN0RGF0ZXMuYm9yZGVyLFxuICAgICAgY29sb3IgPSBfcmVmMiRyZWFjdERhdGVzLmNvbG9yLFxuICAgICAgc2l6aW5nID0gX3JlZjIkcmVhY3REYXRlcy5zaXppbmcsXG4gICAgICBzcGFjaW5nID0gX3JlZjIkcmVhY3REYXRlcy5zcGFjaW5nLFxuICAgICAgZm9udCA9IF9yZWYyJHJlYWN0RGF0ZXMuZm9udCxcbiAgICAgIHpJbmRleCA9IF9yZWYyJHJlYWN0RGF0ZXMuekluZGV4O1xuICByZXR1cm4ge1xuICAgIERhdGVJbnB1dDoge1xuICAgICAgbWFyZ2luOiAwLFxuICAgICAgcGFkZGluZzogc3BhY2luZy5pbnB1dFBhZGRpbmcsXG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5iYWNrZ3JvdW5kLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIHdpZHRoOiBzaXppbmcuaW5wdXRXaWR0aCxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnXG4gICAgfSxcbiAgICBEYXRlSW5wdXRfX3NtYWxsOiB7XG4gICAgICB3aWR0aDogc2l6aW5nLmlucHV0V2lkdGhfc21hbGxcbiAgICB9LFxuICAgIERhdGVJbnB1dF9fYmxvY2s6IHtcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuICAgIERhdGVJbnB1dF9fZGlzYWJsZWQ6IHtcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmRpc2FibGVkLFxuICAgICAgY29sb3I6IGNvbG9yLnRleHREaXNhYmxlZFxuICAgIH0sXG4gICAgRGF0ZUlucHV0X2lucHV0OiB7XG4gICAgICBmb250V2VpZ2h0OiAyMDAsXG4gICAgICBmb250U2l6ZTogZm9udC5pbnB1dC5zaXplLFxuICAgICAgbGluZUhlaWdodDogZm9udC5pbnB1dC5saW5lSGVpZ2h0LFxuICAgICAgY29sb3I6IGNvbG9yLnRleHQsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLmJhY2tncm91bmQsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQoc3BhY2luZy5kaXNwbGF5VGV4dFBhZGRpbmdWZXJ0aWNhbCwgXCJweCBcIikuY29uY2F0KHNwYWNpbmcuZGlzcGxheVRleHRQYWRkaW5nSG9yaXpvbnRhbCwgXCJweFwiKSxcbiAgICAgIHBhZGRpbmdUb3A6IHNwYWNpbmcuZGlzcGxheVRleHRQYWRkaW5nVG9wLFxuICAgICAgcGFkZGluZ0JvdHRvbTogc3BhY2luZy5kaXNwbGF5VGV4dFBhZGRpbmdCb3R0b20sXG4gICAgICBwYWRkaW5nTGVmdDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKShzcGFjaW5nLmRpc3BsYXlUZXh0UGFkZGluZ0xlZnQpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKHNwYWNpbmcuZGlzcGxheVRleHRQYWRkaW5nUmlnaHQpLFxuICAgICAgYm9yZGVyOiBib3JkZXIuaW5wdXQuYm9yZGVyLFxuICAgICAgYm9yZGVyVG9wOiBib3JkZXIuaW5wdXQuYm9yZGVyVG9wLFxuICAgICAgYm9yZGVyUmlnaHQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoYm9yZGVyLmlucHV0LmJvcmRlclJpZ2h0KSxcbiAgICAgIGJvcmRlckJvdHRvbTogYm9yZGVyLmlucHV0LmJvcmRlckJvdHRvbSxcbiAgICAgIGJvcmRlckxlZnQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoYm9yZGVyLmlucHV0LmJvcmRlckxlZnQpLFxuICAgICAgYm9yZGVyUmFkaXVzOiBib3JkZXIuaW5wdXQuYm9yZGVyUmFkaXVzXG4gICAgfSxcbiAgICBEYXRlSW5wdXRfaW5wdXRfX3NtYWxsOiB7XG4gICAgICBmb250U2l6ZTogZm9udC5pbnB1dC5zaXplX3NtYWxsLFxuICAgICAgbGluZUhlaWdodDogZm9udC5pbnB1dC5saW5lSGVpZ2h0X3NtYWxsLFxuICAgICAgbGV0dGVyU3BhY2luZzogZm9udC5pbnB1dC5sZXR0ZXJTcGFjaW5nX3NtYWxsLFxuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQoc3BhY2luZy5kaXNwbGF5VGV4dFBhZGRpbmdWZXJ0aWNhbF9zbWFsbCwgXCJweCBcIikuY29uY2F0KHNwYWNpbmcuZGlzcGxheVRleHRQYWRkaW5nSG9yaXpvbnRhbF9zbWFsbCwgXCJweFwiKSxcbiAgICAgIHBhZGRpbmdUb3A6IHNwYWNpbmcuZGlzcGxheVRleHRQYWRkaW5nVG9wX3NtYWxsLFxuICAgICAgcGFkZGluZ0JvdHRvbTogc3BhY2luZy5kaXNwbGF5VGV4dFBhZGRpbmdCb3R0b21fc21hbGwsXG4gICAgICBwYWRkaW5nTGVmdDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKShzcGFjaW5nLmRpc3BsYXlUZXh0UGFkZGluZ0xlZnRfc21hbGwpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKHNwYWNpbmcuZGlzcGxheVRleHRQYWRkaW5nUmlnaHRfc21hbGwpXG4gICAgfSxcbiAgICBEYXRlSW5wdXRfaW5wdXRfX3JlZ3VsYXI6IHtcbiAgICAgIGZvbnRXZWlnaHQ6ICdhdXRvJ1xuICAgIH0sXG4gICAgRGF0ZUlucHV0X2lucHV0X19yZWFkT25seToge1xuICAgICAgdXNlclNlbGVjdDogJ25vbmUnXG4gICAgfSxcbiAgICBEYXRlSW5wdXRfaW5wdXRfX2ZvY3VzZWQ6IHtcbiAgICAgIG91dGxpbmU6IGJvcmRlci5pbnB1dC5vdXRsaW5lRm9jdXNlZCxcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmJhY2tncm91bmRGb2N1c2VkLFxuICAgICAgYm9yZGVyOiBib3JkZXIuaW5wdXQuYm9yZGVyRm9jdXNlZCxcbiAgICAgIGJvcmRlclRvcDogYm9yZGVyLmlucHV0LmJvcmRlclRvcEZvY3VzZWQsXG4gICAgICBib3JkZXJSaWdodDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKShib3JkZXIuaW5wdXQuYm9yZGVyUmlnaHRGb2N1c2VkKSxcbiAgICAgIGJvcmRlckJvdHRvbTogYm9yZGVyLmlucHV0LmJvcmRlckJvdHRvbUZvY3VzZWQsXG4gICAgICBib3JkZXJMZWZ0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKGJvcmRlci5pbnB1dC5ib3JkZXJMZWZ0Rm9jdXNlZClcbiAgICB9LFxuICAgIERhdGVJbnB1dF9pbnB1dF9fZGlzYWJsZWQ6IHtcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmRpc2FibGVkLFxuICAgICAgZm9udFN0eWxlOiBmb250LmlucHV0LnN0eWxlRGlzYWJsZWRcbiAgICB9LFxuICAgIERhdGVJbnB1dF9zY3JlZW5SZWFkZXJNZXNzYWdlOiB7XG4gICAgICBib3JkZXI6IDAsXG4gICAgICBjbGlwOiAncmVjdCgwLCAwLCAwLCAwKScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICBtYXJnaW46IC0xLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgd2lkdGg6IDFcbiAgICB9LFxuICAgIERhdGVJbnB1dF9mYW5nOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHdpZHRoOiBfY29uc3RhbnRzLkZBTkdfV0lEVEhfUFgsXG4gICAgICBoZWlnaHQ6IF9jb25zdGFudHMuRkFOR19IRUlHSFRfUFgsXG4gICAgICBsZWZ0OiAyMixcbiAgICAgIC8vIFRPRE86IHNob3VsZCBiZSBub2ZsaXAgd3JhcHBlZCBhbmQgaGFuZGxlZCBieSBhbiBpc1JUTCBwcm9wXG4gICAgICB6SW5kZXg6IHpJbmRleCArIDJcbiAgICB9LFxuICAgIERhdGVJbnB1dF9mYW5nU2hhcGU6IHtcbiAgICAgIGZpbGw6IGNvbG9yLmJhY2tncm91bmRcbiAgICB9LFxuICAgIERhdGVJbnB1dF9mYW5nU3Ryb2tlOiB7XG4gICAgICBzdHJva2U6IGNvbG9yLmNvcmUuYm9yZGVyLFxuICAgICAgZmlsbDogJ3RyYW5zcGFyZW50J1xuICAgIH1cbiAgfTtcbn0sIHtcbiAgcHVyZUNvbXBvbmVudDogdHlwZW9mIF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAhPT0gJ3VuZGVmaW5lZCdcbn0pKERhdGVJbnB1dCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwidmFyIGRlYm91bmNlID0gcmVxdWlyZSgnLi9kZWJvdW5jZScpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRocm90dGxlO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgUmlnaHRBcnJvdyA9IGZ1bmN0aW9uIFJpZ2h0QXJyb3cocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInN2Z1wiLCBwcm9wcywgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNNjk0IDI0MmwyNDkgMjUwYzEyIDExIDEyIDIxIDEgMzJMNjk0IDc3M2MtNSA1LTEwIDctMTYgN3MtMTEtMi0xNi03Yy0xMS0xMS0xMS0yMSAwLTMybDIxMC0yMTBINjhjLTEzIDAtMjMtMTAtMjMtMjNzMTAtMjMgMjMtMjNoODA2TDY2MiAyNzVjLTIxLTIyIDExLTU0IDMyLTMzelwiXG4gIH0pKTtcbn07XG5cblJpZ2h0QXJyb3cuZGVmYXVsdFByb3BzID0ge1xuICBmb2N1c2FibGU6IFwiZmFsc2VcIixcbiAgdmlld0JveDogXCIwIDAgMTAwMCAxMDAwXCJcbn07XG52YXIgX2RlZmF1bHQgPSBSaWdodEFycm93O1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIExlZnRBcnJvdyA9IGZ1bmN0aW9uIExlZnRBcnJvdyhwcm9wcykge1xuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHByb3BzLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0zMzYgMjc1TDEyNiA0ODVoODA2YzEzIDAgMjMgMTAgMjMgMjNzLTEwIDIzLTIzIDIzSDEyNmwyMTAgMjEwYzExIDExIDExIDIxIDAgMzItNSA1LTEwIDctMTYgN3MtMTEtMi0xNi03TDU1IDUyNGMtMTEtMTEtMTEtMjEgMC0zMmwyNDktMjQ5YzIxLTIyIDUzIDEwIDMyIDMyelwiXG4gIH0pKTtcbn07XG5cbkxlZnRBcnJvdy5kZWZhdWx0UHJvcHMgPSB7XG4gIGZvY3VzYWJsZTogXCJmYWxzZVwiLFxuICB2aWV3Qm94OiBcIjAgMCAxMDAwIDEwMDBcIlxufTtcbnZhciBfZGVmYXVsdCA9IExlZnRBcnJvdztcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBDYWxlbmRhckljb24gPSBmdW5jdGlvbiBDYWxlbmRhckljb24ocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInN2Z1wiLCBwcm9wcywgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJtMTA3IDEzOTNoMjQxdi0yNDFoLTI0MXptMjk1IDBoMjY4di0yNDFoLTI2OHptLTI5NS0yOTVoMjQxdi0yNjhoLTI0MXptMjk1IDBoMjY4di0yNjhoLTI2OHptLTI5NS0zMjFoMjQxdi0yNDFoLTI0MXptNjE2IDYxNmgyNjh2LTI0MWgtMjY4em0tMzIxLTYxNmgyNjh2LTI0MWgtMjY4em02NDMgNjE2aDI0MXYtMjQxaC0yNDF6bS0zMjItMjk1aDI2OHYtMjY4aC0yNjh6bS0yOTQtNzIzdi0yNDFjMC03LTMtMTQtOC0xOS02LTUtMTItOC0xOS04aC01NGMtNyAwLTEzIDMtMTkgOC01IDUtOCAxMi04IDE5djI0MWMwIDcgMyAxNCA4IDE5IDYgNSAxMiA4IDE5IDhoNTRjNyAwIDEzLTMgMTktOCA1LTUgOC0xMiA4LTE5em02MTYgNzIzaDI0MXYtMjY4aC0yNDF6bS0zMjItMzIxaDI2OHYtMjQxaC0yNjh6bTMyMiAwaDI0MXYtMjQxaC0yNDF6bTI3LTQwMnYtMjQxYzAtNy0zLTE0LTgtMTktNi01LTEyLTgtMTktOGgtNTRjLTcgMC0xMyAzLTE5IDgtNSA1LTggMTItOCAxOXYyNDFjMCA3IDMgMTQgOCAxOSA2IDUgMTIgOCAxOSA4aDU0YzcgMCAxMy0zIDE5LTggNS01IDgtMTIgOC0xOXptMzIxLTU0djEwNzJjMCAyOS0xMSA1NC0zMiA3NXMtNDYgMzItNzUgMzJoLTExNzljLTI5IDAtNTQtMTEtNzUtMzJzLTMyLTQ2LTMyLTc1di0xMDcyYzAtMjkgMTEtNTQgMzItNzVzNDYtMzIgNzUtMzJoMTA3di04MGMwLTM3IDEzLTY4IDQwLTk1czU3LTM5IDk0LTM5aDU0YzM3IDAgNjggMTMgOTUgMzkgMjYgMjYgMzkgNTggMzkgOTV2ODBoMzIxdi04MGMwLTM3IDEzLTY5IDQwLTk1IDI2LTI2IDU3LTM5IDk0LTM5aDU0YzM3IDAgNjggMTMgOTQgMzlzNDAgNTggNDAgOTV2ODBoMTA3YzI5IDAgNTQgMTEgNzUgMzJzMzIgNDYgMzIgNzV6XCJcbiAgfSkpO1xufTtcblxuQ2FsZW5kYXJJY29uLmRlZmF1bHRQcm9wcyA9IHtcbiAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gIHZpZXdCb3g6IFwiMCAwIDEzOTMuMSAxNTAwXCJcbn07XG52YXIgX2RlZmF1bHQgPSBDYWxlbmRhckljb247XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2VuenltZVNoYWxsb3dFcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImVuenltZS1zaGFsbG93LWVxdWFsXCIpKTtcblxudmFyIF9zbGljZWRUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkMTAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3RNb21lbnRQcm9wdHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1tb21lbnQtcHJvcHR5cGVzXCIpKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF9vYmplY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJvYmplY3QudmFsdWVzXCIpKTtcblxudmFyIF9pc1RvdWNoRGV2aWNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaXMtdG91Y2gtZGV2aWNlXCIpKTtcblxudmFyIF9kZWZhdWx0UGhyYXNlcyA9IHJlcXVpcmUoXCIuLi9kZWZhdWx0UGhyYXNlc1wiKTtcblxudmFyIF9nZXRQaHJhc2VQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRQaHJhc2VQcm9wVHlwZXNcIikpO1xuXG52YXIgX2lzSW5jbHVzaXZlbHlBZnRlckRheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzSW5jbHVzaXZlbHlBZnRlckRheVwiKSk7XG5cbnZhciBfaXNOZXh0RGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvaXNOZXh0RGF5XCIpKTtcblxudmFyIF9pc1NhbWVEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9pc1NhbWVEYXlcIikpO1xuXG52YXIgX2lzQWZ0ZXJEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9pc0FmdGVyRGF5XCIpKTtcblxudmFyIF9pc0JlZm9yZURheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzQmVmb3JlRGF5XCIpKTtcblxudmFyIF9nZXRWaXNpYmxlRGF5cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFZpc2libGVEYXlzXCIpKTtcblxudmFyIF9pc0RheVZpc2libGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9pc0RheVZpc2libGVcIikpO1xuXG52YXIgX2dldFNlbGVjdGVkRGF0ZU9mZnNldCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFNlbGVjdGVkRGF0ZU9mZnNldFwiKSk7XG5cbnZhciBfdG9JU09EYXRlU3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvdG9JU09EYXRlU3RyaW5nXCIpKTtcblxudmFyIF9tb2RpZmllcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvbW9kaWZpZXJzXCIpO1xuXG52YXIgX0Rpc2FibGVkU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvRGlzYWJsZWRTaGFwZVwiKSk7XG5cbnZhciBfRm9jdXNlZElucHV0U2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvRm9jdXNlZElucHV0U2hhcGVcIikpO1xuXG52YXIgX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlXCIpKTtcblxudmFyIF9EYXlPZldlZWtTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9EYXlPZldlZWtTaGFwZVwiKSk7XG5cbnZhciBfQ2FsZW5kYXJJbmZvUG9zaXRpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9DYWxlbmRhckluZm9Qb3NpdGlvblNoYXBlXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG52YXIgX0RheVBpY2tlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRGF5UGlja2VyXCIpKTtcblxudmFyIF9nZXRQb29sZWRNb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRQb29sZWRNb21lbnRcIikpO1xuXG52YXIgcHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9haXJibmJQcm9wVHlwZXMuZm9yYmlkRXh0cmFQcm9wcykoe1xuICBzdGFydERhdGU6IF9yZWFjdE1vbWVudFByb3B0eXBlc1tcImRlZmF1bHRcIl0ubW9tZW50T2JqLFxuICBlbmREYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXNbXCJkZWZhdWx0XCJdLm1vbWVudE9iaixcbiAgb25EYXRlc0NoYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgc3RhcnREYXRlT2Zmc2V0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBlbmREYXRlT2Zmc2V0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBtaW5EYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXNbXCJkZWZhdWx0XCJdLm1vbWVudE9iaixcbiAgbWF4RGF0ZTogX3JlYWN0TW9tZW50UHJvcHR5cGVzW1wiZGVmYXVsdFwiXS5tb21lbnRPYmosXG4gIGZvY3VzZWRJbnB1dDogX0ZvY3VzZWRJbnB1dFNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgb25Gb2N1c0NoYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25DbG9zZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAga2VlcE9wZW5PbkRhdGVTZWxlY3Q6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG1pbmltdW1OaWdodHM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgZGlzYWJsZWQ6IF9EaXNhYmxlZFNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgaXNPdXRzaWRlUmFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGlzRGF5QmxvY2tlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgaXNEYXlIaWdobGlnaHRlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICAvLyBEYXlQaWNrZXIgcHJvcHNcbiAgcmVuZGVyTW9udGhUZXh0OiAoMCwgX2FpcmJuYlByb3BUeXBlcy5tdXR1YWxseUV4Y2x1c2l2ZVByb3BzKShfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLCAncmVuZGVyTW9udGhUZXh0JywgJ3JlbmRlck1vbnRoRWxlbWVudCcpLFxuICByZW5kZXJNb250aEVsZW1lbnQ6ICgwLCBfYWlyYm5iUHJvcFR5cGVzLm11dHVhbGx5RXhjbHVzaXZlUHJvcHMpKF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsICdyZW5kZXJNb250aFRleHQnLCAncmVuZGVyTW9udGhFbGVtZW50JyksXG4gIGVuYWJsZU91dHNpZGVEYXlzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBudW1iZXJPZk1vbnRoczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLFxuICBvcmllbnRhdGlvbjogX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgd2l0aFBvcnRhbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgaW5pdGlhbFZpc2libGVNb250aDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGRheVNpemU6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBub0JvcmRlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgdmVydGljYWxCb3JkZXJTcGFjaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZzogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIG5hdlByZXY6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIG5hdk5leHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIG5vTmF2QnV0dG9uczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgb25QcmV2TW9udGhDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25OZXh0TW9udGhDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25PdXRzaWRlQ2xpY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlckNhbGVuZGFyRGF5OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJEYXlDb250ZW50czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgcmVuZGVyQ2FsZW5kYXJJbmZvOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgY2FsZW5kYXJJbmZvUG9zaXRpb246IF9DYWxlbmRhckluZm9Qb3NpdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgZmlyc3REYXlPZldlZWs6IF9EYXlPZldlZWtTaGFwZVtcImRlZmF1bHRcIl0sXG4gIHZlcnRpY2FsSGVpZ2h0OiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgLy8gYWNjZXNzaWJpbGl0eVxuICBvbkJsdXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGlzRm9jdXNlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBvblRhYjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25TaGlmdFRhYjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgLy8gaTE4blxuICBtb250aEZvcm1hdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICB3ZWVrRGF5Rm9ybWF0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHBocmFzZXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzW1wiZGVmYXVsdFwiXSkoX2RlZmF1bHRQaHJhc2VzLkRheVBpY2tlclBocmFzZXMpKSxcbiAgZGF5QXJpYUxhYmVsRm9ybWF0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGlzUlRMOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sXG59KSA6IHt9O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgc3RhcnREYXRlOiB1bmRlZmluZWQsXG4gIC8vIFRPRE86IHVzZSBudWxsXG4gIGVuZERhdGU6IHVuZGVmaW5lZCxcbiAgLy8gVE9ETzogdXNlIG51bGxcbiAgbWluRGF0ZTogbnVsbCxcbiAgbWF4RGF0ZTogbnVsbCxcbiAgb25EYXRlc0NoYW5nZTogZnVuY3Rpb24gb25EYXRlc0NoYW5nZSgpIHt9LFxuICBzdGFydERhdGVPZmZzZXQ6IHVuZGVmaW5lZCxcbiAgZW5kRGF0ZU9mZnNldDogdW5kZWZpbmVkLFxuICBmb2N1c2VkSW5wdXQ6IG51bGwsXG4gIG9uRm9jdXNDaGFuZ2U6IGZ1bmN0aW9uIG9uRm9jdXNDaGFuZ2UoKSB7fSxcbiAgb25DbG9zZTogZnVuY3Rpb24gb25DbG9zZSgpIHt9LFxuICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDogZmFsc2UsXG4gIG1pbmltdW1OaWdodHM6IDEsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgaXNPdXRzaWRlUmFuZ2U6IGZ1bmN0aW9uIGlzT3V0c2lkZVJhbmdlKCkge30sXG4gIGlzRGF5QmxvY2tlZDogZnVuY3Rpb24gaXNEYXlCbG9ja2VkKCkge30sXG4gIGlzRGF5SGlnaGxpZ2h0ZWQ6IGZ1bmN0aW9uIGlzRGF5SGlnaGxpZ2h0ZWQoKSB7fSxcbiAgZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlOiBmdW5jdGlvbiBnZXRNaW5OaWdodHNGb3JIb3ZlckRhdGUoKSB7fSxcbiAgLy8gRGF5UGlja2VyIHByb3BzXG4gIHJlbmRlck1vbnRoVGV4dDogbnVsbCxcbiAgZW5hYmxlT3V0c2lkZURheXM6IGZhbHNlLFxuICBudW1iZXJPZk1vbnRoczogMSxcbiAgb3JpZW50YXRpb246IF9jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTixcbiAgd2l0aFBvcnRhbDogZmFsc2UsXG4gIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBmYWxzZSxcbiAgaW5pdGlhbFZpc2libGVNb250aDogbnVsbCxcbiAgZGF5U2l6ZTogX2NvbnN0YW50cy5EQVlfU0laRSxcbiAgbmF2UHJldjogbnVsbCxcbiAgbmF2TmV4dDogbnVsbCxcbiAgbm9OYXZCdXR0b25zOiBmYWxzZSxcbiAgb25QcmV2TW9udGhDbGljazogZnVuY3Rpb24gb25QcmV2TW9udGhDbGljaygpIHt9LFxuICBvbk5leHRNb250aENsaWNrOiBmdW5jdGlvbiBvbk5leHRNb250aENsaWNrKCkge30sXG4gIG9uT3V0c2lkZUNsaWNrOiBmdW5jdGlvbiBvbk91dHNpZGVDbGljaygpIHt9LFxuICByZW5kZXJDYWxlbmRhckRheTogdW5kZWZpbmVkLFxuICByZW5kZXJEYXlDb250ZW50czogbnVsbCxcbiAgcmVuZGVyQ2FsZW5kYXJJbmZvOiBudWxsLFxuICByZW5kZXJNb250aEVsZW1lbnQ6IG51bGwsXG4gIHJlbmRlcktleWJvYXJkU2hvcnRjdXRzQnV0dG9uOiB1bmRlZmluZWQsXG4gIGNhbGVuZGFySW5mb1Bvc2l0aW9uOiBfY29uc3RhbnRzLklORk9fUE9TSVRJT05fQk9UVE9NLFxuICBmaXJzdERheU9mV2VlazogbnVsbCxcbiAgdmVydGljYWxIZWlnaHQ6IG51bGwsXG4gIG5vQm9yZGVyOiBmYWxzZSxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiB1bmRlZmluZWQsXG4gIHZlcnRpY2FsQm9yZGVyU3BhY2luZzogdW5kZWZpbmVkLFxuICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiAxMyxcbiAgLy8gYWNjZXNzaWJpbGl0eVxuICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cigpIHt9LFxuICBpc0ZvY3VzZWQ6IGZhbHNlLFxuICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IGZhbHNlLFxuICBvblRhYjogZnVuY3Rpb24gb25UYWIoKSB7fSxcbiAgb25TaGlmdFRhYjogZnVuY3Rpb24gb25TaGlmdFRhYigpIHt9LFxuICAvLyBpMThuXG4gIG1vbnRoRm9ybWF0OiAnTU1NTSBZWVlZJyxcbiAgd2Vla0RheUZvcm1hdDogJ2RkJyxcbiAgcGhyYXNlczogX2RlZmF1bHRQaHJhc2VzLkRheVBpY2tlclBocmFzZXMsXG4gIGRheUFyaWFMYWJlbEZvcm1hdDogdW5kZWZpbmVkLFxuICBpc1JUTDogZmFsc2Vcbn07XG5cbnZhciBnZXRDaG9vc2VBdmFpbGFibGVEYXRlUGhyYXNlID0gZnVuY3Rpb24gZ2V0Q2hvb3NlQXZhaWxhYmxlRGF0ZVBocmFzZShwaHJhc2VzLCBmb2N1c2VkSW5wdXQpIHtcbiAgaWYgKGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5TVEFSVF9EQVRFKSB7XG4gICAgcmV0dXJuIHBocmFzZXMuY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlO1xuICB9XG5cbiAgaWYgKGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5FTkRfREFURSkge1xuICAgIHJldHVybiBwaHJhc2VzLmNob29zZUF2YWlsYWJsZUVuZERhdGU7XG4gIH1cblxuICByZXR1cm4gcGhyYXNlcy5jaG9vc2VBdmFpbGFibGVEYXRlO1xufTtcblxudmFyIERheVBpY2tlclJhbmdlQ29udHJvbGxlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX3JlZikge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyW1wiZGVmYXVsdFwiXSkoRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyLCBfcmVmKTtcbiAgdmFyIF9wcm90byA9IERheVBpY2tlclJhbmdlQ29udHJvbGxlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvWyFfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgJiYgXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIl0gPSBmdW5jdGlvbiAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIERheVBpY2tlclJhbmdlQ29udHJvbGxlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX3JlZi5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLmlzVG91Y2hEZXZpY2UgPSAoMCwgX2lzVG91Y2hEZXZpY2VbXCJkZWZhdWx0XCJdKSgpO1xuICAgIF90aGlzLnRvZGF5ID0gKDAsIF9tb21lbnRbXCJkZWZhdWx0XCJdKSgpO1xuICAgIF90aGlzLm1vZGlmaWVycyA9IHtcbiAgICAgIHRvZGF5OiBmdW5jdGlvbiB0b2RheShkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzVG9kYXkoZGF5KTtcbiAgICAgIH0sXG4gICAgICBibG9ja2VkOiBmdW5jdGlvbiBibG9ja2VkKGRheSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaXNCbG9ja2VkKGRheSk7XG4gICAgICB9LFxuICAgICAgJ2Jsb2NrZWQtY2FsZW5kYXInOiBmdW5jdGlvbiBibG9ja2VkQ2FsZW5kYXIoZGF5KSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5pc0RheUJsb2NrZWQoZGF5KTtcbiAgICAgIH0sXG4gICAgICAnYmxvY2tlZC1vdXQtb2YtcmFuZ2UnOiBmdW5jdGlvbiBibG9ja2VkT3V0T2ZSYW5nZShkYXkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmlzT3V0c2lkZVJhbmdlKGRheSk7XG4gICAgICB9LFxuICAgICAgJ2hpZ2hsaWdodGVkLWNhbGVuZGFyJzogZnVuY3Rpb24gaGlnaGxpZ2h0ZWRDYWxlbmRhcihkYXkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmlzRGF5SGlnaGxpZ2h0ZWQoZGF5KTtcbiAgICAgIH0sXG4gICAgICB2YWxpZDogZnVuY3Rpb24gdmFsaWQoZGF5KSB7XG4gICAgICAgIHJldHVybiAhX3RoaXMuaXNCbG9ja2VkKGRheSk7XG4gICAgICB9LFxuICAgICAgJ3NlbGVjdGVkLXN0YXJ0JzogZnVuY3Rpb24gc2VsZWN0ZWRTdGFydChkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzU3RhcnREYXRlKGRheSk7XG4gICAgICB9LFxuICAgICAgJ3NlbGVjdGVkLWVuZCc6IGZ1bmN0aW9uIHNlbGVjdGVkRW5kKGRheSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaXNFbmREYXRlKGRheSk7XG4gICAgICB9LFxuICAgICAgJ2Jsb2NrZWQtbWluaW11bS1uaWdodHMnOiBmdW5jdGlvbiBibG9ja2VkTWluaW11bU5pZ2h0cyhkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmRvZXNOb3RNZWV0TWluaW11bU5pZ2h0cyhkYXkpO1xuICAgICAgfSxcbiAgICAgICdzZWxlY3RlZC1zcGFuJzogZnVuY3Rpb24gc2VsZWN0ZWRTcGFuKGRheSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaXNJblNlbGVjdGVkU3BhbihkYXkpO1xuICAgICAgfSxcbiAgICAgICdsYXN0LWluLXJhbmdlJzogZnVuY3Rpb24gbGFzdEluUmFuZ2UoZGF5KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pc0xhc3RJblJhbmdlKGRheSk7XG4gICAgICB9LFxuICAgICAgaG92ZXJlZDogZnVuY3Rpb24gaG92ZXJlZChkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzSG92ZXJlZChkYXkpO1xuICAgICAgfSxcbiAgICAgICdob3ZlcmVkLXNwYW4nOiBmdW5jdGlvbiBob3ZlcmVkU3BhbihkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzSW5Ib3ZlcmVkU3BhbihkYXkpO1xuICAgICAgfSxcbiAgICAgICdob3ZlcmVkLW9mZnNldCc6IGZ1bmN0aW9uIGhvdmVyZWRPZmZzZXQoZGF5KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pc0luSG92ZXJlZFNwYW4oZGF5KTtcbiAgICAgIH0sXG4gICAgICAnYWZ0ZXItaG92ZXJlZC1zdGFydCc6IGZ1bmN0aW9uIGFmdGVySG92ZXJlZFN0YXJ0KGRheSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaXNEYXlBZnRlckhvdmVyZWRTdGFydERhdGUoZGF5KTtcbiAgICAgIH0sXG4gICAgICAnZmlyc3QtZGF5LW9mLXdlZWsnOiBmdW5jdGlvbiBmaXJzdERheU9mV2VlayhkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzRmlyc3REYXlPZldlZWsoZGF5KTtcbiAgICAgIH0sXG4gICAgICAnbGFzdC1kYXktb2Ytd2Vlayc6IGZ1bmN0aW9uIGxhc3REYXlPZldlZWsoZGF5KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pc0xhc3REYXlPZldlZWsoZGF5KTtcbiAgICAgIH0sXG4gICAgICAnaG92ZXJlZC1zdGFydC1maXJzdC1wb3NzaWJsZS1lbmQnOiBmdW5jdGlvbiBob3ZlcmVkU3RhcnRGaXJzdFBvc3NpYmxlRW5kKGRheSwgaG92ZXJEYXRlKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pc0ZpcnN0UG9zc2libGVFbmREYXRlRm9ySG92ZXJlZFN0YXJ0RGF0ZShkYXksIGhvdmVyRGF0ZSk7XG4gICAgICB9LFxuICAgICAgJ2hvdmVyZWQtc3RhcnQtYmxvY2tlZC1taW5pbXVtLW5pZ2h0cyc6IGZ1bmN0aW9uIGhvdmVyZWRTdGFydEJsb2NrZWRNaW5pbXVtTmlnaHRzKGRheSwgaG92ZXJEYXRlKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5kb2VzTm90TWVldE1pbk5pZ2h0c0ZvckhvdmVyZWRTdGFydERhdGUoZGF5LCBob3ZlckRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgX3RoaXMkZ2V0U3RhdGVGb3JOZXdNID0gX3RoaXMuZ2V0U3RhdGVGb3JOZXdNb250aChwcm9wcyksXG4gICAgICAgIGN1cnJlbnRNb250aCA9IF90aGlzJGdldFN0YXRlRm9yTmV3TS5jdXJyZW50TW9udGgsXG4gICAgICAgIHZpc2libGVEYXlzID0gX3RoaXMkZ2V0U3RhdGVGb3JOZXdNLnZpc2libGVEYXlzOyAvLyBpbml0aWFsaXplIHBocmFzZXNcbiAgICAvLyBzZXQgdGhlIGFwcHJvcHJpYXRlIENhbGVuZGFyRGF5IHBocmFzZSBiYXNlZCBvbiBmb2N1c2VkSW5wdXRcblxuXG4gICAgdmFyIGNob29zZUF2YWlsYWJsZURhdGUgPSBnZXRDaG9vc2VBdmFpbGFibGVEYXRlUGhyYXNlKHByb3BzLnBocmFzZXMsIHByb3BzLmZvY3VzZWRJbnB1dCk7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBob3ZlckRhdGU6IG51bGwsXG4gICAgICBjdXJyZW50TW9udGg6IGN1cnJlbnRNb250aCxcbiAgICAgIHBocmFzZXM6ICgwLCBfb2JqZWN0U3ByZWFkMTBbXCJkZWZhdWx0XCJdKSh7fSwgcHJvcHMucGhyYXNlcywge1xuICAgICAgICBjaG9vc2VBdmFpbGFibGVEYXRlOiBjaG9vc2VBdmFpbGFibGVEYXRlXG4gICAgICB9KSxcbiAgICAgIHZpc2libGVEYXlzOiB2aXNpYmxlRGF5cyxcbiAgICAgIGRpc2FibGVQcmV2OiBfdGhpcy5zaG91bGREaXNhYmxlTW9udGhOYXZpZ2F0aW9uKHByb3BzLm1pbkRhdGUsIGN1cnJlbnRNb250aCksXG4gICAgICBkaXNhYmxlTmV4dDogX3RoaXMuc2hvdWxkRGlzYWJsZU1vbnRoTmF2aWdhdGlvbihwcm9wcy5tYXhEYXRlLCBjdXJyZW50TW9udGgpXG4gICAgfTtcbiAgICBfdGhpcy5vbkRheUNsaWNrID0gX3RoaXMub25EYXlDbGljay5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25EYXlNb3VzZUVudGVyID0gX3RoaXMub25EYXlNb3VzZUVudGVyLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbkRheU1vdXNlTGVhdmUgPSBfdGhpcy5vbkRheU1vdXNlTGVhdmUuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uUHJldk1vbnRoQ2xpY2sgPSBfdGhpcy5vblByZXZNb250aENsaWNrLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbk5leHRNb250aENsaWNrID0gX3RoaXMub25OZXh0TW9udGhDbGljay5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25Nb250aENoYW5nZSA9IF90aGlzLm9uTW9udGhDaGFuZ2UuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uWWVhckNoYW5nZSA9IF90aGlzLm9uWWVhckNoYW5nZS5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25NdWx0aXBseVNjcm9sbGFibGVNb250aHMgPSBfdGhpcy5vbk11bHRpcGx5U2Nyb2xsYWJsZU1vbnRocy5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMuZ2V0Rmlyc3RGb2N1c2FibGVEYXkgPSBfdGhpcy5nZXRGaXJzdEZvY3VzYWJsZURheS5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHN0YXJ0RGF0ZSA9IG5leHRQcm9wcy5zdGFydERhdGUsXG4gICAgICAgIGVuZERhdGUgPSBuZXh0UHJvcHMuZW5kRGF0ZSxcbiAgICAgICAgZm9jdXNlZElucHV0ID0gbmV4dFByb3BzLmZvY3VzZWRJbnB1dCxcbiAgICAgICAgZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlID0gbmV4dFByb3BzLmdldE1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSxcbiAgICAgICAgbWluaW11bU5pZ2h0cyA9IG5leHRQcm9wcy5taW5pbXVtTmlnaHRzLFxuICAgICAgICBpc091dHNpZGVSYW5nZSA9IG5leHRQcm9wcy5pc091dHNpZGVSYW5nZSxcbiAgICAgICAgaXNEYXlCbG9ja2VkID0gbmV4dFByb3BzLmlzRGF5QmxvY2tlZCxcbiAgICAgICAgaXNEYXlIaWdobGlnaHRlZCA9IG5leHRQcm9wcy5pc0RheUhpZ2hsaWdodGVkLFxuICAgICAgICBwaHJhc2VzID0gbmV4dFByb3BzLnBocmFzZXMsXG4gICAgICAgIGluaXRpYWxWaXNpYmxlTW9udGggPSBuZXh0UHJvcHMuaW5pdGlhbFZpc2libGVNb250aCxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBuZXh0UHJvcHMubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gbmV4dFByb3BzLmVuYWJsZU91dHNpZGVEYXlzO1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHByZXZTdGFydERhdGUgPSBfdGhpcyRwcm9wcy5zdGFydERhdGUsXG4gICAgICAgIHByZXZFbmREYXRlID0gX3RoaXMkcHJvcHMuZW5kRGF0ZSxcbiAgICAgICAgcHJldkZvY3VzZWRJbnB1dCA9IF90aGlzJHByb3BzLmZvY3VzZWRJbnB1dCxcbiAgICAgICAgcHJldk1pbmltdW1OaWdodHMgPSBfdGhpcyRwcm9wcy5taW5pbXVtTmlnaHRzLFxuICAgICAgICBwcmV2SXNPdXRzaWRlUmFuZ2UgPSBfdGhpcyRwcm9wcy5pc091dHNpZGVSYW5nZSxcbiAgICAgICAgcHJldklzRGF5QmxvY2tlZCA9IF90aGlzJHByb3BzLmlzRGF5QmxvY2tlZCxcbiAgICAgICAgcHJldklzRGF5SGlnaGxpZ2h0ZWQgPSBfdGhpcyRwcm9wcy5pc0RheUhpZ2hsaWdodGVkLFxuICAgICAgICBwcmV2UGhyYXNlcyA9IF90aGlzJHByb3BzLnBocmFzZXMsXG4gICAgICAgIHByZXZJbml0aWFsVmlzaWJsZU1vbnRoID0gX3RoaXMkcHJvcHMuaW5pdGlhbFZpc2libGVNb250aCxcbiAgICAgICAgcHJldk51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHMubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIHByZXZFbmFibGVPdXRzaWRlRGF5cyA9IF90aGlzJHByb3BzLmVuYWJsZU91dHNpZGVEYXlzO1xuICAgIHZhciBob3ZlckRhdGUgPSB0aGlzLnN0YXRlLmhvdmVyRGF0ZTtcbiAgICB2YXIgdmlzaWJsZURheXMgPSB0aGlzLnN0YXRlLnZpc2libGVEYXlzO1xuICAgIHZhciByZWNvbXB1dGVPdXRzaWRlUmFuZ2UgPSBmYWxzZTtcbiAgICB2YXIgcmVjb21wdXRlRGF5QmxvY2tlZCA9IGZhbHNlO1xuICAgIHZhciByZWNvbXB1dGVEYXlIaWdobGlnaHRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKGlzT3V0c2lkZVJhbmdlICE9PSBwcmV2SXNPdXRzaWRlUmFuZ2UpIHtcbiAgICAgIHRoaXMubW9kaWZpZXJzWydibG9ja2VkLW91dC1vZi1yYW5nZSddID0gZnVuY3Rpb24gKGRheSkge1xuICAgICAgICByZXR1cm4gaXNPdXRzaWRlUmFuZ2UoZGF5KTtcbiAgICAgIH07XG5cbiAgICAgIHJlY29tcHV0ZU91dHNpZGVSYW5nZSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlzRGF5QmxvY2tlZCAhPT0gcHJldklzRGF5QmxvY2tlZCkge1xuICAgICAgdGhpcy5tb2RpZmllcnNbJ2Jsb2NrZWQtY2FsZW5kYXInXSA9IGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgcmV0dXJuIGlzRGF5QmxvY2tlZChkYXkpO1xuICAgICAgfTtcblxuICAgICAgcmVjb21wdXRlRGF5QmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlzRGF5SGlnaGxpZ2h0ZWQgIT09IHByZXZJc0RheUhpZ2hsaWdodGVkKSB7XG4gICAgICB0aGlzLm1vZGlmaWVyc1snaGlnaGxpZ2h0ZWQtY2FsZW5kYXInXSA9IGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgcmV0dXJuIGlzRGF5SGlnaGxpZ2h0ZWQoZGF5KTtcbiAgICAgIH07XG5cbiAgICAgIHJlY29tcHV0ZURheUhpZ2hsaWdodGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgcmVjb21wdXRlUHJvcE1vZGlmaWVycyA9IHJlY29tcHV0ZU91dHNpZGVSYW5nZSB8fCByZWNvbXB1dGVEYXlCbG9ja2VkIHx8IHJlY29tcHV0ZURheUhpZ2hsaWdodGVkO1xuICAgIHZhciBkaWRTdGFydERhdGVDaGFuZ2UgPSBzdGFydERhdGUgIT09IHByZXZTdGFydERhdGU7XG4gICAgdmFyIGRpZEVuZERhdGVDaGFuZ2UgPSBlbmREYXRlICE9PSBwcmV2RW5kRGF0ZTtcbiAgICB2YXIgZGlkRm9jdXNDaGFuZ2UgPSBmb2N1c2VkSW5wdXQgIT09IHByZXZGb2N1c2VkSW5wdXQ7XG5cbiAgICBpZiAobnVtYmVyT2ZNb250aHMgIT09IHByZXZOdW1iZXJPZk1vbnRocyB8fCBlbmFibGVPdXRzaWRlRGF5cyAhPT0gcHJldkVuYWJsZU91dHNpZGVEYXlzIHx8IGluaXRpYWxWaXNpYmxlTW9udGggIT09IHByZXZJbml0aWFsVmlzaWJsZU1vbnRoICYmICFwcmV2Rm9jdXNlZElucHV0ICYmIGRpZEZvY3VzQ2hhbmdlKSB7XG4gICAgICB2YXIgbmV3TW9udGhTdGF0ZSA9IHRoaXMuZ2V0U3RhdGVGb3JOZXdNb250aChuZXh0UHJvcHMpO1xuICAgICAgdmFyIGN1cnJlbnRNb250aCA9IG5ld01vbnRoU3RhdGUuY3VycmVudE1vbnRoO1xuICAgICAgdmlzaWJsZURheXMgPSBuZXdNb250aFN0YXRlLnZpc2libGVEYXlzO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGN1cnJlbnRNb250aDogY3VycmVudE1vbnRoLFxuICAgICAgICB2aXNpYmxlRGF5czogdmlzaWJsZURheXNcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBtb2RpZmllcnMgPSB7fTtcblxuICAgIGlmIChkaWRTdGFydERhdGVDaGFuZ2UpIHtcbiAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBwcmV2U3RhcnREYXRlLCAnc2VsZWN0ZWQtc3RhcnQnKTtcbiAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBzdGFydERhdGUsICdzZWxlY3RlZC1zdGFydCcpO1xuXG4gICAgICBpZiAocHJldlN0YXJ0RGF0ZSkge1xuICAgICAgICB2YXIgc3RhcnRTcGFuID0gcHJldlN0YXJ0RGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5Jyk7XG4gICAgICAgIHZhciBlbmRTcGFuID0gcHJldlN0YXJ0RGF0ZS5jbG9uZSgpLmFkZChwcmV2TWluaW11bU5pZ2h0cyArIDEsICdkYXlzJyk7XG4gICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UobW9kaWZpZXJzLCBzdGFydFNwYW4sIGVuZFNwYW4sICdhZnRlci1ob3ZlcmVkLXN0YXJ0Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRpZEVuZERhdGVDaGFuZ2UpIHtcbiAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBwcmV2RW5kRGF0ZSwgJ3NlbGVjdGVkLWVuZCcpO1xuICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllcihtb2RpZmllcnMsIGVuZERhdGUsICdzZWxlY3RlZC1lbmQnKTtcbiAgICB9XG5cbiAgICBpZiAoZGlkU3RhcnREYXRlQ2hhbmdlIHx8IGRpZEVuZERhdGVDaGFuZ2UpIHtcbiAgICAgIGlmIChwcmV2U3RhcnREYXRlICYmIHByZXZFbmREYXRlKSB7XG4gICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UobW9kaWZpZXJzLCBwcmV2U3RhcnREYXRlLCBwcmV2RW5kRGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5JyksICdzZWxlY3RlZC1zcGFuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFydERhdGUgJiYgZW5kRGF0ZSkge1xuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyRnJvbVJhbmdlKG1vZGlmaWVycywgc3RhcnREYXRlLCBlbmREYXRlLmNsb25lKCkuYWRkKDEsICdkYXknKSwgJ2hvdmVyZWQtc3BhbicpO1xuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyVG9SYW5nZShtb2RpZmllcnMsIHN0YXJ0RGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5JyksIGVuZERhdGUsICdzZWxlY3RlZC1zcGFuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzVG91Y2hEZXZpY2UgJiYgZGlkU3RhcnREYXRlQ2hhbmdlICYmIHN0YXJ0RGF0ZSAmJiAhZW5kRGF0ZSkge1xuICAgICAgdmFyIF9zdGFydFNwYW4gPSBzdGFydERhdGUuY2xvbmUoKS5hZGQoMSwgJ2RheScpO1xuXG4gICAgICB2YXIgX2VuZFNwYW4gPSBzdGFydERhdGUuY2xvbmUoKS5hZGQobWluaW11bU5pZ2h0cyArIDEsICdkYXlzJyk7XG5cbiAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXJUb1JhbmdlKG1vZGlmaWVycywgX3N0YXJ0U3BhbiwgX2VuZFNwYW4sICdhZnRlci1ob3ZlcmVkLXN0YXJ0Jyk7XG4gICAgfVxuXG4gICAgaWYgKHByZXZNaW5pbXVtTmlnaHRzID4gMCkge1xuICAgICAgaWYgKGRpZEZvY3VzQ2hhbmdlIHx8IGRpZFN0YXJ0RGF0ZUNoYW5nZSB8fCBtaW5pbXVtTmlnaHRzICE9PSBwcmV2TWluaW11bU5pZ2h0cykge1xuICAgICAgICB2YXIgX3N0YXJ0U3BhbjIgPSBwcmV2U3RhcnREYXRlIHx8IHRoaXMudG9kYXk7XG5cbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIF9zdGFydFNwYW4yLCBfc3RhcnRTcGFuMi5jbG9uZSgpLmFkZChwcmV2TWluaW11bU5pZ2h0cywgJ2RheXMnKSwgJ2Jsb2NrZWQtbWluaW11bS1uaWdodHMnKTtcbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIF9zdGFydFNwYW4yLCBfc3RhcnRTcGFuMi5jbG9uZSgpLmFkZChwcmV2TWluaW11bU5pZ2h0cywgJ2RheXMnKSwgJ2Jsb2NrZWQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGlkRm9jdXNDaGFuZ2UgfHwgcmVjb21wdXRlUHJvcE1vZGlmaWVycykge1xuICAgICAgKDAsIF9vYmplY3RbXCJkZWZhdWx0XCJdKSh2aXNpYmxlRGF5cykuZm9yRWFjaChmdW5jdGlvbiAoZGF5cykge1xuICAgICAgICBPYmplY3Qua2V5cyhkYXlzKS5mb3JFYWNoKGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgICB2YXIgbW9tZW50T2JqID0gKDAsIF9nZXRQb29sZWRNb21lbnRbXCJkZWZhdWx0XCJdKShkYXkpO1xuICAgICAgICAgIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChkaWRGb2N1c0NoYW5nZSB8fCByZWNvbXB1dGVPdXRzaWRlUmFuZ2UpIHtcbiAgICAgICAgICAgIGlmIChpc091dHNpZGVSYW5nZShtb21lbnRPYmopKSB7XG4gICAgICAgICAgICAgIG1vZGlmaWVycyA9IF90aGlzMi5hZGRNb2RpZmllcihtb2RpZmllcnMsIG1vbWVudE9iaiwgJ2Jsb2NrZWQtb3V0LW9mLXJhbmdlJyk7XG4gICAgICAgICAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdibG9ja2VkLW91dC1vZi1yYW5nZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkaWRGb2N1c0NoYW5nZSB8fCByZWNvbXB1dGVEYXlCbG9ja2VkKSB7XG4gICAgICAgICAgICBpZiAoaXNEYXlCbG9ja2VkKG1vbWVudE9iaikpIHtcbiAgICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnYmxvY2tlZC1jYWxlbmRhcicpO1xuICAgICAgICAgICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnYmxvY2tlZC1jYWxlbmRhcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IF90aGlzMi5hZGRNb2RpZmllcihtb2RpZmllcnMsIG1vbWVudE9iaiwgJ2Jsb2NrZWQnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnYmxvY2tlZCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkaWRGb2N1c0NoYW5nZSB8fCByZWNvbXB1dGVEYXlIaWdobGlnaHRlZCkge1xuICAgICAgICAgICAgaWYgKGlzRGF5SGlnaGxpZ2h0ZWQobW9tZW50T2JqKSkge1xuICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdoaWdobGlnaHRlZC1jYWxlbmRhcicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnaGlnaGxpZ2h0ZWQtY2FsZW5kYXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzVG91Y2hEZXZpY2UgJiYgZGlkRm9jdXNDaGFuZ2UgJiYgaG92ZXJEYXRlICYmICF0aGlzLmlzQmxvY2tlZChob3ZlckRhdGUpKSB7XG4gICAgICB2YXIgbWluTmlnaHRzRm9ySG92ZXJEYXRlID0gZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlKGhvdmVyRGF0ZSk7XG5cbiAgICAgIGlmIChtaW5OaWdodHNGb3JIb3ZlckRhdGUgPiAwICYmIGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5FTkRfREFURSkge1xuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyRnJvbVJhbmdlKG1vZGlmaWVycywgaG92ZXJEYXRlLmNsb25lKCkuYWRkKDEsICdkYXlzJyksIGhvdmVyRGF0ZS5jbG9uZSgpLmFkZChtaW5OaWdodHNGb3JIb3ZlckRhdGUsICdkYXlzJyksICdob3ZlcmVkLXN0YXJ0LWJsb2NrZWQtbWluaW11bS1uaWdodHMnKTtcbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIGhvdmVyRGF0ZS5jbG9uZSgpLmFkZChtaW5OaWdodHNGb3JIb3ZlckRhdGUsICdkYXlzJyksICdob3ZlcmVkLXN0YXJ0LWZpcnN0LXBvc3NpYmxlLWVuZCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAobWluTmlnaHRzRm9ySG92ZXJEYXRlID4gMCAmJiBmb2N1c2VkSW5wdXQgPT09IF9jb25zdGFudHMuU1RBUlRfREFURSkge1xuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyVG9SYW5nZShtb2RpZmllcnMsIGhvdmVyRGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5cycpLCBob3ZlckRhdGUuY2xvbmUoKS5hZGQobWluTmlnaHRzRm9ySG92ZXJEYXRlLCAnZGF5cycpLCAnaG92ZXJlZC1zdGFydC1ibG9ja2VkLW1pbmltdW0tbmlnaHRzJyk7XG4gICAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBob3ZlckRhdGUuY2xvbmUoKS5hZGQobWluTmlnaHRzRm9ySG92ZXJEYXRlLCAnZGF5cycpLCAnaG92ZXJlZC1zdGFydC1maXJzdC1wb3NzaWJsZS1lbmQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWluaW11bU5pZ2h0cyA+IDAgJiYgc3RhcnREYXRlICYmIGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5FTkRfREFURSkge1xuICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllclRvUmFuZ2UobW9kaWZpZXJzLCBzdGFydERhdGUsIHN0YXJ0RGF0ZS5jbG9uZSgpLmFkZChtaW5pbXVtTmlnaHRzLCAnZGF5cycpLCAnYmxvY2tlZC1taW5pbXVtLW5pZ2h0cycpO1xuICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllclRvUmFuZ2UobW9kaWZpZXJzLCBzdGFydERhdGUsIHN0YXJ0RGF0ZS5jbG9uZSgpLmFkZChtaW5pbXVtTmlnaHRzLCAnZGF5cycpLCAnYmxvY2tlZCcpO1xuICAgIH1cblxuICAgIHZhciB0b2RheSA9ICgwLCBfbW9tZW50W1wiZGVmYXVsdFwiXSkoKTtcblxuICAgIGlmICghKDAsIF9pc1NhbWVEYXlbXCJkZWZhdWx0XCJdKSh0aGlzLnRvZGF5LCB0b2RheSkpIHtcbiAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCB0aGlzLnRvZGF5LCAndG9kYXknKTtcbiAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCB0b2RheSwgJ3RvZGF5Jyk7XG4gICAgICB0aGlzLnRvZGF5ID0gdG9kYXk7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKG1vZGlmaWVycykubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHZpc2libGVEYXlzOiAoMCwgX29iamVjdFNwcmVhZDEwW1wiZGVmYXVsdFwiXSkoe30sIHZpc2libGVEYXlzLCB7fSwgbW9kaWZpZXJzKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGRpZEZvY3VzQ2hhbmdlIHx8IHBocmFzZXMgIT09IHByZXZQaHJhc2VzKSB7XG4gICAgICAvLyBzZXQgdGhlIGFwcHJvcHJpYXRlIENhbGVuZGFyRGF5IHBocmFzZSBiYXNlZCBvbiBmb2N1c2VkSW5wdXRcbiAgICAgIHZhciBjaG9vc2VBdmFpbGFibGVEYXRlID0gZ2V0Q2hvb3NlQXZhaWxhYmxlRGF0ZVBocmFzZShwaHJhc2VzLCBmb2N1c2VkSW5wdXQpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHBocmFzZXM6ICgwLCBfb2JqZWN0U3ByZWFkMTBbXCJkZWZhdWx0XCJdKSh7fSwgcGhyYXNlcywge1xuICAgICAgICAgIGNob29zZUF2YWlsYWJsZURhdGU6IGNob29zZUF2YWlsYWJsZURhdGVcbiAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25EYXlDbGljayA9IGZ1bmN0aW9uIG9uRGF5Q2xpY2soZGF5LCBlKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGtlZXBPcGVuT25EYXRlU2VsZWN0ID0gX3RoaXMkcHJvcHMyLmtlZXBPcGVuT25EYXRlU2VsZWN0LFxuICAgICAgICBtaW5pbXVtTmlnaHRzID0gX3RoaXMkcHJvcHMyLm1pbmltdW1OaWdodHMsXG4gICAgICAgIG9uQmx1ciA9IF90aGlzJHByb3BzMi5vbkJsdXIsXG4gICAgICAgIGZvY3VzZWRJbnB1dCA9IF90aGlzJHByb3BzMi5mb2N1c2VkSW5wdXQsXG4gICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfdGhpcyRwcm9wczIub25Gb2N1c0NoYW5nZSxcbiAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzMi5vbkNsb3NlLFxuICAgICAgICBvbkRhdGVzQ2hhbmdlID0gX3RoaXMkcHJvcHMyLm9uRGF0ZXNDaGFuZ2UsXG4gICAgICAgIHN0YXJ0RGF0ZU9mZnNldCA9IF90aGlzJHByb3BzMi5zdGFydERhdGVPZmZzZXQsXG4gICAgICAgIGVuZERhdGVPZmZzZXQgPSBfdGhpcyRwcm9wczIuZW5kRGF0ZU9mZnNldCxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczIuZGlzYWJsZWQ7XG4gICAgaWYgKGUpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAodGhpcy5pc0Jsb2NrZWQoZGF5KSkgcmV0dXJuO1xuICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczMuc3RhcnREYXRlLFxuICAgICAgICBlbmREYXRlID0gX3RoaXMkcHJvcHMzLmVuZERhdGU7XG5cbiAgICBpZiAoc3RhcnREYXRlT2Zmc2V0IHx8IGVuZERhdGVPZmZzZXQpIHtcbiAgICAgIHN0YXJ0RGF0ZSA9ICgwLCBfZ2V0U2VsZWN0ZWREYXRlT2Zmc2V0W1wiZGVmYXVsdFwiXSkoc3RhcnREYXRlT2Zmc2V0LCBkYXkpO1xuICAgICAgZW5kRGF0ZSA9ICgwLCBfZ2V0U2VsZWN0ZWREYXRlT2Zmc2V0W1wiZGVmYXVsdFwiXSkoZW5kRGF0ZU9mZnNldCwgZGF5KTtcblxuICAgICAgaWYgKHRoaXMuaXNCbG9ja2VkKHN0YXJ0RGF0ZSkgfHwgdGhpcy5pc0Jsb2NrZWQoZW5kRGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBvbkRhdGVzQ2hhbmdlKHtcbiAgICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUsXG4gICAgICAgIGVuZERhdGU6IGVuZERhdGVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWtlZXBPcGVuT25EYXRlU2VsZWN0KSB7XG4gICAgICAgIG9uRm9jdXNDaGFuZ2UobnVsbCk7XG4gICAgICAgIG9uQ2xvc2Uoe1xuICAgICAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLFxuICAgICAgICAgIGVuZERhdGU6IGVuZERhdGVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmb2N1c2VkSW5wdXQgPT09IF9jb25zdGFudHMuU1RBUlRfREFURSkge1xuICAgICAgdmFyIGxhc3RBbGxvd2VkU3RhcnREYXRlID0gZW5kRGF0ZSAmJiBlbmREYXRlLmNsb25lKCkuc3VidHJhY3QobWluaW11bU5pZ2h0cywgJ2RheXMnKTtcbiAgICAgIHZhciBpc1N0YXJ0RGF0ZUFmdGVyRW5kRGF0ZSA9ICgwLCBfaXNCZWZvcmVEYXlbXCJkZWZhdWx0XCJdKShsYXN0QWxsb3dlZFN0YXJ0RGF0ZSwgZGF5KSB8fCAoMCwgX2lzQWZ0ZXJEYXlbXCJkZWZhdWx0XCJdKShzdGFydERhdGUsIGVuZERhdGUpO1xuICAgICAgdmFyIGlzRW5kRGF0ZURpc2FibGVkID0gZGlzYWJsZWQgPT09IF9jb25zdGFudHMuRU5EX0RBVEU7XG5cbiAgICAgIGlmICghaXNFbmREYXRlRGlzYWJsZWQgfHwgIWlzU3RhcnREYXRlQWZ0ZXJFbmREYXRlKSB7XG4gICAgICAgIHN0YXJ0RGF0ZSA9IGRheTtcblxuICAgICAgICBpZiAoaXNTdGFydERhdGVBZnRlckVuZERhdGUpIHtcbiAgICAgICAgICBlbmREYXRlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvbkRhdGVzQ2hhbmdlKHtcbiAgICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUsXG4gICAgICAgIGVuZERhdGU6IGVuZERhdGVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaXNFbmREYXRlRGlzYWJsZWQgJiYgIWlzU3RhcnREYXRlQWZ0ZXJFbmREYXRlKSB7XG4gICAgICAgIG9uRm9jdXNDaGFuZ2UobnVsbCk7XG4gICAgICAgIG9uQ2xvc2Uoe1xuICAgICAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLFxuICAgICAgICAgIGVuZERhdGU6IGVuZERhdGVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VuZERhdGVEaXNhYmxlZCkge1xuICAgICAgICBvbkZvY3VzQ2hhbmdlKF9jb25zdGFudHMuRU5EX0RBVEUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLkVORF9EQVRFKSB7XG4gICAgICB2YXIgZmlyc3RBbGxvd2VkRW5kRGF0ZSA9IHN0YXJ0RGF0ZSAmJiBzdGFydERhdGUuY2xvbmUoKS5hZGQobWluaW11bU5pZ2h0cywgJ2RheXMnKTtcblxuICAgICAgaWYgKCFzdGFydERhdGUpIHtcbiAgICAgICAgZW5kRGF0ZSA9IGRheTtcbiAgICAgICAgb25EYXRlc0NoYW5nZSh7XG4gICAgICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUsXG4gICAgICAgICAgZW5kRGF0ZTogZW5kRGF0ZVxuICAgICAgICB9KTtcbiAgICAgICAgb25Gb2N1c0NoYW5nZShfY29uc3RhbnRzLlNUQVJUX0RBVEUpO1xuICAgICAgfSBlbHNlIGlmICgoMCwgX2lzSW5jbHVzaXZlbHlBZnRlckRheVtcImRlZmF1bHRcIl0pKGRheSwgZmlyc3RBbGxvd2VkRW5kRGF0ZSkpIHtcbiAgICAgICAgZW5kRGF0ZSA9IGRheTtcbiAgICAgICAgb25EYXRlc0NoYW5nZSh7XG4gICAgICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUsXG4gICAgICAgICAgZW5kRGF0ZTogZW5kRGF0ZVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWtlZXBPcGVuT25EYXRlU2VsZWN0KSB7XG4gICAgICAgICAgb25Gb2N1c0NoYW5nZShudWxsKTtcbiAgICAgICAgICBvbkNsb3NlKHtcbiAgICAgICAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLFxuICAgICAgICAgICAgZW5kRGF0ZTogZW5kRGF0ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGRpc2FibGVkICE9PSBfY29uc3RhbnRzLlNUQVJUX0RBVEUpIHtcbiAgICAgICAgc3RhcnREYXRlID0gZGF5O1xuICAgICAgICBlbmREYXRlID0gbnVsbDtcbiAgICAgICAgb25EYXRlc0NoYW5nZSh7XG4gICAgICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUsXG4gICAgICAgICAgZW5kRGF0ZTogZW5kRGF0ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uRGF0ZXNDaGFuZ2Uoe1xuICAgICAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLFxuICAgICAgICAgIGVuZERhdGU6IGVuZERhdGVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uRGF0ZXNDaGFuZ2Uoe1xuICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZTogZW5kRGF0ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25CbHVyKCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uRGF5TW91c2VFbnRlciA9IGZ1bmN0aW9uIG9uRGF5TW91c2VFbnRlcihkYXkpIHtcbiAgICAvKiBlc2xpbnQgcmVhY3QvZGVzdHJ1Y3R1cmluZy1hc3NpZ25tZW50OiAxICovXG4gICAgaWYgKHRoaXMuaXNUb3VjaERldmljZSkgcmV0dXJuO1xuICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczQuc3RhcnREYXRlLFxuICAgICAgICBlbmREYXRlID0gX3RoaXMkcHJvcHM0LmVuZERhdGUsXG4gICAgICAgIGZvY3VzZWRJbnB1dCA9IF90aGlzJHByb3BzNC5mb2N1c2VkSW5wdXQsXG4gICAgICAgIGdldE1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSA9IF90aGlzJHByb3BzNC5nZXRNaW5OaWdodHNGb3JIb3ZlckRhdGUsXG4gICAgICAgIG1pbmltdW1OaWdodHMgPSBfdGhpcyRwcm9wczQubWluaW11bU5pZ2h0cyxcbiAgICAgICAgc3RhcnREYXRlT2Zmc2V0ID0gX3RoaXMkcHJvcHM0LnN0YXJ0RGF0ZU9mZnNldCxcbiAgICAgICAgZW5kRGF0ZU9mZnNldCA9IF90aGlzJHByb3BzNC5lbmREYXRlT2Zmc2V0O1xuICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGhvdmVyRGF0ZSA9IF90aGlzJHN0YXRlLmhvdmVyRGF0ZSxcbiAgICAgICAgdmlzaWJsZURheXMgPSBfdGhpcyRzdGF0ZS52aXNpYmxlRGF5cyxcbiAgICAgICAgZGF0ZU9mZnNldCA9IF90aGlzJHN0YXRlLmRhdGVPZmZzZXQ7XG4gICAgdmFyIG5leHREYXRlT2Zmc2V0ID0gbnVsbDtcblxuICAgIGlmIChmb2N1c2VkSW5wdXQpIHtcbiAgICAgIHZhciBoYXNPZmZzZXQgPSBzdGFydERhdGVPZmZzZXQgfHwgZW5kRGF0ZU9mZnNldDtcbiAgICAgIHZhciBtb2RpZmllcnMgPSB7fTtcblxuICAgICAgaWYgKGhhc09mZnNldCkge1xuICAgICAgICB2YXIgc3RhcnQgPSAoMCwgX2dldFNlbGVjdGVkRGF0ZU9mZnNldFtcImRlZmF1bHRcIl0pKHN0YXJ0RGF0ZU9mZnNldCwgZGF5KTtcbiAgICAgICAgdmFyIGVuZCA9ICgwLCBfZ2V0U2VsZWN0ZWREYXRlT2Zmc2V0W1wiZGVmYXVsdFwiXSkoZW5kRGF0ZU9mZnNldCwgZGF5LCBmdW5jdGlvbiAocmFuZ2VEYXkpIHtcbiAgICAgICAgICByZXR1cm4gcmFuZ2VEYXkuYWRkKDEsICdkYXknKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG5leHREYXRlT2Zmc2V0ID0ge1xuICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICBlbmQ6IGVuZFxuICAgICAgICB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZGVzdHJ1Y3R1cmluZy1hc3NpZ25tZW50XG5cbiAgICAgICAgaWYgKGRhdGVPZmZzZXQgJiYgZGF0ZU9mZnNldC5zdGFydCAmJiBkYXRlT2Zmc2V0LmVuZCkge1xuICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UobW9kaWZpZXJzLCBkYXRlT2Zmc2V0LnN0YXJ0LCBkYXRlT2Zmc2V0LmVuZCwgJ2hvdmVyZWQtb2Zmc2V0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyVG9SYW5nZShtb2RpZmllcnMsIHN0YXJ0LCBlbmQsICdob3ZlcmVkLW9mZnNldCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWhhc09mZnNldCkge1xuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgaG92ZXJEYXRlLCAnaG92ZXJlZCcpO1xuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgZGF5LCAnaG92ZXJlZCcpO1xuXG4gICAgICAgIGlmIChzdGFydERhdGUgJiYgIWVuZERhdGUgJiYgZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLkVORF9EQVRFKSB7XG4gICAgICAgICAgaWYgKCgwLCBfaXNBZnRlckRheVtcImRlZmF1bHRcIl0pKGhvdmVyRGF0ZSwgc3RhcnREYXRlKSkge1xuICAgICAgICAgICAgdmFyIGVuZFNwYW4gPSBob3ZlckRhdGUuY2xvbmUoKS5hZGQoMSwgJ2RheScpO1xuICAgICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIHN0YXJ0RGF0ZSwgZW5kU3BhbiwgJ2hvdmVyZWQtc3BhbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdGhpcy5pc0Jsb2NrZWQoZGF5KSAmJiAoMCwgX2lzQWZ0ZXJEYXlbXCJkZWZhdWx0XCJdKShkYXksIHN0YXJ0RGF0ZSkpIHtcbiAgICAgICAgICAgIHZhciBfZW5kU3BhbjIgPSBkYXkuY2xvbmUoKS5hZGQoMSwgJ2RheScpO1xuXG4gICAgICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyVG9SYW5nZShtb2RpZmllcnMsIHN0YXJ0RGF0ZSwgX2VuZFNwYW4yLCAnaG92ZXJlZC1zcGFuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzdGFydERhdGUgJiYgZW5kRGF0ZSAmJiBmb2N1c2VkSW5wdXQgPT09IF9jb25zdGFudHMuU1RBUlRfREFURSkge1xuICAgICAgICAgIGlmICgoMCwgX2lzQmVmb3JlRGF5W1wiZGVmYXVsdFwiXSkoaG92ZXJEYXRlLCBlbmREYXRlKSkge1xuICAgICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIGhvdmVyRGF0ZSwgZW5kRGF0ZSwgJ2hvdmVyZWQtc3BhbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdGhpcy5pc0Jsb2NrZWQoZGF5KSAmJiAoMCwgX2lzQmVmb3JlRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBlbmREYXRlKSkge1xuICAgICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllclRvUmFuZ2UobW9kaWZpZXJzLCBkYXksIGVuZERhdGUsICdob3ZlcmVkLXNwYW4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnREYXRlKSB7XG4gICAgICAgICAgdmFyIHN0YXJ0U3BhbiA9IHN0YXJ0RGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5Jyk7XG5cbiAgICAgICAgICB2YXIgX2VuZFNwYW4zID0gc3RhcnREYXRlLmNsb25lKCkuYWRkKG1pbmltdW1OaWdodHMgKyAxLCAnZGF5cycpO1xuXG4gICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIHN0YXJ0U3BhbiwgX2VuZFNwYW4zLCAnYWZ0ZXItaG92ZXJlZC1zdGFydCcpO1xuXG4gICAgICAgICAgaWYgKCgwLCBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBzdGFydERhdGUpKSB7XG4gICAgICAgICAgICB2YXIgbmV3U3RhcnRTcGFuID0gc3RhcnREYXRlLmNsb25lKCkuYWRkKDEsICdkYXknKTtcbiAgICAgICAgICAgIHZhciBuZXdFbmRTcGFuID0gc3RhcnREYXRlLmNsb25lKCkuYWRkKG1pbmltdW1OaWdodHMgKyAxLCAnZGF5cycpO1xuICAgICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllclRvUmFuZ2UobW9kaWZpZXJzLCBuZXdTdGFydFNwYW4sIG5ld0VuZFNwYW4sICdhZnRlci1ob3ZlcmVkLXN0YXJ0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhvdmVyRGF0ZSAmJiAhdGhpcy5pc0Jsb2NrZWQoaG92ZXJEYXRlKSkge1xuICAgICAgICAgIHZhciBtaW5OaWdodHNGb3JQcmV2SG92ZXJEYXRlID0gZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlKGhvdmVyRGF0ZSk7XG5cbiAgICAgICAgICBpZiAobWluTmlnaHRzRm9yUHJldkhvdmVyRGF0ZSA+IDAgJiYgZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLlNUQVJUX0RBVEUpIHtcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UobW9kaWZpZXJzLCBob3ZlckRhdGUuY2xvbmUoKS5hZGQoMSwgJ2RheXMnKSwgaG92ZXJEYXRlLmNsb25lKCkuYWRkKG1pbk5pZ2h0c0ZvclByZXZIb3ZlckRhdGUsICdkYXlzJyksICdob3ZlcmVkLXN0YXJ0LWJsb2NrZWQtbWluaW11bS1uaWdodHMnKTtcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBob3ZlckRhdGUuY2xvbmUoKS5hZGQobWluTmlnaHRzRm9yUHJldkhvdmVyRGF0ZSwgJ2RheXMnKSwgJ2hvdmVyZWQtc3RhcnQtZmlyc3QtcG9zc2libGUtZW5kJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzQmxvY2tlZChkYXkpKSB7XG4gICAgICAgICAgdmFyIG1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSA9IGdldE1pbk5pZ2h0c0ZvckhvdmVyRGF0ZShkYXkpO1xuXG4gICAgICAgICAgaWYgKG1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSA+IDAgJiYgZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLlNUQVJUX0RBVEUpIHtcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXJUb1JhbmdlKG1vZGlmaWVycywgZGF5LmNsb25lKCkuYWRkKDEsICdkYXlzJyksIGRheS5jbG9uZSgpLmFkZChtaW5OaWdodHNGb3JIb3ZlckRhdGUsICdkYXlzJyksICdob3ZlcmVkLXN0YXJ0LWJsb2NrZWQtbWluaW11bS1uaWdodHMnKTtcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBkYXkuY2xvbmUoKS5hZGQobWluTmlnaHRzRm9ySG92ZXJEYXRlLCAnZGF5cycpLCAnaG92ZXJlZC1zdGFydC1maXJzdC1wb3NzaWJsZS1lbmQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGhvdmVyRGF0ZTogZGF5LFxuICAgICAgICBkYXRlT2Zmc2V0OiBuZXh0RGF0ZU9mZnNldCxcbiAgICAgICAgdmlzaWJsZURheXM6ICgwLCBfb2JqZWN0U3ByZWFkMTBbXCJkZWZhdWx0XCJdKSh7fSwgdmlzaWJsZURheXMsIHt9LCBtb2RpZmllcnMpXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uRGF5TW91c2VMZWF2ZSA9IGZ1bmN0aW9uIG9uRGF5TW91c2VMZWF2ZShkYXkpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHM1LnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzNS5lbmREYXRlLFxuICAgICAgICBmb2N1c2VkSW5wdXQgPSBfdGhpcyRwcm9wczUuZm9jdXNlZElucHV0LFxuICAgICAgICBnZXRNaW5OaWdodHNGb3JIb3ZlckRhdGUgPSBfdGhpcyRwcm9wczUuZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlLFxuICAgICAgICBtaW5pbXVtTmlnaHRzID0gX3RoaXMkcHJvcHM1Lm1pbmltdW1OaWdodHM7XG4gICAgdmFyIF90aGlzJHN0YXRlMiA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGhvdmVyRGF0ZSA9IF90aGlzJHN0YXRlMi5ob3ZlckRhdGUsXG4gICAgICAgIHZpc2libGVEYXlzID0gX3RoaXMkc3RhdGUyLnZpc2libGVEYXlzLFxuICAgICAgICBkYXRlT2Zmc2V0ID0gX3RoaXMkc3RhdGUyLmRhdGVPZmZzZXQ7XG4gICAgaWYgKHRoaXMuaXNUb3VjaERldmljZSB8fCAhaG92ZXJEYXRlKSByZXR1cm47XG4gICAgdmFyIG1vZGlmaWVycyA9IHt9O1xuICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBob3ZlckRhdGUsICdob3ZlcmVkJyk7XG5cbiAgICBpZiAoZGF0ZU9mZnNldCkge1xuICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIGRhdGVPZmZzZXQuc3RhcnQsIGRhdGVPZmZzZXQuZW5kLCAnaG92ZXJlZC1vZmZzZXQnKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnREYXRlICYmICFlbmREYXRlICYmICgwLCBfaXNBZnRlckRheVtcImRlZmF1bHRcIl0pKGhvdmVyRGF0ZSwgc3RhcnREYXRlKSkge1xuICAgICAgdmFyIGVuZFNwYW4gPSBob3ZlckRhdGUuY2xvbmUoKS5hZGQoMSwgJ2RheScpO1xuICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIHN0YXJ0RGF0ZSwgZW5kU3BhbiwgJ2hvdmVyZWQtc3BhbicpO1xuICAgIH1cblxuICAgIGlmICghc3RhcnREYXRlICYmIGVuZERhdGUgJiYgKDAsIF9pc0FmdGVyRGF5W1wiZGVmYXVsdFwiXSkoZW5kRGF0ZSwgaG92ZXJEYXRlKSkge1xuICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIGhvdmVyRGF0ZSwgZW5kRGF0ZSwgJ2hvdmVyZWQtc3BhbicpO1xuICAgIH1cblxuICAgIGlmIChzdGFydERhdGUgJiYgKDAsIF9pc1NhbWVEYXlbXCJkZWZhdWx0XCJdKShkYXksIHN0YXJ0RGF0ZSkpIHtcbiAgICAgIHZhciBzdGFydFNwYW4gPSBzdGFydERhdGUuY2xvbmUoKS5hZGQoMSwgJ2RheScpO1xuXG4gICAgICB2YXIgX2VuZFNwYW40ID0gc3RhcnREYXRlLmNsb25lKCkuYWRkKG1pbmltdW1OaWdodHMgKyAxLCAnZGF5cycpO1xuXG4gICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyRnJvbVJhbmdlKG1vZGlmaWVycywgc3RhcnRTcGFuLCBfZW5kU3BhbjQsICdhZnRlci1ob3ZlcmVkLXN0YXJ0Jyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzQmxvY2tlZChob3ZlckRhdGUpKSB7XG4gICAgICB2YXIgbWluTmlnaHRzRm9ySG92ZXJEYXRlID0gZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlKGhvdmVyRGF0ZSk7XG5cbiAgICAgIGlmIChtaW5OaWdodHNGb3JIb3ZlckRhdGUgPiAwICYmIGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5TVEFSVF9EQVRFKSB7XG4gICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UobW9kaWZpZXJzLCBob3ZlckRhdGUuY2xvbmUoKS5hZGQoMSwgJ2RheXMnKSwgaG92ZXJEYXRlLmNsb25lKCkuYWRkKG1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSwgJ2RheXMnKSwgJ2hvdmVyZWQtc3RhcnQtYmxvY2tlZC1taW5pbXVtLW5pZ2h0cycpO1xuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgaG92ZXJEYXRlLmNsb25lKCkuYWRkKG1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSwgJ2RheXMnKSwgJ2hvdmVyZWQtc3RhcnQtZmlyc3QtcG9zc2libGUtZW5kJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBob3ZlckRhdGU6IG51bGwsXG4gICAgICB2aXNpYmxlRGF5czogKDAsIF9vYmplY3RTcHJlYWQxMFtcImRlZmF1bHRcIl0pKHt9LCB2aXNpYmxlRGF5cywge30sIG1vZGlmaWVycylcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25QcmV2TW9udGhDbGljayA9IGZ1bmN0aW9uIG9uUHJldk1vbnRoQ2xpY2soKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHM2LmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICBtYXhEYXRlID0gX3RoaXMkcHJvcHM2Lm1heERhdGUsXG4gICAgICAgIG1pbkRhdGUgPSBfdGhpcyRwcm9wczYubWluRGF0ZSxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczYubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIG9uUHJldk1vbnRoQ2xpY2sgPSBfdGhpcyRwcm9wczYub25QcmV2TW9udGhDbGljaztcbiAgICB2YXIgX3RoaXMkc3RhdGUzID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgY3VycmVudE1vbnRoID0gX3RoaXMkc3RhdGUzLmN1cnJlbnRNb250aCxcbiAgICAgICAgdmlzaWJsZURheXMgPSBfdGhpcyRzdGF0ZTMudmlzaWJsZURheXM7XG4gICAgdmFyIG5ld1Zpc2libGVEYXlzID0ge307XG4gICAgT2JqZWN0LmtleXModmlzaWJsZURheXMpLnNvcnQoKS5zbGljZSgwLCBudW1iZXJPZk1vbnRocyArIDEpLmZvckVhY2goZnVuY3Rpb24gKG1vbnRoKSB7XG4gICAgICBuZXdWaXNpYmxlRGF5c1ttb250aF0gPSB2aXNpYmxlRGF5c1ttb250aF07XG4gICAgfSk7XG4gICAgdmFyIHByZXZNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpLnN1YnRyYWN0KDIsICdtb250aHMnKTtcbiAgICB2YXIgcHJldk1vbnRoVmlzaWJsZURheXMgPSAoMCwgX2dldFZpc2libGVEYXlzW1wiZGVmYXVsdFwiXSkocHJldk1vbnRoLCAxLCBlbmFibGVPdXRzaWRlRGF5cywgdHJ1ZSk7XG4gICAgdmFyIG5ld0N1cnJlbnRNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpLnN1YnRyYWN0KDEsICdtb250aCcpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VycmVudE1vbnRoOiBuZXdDdXJyZW50TW9udGgsXG4gICAgICBkaXNhYmxlUHJldjogdGhpcy5zaG91bGREaXNhYmxlTW9udGhOYXZpZ2F0aW9uKG1pbkRhdGUsIG5ld0N1cnJlbnRNb250aCksXG4gICAgICBkaXNhYmxlTmV4dDogdGhpcy5zaG91bGREaXNhYmxlTW9udGhOYXZpZ2F0aW9uKG1heERhdGUsIG5ld0N1cnJlbnRNb250aCksXG4gICAgICB2aXNpYmxlRGF5czogKDAsIF9vYmplY3RTcHJlYWQxMFtcImRlZmF1bHRcIl0pKHt9LCBuZXdWaXNpYmxlRGF5cywge30sIHRoaXMuZ2V0TW9kaWZpZXJzKHByZXZNb250aFZpc2libGVEYXlzKSlcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBvblByZXZNb250aENsaWNrKG5ld0N1cnJlbnRNb250aC5jbG9uZSgpKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25OZXh0TW9udGhDbGljayA9IGZ1bmN0aW9uIG9uTmV4dE1vbnRoQ2xpY2soKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHM3LmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICBtYXhEYXRlID0gX3RoaXMkcHJvcHM3Lm1heERhdGUsXG4gICAgICAgIG1pbkRhdGUgPSBfdGhpcyRwcm9wczcubWluRGF0ZSxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczcubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIG9uTmV4dE1vbnRoQ2xpY2sgPSBfdGhpcyRwcm9wczcub25OZXh0TW9udGhDbGljaztcbiAgICB2YXIgX3RoaXMkc3RhdGU0ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgY3VycmVudE1vbnRoID0gX3RoaXMkc3RhdGU0LmN1cnJlbnRNb250aCxcbiAgICAgICAgdmlzaWJsZURheXMgPSBfdGhpcyRzdGF0ZTQudmlzaWJsZURheXM7XG4gICAgdmFyIG5ld1Zpc2libGVEYXlzID0ge307XG4gICAgT2JqZWN0LmtleXModmlzaWJsZURheXMpLnNvcnQoKS5zbGljZSgxKS5mb3JFYWNoKGZ1bmN0aW9uIChtb250aCkge1xuICAgICAgbmV3VmlzaWJsZURheXNbbW9udGhdID0gdmlzaWJsZURheXNbbW9udGhdO1xuICAgIH0pO1xuICAgIHZhciBuZXh0TW9udGggPSBjdXJyZW50TW9udGguY2xvbmUoKS5hZGQobnVtYmVyT2ZNb250aHMgKyAxLCAnbW9udGgnKTtcbiAgICB2YXIgbmV4dE1vbnRoVmlzaWJsZURheXMgPSAoMCwgX2dldFZpc2libGVEYXlzW1wiZGVmYXVsdFwiXSkobmV4dE1vbnRoLCAxLCBlbmFibGVPdXRzaWRlRGF5cywgdHJ1ZSk7XG4gICAgdmFyIG5ld0N1cnJlbnRNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpLmFkZCgxLCAnbW9udGgnKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJlbnRNb250aDogbmV3Q3VycmVudE1vbnRoLFxuICAgICAgZGlzYWJsZVByZXY6IHRoaXMuc2hvdWxkRGlzYWJsZU1vbnRoTmF2aWdhdGlvbihtaW5EYXRlLCBuZXdDdXJyZW50TW9udGgpLFxuICAgICAgZGlzYWJsZU5leHQ6IHRoaXMuc2hvdWxkRGlzYWJsZU1vbnRoTmF2aWdhdGlvbihtYXhEYXRlLCBuZXdDdXJyZW50TW9udGgpLFxuICAgICAgdmlzaWJsZURheXM6ICgwLCBfb2JqZWN0U3ByZWFkMTBbXCJkZWZhdWx0XCJdKSh7fSwgbmV3VmlzaWJsZURheXMsIHt9LCB0aGlzLmdldE1vZGlmaWVycyhuZXh0TW9udGhWaXNpYmxlRGF5cykpXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgb25OZXh0TW9udGhDbGljayhuZXdDdXJyZW50TW9udGguY2xvbmUoKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uTW9udGhDaGFuZ2UgPSBmdW5jdGlvbiBvbk1vbnRoQ2hhbmdlKG5ld01vbnRoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzOCA9IHRoaXMucHJvcHMsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHM4Lm51bWJlck9mTW9udGhzLFxuICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IF90aGlzJHByb3BzOC5lbmFibGVPdXRzaWRlRGF5cyxcbiAgICAgICAgb3JpZW50YXRpb24gPSBfdGhpcyRwcm9wczgub3JpZW50YXRpb247XG4gICAgdmFyIHdpdGhvdXRUcmFuc2l0aW9uTW9udGhzID0gb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRTtcbiAgICB2YXIgbmV3VmlzaWJsZURheXMgPSAoMCwgX2dldFZpc2libGVEYXlzW1wiZGVmYXVsdFwiXSkobmV3TW9udGgsIG51bWJlck9mTW9udGhzLCBlbmFibGVPdXRzaWRlRGF5cywgd2l0aG91dFRyYW5zaXRpb25Nb250aHMpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VycmVudE1vbnRoOiBuZXdNb250aC5jbG9uZSgpLFxuICAgICAgdmlzaWJsZURheXM6IHRoaXMuZ2V0TW9kaWZpZXJzKG5ld1Zpc2libGVEYXlzKVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vblllYXJDaGFuZ2UgPSBmdW5jdGlvbiBvblllYXJDaGFuZ2UobmV3TW9udGgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM5ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczkubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHM5LmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICBvcmllbnRhdGlvbiA9IF90aGlzJHByb3BzOS5vcmllbnRhdGlvbjtcbiAgICB2YXIgd2l0aG91dFRyYW5zaXRpb25Nb250aHMgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuICAgIHZhciBuZXdWaXNpYmxlRGF5cyA9ICgwLCBfZ2V0VmlzaWJsZURheXNbXCJkZWZhdWx0XCJdKShuZXdNb250aCwgbnVtYmVyT2ZNb250aHMsIGVuYWJsZU91dHNpZGVEYXlzLCB3aXRob3V0VHJhbnNpdGlvbk1vbnRocyk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXJyZW50TW9udGg6IG5ld01vbnRoLmNsb25lKCksXG4gICAgICB2aXNpYmxlRGF5czogdGhpcy5nZXRNb2RpZmllcnMobmV3VmlzaWJsZURheXMpXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uTXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzID0gZnVuY3Rpb24gb25NdWx0aXBseVNjcm9sbGFibGVNb250aHMoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMTAgPSB0aGlzLnByb3BzLFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IF90aGlzJHByb3BzMTAubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHMxMC5lbmFibGVPdXRzaWRlRGF5cztcbiAgICB2YXIgX3RoaXMkc3RhdGU1ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgY3VycmVudE1vbnRoID0gX3RoaXMkc3RhdGU1LmN1cnJlbnRNb250aCxcbiAgICAgICAgdmlzaWJsZURheXMgPSBfdGhpcyRzdGF0ZTUudmlzaWJsZURheXM7XG4gICAgdmFyIG51bWJlck9mVmlzaWJsZU1vbnRocyA9IE9iamVjdC5rZXlzKHZpc2libGVEYXlzKS5sZW5ndGg7XG4gICAgdmFyIG5leHRNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpLmFkZChudW1iZXJPZlZpc2libGVNb250aHMsICdtb250aCcpO1xuICAgIHZhciBuZXdWaXNpYmxlRGF5cyA9ICgwLCBfZ2V0VmlzaWJsZURheXNbXCJkZWZhdWx0XCJdKShuZXh0TW9udGgsIG51bWJlck9mTW9udGhzLCBlbmFibGVPdXRzaWRlRGF5cywgdHJ1ZSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB2aXNpYmxlRGF5czogKDAsIF9vYmplY3RTcHJlYWQxMFtcImRlZmF1bHRcIl0pKHt9LCB2aXNpYmxlRGF5cywge30sIHRoaXMuZ2V0TW9kaWZpZXJzKG5ld1Zpc2libGVEYXlzKSlcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0Rmlyc3RGb2N1c2FibGVEYXkgPSBmdW5jdGlvbiBnZXRGaXJzdEZvY3VzYWJsZURheShuZXdNb250aCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzMTEgPSB0aGlzLnByb3BzLFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczExLnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzMTEuZW5kRGF0ZSxcbiAgICAgICAgZm9jdXNlZElucHV0ID0gX3RoaXMkcHJvcHMxMS5mb2N1c2VkSW5wdXQsXG4gICAgICAgIG1pbmltdW1OaWdodHMgPSBfdGhpcyRwcm9wczExLm1pbmltdW1OaWdodHMsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHMxMS5udW1iZXJPZk1vbnRocztcbiAgICB2YXIgZm9jdXNlZERhdGUgPSBuZXdNb250aC5jbG9uZSgpLnN0YXJ0T2YoJ21vbnRoJyk7XG5cbiAgICBpZiAoZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLlNUQVJUX0RBVEUgJiYgc3RhcnREYXRlKSB7XG4gICAgICBmb2N1c2VkRGF0ZSA9IHN0YXJ0RGF0ZS5jbG9uZSgpO1xuICAgIH0gZWxzZSBpZiAoZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLkVORF9EQVRFICYmICFlbmREYXRlICYmIHN0YXJ0RGF0ZSkge1xuICAgICAgZm9jdXNlZERhdGUgPSBzdGFydERhdGUuY2xvbmUoKS5hZGQobWluaW11bU5pZ2h0cywgJ2RheXMnKTtcbiAgICB9IGVsc2UgaWYgKGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5FTkRfREFURSAmJiBlbmREYXRlKSB7XG4gICAgICBmb2N1c2VkRGF0ZSA9IGVuZERhdGUuY2xvbmUoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0Jsb2NrZWQoZm9jdXNlZERhdGUpKSB7XG4gICAgICB2YXIgZGF5cyA9IFtdO1xuICAgICAgdmFyIGxhc3RWaXNpYmxlRGF5ID0gbmV3TW9udGguY2xvbmUoKS5hZGQobnVtYmVyT2ZNb250aHMgLSAxLCAnbW9udGhzJykuZW5kT2YoJ21vbnRoJyk7XG4gICAgICB2YXIgY3VycmVudERheSA9IGZvY3VzZWREYXRlLmNsb25lKCk7XG5cbiAgICAgIHdoaWxlICghKDAsIF9pc0FmdGVyRGF5W1wiZGVmYXVsdFwiXSkoY3VycmVudERheSwgbGFzdFZpc2libGVEYXkpKSB7XG4gICAgICAgIGN1cnJlbnREYXkgPSBjdXJyZW50RGF5LmNsb25lKCkuYWRkKDEsICdkYXknKTtcbiAgICAgICAgZGF5cy5wdXNoKGN1cnJlbnREYXkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmlhYmxlRGF5cyA9IGRheXMuZmlsdGVyKGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgcmV0dXJuICFfdGhpczMuaXNCbG9ja2VkKGRheSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHZpYWJsZURheXMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgX3ZpYWJsZURheXMgPSAoMCwgX3NsaWNlZFRvQXJyYXkyW1wiZGVmYXVsdFwiXSkodmlhYmxlRGF5cywgMSk7XG5cbiAgICAgICAgZm9jdXNlZERhdGUgPSBfdmlhYmxlRGF5c1swXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZm9jdXNlZERhdGU7XG4gIH07XG5cbiAgX3Byb3RvLmdldE1vZGlmaWVycyA9IGZ1bmN0aW9uIGdldE1vZGlmaWVycyh2aXNpYmxlRGF5cykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIG1vZGlmaWVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHZpc2libGVEYXlzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb250aCkge1xuICAgICAgbW9kaWZpZXJzW21vbnRoXSA9IHt9O1xuICAgICAgdmlzaWJsZURheXNbbW9udGhdLmZvckVhY2goZnVuY3Rpb24gKGRheSkge1xuICAgICAgICBtb2RpZmllcnNbbW9udGhdWygwLCBfdG9JU09EYXRlU3RyaW5nW1wiZGVmYXVsdFwiXSkoZGF5KV0gPSBfdGhpczQuZ2V0TW9kaWZpZXJzRm9yRGF5KGRheSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gbW9kaWZpZXJzO1xuICB9O1xuXG4gIF9wcm90by5nZXRNb2RpZmllcnNGb3JEYXkgPSBmdW5jdGlvbiBnZXRNb2RpZmllcnNGb3JEYXkoZGF5KSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFNldChPYmplY3Qua2V5cyh0aGlzLm1vZGlmaWVycykuZmlsdGVyKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgICAgcmV0dXJuIF90aGlzNS5tb2RpZmllcnNbbW9kaWZpZXJdKGRheSk7XG4gICAgfSkpO1xuICB9O1xuXG4gIF9wcm90by5nZXRTdGF0ZUZvck5ld01vbnRoID0gZnVuY3Rpb24gZ2V0U3RhdGVGb3JOZXdNb250aChuZXh0UHJvcHMpIHtcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgIHZhciBpbml0aWFsVmlzaWJsZU1vbnRoID0gbmV4dFByb3BzLmluaXRpYWxWaXNpYmxlTW9udGgsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gbmV4dFByb3BzLm51bWJlck9mTW9udGhzLFxuICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IG5leHRQcm9wcy5lbmFibGVPdXRzaWRlRGF5cyxcbiAgICAgICAgb3JpZW50YXRpb24gPSBuZXh0UHJvcHMub3JpZW50YXRpb24sXG4gICAgICAgIHN0YXJ0RGF0ZSA9IG5leHRQcm9wcy5zdGFydERhdGU7XG4gICAgdmFyIGluaXRpYWxWaXNpYmxlTW9udGhUaHVuayA9IGluaXRpYWxWaXNpYmxlTW9udGggfHwgKHN0YXJ0RGF0ZSA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdGFydERhdGU7XG4gICAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpczYudG9kYXk7XG4gICAgfSk7XG4gICAgdmFyIGN1cnJlbnRNb250aCA9IGluaXRpYWxWaXNpYmxlTW9udGhUaHVuaygpO1xuICAgIHZhciB3aXRob3V0VHJhbnNpdGlvbk1vbnRocyA9IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEU7XG4gICAgdmFyIHZpc2libGVEYXlzID0gdGhpcy5nZXRNb2RpZmllcnMoKDAsIF9nZXRWaXNpYmxlRGF5c1tcImRlZmF1bHRcIl0pKGN1cnJlbnRNb250aCwgbnVtYmVyT2ZNb250aHMsIGVuYWJsZU91dHNpZGVEYXlzLCB3aXRob3V0VHJhbnNpdGlvbk1vbnRocykpO1xuICAgIHJldHVybiB7XG4gICAgICBjdXJyZW50TW9udGg6IGN1cnJlbnRNb250aCxcbiAgICAgIHZpc2libGVEYXlzOiB2aXNpYmxlRGF5c1xuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnNob3VsZERpc2FibGVNb250aE5hdmlnYXRpb24gPSBmdW5jdGlvbiBzaG91bGREaXNhYmxlTW9udGhOYXZpZ2F0aW9uKGRhdGUsIHZpc2libGVNb250aCkge1xuICAgIGlmICghZGF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBfdGhpcyRwcm9wczEyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczEyLm51bWJlck9mTW9udGhzLFxuICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IF90aGlzJHByb3BzMTIuZW5hYmxlT3V0c2lkZURheXM7XG4gICAgcmV0dXJuICgwLCBfaXNEYXlWaXNpYmxlW1wiZGVmYXVsdFwiXSkoZGF0ZSwgdmlzaWJsZU1vbnRoLCBudW1iZXJPZk1vbnRocywgZW5hYmxlT3V0c2lkZURheXMpO1xuICB9O1xuXG4gIF9wcm90by5hZGRNb2RpZmllciA9IGZ1bmN0aW9uIGFkZE1vZGlmaWVyKHVwZGF0ZWREYXlzLCBkYXksIG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuICgwLCBfbW9kaWZpZXJzLmFkZE1vZGlmaWVyKSh1cGRhdGVkRGF5cywgZGF5LCBtb2RpZmllciwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmFkZE1vZGlmaWVyVG9SYW5nZSA9IGZ1bmN0aW9uIGFkZE1vZGlmaWVyVG9SYW5nZSh1cGRhdGVkRGF5cywgc3RhcnQsIGVuZCwgbW9kaWZpZXIpIHtcbiAgICB2YXIgZGF5cyA9IHVwZGF0ZWREYXlzO1xuICAgIHZhciBzcGFuU3RhcnQgPSBzdGFydC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCgwLCBfaXNCZWZvcmVEYXlbXCJkZWZhdWx0XCJdKShzcGFuU3RhcnQsIGVuZCkpIHtcbiAgICAgIGRheXMgPSB0aGlzLmFkZE1vZGlmaWVyKGRheXMsIHNwYW5TdGFydCwgbW9kaWZpZXIpO1xuICAgICAgc3BhblN0YXJ0ID0gc3BhblN0YXJ0LmNsb25lKCkuYWRkKDEsICdkYXknKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF5cztcbiAgfTtcblxuICBfcHJvdG8uZGVsZXRlTW9kaWZpZXIgPSBmdW5jdGlvbiBkZWxldGVNb2RpZmllcih1cGRhdGVkRGF5cywgZGF5LCBtb2RpZmllcikge1xuICAgIHJldHVybiAoMCwgX21vZGlmaWVycy5kZWxldGVNb2RpZmllcikodXBkYXRlZERheXMsIGRheSwgbW9kaWZpZXIsIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICB9O1xuXG4gIF9wcm90by5kZWxldGVNb2RpZmllckZyb21SYW5nZSA9IGZ1bmN0aW9uIGRlbGV0ZU1vZGlmaWVyRnJvbVJhbmdlKHVwZGF0ZWREYXlzLCBzdGFydCwgZW5kLCBtb2RpZmllcikge1xuICAgIHZhciBkYXlzID0gdXBkYXRlZERheXM7XG4gICAgdmFyIHNwYW5TdGFydCA9IHN0YXJ0LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoKDAsIF9pc0JlZm9yZURheVtcImRlZmF1bHRcIl0pKHNwYW5TdGFydCwgZW5kKSkge1xuICAgICAgZGF5cyA9IHRoaXMuZGVsZXRlTW9kaWZpZXIoZGF5cywgc3BhblN0YXJ0LCBtb2RpZmllcik7XG4gICAgICBzcGFuU3RhcnQgPSBzcGFuU3RhcnQuY2xvbmUoKS5hZGQoMSwgJ2RheScpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXlzO1xuICB9O1xuXG4gIF9wcm90by5kb2VzTm90TWVldE1pbmltdW1OaWdodHMgPSBmdW5jdGlvbiBkb2VzTm90TWVldE1pbmltdW1OaWdodHMoZGF5KSB7XG4gICAgdmFyIF90aGlzJHByb3BzMTMgPSB0aGlzLnByb3BzLFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczEzLnN0YXJ0RGF0ZSxcbiAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBfdGhpcyRwcm9wczEzLmlzT3V0c2lkZVJhbmdlLFxuICAgICAgICBmb2N1c2VkSW5wdXQgPSBfdGhpcyRwcm9wczEzLmZvY3VzZWRJbnB1dCxcbiAgICAgICAgbWluaW11bU5pZ2h0cyA9IF90aGlzJHByb3BzMTMubWluaW11bU5pZ2h0cztcbiAgICBpZiAoZm9jdXNlZElucHV0ICE9PSBfY29uc3RhbnRzLkVORF9EQVRFKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoc3RhcnREYXRlKSB7XG4gICAgICB2YXIgZGF5RGlmZiA9IGRheS5kaWZmKHN0YXJ0RGF0ZS5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLmhvdXIoMTIpLCAnZGF5cycpO1xuICAgICAgcmV0dXJuIGRheURpZmYgPCBtaW5pbXVtTmlnaHRzICYmIGRheURpZmYgPj0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNPdXRzaWRlUmFuZ2UoKDAsIF9tb21lbnRbXCJkZWZhdWx0XCJdKShkYXkpLnN1YnRyYWN0KG1pbmltdW1OaWdodHMsICdkYXlzJykpO1xuICB9O1xuXG4gIF9wcm90by5kb2VzTm90TWVldE1pbk5pZ2h0c0ZvckhvdmVyZWRTdGFydERhdGUgPSBmdW5jdGlvbiBkb2VzTm90TWVldE1pbk5pZ2h0c0ZvckhvdmVyZWRTdGFydERhdGUoZGF5LCBob3ZlckRhdGUpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMxNCA9IHRoaXMucHJvcHMsXG4gICAgICAgIGZvY3VzZWRJbnB1dCA9IF90aGlzJHByb3BzMTQuZm9jdXNlZElucHV0LFxuICAgICAgICBnZXRNaW5OaWdodHNGb3JIb3ZlckRhdGUgPSBfdGhpcyRwcm9wczE0LmdldE1pbk5pZ2h0c0ZvckhvdmVyRGF0ZTtcbiAgICBpZiAoZm9jdXNlZElucHV0ICE9PSBfY29uc3RhbnRzLkVORF9EQVRFKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoaG92ZXJEYXRlICYmICF0aGlzLmlzQmxvY2tlZChob3ZlckRhdGUpKSB7XG4gICAgICB2YXIgbWluTmlnaHRzID0gZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlKGhvdmVyRGF0ZSk7XG4gICAgICB2YXIgZGF5RGlmZiA9IGRheS5kaWZmKGhvdmVyRGF0ZS5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLmhvdXIoMTIpLCAnZGF5cycpO1xuICAgICAgcmV0dXJuIGRheURpZmYgPCBtaW5OaWdodHMgJiYgZGF5RGlmZiA+PSAwO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8uaXNEYXlBZnRlckhvdmVyZWRTdGFydERhdGUgPSBmdW5jdGlvbiBpc0RheUFmdGVySG92ZXJlZFN0YXJ0RGF0ZShkYXkpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMxNSA9IHRoaXMucHJvcHMsXG4gICAgICAgIHN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzMTUuc3RhcnREYXRlLFxuICAgICAgICBlbmREYXRlID0gX3RoaXMkcHJvcHMxNS5lbmREYXRlLFxuICAgICAgICBtaW5pbXVtTmlnaHRzID0gX3RoaXMkcHJvcHMxNS5taW5pbXVtTmlnaHRzO1xuXG4gICAgdmFyIF9yZWYyID0gdGhpcy5zdGF0ZSB8fCB7fSxcbiAgICAgICAgaG92ZXJEYXRlID0gX3JlZjIuaG92ZXJEYXRlO1xuXG4gICAgcmV0dXJuICEhc3RhcnREYXRlICYmICFlbmREYXRlICYmICF0aGlzLmlzQmxvY2tlZChkYXkpICYmICgwLCBfaXNOZXh0RGF5W1wiZGVmYXVsdFwiXSkoaG92ZXJEYXRlLCBkYXkpICYmIG1pbmltdW1OaWdodHMgPiAwICYmICgwLCBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXSkoaG92ZXJEYXRlLCBzdGFydERhdGUpO1xuICB9O1xuXG4gIF9wcm90by5pc0VuZERhdGUgPSBmdW5jdGlvbiBpc0VuZERhdGUoZGF5KSB7XG4gICAgdmFyIGVuZERhdGUgPSB0aGlzLnByb3BzLmVuZERhdGU7XG4gICAgcmV0dXJuICgwLCBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBlbmREYXRlKTtcbiAgfTtcblxuICBfcHJvdG8uaXNIb3ZlcmVkID0gZnVuY3Rpb24gaXNIb3ZlcmVkKGRheSkge1xuICAgIHZhciBfcmVmMyA9IHRoaXMuc3RhdGUgfHwge30sXG4gICAgICAgIGhvdmVyRGF0ZSA9IF9yZWYzLmhvdmVyRGF0ZTtcblxuICAgIHZhciBmb2N1c2VkSW5wdXQgPSB0aGlzLnByb3BzLmZvY3VzZWRJbnB1dDtcbiAgICByZXR1cm4gISFmb2N1c2VkSW5wdXQgJiYgKDAsIF9pc1NhbWVEYXlbXCJkZWZhdWx0XCJdKShkYXksIGhvdmVyRGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzSW5Ib3ZlcmVkU3BhbiA9IGZ1bmN0aW9uIGlzSW5Ib3ZlcmVkU3BhbihkYXkpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMxNiA9IHRoaXMucHJvcHMsXG4gICAgICAgIHN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzMTYuc3RhcnREYXRlLFxuICAgICAgICBlbmREYXRlID0gX3RoaXMkcHJvcHMxNi5lbmREYXRlO1xuXG4gICAgdmFyIF9yZWY0ID0gdGhpcy5zdGF0ZSB8fCB7fSxcbiAgICAgICAgaG92ZXJEYXRlID0gX3JlZjQuaG92ZXJEYXRlO1xuXG4gICAgdmFyIGlzRm9yd2FyZFJhbmdlID0gISFzdGFydERhdGUgJiYgIWVuZERhdGUgJiYgKGRheS5pc0JldHdlZW4oc3RhcnREYXRlLCBob3ZlckRhdGUpIHx8ICgwLCBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXSkoaG92ZXJEYXRlLCBkYXkpKTtcbiAgICB2YXIgaXNCYWNrd2FyZFJhbmdlID0gISFlbmREYXRlICYmICFzdGFydERhdGUgJiYgKGRheS5pc0JldHdlZW4oaG92ZXJEYXRlLCBlbmREYXRlKSB8fCAoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKGhvdmVyRGF0ZSwgZGF5KSk7XG4gICAgdmFyIGlzVmFsaWREYXlIb3ZlcmVkID0gaG92ZXJEYXRlICYmICF0aGlzLmlzQmxvY2tlZChob3ZlckRhdGUpO1xuICAgIHJldHVybiAoaXNGb3J3YXJkUmFuZ2UgfHwgaXNCYWNrd2FyZFJhbmdlKSAmJiBpc1ZhbGlkRGF5SG92ZXJlZDtcbiAgfTtcblxuICBfcHJvdG8uaXNJblNlbGVjdGVkU3BhbiA9IGZ1bmN0aW9uIGlzSW5TZWxlY3RlZFNwYW4oZGF5KSB7XG4gICAgdmFyIF90aGlzJHByb3BzMTcgPSB0aGlzLnByb3BzLFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczE3LnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzMTcuZW5kRGF0ZTtcbiAgICByZXR1cm4gZGF5LmlzQmV0d2VlbihzdGFydERhdGUsIGVuZERhdGUsICdkYXlzJyk7XG4gIH07XG5cbiAgX3Byb3RvLmlzTGFzdEluUmFuZ2UgPSBmdW5jdGlvbiBpc0xhc3RJblJhbmdlKGRheSkge1xuICAgIHZhciBlbmREYXRlID0gdGhpcy5wcm9wcy5lbmREYXRlO1xuICAgIHJldHVybiB0aGlzLmlzSW5TZWxlY3RlZFNwYW4oZGF5KSAmJiAoMCwgX2lzTmV4dERheVtcImRlZmF1bHRcIl0pKGRheSwgZW5kRGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzU3RhcnREYXRlID0gZnVuY3Rpb24gaXNTdGFydERhdGUoZGF5KSB7XG4gICAgdmFyIHN0YXJ0RGF0ZSA9IHRoaXMucHJvcHMuc3RhcnREYXRlO1xuICAgIHJldHVybiAoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKGRheSwgc3RhcnREYXRlKTtcbiAgfTtcblxuICBfcHJvdG8uaXNCbG9ja2VkID0gZnVuY3Rpb24gaXNCbG9ja2VkKGRheSkge1xuICAgIHZhciBfdGhpcyRwcm9wczE4ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaXNEYXlCbG9ja2VkID0gX3RoaXMkcHJvcHMxOC5pc0RheUJsb2NrZWQsXG4gICAgICAgIGlzT3V0c2lkZVJhbmdlID0gX3RoaXMkcHJvcHMxOC5pc091dHNpZGVSYW5nZTtcbiAgICByZXR1cm4gaXNEYXlCbG9ja2VkKGRheSkgfHwgaXNPdXRzaWRlUmFuZ2UoZGF5KSB8fCB0aGlzLmRvZXNOb3RNZWV0TWluaW11bU5pZ2h0cyhkYXkpO1xuICB9O1xuXG4gIF9wcm90by5pc1RvZGF5ID0gZnVuY3Rpb24gaXNUb2RheShkYXkpIHtcbiAgICByZXR1cm4gKDAsIF9pc1NhbWVEYXlbXCJkZWZhdWx0XCJdKShkYXksIHRoaXMudG9kYXkpO1xuICB9O1xuXG4gIF9wcm90by5pc0ZpcnN0RGF5T2ZXZWVrID0gZnVuY3Rpb24gaXNGaXJzdERheU9mV2VlayhkYXkpIHtcbiAgICB2YXIgZmlyc3REYXlPZldlZWsgPSB0aGlzLnByb3BzLmZpcnN0RGF5T2ZXZWVrO1xuICAgIHJldHVybiBkYXkuZGF5KCkgPT09IChmaXJzdERheU9mV2VlayB8fCBfbW9tZW50W1wiZGVmYXVsdFwiXS5sb2NhbGVEYXRhKCkuZmlyc3REYXlPZldlZWsoKSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzTGFzdERheU9mV2VlayA9IGZ1bmN0aW9uIGlzTGFzdERheU9mV2VlayhkYXkpIHtcbiAgICB2YXIgZmlyc3REYXlPZldlZWsgPSB0aGlzLnByb3BzLmZpcnN0RGF5T2ZXZWVrO1xuICAgIHJldHVybiBkYXkuZGF5KCkgPT09ICgoZmlyc3REYXlPZldlZWsgfHwgX21vbWVudFtcImRlZmF1bHRcIl0ubG9jYWxlRGF0YSgpLmZpcnN0RGF5T2ZXZWVrKCkpICsgNikgJSA3O1xuICB9O1xuXG4gIF9wcm90by5pc0ZpcnN0UG9zc2libGVFbmREYXRlRm9ySG92ZXJlZFN0YXJ0RGF0ZSA9IGZ1bmN0aW9uIGlzRmlyc3RQb3NzaWJsZUVuZERhdGVGb3JIb3ZlcmVkU3RhcnREYXRlKGRheSwgaG92ZXJEYXRlKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMTkgPSB0aGlzLnByb3BzLFxuICAgICAgICBmb2N1c2VkSW5wdXQgPSBfdGhpcyRwcm9wczE5LmZvY3VzZWRJbnB1dCxcbiAgICAgICAgZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlID0gX3RoaXMkcHJvcHMxOS5nZXRNaW5OaWdodHNGb3JIb3ZlckRhdGU7XG4gICAgaWYgKGZvY3VzZWRJbnB1dCAhPT0gX2NvbnN0YW50cy5FTkRfREFURSB8fCAhaG92ZXJEYXRlIHx8IHRoaXMuaXNCbG9ja2VkKGhvdmVyRGF0ZSkpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgbWluTmlnaHRzID0gZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlKGhvdmVyRGF0ZSk7XG4gICAgdmFyIGZpcnN0QXZhaWxhYmxlRW5kRGF0ZSA9IGhvdmVyRGF0ZS5jbG9uZSgpLmFkZChtaW5OaWdodHMsICdkYXlzJyk7XG4gICAgcmV0dXJuICgwLCBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBmaXJzdEF2YWlsYWJsZUVuZERhdGUpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMjAgPSB0aGlzLnByb3BzLFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IF90aGlzJHByb3BzMjAubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIG9yaWVudGF0aW9uID0gX3RoaXMkcHJvcHMyMC5vcmllbnRhdGlvbixcbiAgICAgICAgbW9udGhGb3JtYXQgPSBfdGhpcyRwcm9wczIwLm1vbnRoRm9ybWF0LFxuICAgICAgICByZW5kZXJNb250aFRleHQgPSBfdGhpcyRwcm9wczIwLnJlbmRlck1vbnRoVGV4dCxcbiAgICAgICAgbmF2UHJldiA9IF90aGlzJHByb3BzMjAubmF2UHJldixcbiAgICAgICAgbmF2TmV4dCA9IF90aGlzJHByb3BzMjAubmF2TmV4dCxcbiAgICAgICAgbm9OYXZCdXR0b25zID0gX3RoaXMkcHJvcHMyMC5ub05hdkJ1dHRvbnMsXG4gICAgICAgIG9uT3V0c2lkZUNsaWNrID0gX3RoaXMkcHJvcHMyMC5vbk91dHNpZGVDbGljayxcbiAgICAgICAgd2l0aFBvcnRhbCA9IF90aGlzJHByb3BzMjAud2l0aFBvcnRhbCxcbiAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfdGhpcyRwcm9wczIwLmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICBmaXJzdERheU9mV2VlayA9IF90aGlzJHByb3BzMjAuZmlyc3REYXlPZldlZWssXG4gICAgICAgIHJlbmRlcktleWJvYXJkU2hvcnRjdXRzQnV0dG9uID0gX3RoaXMkcHJvcHMyMC5yZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbixcbiAgICAgICAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBfdGhpcyRwcm9wczIwLmhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgICBkYXlTaXplID0gX3RoaXMkcHJvcHMyMC5kYXlTaXplLFxuICAgICAgICBmb2N1c2VkSW5wdXQgPSBfdGhpcyRwcm9wczIwLmZvY3VzZWRJbnB1dCxcbiAgICAgICAgcmVuZGVyQ2FsZW5kYXJEYXkgPSBfdGhpcyRwcm9wczIwLnJlbmRlckNhbGVuZGFyRGF5LFxuICAgICAgICByZW5kZXJEYXlDb250ZW50cyA9IF90aGlzJHByb3BzMjAucmVuZGVyRGF5Q29udGVudHMsXG4gICAgICAgIHJlbmRlckNhbGVuZGFySW5mbyA9IF90aGlzJHByb3BzMjAucmVuZGVyQ2FsZW5kYXJJbmZvLFxuICAgICAgICByZW5kZXJNb250aEVsZW1lbnQgPSBfdGhpcyRwcm9wczIwLnJlbmRlck1vbnRoRWxlbWVudCxcbiAgICAgICAgY2FsZW5kYXJJbmZvUG9zaXRpb24gPSBfdGhpcyRwcm9wczIwLmNhbGVuZGFySW5mb1Bvc2l0aW9uLFxuICAgICAgICBvbkJsdXIgPSBfdGhpcyRwcm9wczIwLm9uQmx1cixcbiAgICAgICAgb25TaGlmdFRhYiA9IF90aGlzJHByb3BzMjAub25TaGlmdFRhYixcbiAgICAgICAgb25UYWIgPSBfdGhpcyRwcm9wczIwLm9uVGFiLFxuICAgICAgICBpc0ZvY3VzZWQgPSBfdGhpcyRwcm9wczIwLmlzRm9jdXNlZCxcbiAgICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzID0gX3RoaXMkcHJvcHMyMC5zaG93S2V5Ym9hcmRTaG9ydGN1dHMsXG4gICAgICAgIGlzUlRMID0gX3RoaXMkcHJvcHMyMC5pc1JUTCxcbiAgICAgICAgd2Vla0RheUZvcm1hdCA9IF90aGlzJHByb3BzMjAud2Vla0RheUZvcm1hdCxcbiAgICAgICAgZGF5QXJpYUxhYmVsRm9ybWF0ID0gX3RoaXMkcHJvcHMyMC5kYXlBcmlhTGFiZWxGb3JtYXQsXG4gICAgICAgIHZlcnRpY2FsSGVpZ2h0ID0gX3RoaXMkcHJvcHMyMC52ZXJ0aWNhbEhlaWdodCxcbiAgICAgICAgbm9Cb3JkZXIgPSBfdGhpcyRwcm9wczIwLm5vQm9yZGVyLFxuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfdGhpcyRwcm9wczIwLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgICAgdmVydGljYWxCb3JkZXJTcGFjaW5nID0gX3RoaXMkcHJvcHMyMC52ZXJ0aWNhbEJvcmRlclNwYWNpbmcsXG4gICAgICAgIGhvcml6b250YWxNb250aFBhZGRpbmcgPSBfdGhpcyRwcm9wczIwLmhvcml6b250YWxNb250aFBhZGRpbmc7XG4gICAgdmFyIF90aGlzJHN0YXRlNiA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGN1cnJlbnRNb250aCA9IF90aGlzJHN0YXRlNi5jdXJyZW50TW9udGgsXG4gICAgICAgIHBocmFzZXMgPSBfdGhpcyRzdGF0ZTYucGhyYXNlcyxcbiAgICAgICAgdmlzaWJsZURheXMgPSBfdGhpcyRzdGF0ZTYudmlzaWJsZURheXMsXG4gICAgICAgIGRpc2FibGVQcmV2ID0gX3RoaXMkc3RhdGU2LmRpc2FibGVQcmV2LFxuICAgICAgICBkaXNhYmxlTmV4dCA9IF90aGlzJHN0YXRlNi5kaXNhYmxlTmV4dDtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9EYXlQaWNrZXJbXCJkZWZhdWx0XCJdLCB7XG4gICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb24sXG4gICAgICBlbmFibGVPdXRzaWRlRGF5czogZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICBtb2RpZmllcnM6IHZpc2libGVEYXlzLFxuICAgICAgbnVtYmVyT2ZNb250aHM6IG51bWJlck9mTW9udGhzLFxuICAgICAgb25EYXlDbGljazogdGhpcy5vbkRheUNsaWNrLFxuICAgICAgb25EYXlNb3VzZUVudGVyOiB0aGlzLm9uRGF5TW91c2VFbnRlcixcbiAgICAgIG9uRGF5TW91c2VMZWF2ZTogdGhpcy5vbkRheU1vdXNlTGVhdmUsXG4gICAgICBvblByZXZNb250aENsaWNrOiB0aGlzLm9uUHJldk1vbnRoQ2xpY2ssXG4gICAgICBvbk5leHRNb250aENsaWNrOiB0aGlzLm9uTmV4dE1vbnRoQ2xpY2ssXG4gICAgICBvbk1vbnRoQ2hhbmdlOiB0aGlzLm9uTW9udGhDaGFuZ2UsXG4gICAgICBvblRhYjogb25UYWIsXG4gICAgICBvblNoaWZ0VGFiOiBvblNoaWZ0VGFiLFxuICAgICAgb25ZZWFyQ2hhbmdlOiB0aGlzLm9uWWVhckNoYW5nZSxcbiAgICAgIG9uTXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzOiB0aGlzLm9uTXVsdGlwbHlTY3JvbGxhYmxlTW9udGhzLFxuICAgICAgbW9udGhGb3JtYXQ6IG1vbnRoRm9ybWF0LFxuICAgICAgcmVuZGVyTW9udGhUZXh0OiByZW5kZXJNb250aFRleHQsXG4gICAgICB3aXRoUG9ydGFsOiB3aXRoUG9ydGFsLFxuICAgICAgaGlkZGVuOiAhZm9jdXNlZElucHV0LFxuICAgICAgaW5pdGlhbFZpc2libGVNb250aDogZnVuY3Rpb24gaW5pdGlhbFZpc2libGVNb250aCgpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRNb250aDtcbiAgICAgIH0sXG4gICAgICBkYXlTaXplOiBkYXlTaXplLFxuICAgICAgb25PdXRzaWRlQ2xpY2s6IG9uT3V0c2lkZUNsaWNrLFxuICAgICAgZGlzYWJsZVByZXY6IGRpc2FibGVQcmV2LFxuICAgICAgZGlzYWJsZU5leHQ6IGRpc2FibGVOZXh0LFxuICAgICAgbmF2UHJldjogbmF2UHJldixcbiAgICAgIG5hdk5leHQ6IG5hdk5leHQsXG4gICAgICBub05hdkJ1dHRvbnM6IG5vTmF2QnV0dG9ucyxcbiAgICAgIHJlbmRlckNhbGVuZGFyRGF5OiByZW5kZXJDYWxlbmRhckRheSxcbiAgICAgIHJlbmRlckRheUNvbnRlbnRzOiByZW5kZXJEYXlDb250ZW50cyxcbiAgICAgIHJlbmRlckNhbGVuZGFySW5mbzogcmVuZGVyQ2FsZW5kYXJJbmZvLFxuICAgICAgcmVuZGVyTW9udGhFbGVtZW50OiByZW5kZXJNb250aEVsZW1lbnQsXG4gICAgICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbjogcmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b24sXG4gICAgICBjYWxlbmRhckluZm9Qb3NpdGlvbjogY2FsZW5kYXJJbmZvUG9zaXRpb24sXG4gICAgICBmaXJzdERheU9mV2VlazogZmlyc3REYXlPZldlZWssXG4gICAgICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZCxcbiAgICAgIGdldEZpcnN0Rm9jdXNhYmxlRGF5OiB0aGlzLmdldEZpcnN0Rm9jdXNhYmxlRGF5LFxuICAgICAgb25CbHVyOiBvbkJsdXIsXG4gICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IHNob3dLZXlib2FyZFNob3J0Y3V0cyxcbiAgICAgIHBocmFzZXM6IHBocmFzZXMsXG4gICAgICBpc1JUTDogaXNSVEwsXG4gICAgICB3ZWVrRGF5Rm9ybWF0OiB3ZWVrRGF5Rm9ybWF0LFxuICAgICAgZGF5QXJpYUxhYmVsRm9ybWF0OiBkYXlBcmlhTGFiZWxGb3JtYXQsXG4gICAgICB2ZXJ0aWNhbEhlaWdodDogdmVydGljYWxIZWlnaHQsXG4gICAgICB2ZXJ0aWNhbEJvcmRlclNwYWNpbmc6IHZlcnRpY2FsQm9yZGVyU3BhY2luZyxcbiAgICAgIG5vQm9yZGVyOiBub0JvcmRlcixcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZzogaG9yaXpvbnRhbE1vbnRoUGFkZGluZ1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBEYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXI7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyO1xuRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wczsiLCJ2YXIgYXJyYXlXaXRoSG9sZXMgPSByZXF1aXJlKFwiLi9hcnJheVdpdGhIb2xlc1wiKTtcblxudmFyIGl0ZXJhYmxlVG9BcnJheUxpbWl0ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5TGltaXRcIik7XG5cbnZhciBub25JdGVyYWJsZVJlc3QgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVJlc3RcIik7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zbGljZWRUb0FycmF5OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gaXNOZXh0RGF5O1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfaXNTYW1lRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc1NhbWVEYXlcIikpO1xuXG5mdW5jdGlvbiBpc05leHREYXkoYSwgYikge1xuICBpZiAoIV9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGEpIHx8ICFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChiKSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgbmV4dERheSA9ICgwLCBfbW9tZW50W1wiZGVmYXVsdFwiXSkoYSkuYWRkKDEsICdkYXknKTtcbiAgcmV0dXJuICgwLCBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXSkobmV4dERheSwgYik7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBnZXRWaXNpYmxlRGF5cztcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX3RvSVNPTW9udGhTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RvSVNPTW9udGhTdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBnZXRWaXNpYmxlRGF5cyhtb250aCwgbnVtYmVyT2ZNb250aHMsIGVuYWJsZU91dHNpZGVEYXlzLCB3aXRob3V0VHJhbnNpdGlvbk1vbnRocykge1xuICBpZiAoIV9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KG1vbnRoKSkgcmV0dXJuIHt9O1xuICB2YXIgdmlzaWJsZURheXNCeU1vbnRoID0ge307XG4gIHZhciBjdXJyZW50TW9udGggPSB3aXRob3V0VHJhbnNpdGlvbk1vbnRocyA/IG1vbnRoLmNsb25lKCkgOiBtb250aC5jbG9uZSgpLnN1YnRyYWN0KDEsICdtb250aCcpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgKHdpdGhvdXRUcmFuc2l0aW9uTW9udGhzID8gbnVtYmVyT2ZNb250aHMgOiBudW1iZXJPZk1vbnRocyArIDIpOyBpICs9IDEpIHtcbiAgICB2YXIgdmlzaWJsZURheXMgPSBbXTsgLy8gc2V0IHV0YyBvZmZzZXQgdG8gZ2V0IGNvcnJlY3QgZGF0ZXMgaW4gZnV0dXJlICh3aGVuIHRpbWV6b25lIGNoYW5nZXMpXG5cbiAgICB2YXIgYmFzZURhdGUgPSBjdXJyZW50TW9udGguY2xvbmUoKTtcbiAgICB2YXIgZmlyc3RPZk1vbnRoID0gYmFzZURhdGUuY2xvbmUoKS5zdGFydE9mKCdtb250aCcpLmhvdXIoMTIpO1xuICAgIHZhciBsYXN0T2ZNb250aCA9IGJhc2VEYXRlLmNsb25lKCkuZW5kT2YoJ21vbnRoJykuaG91cigxMik7XG4gICAgdmFyIGN1cnJlbnREYXkgPSBmaXJzdE9mTW9udGguY2xvbmUoKTsgLy8gZGF5cyBiZWxvbmdpbmcgdG8gdGhlIHByZXZpb3VzIG1vbnRoXG5cbiAgICBpZiAoZW5hYmxlT3V0c2lkZURheXMpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY3VycmVudERheS53ZWVrZGF5KCk7IGogKz0gMSkge1xuICAgICAgICB2YXIgcHJldkRheSA9IGN1cnJlbnREYXkuY2xvbmUoKS5zdWJ0cmFjdChqICsgMSwgJ2RheScpO1xuICAgICAgICB2aXNpYmxlRGF5cy51bnNoaWZ0KHByZXZEYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHdoaWxlIChjdXJyZW50RGF5IDwgbGFzdE9mTW9udGgpIHtcbiAgICAgIHZpc2libGVEYXlzLnB1c2goY3VycmVudERheS5jbG9uZSgpKTtcbiAgICAgIGN1cnJlbnREYXkuYWRkKDEsICdkYXknKTtcbiAgICB9XG5cbiAgICBpZiAoZW5hYmxlT3V0c2lkZURheXMpIHtcbiAgICAgIC8vIHdlZWtkYXkoKSByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZGF5IG9mIHRoZSB3ZWVrIGFjY29yZGluZyB0byB0aGUgbG9jYWxlXG4gICAgICAvLyB0aGlzIG1lYW5zIGlmIHRoZSB3ZWVrIHN0YXJ0cyBvbiBNb25kYXksIHdlZWtkYXkoKSB3aWxsIHJldHVybiAwIGZvciBhIE1vbmRheSBkYXRlLCBub3QgMVxuICAgICAgaWYgKGN1cnJlbnREYXkud2Vla2RheSgpICE9PSAwKSB7XG4gICAgICAgIC8vIGRheXMgYmVsb25naW5nIHRvIHRoZSBuZXh0IG1vbnRoXG4gICAgICAgIGZvciAodmFyIGsgPSBjdXJyZW50RGF5LndlZWtkYXkoKSwgY291bnQgPSAwOyBrIDwgNzsgayArPSAxLCBjb3VudCArPSAxKSB7XG4gICAgICAgICAgdmFyIG5leHREYXkgPSBjdXJyZW50RGF5LmNsb25lKCkuYWRkKGNvdW50LCAnZGF5Jyk7XG4gICAgICAgICAgdmlzaWJsZURheXMucHVzaChuZXh0RGF5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZpc2libGVEYXlzQnlNb250aFsoMCwgX3RvSVNPTW9udGhTdHJpbmdbXCJkZWZhdWx0XCJdKShjdXJyZW50TW9udGgpXSA9IHZpc2libGVEYXlzO1xuICAgIGN1cnJlbnRNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpLmFkZCgxLCAnbW9udGgnKTtcbiAgfVxuXG4gIHJldHVybiB2aXNpYmxlRGF5c0J5TW9udGg7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hZGRNb2RpZmllciA9IGFkZE1vZGlmaWVyO1xuZXhwb3J0cy5kZWxldGVNb2RpZmllciA9IGRlbGV0ZU1vZGlmaWVyO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX2lzRGF5VmlzaWJsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNEYXlWaXNpYmxlXCIpKTtcblxudmFyIF90b0lTT0RhdGVTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RvSVNPRGF0ZVN0cmluZ1wiKSk7XG5cbnZhciBfdG9JU09Nb250aFN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdG9JU09Nb250aFN0cmluZ1wiKSk7XG5cbnZhciBfZ2V0UHJldmlvdXNNb250aE1lbW9MYXN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9nZXRQcmV2aW91c01vbnRoTWVtb0xhc3RcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbmZ1bmN0aW9uIGFkZE1vZGlmaWVyKHVwZGF0ZWREYXlzLCBkYXksIG1vZGlmaWVyLCBwcm9wcywgc3RhdGUpIHtcbiAgdmFyIG51bWJlck9mVmlzaWJsZU1vbnRocyA9IHByb3BzLm51bWJlck9mTW9udGhzLFxuICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBwcm9wcy5lbmFibGVPdXRzaWRlRGF5cyxcbiAgICAgIG9yaWVudGF0aW9uID0gcHJvcHMub3JpZW50YXRpb247XG4gIHZhciBmaXJzdFZpc2libGVNb250aCA9IHN0YXRlLmN1cnJlbnRNb250aCxcbiAgICAgIHZpc2libGVEYXlzID0gc3RhdGUudmlzaWJsZURheXM7XG4gIHZhciBjdXJyZW50TW9udGggPSBmaXJzdFZpc2libGVNb250aDtcbiAgdmFyIG51bWJlck9mTW9udGhzID0gbnVtYmVyT2ZWaXNpYmxlTW9udGhzO1xuXG4gIGlmIChvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFKSB7XG4gICAgbnVtYmVyT2ZNb250aHMgPSBPYmplY3Qua2V5cyh2aXNpYmxlRGF5cykubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRNb250aCA9ICgwLCBfZ2V0UHJldmlvdXNNb250aE1lbW9MYXN0W1wiZGVmYXVsdFwiXSkoY3VycmVudE1vbnRoKTtcbiAgICBudW1iZXJPZk1vbnRocyArPSAyO1xuICB9XG5cbiAgaWYgKCFkYXkgfHwgISgwLCBfaXNEYXlWaXNpYmxlW1wiZGVmYXVsdFwiXSkoZGF5LCBjdXJyZW50TW9udGgsIG51bWJlck9mTW9udGhzLCBlbmFibGVPdXRzaWRlRGF5cykpIHtcbiAgICByZXR1cm4gdXBkYXRlZERheXM7XG4gIH1cblxuICB2YXIgaXNvID0gKDAsIF90b0lTT0RhdGVTdHJpbmdbXCJkZWZhdWx0XCJdKShkYXkpO1xuICB2YXIgdXBkYXRlZERheXNBZnRlckFkZGl0aW9uID0gKDAsIF9vYmplY3RTcHJlYWQxMltcImRlZmF1bHRcIl0pKHt9LCB1cGRhdGVkRGF5cyk7XG5cbiAgaWYgKGVuYWJsZU91dHNpZGVEYXlzKSB7XG4gICAgdmFyIG1vbnRoc1RvVXBkYXRlID0gT2JqZWN0LmtleXModmlzaWJsZURheXMpLmZpbHRlcihmdW5jdGlvbiAobW9udGhLZXkpIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyh2aXNpYmxlRGF5c1ttb250aEtleV0pLmluZGV4T2YoaXNvKSA+IC0xO1xuICAgIH0pO1xuICAgIHVwZGF0ZWREYXlzQWZ0ZXJBZGRpdGlvbiA9IG1vbnRoc1RvVXBkYXRlLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBtb250aElzbykge1xuICAgICAgdmFyIG1vbnRoID0gdXBkYXRlZERheXNbbW9udGhJc29dIHx8IHZpc2libGVEYXlzW21vbnRoSXNvXTtcblxuICAgICAgaWYgKCFtb250aFtpc29dIHx8ICFtb250aFtpc29dLmhhcyhtb2RpZmllcikpIHtcbiAgICAgICAgdmFyIG1vZGlmaWVycyA9IG5ldyBTZXQobW9udGhbaXNvXSk7XG4gICAgICAgIG1vZGlmaWVycy5hZGQobW9kaWZpZXIpO1xuICAgICAgICBhY2NbbW9udGhJc29dID0gKDAsIF9vYmplY3RTcHJlYWQxMltcImRlZmF1bHRcIl0pKHt9LCBtb250aCwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh7fSwgaXNvLCBtb2RpZmllcnMpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB1cGRhdGVkRGF5c0FmdGVyQWRkaXRpb24pO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb250aElzbyA9ICgwLCBfdG9JU09Nb250aFN0cmluZ1tcImRlZmF1bHRcIl0pKGRheSk7XG4gICAgdmFyIG1vbnRoID0gdXBkYXRlZERheXNbbW9udGhJc29dIHx8IHZpc2libGVEYXlzW21vbnRoSXNvXSB8fCB7fTtcblxuICAgIGlmICghbW9udGhbaXNvXSB8fCAhbW9udGhbaXNvXS5oYXMobW9kaWZpZXIpKSB7XG4gICAgICB2YXIgbW9kaWZpZXJzID0gbmV3IFNldChtb250aFtpc29dKTtcbiAgICAgIG1vZGlmaWVycy5hZGQobW9kaWZpZXIpO1xuICAgICAgdXBkYXRlZERheXNBZnRlckFkZGl0aW9uW21vbnRoSXNvXSA9ICgwLCBfb2JqZWN0U3ByZWFkMTJbXCJkZWZhdWx0XCJdKSh7fSwgbW9udGgsICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIGlzbywgbW9kaWZpZXJzKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVwZGF0ZWREYXlzQWZ0ZXJBZGRpdGlvbjtcbn1cblxuZnVuY3Rpb24gZGVsZXRlTW9kaWZpZXIodXBkYXRlZERheXMsIGRheSwgbW9kaWZpZXIsIHByb3BzLCBzdGF0ZSkge1xuICB2YXIgbnVtYmVyT2ZWaXNpYmxlTW9udGhzID0gcHJvcHMubnVtYmVyT2ZNb250aHMsXG4gICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IHByb3BzLmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgb3JpZW50YXRpb24gPSBwcm9wcy5vcmllbnRhdGlvbjtcbiAgdmFyIGZpcnN0VmlzaWJsZU1vbnRoID0gc3RhdGUuY3VycmVudE1vbnRoLFxuICAgICAgdmlzaWJsZURheXMgPSBzdGF0ZS52aXNpYmxlRGF5cztcbiAgdmFyIGN1cnJlbnRNb250aCA9IGZpcnN0VmlzaWJsZU1vbnRoO1xuICB2YXIgbnVtYmVyT2ZNb250aHMgPSBudW1iZXJPZlZpc2libGVNb250aHM7XG5cbiAgaWYgKG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEUpIHtcbiAgICBudW1iZXJPZk1vbnRocyA9IE9iamVjdC5rZXlzKHZpc2libGVEYXlzKS5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgY3VycmVudE1vbnRoID0gKDAsIF9nZXRQcmV2aW91c01vbnRoTWVtb0xhc3RbXCJkZWZhdWx0XCJdKShjdXJyZW50TW9udGgpO1xuICAgIG51bWJlck9mTW9udGhzICs9IDI7XG4gIH1cblxuICBpZiAoIWRheSB8fCAhKDAsIF9pc0RheVZpc2libGVbXCJkZWZhdWx0XCJdKShkYXksIGN1cnJlbnRNb250aCwgbnVtYmVyT2ZNb250aHMsIGVuYWJsZU91dHNpZGVEYXlzKSkge1xuICAgIHJldHVybiB1cGRhdGVkRGF5cztcbiAgfVxuXG4gIHZhciBpc28gPSAoMCwgX3RvSVNPRGF0ZVN0cmluZ1tcImRlZmF1bHRcIl0pKGRheSk7XG4gIHZhciB1cGRhdGVkRGF5c0FmdGVyRGVsZXRpb24gPSAoMCwgX29iamVjdFNwcmVhZDEyW1wiZGVmYXVsdFwiXSkoe30sIHVwZGF0ZWREYXlzKTtcblxuICBpZiAoZW5hYmxlT3V0c2lkZURheXMpIHtcbiAgICB2YXIgbW9udGhzVG9VcGRhdGUgPSBPYmplY3Qua2V5cyh2aXNpYmxlRGF5cykuZmlsdGVyKGZ1bmN0aW9uIChtb250aEtleSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHZpc2libGVEYXlzW21vbnRoS2V5XSkuaW5kZXhPZihpc28pID4gLTE7XG4gICAgfSk7XG4gICAgdXBkYXRlZERheXNBZnRlckRlbGV0aW9uID0gbW9udGhzVG9VcGRhdGUucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG1vbnRoSXNvKSB7XG4gICAgICB2YXIgbW9udGggPSB1cGRhdGVkRGF5c1ttb250aElzb10gfHwgdmlzaWJsZURheXNbbW9udGhJc29dO1xuXG4gICAgICBpZiAobW9udGhbaXNvXSAmJiBtb250aFtpc29dLmhhcyhtb2RpZmllcikpIHtcbiAgICAgICAgdmFyIG1vZGlmaWVycyA9IG5ldyBTZXQobW9udGhbaXNvXSk7XG4gICAgICAgIG1vZGlmaWVyc1tcImRlbGV0ZVwiXShtb2RpZmllcik7XG4gICAgICAgIGFjY1ttb250aElzb10gPSAoMCwgX29iamVjdFNwcmVhZDEyW1wiZGVmYXVsdFwiXSkoe30sIG1vbnRoLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHt9LCBpc28sIG1vZGlmaWVycykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHVwZGF0ZWREYXlzQWZ0ZXJEZWxldGlvbik7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vbnRoSXNvID0gKDAsIF90b0lTT01vbnRoU3RyaW5nW1wiZGVmYXVsdFwiXSkoZGF5KTtcbiAgICB2YXIgbW9udGggPSB1cGRhdGVkRGF5c1ttb250aElzb10gfHwgdmlzaWJsZURheXNbbW9udGhJc29dIHx8IHt9O1xuXG4gICAgaWYgKG1vbnRoW2lzb10gJiYgbW9udGhbaXNvXS5oYXMobW9kaWZpZXIpKSB7XG4gICAgICB2YXIgbW9kaWZpZXJzID0gbmV3IFNldChtb250aFtpc29dKTtcbiAgICAgIG1vZGlmaWVyc1tcImRlbGV0ZVwiXShtb2RpZmllcik7XG4gICAgICB1cGRhdGVkRGF5c0FmdGVyRGVsZXRpb25bbW9udGhJc29dID0gKDAsIF9vYmplY3RTcHJlYWQxMltcImRlZmF1bHRcIl0pKHt9LCBtb250aCwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh7fSwgaXNvLCBtb2RpZmllcnMpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdXBkYXRlZERheXNBZnRlckRlbGV0aW9uO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZ2V0UG9vbGVkTW9tZW50O1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBtb21lbnRQb29sID0gbmV3IE1hcCgpO1xuXG5mdW5jdGlvbiBnZXRQb29sZWRNb21lbnQoZGF5U3RyaW5nKSB7XG4gIGlmICghbW9tZW50UG9vbC5oYXMoZGF5U3RyaW5nKSkge1xuICAgIG1vbWVudFBvb2wuc2V0KGRheVN0cmluZywgKDAsIF9tb21lbnRbXCJkZWZhdWx0XCJdKShkYXlTdHJpbmcpKTtcbiAgfVxuXG4gIHJldHVybiBtb21lbnRQb29sLmdldChkYXlTdHJpbmcpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2VuenltZVNoYWxsb3dFcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImVuenltZS1zaGFsbG93LWVxdWFsXCIpKTtcblxudmFyIF9zbGljZWRUb0FycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkNyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdE1vbWVudFByb3B0eXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LW1vbWVudC1wcm9wdHlwZXNcIikpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX29iamVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm9iamVjdC52YWx1ZXNcIikpO1xuXG52YXIgX2lzVG91Y2hEZXZpY2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpcy10b3VjaC1kZXZpY2VcIikpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKSk7XG5cbnZhciBfaXNTYW1lRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvaXNTYW1lRGF5XCIpKTtcblxudmFyIF9pc0FmdGVyRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvaXNBZnRlckRheVwiKSk7XG5cbnZhciBfZ2V0VmlzaWJsZURheXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRWaXNpYmxlRGF5c1wiKSk7XG5cbnZhciBfdG9JU09EYXRlU3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvdG9JU09EYXRlU3RyaW5nXCIpKTtcblxudmFyIF9tb2RpZmllcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvbW9kaWZpZXJzXCIpO1xuXG52YXIgX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlXCIpKTtcblxudmFyIF9EYXlPZldlZWtTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9EYXlPZldlZWtTaGFwZVwiKSk7XG5cbnZhciBfQ2FsZW5kYXJJbmZvUG9zaXRpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9DYWxlbmRhckluZm9Qb3NpdGlvblNoYXBlXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG52YXIgX0RheVBpY2tlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRGF5UGlja2VyXCIpKTtcblxudmFyIF9nZXRQb29sZWRNb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRQb29sZWRNb21lbnRcIikpO1xuXG52YXIgcHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9haXJibmJQcm9wVHlwZXMuZm9yYmlkRXh0cmFQcm9wcykoe1xuICBkYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXNbXCJkZWZhdWx0XCJdLm1vbWVudE9iaixcbiAgb25EYXRlQ2hhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBmb2N1c2VkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBvbkZvY3VzQ2hhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkNsb3NlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgaXNPdXRzaWRlUmFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGlzRGF5QmxvY2tlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgaXNEYXlIaWdobGlnaHRlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgLy8gRGF5UGlja2VyIHByb3BzXG4gIHJlbmRlck1vbnRoVGV4dDogKDAsIF9haXJibmJQcm9wVHlwZXMubXV0dWFsbHlFeGNsdXNpdmVQcm9wcykoX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYywgJ3JlbmRlck1vbnRoVGV4dCcsICdyZW5kZXJNb250aEVsZW1lbnQnKSxcbiAgcmVuZGVyTW9udGhFbGVtZW50OiAoMCwgX2FpcmJuYlByb3BUeXBlcy5tdXR1YWxseUV4Y2x1c2l2ZVByb3BzKShfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLCAncmVuZGVyTW9udGhUZXh0JywgJ3JlbmRlck1vbnRoRWxlbWVudCcpLFxuICBlbmFibGVPdXRzaWRlRGF5czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgbnVtYmVyT2ZNb250aHM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgb3JpZW50YXRpb246IF9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIHdpdGhQb3J0YWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGluaXRpYWxWaXNpYmxlTW9udGg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGZpcnN0RGF5T2ZXZWVrOiBfRGF5T2ZXZWVrU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgZGF5U2l6ZTogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIHZlcnRpY2FsSGVpZ2h0OiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgbm9Cb3JkZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHZlcnRpY2FsQm9yZGVyU3BhY2luZzogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIGhvcml6b250YWxNb250aFBhZGRpbmc6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBuYXZQcmV2OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBuYXZOZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBvblByZXZNb250aENsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbk5leHRNb250aENsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbk91dHNpZGVDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlckRheUNvbnRlbnRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJDYWxlbmRhckluZm86IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGNhbGVuZGFySW5mb1Bvc2l0aW9uOiBfQ2FsZW5kYXJJbmZvUG9zaXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIC8vIGFjY2Vzc2liaWxpdHlcbiAgb25CbHVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBpc0ZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgb25UYWI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uU2hpZnRUYWI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIC8vIGkxOG5cbiAgbW9udGhGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgd2Vla0RheUZvcm1hdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBwaHJhc2VzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zaGFwZSgoMCwgX2dldFBocmFzZVByb3BUeXBlc1tcImRlZmF1bHRcIl0pKF9kZWZhdWx0UGhyYXNlcy5EYXlQaWNrZXJQaHJhc2VzKSksXG4gIGRheUFyaWFMYWJlbEZvcm1hdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBpc1JUTDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbFxufSkgOiB7fTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGRhdGU6IHVuZGVmaW5lZCxcbiAgLy8gVE9ETzogdXNlIG51bGxcbiAgb25EYXRlQ2hhbmdlOiBmdW5jdGlvbiBvbkRhdGVDaGFuZ2UoKSB7fSxcbiAgZm9jdXNlZDogZmFsc2UsXG4gIG9uRm9jdXNDaGFuZ2U6IGZ1bmN0aW9uIG9uRm9jdXNDaGFuZ2UoKSB7fSxcbiAgb25DbG9zZTogZnVuY3Rpb24gb25DbG9zZSgpIHt9LFxuICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDogZmFsc2UsXG4gIGlzT3V0c2lkZVJhbmdlOiBmdW5jdGlvbiBpc091dHNpZGVSYW5nZSgpIHt9LFxuICBpc0RheUJsb2NrZWQ6IGZ1bmN0aW9uIGlzRGF5QmxvY2tlZCgpIHt9LFxuICBpc0RheUhpZ2hsaWdodGVkOiBmdW5jdGlvbiBpc0RheUhpZ2hsaWdodGVkKCkge30sXG4gIC8vIERheVBpY2tlciBwcm9wc1xuICByZW5kZXJNb250aFRleHQ6IG51bGwsXG4gIGVuYWJsZU91dHNpZGVEYXlzOiBmYWxzZSxcbiAgbnVtYmVyT2ZNb250aHM6IDEsXG4gIG9yaWVudGF0aW9uOiBfY29uc3RhbnRzLkhPUklaT05UQUxfT1JJRU5UQVRJT04sXG4gIHdpdGhQb3J0YWw6IGZhbHNlLFxuICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogZmFsc2UsXG4gIGluaXRpYWxWaXNpYmxlTW9udGg6IG51bGwsXG4gIGZpcnN0RGF5T2ZXZWVrOiBudWxsLFxuICBkYXlTaXplOiBfY29uc3RhbnRzLkRBWV9TSVpFLFxuICB2ZXJ0aWNhbEhlaWdodDogbnVsbCxcbiAgbm9Cb3JkZXI6IGZhbHNlLFxuICB2ZXJ0aWNhbEJvcmRlclNwYWNpbmc6IHVuZGVmaW5lZCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiB1bmRlZmluZWQsXG4gIGhvcml6b250YWxNb250aFBhZGRpbmc6IDEzLFxuICBuYXZQcmV2OiBudWxsLFxuICBuYXZOZXh0OiBudWxsLFxuICBvblByZXZNb250aENsaWNrOiBmdW5jdGlvbiBvblByZXZNb250aENsaWNrKCkge30sXG4gIG9uTmV4dE1vbnRoQ2xpY2s6IGZ1bmN0aW9uIG9uTmV4dE1vbnRoQ2xpY2soKSB7fSxcbiAgb25PdXRzaWRlQ2xpY2s6IGZ1bmN0aW9uIG9uT3V0c2lkZUNsaWNrKCkge30sXG4gIHJlbmRlckNhbGVuZGFyRGF5OiB1bmRlZmluZWQsXG4gIHJlbmRlckRheUNvbnRlbnRzOiBudWxsLFxuICByZW5kZXJDYWxlbmRhckluZm86IG51bGwsXG4gIHJlbmRlck1vbnRoRWxlbWVudDogbnVsbCxcbiAgY2FsZW5kYXJJbmZvUG9zaXRpb246IF9jb25zdGFudHMuSU5GT19QT1NJVElPTl9CT1RUT00sXG4gIC8vIGFjY2Vzc2liaWxpdHlcbiAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7fSxcbiAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBmYWxzZSxcbiAgb25UYWI6IGZ1bmN0aW9uIG9uVGFiKCkge30sXG4gIG9uU2hpZnRUYWI6IGZ1bmN0aW9uIG9uU2hpZnRUYWIoKSB7fSxcbiAgLy8gaTE4blxuICBtb250aEZvcm1hdDogJ01NTU0gWVlZWScsXG4gIHdlZWtEYXlGb3JtYXQ6ICdkZCcsXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5EYXlQaWNrZXJQaHJhc2VzLFxuICBkYXlBcmlhTGFiZWxGb3JtYXQ6IHVuZGVmaW5lZCxcbiAgaXNSVEw6IGZhbHNlXG59O1xuXG52YXIgRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9yZWYpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMltcImRlZmF1bHRcIl0pKERheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyLCBfcmVmKTtcbiAgdmFyIF9wcm90byA9IERheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG9bIV9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAmJiBcInNob3VsZENvbXBvbmVudFVwZGF0ZVwiXSA9IGZ1bmN0aW9uIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIHJldHVybiAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnByb3BzLCBuZXh0UHJvcHMpIHx8ICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9yZWYuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5pc1RvdWNoRGV2aWNlID0gZmFsc2U7XG4gICAgX3RoaXMudG9kYXkgPSAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCk7XG4gICAgX3RoaXMubW9kaWZpZXJzID0ge1xuICAgICAgdG9kYXk6IGZ1bmN0aW9uIHRvZGF5KGRheSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaXNUb2RheShkYXkpO1xuICAgICAgfSxcbiAgICAgIGJsb2NrZWQ6IGZ1bmN0aW9uIGJsb2NrZWQoZGF5KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pc0Jsb2NrZWQoZGF5KTtcbiAgICAgIH0sXG4gICAgICAnYmxvY2tlZC1jYWxlbmRhcic6IGZ1bmN0aW9uIGJsb2NrZWRDYWxlbmRhcihkYXkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmlzRGF5QmxvY2tlZChkYXkpO1xuICAgICAgfSxcbiAgICAgICdibG9ja2VkLW91dC1vZi1yYW5nZSc6IGZ1bmN0aW9uIGJsb2NrZWRPdXRPZlJhbmdlKGRheSkge1xuICAgICAgICByZXR1cm4gcHJvcHMuaXNPdXRzaWRlUmFuZ2UoZGF5KTtcbiAgICAgIH0sXG4gICAgICAnaGlnaGxpZ2h0ZWQtY2FsZW5kYXInOiBmdW5jdGlvbiBoaWdobGlnaHRlZENhbGVuZGFyKGRheSkge1xuICAgICAgICByZXR1cm4gcHJvcHMuaXNEYXlIaWdobGlnaHRlZChkYXkpO1xuICAgICAgfSxcbiAgICAgIHZhbGlkOiBmdW5jdGlvbiB2YWxpZChkYXkpIHtcbiAgICAgICAgcmV0dXJuICFfdGhpcy5pc0Jsb2NrZWQoZGF5KTtcbiAgICAgIH0sXG4gICAgICBob3ZlcmVkOiBmdW5jdGlvbiBob3ZlcmVkKGRheSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaXNIb3ZlcmVkKGRheSk7XG4gICAgICB9LFxuICAgICAgc2VsZWN0ZWQ6IGZ1bmN0aW9uIHNlbGVjdGVkKGRheSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaXNTZWxlY3RlZChkYXkpO1xuICAgICAgfSxcbiAgICAgICdmaXJzdC1kYXktb2Ytd2Vlayc6IGZ1bmN0aW9uIGZpcnN0RGF5T2ZXZWVrKGRheSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaXNGaXJzdERheU9mV2VlayhkYXkpO1xuICAgICAgfSxcbiAgICAgICdsYXN0LWRheS1vZi13ZWVrJzogZnVuY3Rpb24gbGFzdERheU9mV2VlayhkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzTGFzdERheU9mV2VlayhkYXkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgX3RoaXMkZ2V0U3RhdGVGb3JOZXdNID0gX3RoaXMuZ2V0U3RhdGVGb3JOZXdNb250aChwcm9wcyksXG4gICAgICAgIGN1cnJlbnRNb250aCA9IF90aGlzJGdldFN0YXRlRm9yTmV3TS5jdXJyZW50TW9udGgsXG4gICAgICAgIHZpc2libGVEYXlzID0gX3RoaXMkZ2V0U3RhdGVGb3JOZXdNLnZpc2libGVEYXlzO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBob3ZlckRhdGU6IG51bGwsXG4gICAgICBjdXJyZW50TW9udGg6IGN1cnJlbnRNb250aCxcbiAgICAgIHZpc2libGVEYXlzOiB2aXNpYmxlRGF5c1xuICAgIH07XG4gICAgX3RoaXMub25EYXlNb3VzZUVudGVyID0gX3RoaXMub25EYXlNb3VzZUVudGVyLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbkRheU1vdXNlTGVhdmUgPSBfdGhpcy5vbkRheU1vdXNlTGVhdmUuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uRGF5Q2xpY2sgPSBfdGhpcy5vbkRheUNsaWNrLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vblByZXZNb250aENsaWNrID0gX3RoaXMub25QcmV2TW9udGhDbGljay5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25OZXh0TW9udGhDbGljayA9IF90aGlzLm9uTmV4dE1vbnRoQ2xpY2suYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uTW9udGhDaGFuZ2UgPSBfdGhpcy5vbk1vbnRoQ2hhbmdlLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vblllYXJDaGFuZ2UgPSBfdGhpcy5vblllYXJDaGFuZ2UuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLmdldEZpcnN0Rm9jdXNhYmxlRGF5ID0gX3RoaXMuZ2V0Rmlyc3RGb2N1c2FibGVEYXkuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuaXNUb3VjaERldmljZSA9ICgwLCBfaXNUb3VjaERldmljZVtcImRlZmF1bHRcIl0pKCk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGRhdGUgPSBuZXh0UHJvcHMuZGF0ZSxcbiAgICAgICAgZm9jdXNlZCA9IG5leHRQcm9wcy5mb2N1c2VkLFxuICAgICAgICBpc091dHNpZGVSYW5nZSA9IG5leHRQcm9wcy5pc091dHNpZGVSYW5nZSxcbiAgICAgICAgaXNEYXlCbG9ja2VkID0gbmV4dFByb3BzLmlzRGF5QmxvY2tlZCxcbiAgICAgICAgaXNEYXlIaWdobGlnaHRlZCA9IG5leHRQcm9wcy5pc0RheUhpZ2hsaWdodGVkLFxuICAgICAgICBpbml0aWFsVmlzaWJsZU1vbnRoID0gbmV4dFByb3BzLmluaXRpYWxWaXNpYmxlTW9udGgsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gbmV4dFByb3BzLm51bWJlck9mTW9udGhzLFxuICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IG5leHRQcm9wcy5lbmFibGVPdXRzaWRlRGF5cztcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBwcmV2SXNPdXRzaWRlUmFuZ2UgPSBfdGhpcyRwcm9wcy5pc091dHNpZGVSYW5nZSxcbiAgICAgICAgcHJldklzRGF5QmxvY2tlZCA9IF90aGlzJHByb3BzLmlzRGF5QmxvY2tlZCxcbiAgICAgICAgcHJldklzRGF5SGlnaGxpZ2h0ZWQgPSBfdGhpcyRwcm9wcy5pc0RheUhpZ2hsaWdodGVkLFxuICAgICAgICBwcmV2TnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wcy5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgcHJldkVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHMuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgIHByZXZJbml0aWFsVmlzaWJsZU1vbnRoID0gX3RoaXMkcHJvcHMuaW5pdGlhbFZpc2libGVNb250aCxcbiAgICAgICAgcHJldkZvY3VzZWQgPSBfdGhpcyRwcm9wcy5mb2N1c2VkLFxuICAgICAgICBwcmV2RGF0ZSA9IF90aGlzJHByb3BzLmRhdGU7XG4gICAgdmFyIHZpc2libGVEYXlzID0gdGhpcy5zdGF0ZS52aXNpYmxlRGF5cztcbiAgICB2YXIgcmVjb21wdXRlT3V0c2lkZVJhbmdlID0gZmFsc2U7XG4gICAgdmFyIHJlY29tcHV0ZURheUJsb2NrZWQgPSBmYWxzZTtcbiAgICB2YXIgcmVjb21wdXRlRGF5SGlnaGxpZ2h0ZWQgPSBmYWxzZTtcblxuICAgIGlmIChpc091dHNpZGVSYW5nZSAhPT0gcHJldklzT3V0c2lkZVJhbmdlKSB7XG4gICAgICB0aGlzLm1vZGlmaWVyc1snYmxvY2tlZC1vdXQtb2YtcmFuZ2UnXSA9IGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgcmV0dXJuIGlzT3V0c2lkZVJhbmdlKGRheSk7XG4gICAgICB9O1xuXG4gICAgICByZWNvbXB1dGVPdXRzaWRlUmFuZ2UgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpc0RheUJsb2NrZWQgIT09IHByZXZJc0RheUJsb2NrZWQpIHtcbiAgICAgIHRoaXMubW9kaWZpZXJzWydibG9ja2VkLWNhbGVuZGFyJ10gPSBmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgIHJldHVybiBpc0RheUJsb2NrZWQoZGF5KTtcbiAgICAgIH07XG5cbiAgICAgIHJlY29tcHV0ZURheUJsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpc0RheUhpZ2hsaWdodGVkICE9PSBwcmV2SXNEYXlIaWdobGlnaHRlZCkge1xuICAgICAgdGhpcy5tb2RpZmllcnNbJ2hpZ2hsaWdodGVkLWNhbGVuZGFyJ10gPSBmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgIHJldHVybiBpc0RheUhpZ2hsaWdodGVkKGRheSk7XG4gICAgICB9O1xuXG4gICAgICByZWNvbXB1dGVEYXlIaWdobGlnaHRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHJlY29tcHV0ZVByb3BNb2RpZmllcnMgPSByZWNvbXB1dGVPdXRzaWRlUmFuZ2UgfHwgcmVjb21wdXRlRGF5QmxvY2tlZCB8fCByZWNvbXB1dGVEYXlIaWdobGlnaHRlZDtcblxuICAgIGlmIChudW1iZXJPZk1vbnRocyAhPT0gcHJldk51bWJlck9mTW9udGhzIHx8IGVuYWJsZU91dHNpZGVEYXlzICE9PSBwcmV2RW5hYmxlT3V0c2lkZURheXMgfHwgaW5pdGlhbFZpc2libGVNb250aCAhPT0gcHJldkluaXRpYWxWaXNpYmxlTW9udGggJiYgIXByZXZGb2N1c2VkICYmIGZvY3VzZWQpIHtcbiAgICAgIHZhciBuZXdNb250aFN0YXRlID0gdGhpcy5nZXRTdGF0ZUZvck5ld01vbnRoKG5leHRQcm9wcyk7XG4gICAgICB2YXIgY3VycmVudE1vbnRoID0gbmV3TW9udGhTdGF0ZS5jdXJyZW50TW9udGg7XG4gICAgICB2aXNpYmxlRGF5cyA9IG5ld01vbnRoU3RhdGUudmlzaWJsZURheXM7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY3VycmVudE1vbnRoOiBjdXJyZW50TW9udGgsXG4gICAgICAgIHZpc2libGVEYXlzOiB2aXNpYmxlRGF5c1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGRpZERhdGVDaGFuZ2UgPSBkYXRlICE9PSBwcmV2RGF0ZTtcbiAgICB2YXIgZGlkRm9jdXNDaGFuZ2UgPSBmb2N1c2VkICE9PSBwcmV2Rm9jdXNlZDtcbiAgICB2YXIgbW9kaWZpZXJzID0ge307XG5cbiAgICBpZiAoZGlkRGF0ZUNoYW5nZSkge1xuICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIHByZXZEYXRlLCAnc2VsZWN0ZWQnKTtcbiAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBkYXRlLCAnc2VsZWN0ZWQnKTtcbiAgICB9XG5cbiAgICBpZiAoZGlkRm9jdXNDaGFuZ2UgfHwgcmVjb21wdXRlUHJvcE1vZGlmaWVycykge1xuICAgICAgKDAsIF9vYmplY3RbXCJkZWZhdWx0XCJdKSh2aXNpYmxlRGF5cykuZm9yRWFjaChmdW5jdGlvbiAoZGF5cykge1xuICAgICAgICBPYmplY3Qua2V5cyhkYXlzKS5mb3JFYWNoKGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgICB2YXIgbW9tZW50T2JqID0gKDAsIF9nZXRQb29sZWRNb21lbnRbXCJkZWZhdWx0XCJdKShkYXkpO1xuXG4gICAgICAgICAgaWYgKF90aGlzMi5pc0Jsb2NrZWQobW9tZW50T2JqKSkge1xuICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnYmxvY2tlZCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdibG9ja2VkJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRpZEZvY3VzQ2hhbmdlIHx8IHJlY29tcHV0ZU91dHNpZGVSYW5nZSkge1xuICAgICAgICAgICAgaWYgKGlzT3V0c2lkZVJhbmdlKG1vbWVudE9iaikpIHtcbiAgICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnYmxvY2tlZC1vdXQtb2YtcmFuZ2UnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1vZGlmaWVycyA9IF90aGlzMi5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIG1vbWVudE9iaiwgJ2Jsb2NrZWQtb3V0LW9mLXJhbmdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRpZEZvY3VzQ2hhbmdlIHx8IHJlY29tcHV0ZURheUJsb2NrZWQpIHtcbiAgICAgICAgICAgIGlmIChpc0RheUJsb2NrZWQobW9tZW50T2JqKSkge1xuICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdibG9ja2VkLWNhbGVuZGFyJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdibG9ja2VkLWNhbGVuZGFyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRpZEZvY3VzQ2hhbmdlIHx8IHJlY29tcHV0ZURheUhpZ2hsaWdodGVkKSB7XG4gICAgICAgICAgICBpZiAoaXNEYXlIaWdobGlnaHRlZChtb21lbnRPYmopKSB7XG4gICAgICAgICAgICAgIG1vZGlmaWVycyA9IF90aGlzMi5hZGRNb2RpZmllcihtb2RpZmllcnMsIG1vbWVudE9iaiwgJ2hpZ2hsaWdodGVkLWNhbGVuZGFyJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdoaWdobGlnaHRlZC1jYWxlbmRhcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgdG9kYXkgPSAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCk7XG5cbiAgICBpZiAoISgwLCBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXSkodGhpcy50b2RheSwgdG9kYXkpKSB7XG4gICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgdGhpcy50b2RheSwgJ3RvZGF5Jyk7XG4gICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgdG9kYXksICd0b2RheScpO1xuICAgICAgdGhpcy50b2RheSA9IHRvZGF5O1xuICAgIH1cblxuICAgIGlmIChPYmplY3Qua2V5cyhtb2RpZmllcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICB2aXNpYmxlRGF5czogKDAsIF9vYmplY3RTcHJlYWQ3W1wiZGVmYXVsdFwiXSkoe30sIHZpc2libGVEYXlzLCB7fSwgbW9kaWZpZXJzKVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZSgpIHtcbiAgICB0aGlzLnRvZGF5ID0gKDAsIF9tb21lbnRbXCJkZWZhdWx0XCJdKSgpO1xuICB9O1xuXG4gIF9wcm90by5vbkRheUNsaWNrID0gZnVuY3Rpb24gb25EYXlDbGljayhkYXksIGUpIHtcbiAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICh0aGlzLmlzQmxvY2tlZChkYXkpKSByZXR1cm47XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uRGF0ZUNoYW5nZSA9IF90aGlzJHByb3BzMi5vbkRhdGVDaGFuZ2UsXG4gICAgICAgIGtlZXBPcGVuT25EYXRlU2VsZWN0ID0gX3RoaXMkcHJvcHMyLmtlZXBPcGVuT25EYXRlU2VsZWN0LFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHMyLm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgIG9uQ2xvc2UgPSBfdGhpcyRwcm9wczIub25DbG9zZTtcbiAgICBvbkRhdGVDaGFuZ2UoZGF5KTtcblxuICAgIGlmICgha2VlcE9wZW5PbkRhdGVTZWxlY3QpIHtcbiAgICAgIG9uRm9jdXNDaGFuZ2Uoe1xuICAgICAgICBmb2N1c2VkOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBvbkNsb3NlKHtcbiAgICAgICAgZGF0ZTogZGF5XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uRGF5TW91c2VFbnRlciA9IGZ1bmN0aW9uIG9uRGF5TW91c2VFbnRlcihkYXkpIHtcbiAgICBpZiAodGhpcy5pc1RvdWNoRGV2aWNlKSByZXR1cm47XG4gICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgaG92ZXJEYXRlID0gX3RoaXMkc3RhdGUuaG92ZXJEYXRlLFxuICAgICAgICB2aXNpYmxlRGF5cyA9IF90aGlzJHN0YXRlLnZpc2libGVEYXlzO1xuICAgIHZhciBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyKHt9LCBob3ZlckRhdGUsICdob3ZlcmVkJyk7XG4gICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllcihtb2RpZmllcnMsIGRheSwgJ2hvdmVyZWQnKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGhvdmVyRGF0ZTogZGF5LFxuICAgICAgdmlzaWJsZURheXM6ICgwLCBfb2JqZWN0U3ByZWFkN1tcImRlZmF1bHRcIl0pKHt9LCB2aXNpYmxlRGF5cywge30sIG1vZGlmaWVycylcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25EYXlNb3VzZUxlYXZlID0gZnVuY3Rpb24gb25EYXlNb3VzZUxlYXZlKCkge1xuICAgIHZhciBfdGhpcyRzdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICBob3ZlckRhdGUgPSBfdGhpcyRzdGF0ZTIuaG92ZXJEYXRlLFxuICAgICAgICB2aXNpYmxlRGF5cyA9IF90aGlzJHN0YXRlMi52aXNpYmxlRGF5cztcbiAgICBpZiAodGhpcy5pc1RvdWNoRGV2aWNlIHx8ICFob3ZlckRhdGUpIHJldHVybjtcbiAgICB2YXIgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcih7fSwgaG92ZXJEYXRlLCAnaG92ZXJlZCcpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaG92ZXJEYXRlOiBudWxsLFxuICAgICAgdmlzaWJsZURheXM6ICgwLCBfb2JqZWN0U3ByZWFkN1tcImRlZmF1bHRcIl0pKHt9LCB2aXNpYmxlRGF5cywge30sIG1vZGlmaWVycylcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25QcmV2TW9udGhDbGljayA9IGZ1bmN0aW9uIG9uUHJldk1vbnRoQ2xpY2soKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uUHJldk1vbnRoQ2xpY2sgPSBfdGhpcyRwcm9wczMub25QcmV2TW9udGhDbGljayxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczMubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHMzLmVuYWJsZU91dHNpZGVEYXlzO1xuICAgIHZhciBfdGhpcyRzdGF0ZTMgPSB0aGlzLnN0YXRlLFxuICAgICAgICBjdXJyZW50TW9udGggPSBfdGhpcyRzdGF0ZTMuY3VycmVudE1vbnRoLFxuICAgICAgICB2aXNpYmxlRGF5cyA9IF90aGlzJHN0YXRlMy52aXNpYmxlRGF5cztcbiAgICB2YXIgbmV3VmlzaWJsZURheXMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyh2aXNpYmxlRGF5cykuc29ydCgpLnNsaWNlKDAsIG51bWJlck9mTW9udGhzICsgMSkuZm9yRWFjaChmdW5jdGlvbiAobW9udGgpIHtcbiAgICAgIG5ld1Zpc2libGVEYXlzW21vbnRoXSA9IHZpc2libGVEYXlzW21vbnRoXTtcbiAgICB9KTtcbiAgICB2YXIgcHJldk1vbnRoID0gY3VycmVudE1vbnRoLmNsb25lKCkuc3VidHJhY3QoMSwgJ21vbnRoJyk7XG4gICAgdmFyIHByZXZNb250aFZpc2libGVEYXlzID0gKDAsIF9nZXRWaXNpYmxlRGF5c1tcImRlZmF1bHRcIl0pKHByZXZNb250aCwgMSwgZW5hYmxlT3V0c2lkZURheXMpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VycmVudE1vbnRoOiBwcmV2TW9udGgsXG4gICAgICB2aXNpYmxlRGF5czogKDAsIF9vYmplY3RTcHJlYWQ3W1wiZGVmYXVsdFwiXSkoe30sIG5ld1Zpc2libGVEYXlzLCB7fSwgdGhpcy5nZXRNb2RpZmllcnMocHJldk1vbnRoVmlzaWJsZURheXMpKVxuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIG9uUHJldk1vbnRoQ2xpY2socHJldk1vbnRoLmNsb25lKCkpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vbk5leHRNb250aENsaWNrID0gZnVuY3Rpb24gb25OZXh0TW9udGhDbGljaygpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25OZXh0TW9udGhDbGljayA9IF90aGlzJHByb3BzNC5vbk5leHRNb250aENsaWNrLFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IF90aGlzJHByb3BzNC5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfdGhpcyRwcm9wczQuZW5hYmxlT3V0c2lkZURheXM7XG4gICAgdmFyIF90aGlzJHN0YXRlNCA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGN1cnJlbnRNb250aCA9IF90aGlzJHN0YXRlNC5jdXJyZW50TW9udGgsXG4gICAgICAgIHZpc2libGVEYXlzID0gX3RoaXMkc3RhdGU0LnZpc2libGVEYXlzO1xuICAgIHZhciBuZXdWaXNpYmxlRGF5cyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHZpc2libGVEYXlzKS5zb3J0KCkuc2xpY2UoMSkuZm9yRWFjaChmdW5jdGlvbiAobW9udGgpIHtcbiAgICAgIG5ld1Zpc2libGVEYXlzW21vbnRoXSA9IHZpc2libGVEYXlzW21vbnRoXTtcbiAgICB9KTtcbiAgICB2YXIgbmV4dE1vbnRoID0gY3VycmVudE1vbnRoLmNsb25lKCkuYWRkKG51bWJlck9mTW9udGhzLCAnbW9udGgnKTtcbiAgICB2YXIgbmV4dE1vbnRoVmlzaWJsZURheXMgPSAoMCwgX2dldFZpc2libGVEYXlzW1wiZGVmYXVsdFwiXSkobmV4dE1vbnRoLCAxLCBlbmFibGVPdXRzaWRlRGF5cyk7XG4gICAgdmFyIG5ld0N1cnJlbnRNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpLmFkZCgxLCAnbW9udGgnKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJlbnRNb250aDogbmV3Q3VycmVudE1vbnRoLFxuICAgICAgdmlzaWJsZURheXM6ICgwLCBfb2JqZWN0U3ByZWFkN1tcImRlZmF1bHRcIl0pKHt9LCBuZXdWaXNpYmxlRGF5cywge30sIHRoaXMuZ2V0TW9kaWZpZXJzKG5leHRNb250aFZpc2libGVEYXlzKSlcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBvbk5leHRNb250aENsaWNrKG5ld0N1cnJlbnRNb250aC5jbG9uZSgpKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25Nb250aENoYW5nZSA9IGZ1bmN0aW9uIG9uTW9udGhDaGFuZ2UobmV3TW9udGgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczUubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHM1LmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICBvcmllbnRhdGlvbiA9IF90aGlzJHByb3BzNS5vcmllbnRhdGlvbjtcbiAgICB2YXIgd2l0aG91dFRyYW5zaXRpb25Nb250aHMgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuICAgIHZhciBuZXdWaXNpYmxlRGF5cyA9ICgwLCBfZ2V0VmlzaWJsZURheXNbXCJkZWZhdWx0XCJdKShuZXdNb250aCwgbnVtYmVyT2ZNb250aHMsIGVuYWJsZU91dHNpZGVEYXlzLCB3aXRob3V0VHJhbnNpdGlvbk1vbnRocyk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXJyZW50TW9udGg6IG5ld01vbnRoLmNsb25lKCksXG4gICAgICB2aXNpYmxlRGF5czogdGhpcy5nZXRNb2RpZmllcnMobmV3VmlzaWJsZURheXMpXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uWWVhckNoYW5nZSA9IGZ1bmN0aW9uIG9uWWVhckNoYW5nZShuZXdNb250aCkge1xuICAgIHZhciBfdGhpcyRwcm9wczYgPSB0aGlzLnByb3BzLFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IF90aGlzJHByb3BzNi5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfdGhpcyRwcm9wczYuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgIG9yaWVudGF0aW9uID0gX3RoaXMkcHJvcHM2Lm9yaWVudGF0aW9uO1xuICAgIHZhciB3aXRob3V0VHJhbnNpdGlvbk1vbnRocyA9IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEU7XG4gICAgdmFyIG5ld1Zpc2libGVEYXlzID0gKDAsIF9nZXRWaXNpYmxlRGF5c1tcImRlZmF1bHRcIl0pKG5ld01vbnRoLCBudW1iZXJPZk1vbnRocywgZW5hYmxlT3V0c2lkZURheXMsIHdpdGhvdXRUcmFuc2l0aW9uTW9udGhzKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJlbnRNb250aDogbmV3TW9udGguY2xvbmUoKSxcbiAgICAgIHZpc2libGVEYXlzOiB0aGlzLmdldE1vZGlmaWVycyhuZXdWaXNpYmxlRGF5cylcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0Rmlyc3RGb2N1c2FibGVEYXkgPSBmdW5jdGlvbiBnZXRGaXJzdEZvY3VzYWJsZURheShuZXdNb250aCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzNyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRhdGUgPSBfdGhpcyRwcm9wczcuZGF0ZSxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczcubnVtYmVyT2ZNb250aHM7XG4gICAgdmFyIGZvY3VzZWREYXRlID0gbmV3TW9udGguY2xvbmUoKS5zdGFydE9mKCdtb250aCcpO1xuXG4gICAgaWYgKGRhdGUpIHtcbiAgICAgIGZvY3VzZWREYXRlID0gZGF0ZS5jbG9uZSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzQmxvY2tlZChmb2N1c2VkRGF0ZSkpIHtcbiAgICAgIHZhciBkYXlzID0gW107XG4gICAgICB2YXIgbGFzdFZpc2libGVEYXkgPSBuZXdNb250aC5jbG9uZSgpLmFkZChudW1iZXJPZk1vbnRocyAtIDEsICdtb250aHMnKS5lbmRPZignbW9udGgnKTtcbiAgICAgIHZhciBjdXJyZW50RGF5ID0gZm9jdXNlZERhdGUuY2xvbmUoKTtcblxuICAgICAgd2hpbGUgKCEoMCwgX2lzQWZ0ZXJEYXlbXCJkZWZhdWx0XCJdKShjdXJyZW50RGF5LCBsYXN0VmlzaWJsZURheSkpIHtcbiAgICAgICAgY3VycmVudERheSA9IGN1cnJlbnREYXkuY2xvbmUoKS5hZGQoMSwgJ2RheScpO1xuICAgICAgICBkYXlzLnB1c2goY3VycmVudERheSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB2aWFibGVEYXlzID0gZGF5cy5maWx0ZXIoZnVuY3Rpb24gKGRheSkge1xuICAgICAgICByZXR1cm4gIV90aGlzMy5pc0Jsb2NrZWQoZGF5KSAmJiAoMCwgX2lzQWZ0ZXJEYXlbXCJkZWZhdWx0XCJdKShkYXksIGZvY3VzZWREYXRlKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodmlhYmxlRGF5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBfdmlhYmxlRGF5cyA9ICgwLCBfc2xpY2VkVG9BcnJheTJbXCJkZWZhdWx0XCJdKSh2aWFibGVEYXlzLCAxKTtcblxuICAgICAgICBmb2N1c2VkRGF0ZSA9IF92aWFibGVEYXlzWzBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmb2N1c2VkRGF0ZTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0TW9kaWZpZXJzID0gZnVuY3Rpb24gZ2V0TW9kaWZpZXJzKHZpc2libGVEYXlzKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgbW9kaWZpZXJzID0ge307XG4gICAgT2JqZWN0LmtleXModmlzaWJsZURheXMpLmZvckVhY2goZnVuY3Rpb24gKG1vbnRoKSB7XG4gICAgICBtb2RpZmllcnNbbW9udGhdID0ge307XG4gICAgICB2aXNpYmxlRGF5c1ttb250aF0uZm9yRWFjaChmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgIG1vZGlmaWVyc1ttb250aF1bKDAsIF90b0lTT0RhdGVTdHJpbmdbXCJkZWZhdWx0XCJdKShkYXkpXSA9IF90aGlzNC5nZXRNb2RpZmllcnNGb3JEYXkoZGF5KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBtb2RpZmllcnM7XG4gIH07XG5cbiAgX3Byb3RvLmdldE1vZGlmaWVyc0ZvckRheSA9IGZ1bmN0aW9uIGdldE1vZGlmaWVyc0ZvckRheShkYXkpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgU2V0KE9iamVjdC5rZXlzKHRoaXMubW9kaWZpZXJzKS5maWx0ZXIoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICByZXR1cm4gX3RoaXM1Lm1vZGlmaWVyc1ttb2RpZmllcl0oZGF5KTtcbiAgICB9KSk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFN0YXRlRm9yTmV3TW9udGggPSBmdW5jdGlvbiBnZXRTdGF0ZUZvck5ld01vbnRoKG5leHRQcm9wcykge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgdmFyIGluaXRpYWxWaXNpYmxlTW9udGggPSBuZXh0UHJvcHMuaW5pdGlhbFZpc2libGVNb250aCxcbiAgICAgICAgZGF0ZSA9IG5leHRQcm9wcy5kYXRlLFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IG5leHRQcm9wcy5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBuZXh0UHJvcHMuZW5hYmxlT3V0c2lkZURheXM7XG4gICAgdmFyIGluaXRpYWxWaXNpYmxlTW9udGhUaHVuayA9IGluaXRpYWxWaXNpYmxlTW9udGggfHwgKGRhdGUgPyBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzNi50b2RheTtcbiAgICB9KTtcbiAgICB2YXIgY3VycmVudE1vbnRoID0gaW5pdGlhbFZpc2libGVNb250aFRodW5rKCk7XG4gICAgdmFyIHZpc2libGVEYXlzID0gdGhpcy5nZXRNb2RpZmllcnMoKDAsIF9nZXRWaXNpYmxlRGF5c1tcImRlZmF1bHRcIl0pKGN1cnJlbnRNb250aCwgbnVtYmVyT2ZNb250aHMsIGVuYWJsZU91dHNpZGVEYXlzKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnRNb250aDogY3VycmVudE1vbnRoLFxuICAgICAgdmlzaWJsZURheXM6IHZpc2libGVEYXlzXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uYWRkTW9kaWZpZXIgPSBmdW5jdGlvbiBhZGRNb2RpZmllcih1cGRhdGVkRGF5cywgZGF5LCBtb2RpZmllcikge1xuICAgIHJldHVybiAoMCwgX21vZGlmaWVycy5hZGRNb2RpZmllcikodXBkYXRlZERheXMsIGRheSwgbW9kaWZpZXIsIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICB9O1xuXG4gIF9wcm90by5kZWxldGVNb2RpZmllciA9IGZ1bmN0aW9uIGRlbGV0ZU1vZGlmaWVyKHVwZGF0ZWREYXlzLCBkYXksIG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuICgwLCBfbW9kaWZpZXJzLmRlbGV0ZU1vZGlmaWVyKSh1cGRhdGVkRGF5cywgZGF5LCBtb2RpZmllciwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzQmxvY2tlZCA9IGZ1bmN0aW9uIGlzQmxvY2tlZChkYXkpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM4ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaXNEYXlCbG9ja2VkID0gX3RoaXMkcHJvcHM4LmlzRGF5QmxvY2tlZCxcbiAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBfdGhpcyRwcm9wczguaXNPdXRzaWRlUmFuZ2U7XG4gICAgcmV0dXJuIGlzRGF5QmxvY2tlZChkYXkpIHx8IGlzT3V0c2lkZVJhbmdlKGRheSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzSG92ZXJlZCA9IGZ1bmN0aW9uIGlzSG92ZXJlZChkYXkpIHtcbiAgICB2YXIgX3JlZjIgPSB0aGlzLnN0YXRlIHx8IHt9LFxuICAgICAgICBob3ZlckRhdGUgPSBfcmVmMi5ob3ZlckRhdGU7XG5cbiAgICByZXR1cm4gKDAsIF9pc1NhbWVEYXlbXCJkZWZhdWx0XCJdKShkYXksIGhvdmVyRGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzU2VsZWN0ZWQgPSBmdW5jdGlvbiBpc1NlbGVjdGVkKGRheSkge1xuICAgIHZhciBkYXRlID0gdGhpcy5wcm9wcy5kYXRlO1xuICAgIHJldHVybiAoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKGRheSwgZGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzVG9kYXkgPSBmdW5jdGlvbiBpc1RvZGF5KGRheSkge1xuICAgIHJldHVybiAoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKGRheSwgdGhpcy50b2RheSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzRmlyc3REYXlPZldlZWsgPSBmdW5jdGlvbiBpc0ZpcnN0RGF5T2ZXZWVrKGRheSkge1xuICAgIHZhciBmaXJzdERheU9mV2VlayA9IHRoaXMucHJvcHMuZmlyc3REYXlPZldlZWs7XG4gICAgcmV0dXJuIGRheS5kYXkoKSA9PT0gKGZpcnN0RGF5T2ZXZWVrIHx8IF9tb21lbnRbXCJkZWZhdWx0XCJdLmxvY2FsZURhdGEoKS5maXJzdERheU9mV2VlaygpKTtcbiAgfTtcblxuICBfcHJvdG8uaXNMYXN0RGF5T2ZXZWVrID0gZnVuY3Rpb24gaXNMYXN0RGF5T2ZXZWVrKGRheSkge1xuICAgIHZhciBmaXJzdERheU9mV2VlayA9IHRoaXMucHJvcHMuZmlyc3REYXlPZldlZWs7XG4gICAgcmV0dXJuIGRheS5kYXkoKSA9PT0gKChmaXJzdERheU9mV2VlayB8fCBfbW9tZW50W1wiZGVmYXVsdFwiXS5sb2NhbGVEYXRhKCkuZmlyc3REYXlPZldlZWsoKSkgKyA2KSAlIDc7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM5ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczkubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIG9yaWVudGF0aW9uID0gX3RoaXMkcHJvcHM5Lm9yaWVudGF0aW9uLFxuICAgICAgICBtb250aEZvcm1hdCA9IF90aGlzJHByb3BzOS5tb250aEZvcm1hdCxcbiAgICAgICAgcmVuZGVyTW9udGhUZXh0ID0gX3RoaXMkcHJvcHM5LnJlbmRlck1vbnRoVGV4dCxcbiAgICAgICAgbmF2UHJldiA9IF90aGlzJHByb3BzOS5uYXZQcmV2LFxuICAgICAgICBuYXZOZXh0ID0gX3RoaXMkcHJvcHM5Lm5hdk5leHQsXG4gICAgICAgIG9uT3V0c2lkZUNsaWNrID0gX3RoaXMkcHJvcHM5Lm9uT3V0c2lkZUNsaWNrLFxuICAgICAgICBvblNoaWZ0VGFiID0gX3RoaXMkcHJvcHM5Lm9uU2hpZnRUYWIsXG4gICAgICAgIG9uVGFiID0gX3RoaXMkcHJvcHM5Lm9uVGFiLFxuICAgICAgICB3aXRoUG9ydGFsID0gX3RoaXMkcHJvcHM5LndpdGhQb3J0YWwsXG4gICAgICAgIGZvY3VzZWQgPSBfdGhpcyRwcm9wczkuZm9jdXNlZCxcbiAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfdGhpcyRwcm9wczkuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsID0gX3RoaXMkcHJvcHM5LmhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgICBkYXlTaXplID0gX3RoaXMkcHJvcHM5LmRheVNpemUsXG4gICAgICAgIGZpcnN0RGF5T2ZXZWVrID0gX3RoaXMkcHJvcHM5LmZpcnN0RGF5T2ZXZWVrLFxuICAgICAgICByZW5kZXJDYWxlbmRhckRheSA9IF90aGlzJHByb3BzOS5yZW5kZXJDYWxlbmRhckRheSxcbiAgICAgICAgcmVuZGVyRGF5Q29udGVudHMgPSBfdGhpcyRwcm9wczkucmVuZGVyRGF5Q29udGVudHMsXG4gICAgICAgIHJlbmRlckNhbGVuZGFySW5mbyA9IF90aGlzJHByb3BzOS5yZW5kZXJDYWxlbmRhckluZm8sXG4gICAgICAgIHJlbmRlck1vbnRoRWxlbWVudCA9IF90aGlzJHByb3BzOS5yZW5kZXJNb250aEVsZW1lbnQsXG4gICAgICAgIGNhbGVuZGFySW5mb1Bvc2l0aW9uID0gX3RoaXMkcHJvcHM5LmNhbGVuZGFySW5mb1Bvc2l0aW9uLFxuICAgICAgICBpc0ZvY3VzZWQgPSBfdGhpcyRwcm9wczkuaXNGb2N1c2VkLFxuICAgICAgICBpc1JUTCA9IF90aGlzJHByb3BzOS5pc1JUTCxcbiAgICAgICAgcGhyYXNlcyA9IF90aGlzJHByb3BzOS5waHJhc2VzLFxuICAgICAgICBkYXlBcmlhTGFiZWxGb3JtYXQgPSBfdGhpcyRwcm9wczkuZGF5QXJpYUxhYmVsRm9ybWF0LFxuICAgICAgICBvbkJsdXIgPSBfdGhpcyRwcm9wczkub25CbHVyLFxuICAgICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHMgPSBfdGhpcyRwcm9wczkuc2hvd0tleWJvYXJkU2hvcnRjdXRzLFxuICAgICAgICB3ZWVrRGF5Rm9ybWF0ID0gX3RoaXMkcHJvcHM5LndlZWtEYXlGb3JtYXQsXG4gICAgICAgIHZlcnRpY2FsSGVpZ2h0ID0gX3RoaXMkcHJvcHM5LnZlcnRpY2FsSGVpZ2h0LFxuICAgICAgICBub0JvcmRlciA9IF90aGlzJHByb3BzOS5ub0JvcmRlcixcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX3RoaXMkcHJvcHM5LnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgICAgdmVydGljYWxCb3JkZXJTcGFjaW5nID0gX3RoaXMkcHJvcHM5LnZlcnRpY2FsQm9yZGVyU3BhY2luZyxcbiAgICAgICAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZyA9IF90aGlzJHByb3BzOS5ob3Jpem9udGFsTW9udGhQYWRkaW5nO1xuICAgIHZhciBfdGhpcyRzdGF0ZTUgPSB0aGlzLnN0YXRlLFxuICAgICAgICBjdXJyZW50TW9udGggPSBfdGhpcyRzdGF0ZTUuY3VycmVudE1vbnRoLFxuICAgICAgICB2aXNpYmxlRGF5cyA9IF90aGlzJHN0YXRlNS52aXNpYmxlRGF5cztcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9EYXlQaWNrZXJbXCJkZWZhdWx0XCJdLCB7XG4gICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb24sXG4gICAgICBlbmFibGVPdXRzaWRlRGF5czogZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICBtb2RpZmllcnM6IHZpc2libGVEYXlzLFxuICAgICAgbnVtYmVyT2ZNb250aHM6IG51bWJlck9mTW9udGhzLFxuICAgICAgb25EYXlDbGljazogdGhpcy5vbkRheUNsaWNrLFxuICAgICAgb25EYXlNb3VzZUVudGVyOiB0aGlzLm9uRGF5TW91c2VFbnRlcixcbiAgICAgIG9uRGF5TW91c2VMZWF2ZTogdGhpcy5vbkRheU1vdXNlTGVhdmUsXG4gICAgICBvblByZXZNb250aENsaWNrOiB0aGlzLm9uUHJldk1vbnRoQ2xpY2ssXG4gICAgICBvbk5leHRNb250aENsaWNrOiB0aGlzLm9uTmV4dE1vbnRoQ2xpY2ssXG4gICAgICBvbk1vbnRoQ2hhbmdlOiB0aGlzLm9uTW9udGhDaGFuZ2UsXG4gICAgICBvblllYXJDaGFuZ2U6IHRoaXMub25ZZWFyQ2hhbmdlLFxuICAgICAgbW9udGhGb3JtYXQ6IG1vbnRoRm9ybWF0LFxuICAgICAgd2l0aFBvcnRhbDogd2l0aFBvcnRhbCxcbiAgICAgIGhpZGRlbjogIWZvY3VzZWQsXG4gICAgICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICBpbml0aWFsVmlzaWJsZU1vbnRoOiBmdW5jdGlvbiBpbml0aWFsVmlzaWJsZU1vbnRoKCkge1xuICAgICAgICByZXR1cm4gY3VycmVudE1vbnRoO1xuICAgICAgfSxcbiAgICAgIGZpcnN0RGF5T2ZXZWVrOiBmaXJzdERheU9mV2VlayxcbiAgICAgIG9uT3V0c2lkZUNsaWNrOiBvbk91dHNpZGVDbGljayxcbiAgICAgIG5hdlByZXY6IG5hdlByZXYsXG4gICAgICBuYXZOZXh0OiBuYXZOZXh0LFxuICAgICAgcmVuZGVyTW9udGhUZXh0OiByZW5kZXJNb250aFRleHQsXG4gICAgICByZW5kZXJDYWxlbmRhckRheTogcmVuZGVyQ2FsZW5kYXJEYXksXG4gICAgICByZW5kZXJEYXlDb250ZW50czogcmVuZGVyRGF5Q29udGVudHMsXG4gICAgICByZW5kZXJDYWxlbmRhckluZm86IHJlbmRlckNhbGVuZGFySW5mbyxcbiAgICAgIHJlbmRlck1vbnRoRWxlbWVudDogcmVuZGVyTW9udGhFbGVtZW50LFxuICAgICAgY2FsZW5kYXJJbmZvUG9zaXRpb246IGNhbGVuZGFySW5mb1Bvc2l0aW9uLFxuICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWQsXG4gICAgICBnZXRGaXJzdEZvY3VzYWJsZURheTogdGhpcy5nZXRGaXJzdEZvY3VzYWJsZURheSxcbiAgICAgIG9uQmx1cjogb25CbHVyLFxuICAgICAgb25UYWI6IG9uVGFiLFxuICAgICAgb25TaGlmdFRhYjogb25TaGlmdFRhYixcbiAgICAgIHBocmFzZXM6IHBocmFzZXMsXG4gICAgICBkYXlTaXplOiBkYXlTaXplLFxuICAgICAgaXNSVEw6IGlzUlRMLFxuICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBzaG93S2V5Ym9hcmRTaG9ydGN1dHMsXG4gICAgICB3ZWVrRGF5Rm9ybWF0OiB3ZWVrRGF5Rm9ybWF0LFxuICAgICAgZGF5QXJpYUxhYmVsRm9ybWF0OiBkYXlBcmlhTGFiZWxGb3JtYXQsXG4gICAgICB2ZXJ0aWNhbEhlaWdodDogdmVydGljYWxIZWlnaHQsXG4gICAgICBub0JvcmRlcjogbm9Cb3JkZXIsXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIHZlcnRpY2FsQm9yZGVyU3BhY2luZzogdmVydGljYWxCb3JkZXJTcGFjaW5nLFxuICAgICAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZzogaG9yaXpvbnRhbE1vbnRoUGFkZGluZ1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBEYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlcjtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBEYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlcjtcbkRheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0TW9tZW50UHJvcHR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtbW9tZW50LXByb3B0eXBlc1wiKSk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKSk7XG5cbnZhciBfSWNvblBvc2l0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0ljb25Qb3NpdGlvblNoYXBlXCIpKTtcblxudmFyIF9PcmllbnRhdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9PcmllbnRhdGlvblNoYXBlXCIpKTtcblxudmFyIF9BbmNob3JEaXJlY3Rpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQW5jaG9yRGlyZWN0aW9uU2hhcGVcIikpO1xuXG52YXIgX09wZW5EaXJlY3Rpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vT3BlbkRpcmVjdGlvblNoYXBlXCIpKTtcblxudmFyIF9EYXlPZldlZWtTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRGF5T2ZXZWVrU2hhcGVcIikpO1xuXG52YXIgX0NhbGVuZGFySW5mb1Bvc2l0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NhbGVuZGFySW5mb1Bvc2l0aW9uU2hhcGVcIikpO1xuXG52YXIgX2RlZmF1bHQgPSB7XG4gIC8vIHJlcXVpcmVkIHByb3BzIGZvciBhIGZ1bmN0aW9uYWwgaW50ZXJhY3RpdmUgU2luZ2xlRGF0ZVBpY2tlclxuICBkYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXNbXCJkZWZhdWx0XCJdLm1vbWVudE9iaixcbiAgb25EYXRlQ2hhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG9uRm9jdXNDaGFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgLy8gaW5wdXQgcmVsYXRlZCBwcm9wc1xuICBpZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHBsYWNlaG9sZGVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGFyaWFMYWJlbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBkaXNhYmxlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlYWRPbmx5OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzY3JlZW5SZWFkZXJJbnB1dE1lc3NhZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgc2hvd0NsZWFyRGF0ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgY3VzdG9tQ2xvc2VJY29uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBzaG93RGVmYXVsdElucHV0SWNvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgaW5wdXRJY29uUG9zaXRpb246IF9JY29uUG9zaXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIGN1c3RvbUlucHV0SWNvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZSxcbiAgbm9Cb3JkZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGJsb2NrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzbWFsbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVndWxhcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgdmVydGljYWxTcGFjaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAga2VlcEZvY3VzT25JbnB1dDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgLy8gY2FsZW5kYXIgcHJlc2VudGF0aW9uIGFuZCBpbnRlcmFjdGlvbiByZWxhdGVkIHByb3BzXG4gIHJlbmRlck1vbnRoVGV4dDogKDAsIF9haXJibmJQcm9wVHlwZXMubXV0dWFsbHlFeGNsdXNpdmVQcm9wcykoX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYywgJ3JlbmRlck1vbnRoVGV4dCcsICdyZW5kZXJNb250aEVsZW1lbnQnKSxcbiAgcmVuZGVyTW9udGhFbGVtZW50OiAoMCwgX2FpcmJuYlByb3BUeXBlcy5tdXR1YWxseUV4Y2x1c2l2ZVByb3BzKShfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLCAncmVuZGVyTW9udGhUZXh0JywgJ3JlbmRlck1vbnRoRWxlbWVudCcpLFxuICBvcmllbnRhdGlvbjogX09yaWVudGF0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBhbmNob3JEaXJlY3Rpb246IF9BbmNob3JEaXJlY3Rpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIG9wZW5EaXJlY3Rpb246IF9PcGVuRGlyZWN0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBob3Jpem9udGFsTWFyZ2luOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIHdpdGhQb3J0YWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHdpdGhGdWxsU2NyZWVuUG9ydGFsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBhcHBlbmRUb0JvZHk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGRpc2FibGVTY3JvbGw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGluaXRpYWxWaXNpYmxlTW9udGg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGZpcnN0RGF5T2ZXZWVrOiBfRGF5T2ZXZWVrU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBudW1iZXJPZk1vbnRoczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLFxuICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVvcGVuUGlja2VyT25DbGVhckRhdGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlbmRlckNhbGVuZGFySW5mbzogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgY2FsZW5kYXJJbmZvUG9zaXRpb246IF9DYWxlbmRhckluZm9Qb3NpdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGRheVNpemU6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBpc1JUTDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgdmVydGljYWxIZWlnaHQ6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICB0cmFuc2l0aW9uRHVyYXRpb246IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgLy8gbmF2aWdhdGlvbiByZWxhdGVkIHByb3BzXG4gIG5hdlByZXY6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIG5hdk5leHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIG9uUHJldk1vbnRoQ2xpY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uTmV4dE1vbnRoQ2xpY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uQ2xvc2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIC8vIGRheSBwcmVzZW50YXRpb24gYW5kIGludGVyYWN0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlckRheUNvbnRlbnRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBlbmFibGVPdXRzaWRlRGF5czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgaXNEYXlCbG9ja2VkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBpc091dHNpZGVSYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgaXNEYXlIaWdobGlnaHRlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgLy8gaW50ZXJuYXRpb25hbGl6YXRpb24gcHJvcHNcbiAgZGlzcGxheUZvcm1hdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2ZUeXBlKFtfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsIF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmNdKSxcbiAgbW9udGhGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgd2Vla0RheUZvcm1hdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBwaHJhc2VzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zaGFwZSgoMCwgX2dldFBocmFzZVByb3BUeXBlc1tcImRlZmF1bHRcIl0pKF9kZWZhdWx0UGhyYXNlcy5TaW5nbGVEYXRlUGlja2VyUGhyYXNlcykpLFxuICBkYXlBcmlhTGFiZWxGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZ1xufTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG52YXIgX3JlYWN0V2l0aFN0eWxlcyA9IHJlcXVpcmUoXCJyZWFjdC13aXRoLXN0eWxlc1wiKTtcblxudmFyIF9kZWZhdWx0UGhyYXNlcyA9IHJlcXVpcmUoXCIuLi9kZWZhdWx0UGhyYXNlc1wiKTtcblxudmFyIF9nZXRQaHJhc2VQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRQaHJhc2VQcm9wVHlwZXNcIikpO1xuXG52YXIgX25vZmxpcCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL25vZmxpcFwiKSk7XG5cbnZhciBfRGF0ZUlucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9EYXRlSW5wdXRcIikpO1xuXG52YXIgX0ljb25Qb3NpdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL0ljb25Qb3NpdGlvblNoYXBlXCIpKTtcblxudmFyIF9DbG9zZUJ1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2xvc2VCdXR0b25cIikpO1xuXG52YXIgX0NhbGVuZGFySWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2FsZW5kYXJJY29uXCIpKTtcblxudmFyIF9PcGVuRGlyZWN0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvT3BlbkRpcmVjdGlvblNoYXBlXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG52YXIgcHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9haXJibmJQcm9wVHlwZXMuZm9yYmlkRXh0cmFQcm9wcykoKDAsIF9vYmplY3RTcHJlYWQzW1wiZGVmYXVsdFwiXSkoe30sIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlc1Byb3BUeXBlcywge1xuICBpZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBwbGFjZWhvbGRlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBhcmlhTGFiZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgZGlzcGxheVZhbHVlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHNjcmVlblJlYWRlck1lc3NhZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgZm9jdXNlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgaXNGb2N1c2VkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICAvLyBkZXNjcmliZXMgYWN0dWFsIERPTSBmb2N1c1xuICBkaXNhYmxlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlYWRPbmx5OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBvcGVuRGlyZWN0aW9uOiBfT3BlbkRpcmVjdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgc2hvd0NhcmV0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzaG93Q2xlYXJEYXRlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBjdXN0b21DbG9zZUljb246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIHNob3dEZWZhdWx0SW5wdXRJY29uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBpbnB1dEljb25Qb3NpdGlvbjogX0ljb25Qb3NpdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgY3VzdG9tSW5wdXRJY29uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBpc1JUTDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgbm9Cb3JkZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGJsb2NrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzbWFsbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVndWxhcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgdmVydGljYWxTcGFjaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uQ2xlYXJEYXRlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkZvY3VzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbktleURvd25TaGlmdFRhYjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25LZXlEb3duVGFiOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbktleURvd25BcnJvd0Rvd246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uS2V5RG93blF1ZXN0aW9uTWFyazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgLy8gaTE4blxuICBwaHJhc2VzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zaGFwZSgoMCwgX2dldFBocmFzZVByb3BUeXBlc1tcImRlZmF1bHRcIl0pKF9kZWZhdWx0UGhyYXNlcy5TaW5nbGVEYXRlUGlja2VySW5wdXRQaHJhc2VzKSlcbn0pKSA6IHt9O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY2hpbGRyZW46IG51bGwsXG4gIHBsYWNlaG9sZGVyOiAnU2VsZWN0IERhdGUnLFxuICBhcmlhTGFiZWw6IHVuZGVmaW5lZCxcbiAgZGlzcGxheVZhbHVlOiAnJyxcbiAgc2NyZWVuUmVhZGVyTWVzc2FnZTogJycsXG4gIGZvY3VzZWQ6IGZhbHNlLFxuICBpc0ZvY3VzZWQ6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHJlcXVpcmVkOiBmYWxzZSxcbiAgcmVhZE9ubHk6IGZhbHNlLFxuICBvcGVuRGlyZWN0aW9uOiBfY29uc3RhbnRzLk9QRU5fRE9XTixcbiAgc2hvd0NhcmV0OiBmYWxzZSxcbiAgc2hvd0NsZWFyRGF0ZTogZmFsc2UsXG4gIHNob3dEZWZhdWx0SW5wdXRJY29uOiBmYWxzZSxcbiAgaW5wdXRJY29uUG9zaXRpb246IF9jb25zdGFudHMuSUNPTl9CRUZPUkVfUE9TSVRJT04sXG4gIGN1c3RvbUNsb3NlSWNvbjogbnVsbCxcbiAgY3VzdG9tSW5wdXRJY29uOiBudWxsLFxuICBpc1JUTDogZmFsc2UsXG4gIG5vQm9yZGVyOiBmYWxzZSxcbiAgYmxvY2s6IGZhbHNlLFxuICBzbWFsbDogZmFsc2UsXG4gIHJlZ3VsYXI6IGZhbHNlLFxuICB2ZXJ0aWNhbFNwYWNpbmc6IHVuZGVmaW5lZCxcbiAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKCkge30sXG4gIG9uQ2xlYXJEYXRlOiBmdW5jdGlvbiBvbkNsZWFyRGF0ZSgpIHt9LFxuICBvbkZvY3VzOiBmdW5jdGlvbiBvbkZvY3VzKCkge30sXG4gIG9uS2V5RG93blNoaWZ0VGFiOiBmdW5jdGlvbiBvbktleURvd25TaGlmdFRhYigpIHt9LFxuICBvbktleURvd25UYWI6IGZ1bmN0aW9uIG9uS2V5RG93blRhYigpIHt9LFxuICBvbktleURvd25BcnJvd0Rvd246IGZ1bmN0aW9uIG9uS2V5RG93bkFycm93RG93bigpIHt9LFxuICBvbktleURvd25RdWVzdGlvbk1hcms6IGZ1bmN0aW9uIG9uS2V5RG93blF1ZXN0aW9uTWFyaygpIHt9LFxuICAvLyBpMThuXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5TaW5nbGVEYXRlUGlja2VySW5wdXRQaHJhc2VzXG59O1xuXG5mdW5jdGlvbiBTaW5nbGVEYXRlUGlja2VySW5wdXQoX3JlZikge1xuICB2YXIgaWQgPSBfcmVmLmlkLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgcGxhY2Vob2xkZXIgPSBfcmVmLnBsYWNlaG9sZGVyLFxuICAgICAgYXJpYUxhYmVsID0gX3JlZi5hcmlhTGFiZWwsXG4gICAgICBkaXNwbGF5VmFsdWUgPSBfcmVmLmRpc3BsYXlWYWx1ZSxcbiAgICAgIGZvY3VzZWQgPSBfcmVmLmZvY3VzZWQsXG4gICAgICBpc0ZvY3VzZWQgPSBfcmVmLmlzRm9jdXNlZCxcbiAgICAgIGRpc2FibGVkID0gX3JlZi5kaXNhYmxlZCxcbiAgICAgIHJlcXVpcmVkID0gX3JlZi5yZXF1aXJlZCxcbiAgICAgIHJlYWRPbmx5ID0gX3JlZi5yZWFkT25seSxcbiAgICAgIHNob3dDYXJldCA9IF9yZWYuc2hvd0NhcmV0LFxuICAgICAgc2hvd0NsZWFyRGF0ZSA9IF9yZWYuc2hvd0NsZWFyRGF0ZSxcbiAgICAgIHNob3dEZWZhdWx0SW5wdXRJY29uID0gX3JlZi5zaG93RGVmYXVsdElucHV0SWNvbixcbiAgICAgIGlucHV0SWNvblBvc2l0aW9uID0gX3JlZi5pbnB1dEljb25Qb3NpdGlvbixcbiAgICAgIHBocmFzZXMgPSBfcmVmLnBocmFzZXMsXG4gICAgICBvbkNsZWFyRGF0ZSA9IF9yZWYub25DbGVhckRhdGUsXG4gICAgICBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBvbkZvY3VzID0gX3JlZi5vbkZvY3VzLFxuICAgICAgb25LZXlEb3duU2hpZnRUYWIgPSBfcmVmLm9uS2V5RG93blNoaWZ0VGFiLFxuICAgICAgb25LZXlEb3duVGFiID0gX3JlZi5vbktleURvd25UYWIsXG4gICAgICBvbktleURvd25BcnJvd0Rvd24gPSBfcmVmLm9uS2V5RG93bkFycm93RG93bixcbiAgICAgIG9uS2V5RG93blF1ZXN0aW9uTWFyayA9IF9yZWYub25LZXlEb3duUXVlc3Rpb25NYXJrLFxuICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZSA9IF9yZWYuc2NyZWVuUmVhZGVyTWVzc2FnZSxcbiAgICAgIGN1c3RvbUNsb3NlSWNvbiA9IF9yZWYuY3VzdG9tQ2xvc2VJY29uLFxuICAgICAgY3VzdG9tSW5wdXRJY29uID0gX3JlZi5jdXN0b21JbnB1dEljb24sXG4gICAgICBvcGVuRGlyZWN0aW9uID0gX3JlZi5vcGVuRGlyZWN0aW9uLFxuICAgICAgaXNSVEwgPSBfcmVmLmlzUlRMLFxuICAgICAgbm9Cb3JkZXIgPSBfcmVmLm5vQm9yZGVyLFxuICAgICAgYmxvY2sgPSBfcmVmLmJsb2NrLFxuICAgICAgc21hbGwgPSBfcmVmLnNtYWxsLFxuICAgICAgcmVndWxhciA9IF9yZWYucmVndWxhcixcbiAgICAgIHZlcnRpY2FsU3BhY2luZyA9IF9yZWYudmVydGljYWxTcGFjaW5nLFxuICAgICAgc3R5bGVzID0gX3JlZi5zdHlsZXM7XG5cbiAgdmFyIGNhbGVuZGFySWNvbiA9IGN1c3RvbUlucHV0SWNvbiB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0NhbGVuZGFySWNvbltcImRlZmF1bHRcIl0sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLlNpbmdsZURhdGVQaWNrZXJJbnB1dF9jYWxlbmRhckljb25fc3ZnKSk7XG5cbiAgdmFyIGNsb3NlSWNvbiA9IGN1c3RvbUNsb3NlSWNvbiB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0Nsb3NlQnV0dG9uW1wiZGVmYXVsdFwiXSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0X2NsZWFyRGF0ZV9zdmcsIHNtYWxsICYmIHN0eWxlcy5TaW5nbGVEYXRlUGlja2VySW5wdXRfY2xlYXJEYXRlX3N2Z19fc21hbGwpKTtcblxuICB2YXIgc2NyZWVuUmVhZGVyVGV4dCA9IHNjcmVlblJlYWRlck1lc3NhZ2UgfHwgcGhyYXNlcy5rZXlib2FyZEZvcndhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zO1xuXG4gIHZhciBpbnB1dEljb24gPSAoc2hvd0RlZmF1bHRJbnB1dEljb24gfHwgY3VzdG9tSW5wdXRJY29uICE9PSBudWxsKSAmJiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5TaW5nbGVEYXRlUGlja2VySW5wdXRfY2FsZW5kYXJJY29uKSwge1xuICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIFwiYXJpYS1sYWJlbFwiOiBwaHJhc2VzLmZvY3VzU3RhcnREYXRlLFxuICAgIG9uQ2xpY2s6IG9uRm9jdXNcbiAgfSksIGNhbGVuZGFySWNvbik7XG5cbiAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5TaW5nbGVEYXRlUGlja2VySW5wdXQsIGRpc2FibGVkICYmIHN0eWxlcy5TaW5nbGVEYXRlUGlja2VySW5wdXRfX2Rpc2FibGVkLCBpc1JUTCAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0X19ydGwsICFub0JvcmRlciAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0X193aXRoQm9yZGVyLCBibG9jayAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0X19ibG9jaywgc2hvd0NsZWFyRGF0ZSAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0X19zaG93Q2xlYXJEYXRlKSwgaW5wdXRJY29uUG9zaXRpb24gPT09IF9jb25zdGFudHMuSUNPTl9CRUZPUkVfUE9TSVRJT04gJiYgaW5wdXRJY29uLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0RhdGVJbnB1dFtcImRlZmF1bHRcIl0sIHtcbiAgICBpZDogaWQsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIGFyaWFMYWJlbDogYXJpYUxhYmVsLFxuICAgIGRpc3BsYXlWYWx1ZTogZGlzcGxheVZhbHVlLFxuICAgIHNjcmVlblJlYWRlck1lc3NhZ2U6IHNjcmVlblJlYWRlclRleHQsXG4gICAgZm9jdXNlZDogZm9jdXNlZCxcbiAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZCxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICBzaG93Q2FyZXQ6IHNob3dDYXJldCxcbiAgICBvbkNoYW5nZTogb25DaGFuZ2UsXG4gICAgb25Gb2N1czogb25Gb2N1cyxcbiAgICBvbktleURvd25TaGlmdFRhYjogb25LZXlEb3duU2hpZnRUYWIsXG4gICAgb25LZXlEb3duVGFiOiBvbktleURvd25UYWIsXG4gICAgb25LZXlEb3duQXJyb3dEb3duOiBvbktleURvd25BcnJvd0Rvd24sXG4gICAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiBvbktleURvd25RdWVzdGlvbk1hcmssXG4gICAgb3BlbkRpcmVjdGlvbjogb3BlbkRpcmVjdGlvbixcbiAgICB2ZXJ0aWNhbFNwYWNpbmc6IHZlcnRpY2FsU3BhY2luZyxcbiAgICBzbWFsbDogc21hbGwsXG4gICAgcmVndWxhcjogcmVndWxhcixcbiAgICBibG9jazogYmxvY2tcbiAgfSksIGNoaWxkcmVuLCBzaG93Q2xlYXJEYXRlICYmIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLlNpbmdsZURhdGVQaWNrZXJJbnB1dF9jbGVhckRhdGUsIHNtYWxsICYmIHN0eWxlcy5TaW5nbGVEYXRlUGlja2VySW5wdXRfY2xlYXJEYXRlX19zbWFsbCwgIWN1c3RvbUNsb3NlSWNvbiAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0X2NsZWFyRGF0ZV9fZGVmYXVsdCwgIWRpc3BsYXlWYWx1ZSAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0X2NsZWFyRGF0ZV9faGlkZSksIHtcbiAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgIFwiYXJpYS1sYWJlbFwiOiBwaHJhc2VzLmNsZWFyRGF0ZSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgb25DbGljazogb25DbGVhckRhdGVcbiAgfSksIGNsb3NlSWNvbiksIGlucHV0SWNvblBvc2l0aW9uID09PSBfY29uc3RhbnRzLklDT05fQUZURVJfUE9TSVRJT04gJiYgaW5wdXRJY29uKTtcbn1cblxuU2luZ2xlRGF0ZVBpY2tlcklucHV0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuU2luZ2xlRGF0ZVBpY2tlcklucHV0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlcykoZnVuY3Rpb24gKF9yZWYyKSB7XG4gIHZhciBfcmVmMiRyZWFjdERhdGVzID0gX3JlZjIucmVhY3REYXRlcyxcbiAgICAgIGJvcmRlciA9IF9yZWYyJHJlYWN0RGF0ZXMuYm9yZGVyLFxuICAgICAgY29sb3IgPSBfcmVmMiRyZWFjdERhdGVzLmNvbG9yO1xuICByZXR1cm4ge1xuICAgIFNpbmdsZURhdGVQaWNrZXJJbnB1dDoge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLmJhY2tncm91bmRcbiAgICB9LFxuICAgIFNpbmdsZURhdGVQaWNrZXJJbnB1dF9fd2l0aEJvcmRlcjoge1xuICAgICAgYm9yZGVyQ29sb3I6IGNvbG9yLmJvcmRlcixcbiAgICAgIGJvcmRlcldpZHRoOiBib3JkZXIucGlja2VySW5wdXQuYm9yZGVyV2lkdGgsXG4gICAgICBib3JkZXJTdHlsZTogYm9yZGVyLnBpY2tlcklucHV0LmJvcmRlclN0eWxlLFxuICAgICAgYm9yZGVyUmFkaXVzOiBib3JkZXIucGlja2VySW5wdXQuYm9yZGVyUmFkaXVzXG4gICAgfSxcbiAgICBTaW5nbGVEYXRlUGlja2VySW5wdXRfX3J0bDoge1xuICAgICAgZGlyZWN0aW9uOiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKCdydGwnKVxuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcklucHV0X19kaXNhYmxlZDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvci5kaXNhYmxlZFxuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcklucHV0X19ibG9jazoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcklucHV0X19zaG93Q2xlYXJEYXRlOiB7XG4gICAgICBwYWRkaW5nUmlnaHQ6IDMwIC8vIFRPRE86IHNob3VsZCBiZSBub2ZsaXAgd3JhcHBlZCBhbmQgaGFuZGxlZCBieSBhbiBpc1JUTCBwcm9wXG5cbiAgICB9LFxuICAgIFNpbmdsZURhdGVQaWNrZXJJbnB1dF9jbGVhckRhdGU6IHtcbiAgICAgIGJhY2tncm91bmQ6ICdub25lJyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICBmb250OiAnaW5oZXJpdCcsXG4gICAgICBsaW5lSGVpZ2h0OiAnbm9ybWFsJyxcbiAgICAgIG92ZXJmbG93OiAndmlzaWJsZScsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgbWFyZ2luOiAnMCAxMHB4IDAgNXB4JyxcbiAgICAgIC8vIFRPRE86IHNob3VsZCBiZSBub2ZsaXAgd3JhcHBlZCBhbmQgaGFuZGxlZCBieSBhbiBpc1JUTCBwcm9wXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgLy8gVE9ETzogc2hvdWxkIGJlIG5vZmxpcCB3cmFwcGVkIGFuZCBoYW5kbGVkIGJ5IGFuIGlzUlRMIHByb3BcbiAgICAgIHRvcDogJzUwJScsXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJ1xuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcklucHV0X2NsZWFyRGF0ZV9fZGVmYXVsdDoge1xuICAgICAgJzpmb2N1cyc6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3IuY29yZS5ib3JkZXIsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJSdcbiAgICAgIH0sXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5jb3JlLmJvcmRlcixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJ1xuICAgICAgfVxuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcklucHV0X2NsZWFyRGF0ZV9fc21hbGw6IHtcbiAgICAgIHBhZGRpbmc6IDZcbiAgICB9LFxuICAgIFNpbmdsZURhdGVQaWNrZXJJbnB1dF9jbGVhckRhdGVfX2hpZGU6IHtcbiAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgfSxcbiAgICBTaW5nbGVEYXRlUGlja2VySW5wdXRfY2xlYXJEYXRlX3N2Zzoge1xuICAgICAgZmlsbDogY29sb3IuY29yZS5ncmF5TGlnaHQsXG4gICAgICBoZWlnaHQ6IDEyLFxuICAgICAgd2lkdGg6IDE1LFxuICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZSdcbiAgICB9LFxuICAgIFNpbmdsZURhdGVQaWNrZXJJbnB1dF9jbGVhckRhdGVfc3ZnX19zbWFsbDoge1xuICAgICAgaGVpZ2h0OiA5XG4gICAgfSxcbiAgICBTaW5nbGVEYXRlUGlja2VySW5wdXRfY2FsZW5kYXJJY29uOiB7XG4gICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgICBib3JkZXI6IDAsXG4gICAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICAgZm9udDogJ2luaGVyaXQnLFxuICAgICAgbGluZUhlaWdodDogJ25vcm1hbCcsXG4gICAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgcGFkZGluZzogMTAsXG4gICAgICBtYXJnaW46ICcwIDVweCAwIDEwcHgnIC8vIFRPRE86IHNob3VsZCBiZSBub2ZsaXAgd3JhcHBlZCBhbmQgaGFuZGxlZCBieSBhbiBpc1JUTCBwcm9wXG5cbiAgICB9LFxuICAgIFNpbmdsZURhdGVQaWNrZXJJbnB1dF9jYWxlbmRhckljb25fc3ZnOiB7XG4gICAgICBmaWxsOiBjb2xvci5jb3JlLmdyYXlMaWdodCxcbiAgICAgIGhlaWdodDogMTUsXG4gICAgICB3aWR0aDogMTQsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJ1xuICAgIH1cbiAgfTtcbn0sIHtcbiAgcHVyZUNvbXBvbmVudDogdHlwZW9mIF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAhPT0gJ3VuZGVmaW5lZCdcbn0pKFNpbmdsZURhdGVQaWNrZXJJbnB1dCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVMgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9lczIwMTcnKTtcblxudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fCAoTWF0aC5wb3coMiwgNTMpIC0gMSk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtcGFyYW1zLCBtYXgtc3RhdGVtZW50c1xudmFyIEZsYXR0ZW5JbnRvQXJyYXkgPSBmdW5jdGlvbiBGbGF0dGVuSW50b0FycmF5KHRhcmdldCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCkge1xuXHR2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcblx0dmFyIHNvdXJjZUluZGV4ID0gMDtcblxuXHQvKlxuXHR2YXIgbWFwcGVyRnVuY3Rpb247XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gNSkge1xuXHRcdG1hcHBlckZ1bmN0aW9uID0gYXJndW1lbnRzWzVdO1xuXHR9XG5cdCovXG5cblx0d2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG5cdFx0dmFyIFAgPSBFUy5Ub1N0cmluZyhzb3VyY2VJbmRleCk7XG5cdFx0dmFyIGV4aXN0cyA9IEVTLkhhc1Byb3BlcnR5KHNvdXJjZSwgUCk7XG5cdFx0aWYgKGV4aXN0cykge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSBFUy5HZXQoc291cmNlLCBQKTtcblx0XHRcdC8qXG5cdFx0XHRpZiAodHlwZW9mIG1hcHBlckZ1bmN0aW9uICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA8PSA2KSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogdGhpc0FyZyBpcyByZXF1aXJlZCB3aGVuIG1hcHBlckZ1bmN0aW9uIGlzIHByb3ZpZGVkJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxlbWVudCA9IEVTLkNhbGwobWFwcGVyRnVuY3Rpb24sIGFyZ3VtZW50c1s2XSwgW2VsZW1lbnQsIHNvdXJjZUluZGV4LCBzb3VyY2VdKTtcblx0XHRcdH1cblx0XHRcdCovXG5cdFx0XHR2YXIgc2hvdWxkRmxhdHRlbiA9IGZhbHNlO1xuXHRcdFx0aWYgKGRlcHRoID4gMCkge1xuXHRcdFx0XHRzaG91bGRGbGF0dGVuID0gRVMuSXNBcnJheShlbGVtZW50KTtcblx0XHRcdH1cblx0XHRcdGlmIChzaG91bGRGbGF0dGVuKSB7XG5cdFx0XHRcdHZhciBlbGVtZW50TGVuID0gRVMuVG9MZW5ndGgoRVMuR2V0KGVsZW1lbnQsICdsZW5ndGgnKSk7XG5cdFx0XHRcdHRhcmdldEluZGV4ID0gRmxhdHRlbkludG9BcnJheSh0YXJnZXQsIGVsZW1lbnQsIGVsZW1lbnRMZW4sIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKHRhcmdldEluZGV4ID49IE1BWF9TQUZFX0lOVEVHRVIpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdpbmRleCB0b28gbGFyZ2UnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRFUy5DcmVhdGVEYXRhUHJvcGVydHlPclRocm93KHRhcmdldCwgRVMuVG9TdHJpbmcodGFyZ2V0SW5kZXgpLCBlbGVtZW50KTtcblx0XHRcdFx0dGFyZ2V0SW5kZXggKz0gMTtcblx0XHRcdH1cblx0XHR9XG5cdFx0c291cmNlSW5kZXggKz0gMTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXRJbmRleDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmxhdCgpIHtcblx0dmFyIE8gPSBFUy5Ub09iamVjdCh0aGlzKTtcblx0dmFyIHNvdXJjZUxlbiA9IEVTLlRvTGVuZ3RoKEVTLkdldChPLCAnbGVuZ3RoJykpO1xuXG5cdHZhciBkZXB0aE51bSA9IDE7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCAmJiB0eXBlb2YgYXJndW1lbnRzWzBdICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGRlcHRoTnVtID0gRVMuVG9JbnRlZ2VyKGFyZ3VtZW50c1swXSk7XG5cdH1cblxuXHR2YXIgQSA9IEVTLkFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcblx0RmxhdHRlbkludG9BcnJheShBLCBPLCBzb3VyY2VMZW4sIDAsIGRlcHRoTnVtKTtcblx0cmV0dXJuIEE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuZmxhdCB8fCBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiAgSW4gdGhlXG4vLyBicm93c2VyIHRoaXMgaXMgYSBsaXR0bGUgY29tcGxpY2F0ZWQgZHVlIHRvIHVua25vd24gcXVhbGl0eSBvZiBNYXRoLnJhbmRvbSgpXG4vLyBhbmQgaW5jb25zaXN0ZW50IHN1cHBvcnQgZm9yIHRoZSBgY3J5cHRvYCBBUEkuICBXZSBkbyB0aGUgYmVzdCB3ZSBjYW4gdmlhXG4vLyBmZWF0dXJlLWRldGVjdGlvblxuXG4vLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG9cbi8vIGltcGxlbWVudGF0aW9uLiBBbHNvLCBmaW5kIHRoZSBjb21wbGV0ZSBpbXBsZW1lbnRhdGlvbiBvZiBjcnlwdG8gb24gSUUxMS5cbnZhciBnZXRSYW5kb21WYWx1ZXMgPSAodHlwZW9mKGNyeXB0bykgIT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mKG1zQ3J5cHRvKSAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93Lm1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PSAnZnVuY3Rpb24nICYmIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKG1zQ3J5cHRvKSk7XG5cbmlmIChnZXRSYW5kb21WYWx1ZXMpIHtcbiAgLy8gV0hBVFdHIGNyeXB0byBSTkcgLSBodHRwOi8vd2lraS53aGF0d2cub3JnL3dpa2kvQ3J5cHRvXG4gIHZhciBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gd2hhdHdnUk5HKCkge1xuICAgIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG4gICAgcmV0dXJuIHJuZHM4O1xuICB9O1xufSBlbHNlIHtcbiAgLy8gTWF0aC5yYW5kb20oKS1iYXNlZCAoUk5HKVxuICAvL1xuICAvLyBJZiBhbGwgZWxzZSBmYWlscywgdXNlIE1hdGgucmFuZG9tKCkuICBJdCdzIGZhc3QsIGJ1dCBpcyBvZiB1bnNwZWNpZmllZFxuICAvLyBxdWFsaXR5LlxuICB2YXIgcm5kcyA9IG5ldyBBcnJheSgxNik7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtYXRoUk5HKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCByOyBpIDwgMTY7IGkrKykge1xuICAgICAgaWYgKChpICYgMHgwMykgPT09IDApIHIgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDA7XG4gICAgICBybmRzW2ldID0gciA+Pj4gKChpICYgMHgwMykgPDwgMykgJiAweGZmO1xuICAgIH1cblxuICAgIHJldHVybiBybmRzO1xuICB9O1xufVxuIiwiLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG52YXIgYnl0ZVRvSGV4ID0gW107XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleFtpXSA9IChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzVG9VdWlkKGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gb2Zmc2V0IHx8IDA7XG4gIHZhciBidGggPSBieXRlVG9IZXg7XG4gIC8vIGpvaW4gdXNlZCB0byBmaXggbWVtb3J5IGlzc3VlIGNhdXNlZCBieSBjb25jYXRlbmF0aW9uOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMTc1I2M0XG4gIHJldHVybiAoW2J0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sIFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV1dKS5qb2luKCcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBieXRlc1RvVXVpZDtcbiIsImV4cG9ydCB2YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTsiLCJ2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBjYW5Vc2VET00gfSBmcm9tICcuL3V0aWxzJztcblxudmFyIFBvcnRhbCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3J0YWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcnRhbCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9ydGFsKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUG9ydGFsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUG9ydGFsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUG9ydGFsLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5kZWZhdWx0Tm9kZSkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMuZGVmYXVsdE5vZGUpO1xuICAgICAgfVxuICAgICAgdGhpcy5kZWZhdWx0Tm9kZSA9IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgaWYgKCFjYW5Vc2VET00pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMucHJvcHMubm9kZSAmJiAhdGhpcy5kZWZhdWx0Tm9kZSkge1xuICAgICAgICB0aGlzLmRlZmF1bHROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5kZWZhdWx0Tm9kZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3RET00uY3JlYXRlUG9ydGFsKHRoaXMucHJvcHMuY2hpbGRyZW4sIHRoaXMucHJvcHMubm9kZSB8fCB0aGlzLmRlZmF1bHROb2RlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9ydGFsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qb3J0YWwucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgbm9kZTogUHJvcFR5cGVzLmFueVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUG9ydGFsOyIsInZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLy8gVGhpcyBmaWxlIGlzIGEgZmFsbGJhY2sgZm9yIGEgY29uc3VtZXIgd2hvIGlzIG5vdCB5ZXQgb24gUmVhY3QgMTZcbi8vIGFzIGNyZWF0ZVBvcnRhbCB3YXMgaW50cm9kdWNlZCBpbiBSZWFjdCAxNlxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG52YXIgUG9ydGFsID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBvcnRhbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUG9ydGFsKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3J0YWwpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQb3J0YWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQb3J0YWwpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQb3J0YWwsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMucmVuZGVyUG9ydGFsKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByb3BzKSB7XG4gICAgICB0aGlzLnJlbmRlclBvcnRhbCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKHRoaXMuZGVmYXVsdE5vZGUgfHwgdGhpcy5wcm9wcy5ub2RlKTtcbiAgICAgIGlmICh0aGlzLmRlZmF1bHROb2RlKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5kZWZhdWx0Tm9kZSk7XG4gICAgICB9XG4gICAgICB0aGlzLmRlZmF1bHROb2RlID0gbnVsbDtcbiAgICAgIHRoaXMucG9ydGFsID0gbnVsbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXJQb3J0YWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJQb3J0YWwocHJvcHMpIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy5ub2RlICYmICF0aGlzLmRlZmF1bHROb2RlKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmRlZmF1bHROb2RlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2ppbWZiL2Q5OWUwNjc4ZTlkYTcxNWNjZjY0NTQ5NjFlZjA0ZDFiXG4gICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMuY2hpbGRyZW4udHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjaGlsZHJlbiA9IFJlYWN0LmNsb25lRWxlbWVudCh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wb3J0YWwgPSBSZWFjdERPTS51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcih0aGlzLCBjaGlsZHJlbiwgdGhpcy5wcm9wcy5ub2RlIHx8IHRoaXMuZGVmYXVsdE5vZGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQb3J0YWw7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IFBvcnRhbDtcblxuXG5Qb3J0YWwucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgbm9kZTogUHJvcFR5cGVzLmFueVxufTsiLCJpbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxuaW1wb3J0IFBvcnRhbHY0IGZyb20gJy4vUG9ydGFsJztcbmltcG9ydCBMZWdhY3lQb3J0YWwgZnJvbSAnLi9MZWdhY3lQb3J0YWwnO1xuXG52YXIgUG9ydGFsID0gdm9pZCAwO1xuXG5pZiAoUmVhY3RET00uY3JlYXRlUG9ydGFsKSB7XG4gIFBvcnRhbCA9IFBvcnRhbHY0O1xufSBlbHNlIHtcbiAgUG9ydGFsID0gTGVnYWN5UG9ydGFsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQb3J0YWw7IiwidmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi9Qb3J0YWxDb21wYXQnO1xuXG52YXIgS0VZQ09ERVMgPSB7XG4gIEVTQ0FQRTogMjdcbn07XG5cbnZhciBQb3J0YWxXaXRoU3RhdGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUG9ydGFsV2l0aFN0YXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3J0YWxXaXRoU3RhdGUocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9ydGFsV2l0aFN0YXRlKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQb3J0YWxXaXRoU3RhdGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQb3J0YWxXaXRoU3RhdGUpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5wb3J0YWxOb2RlID0gbnVsbDtcbiAgICBfdGhpcy5zdGF0ZSA9IHsgYWN0aXZlOiAhIXByb3BzLmRlZmF1bHRPcGVuIH07XG4gICAgX3RoaXMub3BlblBvcnRhbCA9IF90aGlzLm9wZW5Qb3J0YWwuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuY2xvc2VQb3J0YWwgPSBfdGhpcy5jbG9zZVBvcnRhbC5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy53cmFwV2l0aFBvcnRhbCA9IF90aGlzLndyYXBXaXRoUG9ydGFsLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmhhbmRsZU91dHNpZGVNb3VzZUNsaWNrID0gX3RoaXMuaGFuZGxlT3V0c2lkZU1vdXNlQ2xpY2suYmluZChfdGhpcyk7XG4gICAgX3RoaXMuaGFuZGxlS2V5ZG93biA9IF90aGlzLmhhbmRsZUtleWRvd24uYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBvcnRhbFdpdGhTdGF0ZSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuY2xvc2VPbkVzYykge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlkb3duKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzLmNsb3NlT25PdXRzaWRlQ2xpY2spIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU91dHNpZGVNb3VzZUNsaWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuY2xvc2VPbkVzYykge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlkb3duKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzLmNsb3NlT25PdXRzaWRlQ2xpY2spIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU91dHNpZGVNb3VzZUNsaWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvcGVuUG9ydGFsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlblBvcnRhbChlKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGUgJiYgZS5uYXRpdmVFdmVudCkge1xuICAgICAgICBlLm5hdGl2ZUV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZTogdHJ1ZSB9LCB0aGlzLnByb3BzLm9uT3Blbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2xvc2VQb3J0YWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZVBvcnRhbCgpIHtcbiAgICAgIGlmICghdGhpcy5zdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZTogZmFsc2UgfSwgdGhpcy5wcm9wcy5vbkNsb3NlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd3cmFwV2l0aFBvcnRhbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdyYXBXaXRoUG9ydGFsKGNoaWxkcmVuKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLnN0YXRlLmFjdGl2ZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBQb3J0YWwsXG4gICAgICAgIHtcbiAgICAgICAgICBub2RlOiB0aGlzLnByb3BzLm5vZGUsXG4gICAgICAgICAga2V5OiAncmVhY3QtcG9ydGFsJyxcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihwb3J0YWxOb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLnBvcnRhbE5vZGUgPSBwb3J0YWxOb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFuZGxlT3V0c2lkZU1vdXNlQ2xpY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVPdXRzaWRlTW91c2VDbGljayhlKSB7XG4gICAgICBpZiAoIXRoaXMuc3RhdGUuYWN0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciByb290ID0gdGhpcy5wb3J0YWxOb2RlLnByb3BzLm5vZGUgfHwgdGhpcy5wb3J0YWxOb2RlLmRlZmF1bHROb2RlO1xuICAgICAgaWYgKCFyb290IHx8IHJvb3QuY29udGFpbnMoZS50YXJnZXQpIHx8IGUuYnV0dG9uICYmIGUuYnV0dG9uICE9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2xvc2VQb3J0YWwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdoYW5kbGVLZXlkb3duJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlS2V5ZG93bihlKSB7XG4gICAgICBpZiAoZS5rZXlDb2RlID09PSBLRVlDT0RFUy5FU0NBUEUgJiYgdGhpcy5zdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgdGhpcy5jbG9zZVBvcnRhbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuKHtcbiAgICAgICAgb3BlblBvcnRhbDogdGhpcy5vcGVuUG9ydGFsLFxuICAgICAgICBjbG9zZVBvcnRhbDogdGhpcy5jbG9zZVBvcnRhbCxcbiAgICAgICAgcG9ydGFsOiB0aGlzLndyYXBXaXRoUG9ydGFsLFxuICAgICAgICBpc09wZW46IHRoaXMuc3RhdGUuYWN0aXZlXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9ydGFsV2l0aFN0YXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qb3J0YWxXaXRoU3RhdGUucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGVmYXVsdE9wZW46IFByb3BUeXBlcy5ib29sLFxuICBub2RlOiBQcm9wVHlwZXMuYW55LFxuICBjbG9zZU9uRXNjOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2xvc2VPbk91dHNpZGVDbGljazogUHJvcFR5cGVzLmJvb2wsXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jXG59O1xuXG5Qb3J0YWxXaXRoU3RhdGUuZGVmYXVsdFByb3BzID0ge1xuICBvbk9wZW46IGZ1bmN0aW9uIG9uT3BlbigpIHt9LFxuICBvbkNsb3NlOiBmdW5jdGlvbiBvbkNsb3NlKCkge31cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBvcnRhbFdpdGhTdGF0ZTsiLCJpbXBvcnQgUG9ydGFsIGZyb20gJy4vUG9ydGFsQ29tcGF0JztcbmltcG9ydCBQb3J0YWxXaXRoU3RhdGUgZnJvbSAnLi9Qb3J0YWxXaXRoU3RhdGUnO1xuXG5leHBvcnQgeyBQb3J0YWwsIFBvcnRhbFdpdGhTdGF0ZSB9OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBAZmxvd1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdsb2JhbFtrZXldID0gKGdsb2JhbFtrZXldIHx8IDApICsgMTtcbn07XG4iLCJ2YXIgdjEgPSByZXF1aXJlKCcuL3YxJyk7XG52YXIgdjQgPSByZXF1aXJlKCcuL3Y0Jyk7XG5cbnZhciB1dWlkID0gdjQ7XG51dWlkLnYxID0gdjE7XG51dWlkLnY0ID0gdjQ7XG5cbm1vZHVsZS5leHBvcnRzID0gdXVpZDtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOS4wXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxhYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLGJhPW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxjYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O24mJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTtuJiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO3ZhciB6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIEEoYSl7Zm9yKHZhciBiPWEubWVzc2FnZSxkPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYixjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKylkKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7YS5tZXNzYWdlPVwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2IrXCI7IHZpc2l0IFwiK2QrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIjtyZXR1cm4gYX12YXIgQj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQz17fTtcbmZ1bmN0aW9uIEQoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qzt0aGlzLnVwZGF0ZXI9ZHx8Qn1ELnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0QucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBBKEVycm9yKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtELnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBFKCl7fUUucHJvdG90eXBlPUQucHJvdG90eXBlO2Z1bmN0aW9uIEYoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qzt0aGlzLnVwZGF0ZXI9ZHx8Qn12YXIgRz1GLnByb3RvdHlwZT1uZXcgRTtcbkcuY29uc3RydWN0b3I9RjtoKEcsRC5wcm90b3R5cGUpO0cuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEg9e2N1cnJlbnQ6bnVsbH0sST17c3VzcGVuc2U6bnVsbH0sSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZCl7dmFyIGM9dm9pZCAwLGU9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWVbY10mJihlW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczplLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gZGEoYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsZCxjKXtpZihQLmxlbmd0aCl7dmFyIGU9UC5wb3AoKTtlLnJlc3VsdD1hO2Uua2V5UHJlZml4PWI7ZS5mdW5jPWQ7ZS5jb250ZXh0PWM7ZS5jb3VudD0wO3JldHVybiBlfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmQsY29udGV4dDpjLGNvdW50OjB9fVxuZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixkLGMpe3ZhciBlPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1lfHxcImJvb2xlYW5cIj09PWUpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBkKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2U9YVtrXTt2YXIgZj1iK1QoZSxrKTtnKz1TKGUsZixkLGMpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxrPVxuMDshKGU9YS5uZXh0KCkpLmRvbmU7KWU9ZS52YWx1ZSxmPWIrVChlLGsrKyksZys9UyhlLGYsZCxjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1lKXRocm93IGQ9XCJcIithLEEoRXJyb3IoMzEpLFwiW29iamVjdCBPYmplY3RdXCI9PT1kP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmQsXCJcIik7cmV0dXJuIGd9ZnVuY3Rpb24gVShhLGIsZCl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixiLGQpfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGVhKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGZhKGEsYixkKXt2YXIgYz1hLnJlc3VsdCxlPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGQsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTihhKSYmKGE9ZGEoYSxlKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStkKSksYy5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixkLGMsZSl7dmFyIGc9XCJcIjtudWxsIT1kJiYoZz0oXCJcIitkKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxlKTtVKGEsZmEsYik7UihiKX1mdW5jdGlvbiBXKCl7dmFyIGE9SC5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEEoRXJyb3IoMzIxKSk7cmV0dXJuIGF9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtWKGEsYyxudWxsLGIsZCk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGQpO1UoYSxlYSxiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVShhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1YoYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTihhKSl0aHJvdyBBKEVycm9yKDE0MykpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpELFB1cmVDb21wb25lbnQ6RixjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX0sbGF6eTpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6Y2EsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19LG1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6YmEsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ2FsbGJhY2soYSxiKX0sdXNlQ29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ29udGV4dChhLGIpfSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUVmZmVjdChhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsXG5iLGQpe3JldHVybiBXKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZCl9LHVzZURlYnVnVmFsdWU6ZnVuY3Rpb24oKXt9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZU1lbW8oYSxiKX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIFcoKS51c2VSZWR1Y2VyKGEsYixkKX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlUmVmKGEpfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVN0YXRlKGEpfSxGcmFnbWVudDpyLFByb2ZpbGVyOnUsU3RyaWN0TW9kZTp0LFN1c3BlbnNlOnksdW5zdGFibGVfU3VzcGVuc2VMaXN0OmFhLGNyZWF0ZUVsZW1lbnQ6TSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEEoRXJyb3IoMjY3KSxhKTt2YXIgYz12b2lkIDAsZT1cbmgoe30sYS5wcm9wcyksZz1hLmtleSxrPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGY9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGw9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmKGw9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihlW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWw/bFtjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YyllLmNoaWxkcmVuPWQ7ZWxzZSBpZigxPGMpe2w9QXJyYXkoYyk7Zm9yKHZhciBtPTA7bTxjO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49bH1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6ayxwcm9wczplLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtcbmIudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi45LjBcIix1bnN0YWJsZV93aXRoU3VzcGVuc2VDb25maWc6ZnVuY3Rpb24oYSxiKXt2YXIgZD1JLnN1c3BlbnNlO0kuc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2EoKX1maW5hbGx5e0kuc3VzcGVuc2U9ZH19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnREaXNwYXRjaGVyOkgsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6SSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246aH19LFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdHx8WjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOS4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHQoYSl7Zm9yKHZhciBiPWEubWVzc2FnZSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYixkPTE7ZDxhcmd1bWVudHMubGVuZ3RoO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkXSk7YS5tZXNzYWdlPVwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2IrXCI7IHZpc2l0IFwiK2MrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIjtyZXR1cm4gYX1pZighYWEpdGhyb3cgdChFcnJvcigyMjcpKTt2YXIgYmE9bnVsbCxjYT17fTtcbmZ1bmN0aW9uIGRhKCl7aWYoYmEpZm9yKHZhciBhIGluIGNhKXt2YXIgYj1jYVthXSxjPWJhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyB0KEVycm9yKDk2KSxhKTtpZighZWFbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgdChFcnJvcig5NyksYSk7ZWFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0saD1iLGc9ZDtpZihmYS5oYXNPd25Qcm9wZXJ0eShnKSl0aHJvdyB0KEVycm9yKDk5KSxnKTtmYVtnXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZoYShrW2VdLGgsZyk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8oaGEoZi5yZWdpc3RyYXRpb25OYW1lLGgsZyksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyB0KEVycm9yKDk4KSxkLGEpO319fX1cbmZ1bmN0aW9uIGhhKGEsYixjKXtpZihpYVthXSl0aHJvdyB0KEVycm9yKDEwMCksYSk7aWFbYV09YjtqYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBlYT1bXSxmYT17fSxpYT17fSxqYT17fTtmdW5jdGlvbiBrYShhLGIsYyxkLGUsZixoLGcsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgbGE9ITEsbWE9bnVsbCxuYT0hMSxvYT1udWxsLHBhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2xhPSEwO21hPWF9fTtmdW5jdGlvbiBxYShhLGIsYyxkLGUsZixoLGcsayl7bGE9ITE7bWE9bnVsbDtrYS5hcHBseShwYSxhcmd1bWVudHMpfVxuZnVuY3Rpb24gcmEoYSxiLGMsZCxlLGYsaCxnLGspe3FhLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihsYSl7aWYobGEpe3ZhciBsPW1hO2xhPSExO21hPW51bGx9ZWxzZSB0aHJvdyB0KEVycm9yKDE5OCkpO25hfHwobmE9ITAsb2E9bCl9fXZhciBzYT1udWxsLHRhPW51bGwsdmE9bnVsbDtmdW5jdGlvbiB3YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9dmEoYyk7cmEoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB4YShhLGIpe2lmKG51bGw9PWIpdGhyb3cgdChFcnJvcigzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1cbmZ1bmN0aW9uIHlhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciB6YT1udWxsO2Z1bmN0aW9uIEFhKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKyl3YShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZ3YShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gQmEoYSl7bnVsbCE9PWEmJih6YT14YSh6YSxhKSk7YT16YTt6YT1udWxsO2lmKGEpe3lhKGEsQWEpO2lmKHphKXRocm93IHQoRXJyb3IoOTUpKTtpZihuYSl0aHJvdyBhPW9hLG5hPSExLG9hPW51bGwsYTt9fVxudmFyIENhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe2lmKGJhKXRocm93IHQoRXJyb3IoMTAxKSk7YmE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7ZGEoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO2lmKCFjYS5oYXNPd25Qcm9wZXJ0eShjKXx8Y2FbY10hPT1kKXtpZihjYVtjXSl0aHJvdyB0KEVycm9yKDEwMiksYyk7Y2FbY109ZDtiPSEwfX1iJiZkYSgpfX07XG5mdW5jdGlvbiBEYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXNhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IHQoRXJyb3IoMjMxKSxiLHR5cGVvZiBjKTtcbnJldHVybiBjfXZhciBFYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxGYT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0VhLEdhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrRWE7ZnVuY3Rpb24gSGEoYSl7aWYoYVtGYV0pcmV0dXJuIGFbRmFdO2Zvcig7IWFbRmFdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbRmFdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gSWEoYSl7YT1hW0ZhXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIEphKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyB0KEVycm9yKDMzKSk7fWZ1bmN0aW9uIEthKGEpe3JldHVybiBhW0dhXXx8bnVsbH1mdW5jdGlvbiBMYShhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gTWEoYSxiLGMpe2lmKGI9RGEoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBOYShhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPUxhKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylNYShjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKU1hKGNbYl0sXCJidWJibGVkXCIsYSl9fVxuZnVuY3Rpb24gT2EoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9RGEoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBQYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJk9hKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBRYShhKXt5YShhLE5hKX12YXIgUmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gU2EoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGE9e2FuaW1hdGlvbmVuZDpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNhKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWE9e30sVmE9e307XG5SYSYmKFZhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRhLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRhLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2EoYSl7aWYoVWFbYV0pcmV0dXJuIFVhW2FdO2lmKCFUYVthXSlyZXR1cm4gYTt2YXIgYj1UYVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYSlyZXR1cm4gVWFbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYT1XYShcImFuaW1hdGlvbmVuZFwiKSxZYT1XYShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYT1XYShcImFuaW1hdGlvbnN0YXJ0XCIpLGFiPVdhKFwidHJhbnNpdGlvbmVuZFwiKSxiYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksY2I9bnVsbCxkYj1udWxsLGViPW51bGw7XG5mdW5jdGlvbiBmYigpe2lmKGViKXJldHVybiBlYjt2YXIgYSxiPWRiLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGNiP2NiLnZhbHVlOmNiLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGg9Yy1hO2ZvcihkPTE7ZDw9aCYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGViPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gZ2IoKXtyZXR1cm4hMH1mdW5jdGlvbiBoYigpe3JldHVybiExfVxuZnVuY3Rpb24geShhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/Z2I6aGI7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1oYjtyZXR1cm4gdGhpc31cbm0oeS5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1nYil9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1nYil9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1nYn0saXNQZXJzaXN0ZW50OmhiLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWhiO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7eS5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG55LmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjttKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1tKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2liKGMpO3JldHVybiBjfTtpYih5KTtmdW5jdGlvbiBqYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIGtiKGEpe2lmKCEoYSBpbnN0YW5jZW9mIHRoaXMpKXRocm93IHQoRXJyb3IoMjc5KSk7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIGliKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWpiO2EucmVsZWFzZT1rYn12YXIgbGI9eS5leHRlbmQoe2RhdGE6bnVsbH0pLG1iPXkuZXh0ZW5kKHtkYXRhOm51bGx9KSxuYj1bOSwxMywyNywzMl0sb2I9UmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LHBiPW51bGw7UmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKHBiPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgcWI9UmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFwYixzYj1SYSYmKCFvYnx8cGImJjg8cGImJjExPj1wYiksdGI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksdWI9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0sdmI9ITE7XG5mdW5jdGlvbiB3YihhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PW5iLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24geGIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgeWI9ITE7ZnVuY3Rpb24gQWIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHhiKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDt2Yj0hMDtyZXR1cm4gdGI7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09dGImJnZiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIEJiKGEsYil7aWYoeWIpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IW9iJiZ3YihhLGIpPyhhPWZiKCksZWI9ZGI9Y2I9bnVsbCx5Yj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gc2ImJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIENiPXtldmVudFR5cGVzOnViLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZihvYiliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjplPXViLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjplPXViLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6ZT11Yi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgeWI/d2IoYSxjKSYmKGU9dWIuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT11Yi5jb21wb3NpdGlvblN0YXJ0KTtlPyhzYiYmXCJrb1wiIT09Yy5sb2NhbGUmJih5Ynx8ZSE9PXViLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PXViLmNvbXBvc2l0aW9uRW5kJiZ5YiYmKGY9ZmIoKSk6KGNiPWQsZGI9XCJ2YWx1ZVwiaW4gY2I/Y2IudmFsdWU6Y2IudGV4dENvbnRlbnQseWI9XG4hMCkpLGU9bGIuZ2V0UG9vbGVkKGUsYixjLGQpLGY/ZS5kYXRhPWY6KGY9eGIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLFFhKGUpLGY9ZSk6Zj1udWxsOyhhPXFiP0FiKGEsYyk6QmIoYSxjKSk/KGI9bWIuZ2V0UG9vbGVkKHViLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxRYShiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxEYj1udWxsLEViPW51bGwsRmI9bnVsbDtmdW5jdGlvbiBHYihhKXtpZihhPXRhKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgRGIpdGhyb3cgdChFcnJvcigyODApKTt2YXIgYj1zYShhLnN0YXRlTm9kZSk7RGIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBIYihhKXtFYj9GYj9GYi5wdXNoKGEpOkZiPVthXTpFYj1hfWZ1bmN0aW9uIEliKCl7aWYoRWIpe3ZhciBhPUViLGI9RmI7RmI9RWI9bnVsbDtHYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspR2IoYlthXSl9fVxuZnVuY3Rpb24gSmIoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBLYihhLGIsYyxkKXtyZXR1cm4gYShiLGMsZCl9ZnVuY3Rpb24gTGIoKXt9dmFyIE1iPUpiLE5iPSExO2Z1bmN0aW9uIE9iKCl7aWYobnVsbCE9PUVifHxudWxsIT09RmIpTGIoKSxJYigpfXZhciBQYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBRYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIVBiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbmZ1bmN0aW9uIFJiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBTYihhKXtpZighUmEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gVGIoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFViKGEpe3ZhciBiPVRiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWIoYSkpfWZ1bmN0aW9uIFdiKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfXZhciBYYj1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtYYi5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChYYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtYYi5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoWGIuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbnZhciBZYj0vXiguKilbXFxcXFxcL10vLEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixaYj1CP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLCRiPUI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixhYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxiYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxjYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxkYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxlYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGZjPUI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxnYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixoYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxpYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAsamM9Qj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxrYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O0ImJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTtCJiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO3ZhciBsYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gbWMoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPWxjJiZhW2xjXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gb2MoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBhYzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSAkYjpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgY2M6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgYmM6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBoYzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBpYzpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRjOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2M6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIGpjOnJldHVybiBvYyhhLnR5cGUpO2Nhc2Uga2M6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBvYyhhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9b2MoYS50eXBlKTtjPW51bGw7ZCYmKGM9b2MoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShZYixcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIHFjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxyYz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHNjPXt9LHRjPXt9O1xuZnVuY3Rpb24gdWMoYSl7aWYocmMuY2FsbCh0YyxhKSlyZXR1cm4hMDtpZihyYy5jYWxsKHNjLGEpKXJldHVybiExO2lmKHFjLnRlc3QoYSkpcmV0dXJuIHRjW2FdPSEwO3NjW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHZjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gd2MoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8dmMoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBEKGEsYixjLGQsZSxmKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zn12YXIgRj17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDAsITEsYSxudWxsLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtGW2JdPW5ldyBEKGIsMSwhMSxhWzFdLG51bGwsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDIsITEsYSxudWxsLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDMsITAsYSxudWxsLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDQsITEsYSxudWxsLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsNiwhMSxhLG51bGwsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTt2YXIgeGM9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiB5YyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh4YyxcbnljKTtGW2JdPW5ldyBEKGIsMSwhMSxhLG51bGwsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoeGMseWMpO0ZbYl09bmV3IEQoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoeGMseWMpO0ZbYl09bmV3IEQoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbkYueGxpbmtIcmVmPW5ldyBEKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCl9KTtcbmZ1bmN0aW9uIHpjKGEsYixjLGQpe3ZhciBlPUYuaGFzT3duUHJvcGVydHkoYik/RltiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KHdjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT91YyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gQWMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBtKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIENjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPUFjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gRGMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ6YyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gRWMoYSxiKXtEYyhhLGIpO3ZhciBjPUFjKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0ZjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkZjKGEsYi50eXBlLEFjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gR2MoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gRmMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBIYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBJYyhhLGIsYyl7YT15LmdldFBvb2xlZChIYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0hiKGMpO1FhKGEpO3JldHVybiBhfXZhciBKYz1udWxsLEtjPW51bGw7ZnVuY3Rpb24gTGMoYSl7QmEoYSl9XG5mdW5jdGlvbiBNYyhhKXt2YXIgYj1KYShhKTtpZihXYihiKSlyZXR1cm4gYX1mdW5jdGlvbiBOYyhhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBPYz0hMTtSYSYmKE9jPVNiKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIFBjKCl7SmMmJihKYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixRYyksS2M9SmM9bnVsbCl9ZnVuY3Rpb24gUWMoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJk1jKEtjKSlpZihhPUljKEtjLGEsUmIoYSkpLE5iKUJhKGEpO2Vsc2V7TmI9ITA7dHJ5e0piKExjLGEpfWZpbmFsbHl7TmI9ITEsT2IoKX19fWZ1bmN0aW9uIFJjKGEsYixjKXtcImZvY3VzXCI9PT1hPyhQYygpLEpjPWIsS2M9YyxKYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixRYykpOlwiYmx1clwiPT09YSYmUGMoKX1cbmZ1bmN0aW9uIFNjKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIE1jKEtjKX1mdW5jdGlvbiBUYyhhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIE1jKGIpfWZ1bmN0aW9uIFVjKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIE1jKGIpfVxudmFyIFZjPXtldmVudFR5cGVzOkhjLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6T2MsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP0phKGIpOndpbmRvdyxmPXZvaWQgMCxoPXZvaWQgMCxnPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09Z3x8XCJpbnB1dFwiPT09ZyYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1OYzpRYihlKT9PYz9mPVVjOihmPVNjLGg9UmMpOihnPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1nLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPVRjKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBJYyhmLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkZjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LFdjPXkuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxYYz17QWx0OlwiYWx0S2V5XCIsXG5Db250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBZYyhhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPVhjW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gWmMoKXtyZXR1cm4gWWN9XG52YXIgJGM9MCxhZD0wLGJkPSExLGNkPSExLGRkPVdjLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpaYyxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj0kYzskYz1hLnNjcmVlblg7cmV0dXJuIGJkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooYmQ9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1hZDthZD1hLnNjcmVlblk7cmV0dXJuIGNkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooY2Q9ITAsMCl9fSksZWQ9ZGQuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLGZkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxnZD17ZXZlbnRUeXBlczpmZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9IYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGg9dm9pZCAwLGc9dm9pZCAwLGs9dm9pZCAwLGw9dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWg9ZGQsZz1mZC5tb3VzZUxlYXZlLGs9ZmQubW91c2VFbnRlcixsPVwibW91c2VcIjtcbmVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWg9ZWQsZz1mZC5wb2ludGVyTGVhdmUsaz1mZC5wb2ludGVyRW50ZXIsbD1cInBvaW50ZXJcIjt2YXIgbj1udWxsPT1mP2U6SmEoZik7ZT1udWxsPT1iP2U6SmEoYik7YT1oLmdldFBvb2xlZChnLGYsYyxkKTthLnR5cGU9bCtcImxlYXZlXCI7YS50YXJnZXQ9bjthLnJlbGF0ZWRUYXJnZXQ9ZTtjPWguZ2V0UG9vbGVkKGssYixjLGQpO2MudHlwZT1sK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1uO2Q9YjtpZihmJiZkKWE6e2I9ZjtlPWQ7bD0wO2ZvcihoPWI7aDtoPUxhKGgpKWwrKztoPTA7Zm9yKGs9ZTtrO2s9TGEoaykpaCsrO2Zvcig7MDxsLWg7KWI9TGEoYiksbC0tO2Zvcig7MDxoLWw7KWU9TGEoZSksaC0tO2Zvcig7bC0tOyl7aWYoYj09PWV8fGI9PT1lLmFsdGVybmF0ZSlicmVhayBhO2I9TGEoYik7ZT1MYShlKX1iPW51bGx9ZWxzZSBiPW51bGw7ZT1iO2ZvcihiPVtdO2YmJmYhPT1lOyl7bD1cbmYuYWx0ZXJuYXRlO2lmKG51bGwhPT1sJiZsPT09ZSlicmVhaztiLnB1c2goZik7Zj1MYShmKX1mb3IoZj1bXTtkJiZkIT09ZTspe2w9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWwmJmw9PT1lKWJyZWFrO2YucHVzaChkKTtkPUxhKGQpfWZvcihkPTA7ZDxiLmxlbmd0aDtkKyspT2EoYltkXSxcImJ1YmJsZWRcIixhKTtmb3IoZD1mLmxlbmd0aDswPGQtLTspT2EoZltkXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuW2EsY119fTtmdW5jdGlvbiBoZChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIGlkPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBqZChhLGIpe2lmKGhkKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighaWQuY2FsbChiLGNbZF0pfHwhaGQoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBrZChhLGIpe3JldHVybntyZXNwb25kZXI6YSxwcm9wczpifX1uZXcgTWFwO25ldyBNYXA7bmV3IFNldDtuZXcgTWFwO1xuZnVuY3Rpb24gbGQoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2IucmV0dXJuOylpZihiPWIucmV0dXJuLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24gb2QoYSl7aWYoMiE9PWxkKGEpKXRocm93IHQoRXJyb3IoMTg4KSk7fVxuZnVuY3Rpb24gcGQoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9bGQoYSk7aWYoMz09PWIpdGhyb3cgdChFcnJvcigxODgpKTtyZXR1cm4gMT09PWI/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gb2QoZSksYTtpZihmPT09ZClyZXR1cm4gb2QoZSksYjtmPWYuc2libGluZ310aHJvdyB0KEVycm9yKDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGg9ITEsZz1lLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWU7ZD1mO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZTtjPWY7YnJlYWt9Zz1nLnNpYmxpbmd9aWYoIWgpe2ZvcihnPWYuY2hpbGQ7Zzspe2lmKGc9PT1cbmMpe2g9ITA7Yz1mO2Q9ZTticmVha31pZihnPT09ZCl7aD0hMDtkPWY7Yz1lO2JyZWFrfWc9Zy5zaWJsaW5nfWlmKCFoKXRocm93IHQoRXJyb3IoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgdChFcnJvcigxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IHQoRXJyb3IoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBxZChhKXthPXBkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxudmFyIHJkPXkuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxzZD15LmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLHRkPVdjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gdWQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgdmQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHdkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSx4ZD1XYy5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9dmRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9dWQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3dkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpaYyxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT91ZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT91ZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHlkPWRkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx6ZD1XYy5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpaY30pLEFkPXkuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLEJkPWRkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksQ2Q9W1tcImJsdXJcIixcImJsdXJcIiwwXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiLDBdLFtcImNsaWNrXCIsXCJjbGlja1wiLDBdLFtcImNsb3NlXCIsXCJjbG9zZVwiLDBdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiLDBdLFtcImNvcHlcIixcImNvcHlcIiwwXSxbXCJjdXRcIixcImN1dFwiLDBdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiLDBdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiLDBdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIiwwXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiLDBdLFtcImRyb3BcIixcImRyb3BcIiwwXSxbXCJmb2N1c1wiLFwiZm9jdXNcIiwwXSxbXCJpbnB1dFwiLFwiaW5wdXRcIiwwXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCIsMF0sXG5bXCJrZXlkb3duXCIsXCJrZXlEb3duXCIsMF0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCIsMF0sW1wia2V5dXBcIixcImtleVVwXCIsMF0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIiwwXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCIsMF0sW1wicGFzdGVcIixcInBhc3RlXCIsMF0sW1wicGF1c2VcIixcInBhdXNlXCIsMF0sW1wicGxheVwiLFwicGxheVwiLDBdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIiwwXSxbXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIiwwXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiLDBdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIiwwXSxbXCJyZXNldFwiLFwicmVzZXRcIiwwXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiLDBdLFtcInN1Ym1pdFwiLFwic3VibWl0XCIsMF0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCIsMF0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCIsMF0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiLDBdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCIsMF0sW1wiZHJhZ1wiLFwiZHJhZ1wiLFxuMV0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIiwxXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIiwxXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiLDFdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiLDFdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCIsMV0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCIsMV0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIiwxXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIiwxXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCIsMV0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCIsMV0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIiwxXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiLDFdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCIsMV0sW1wid2hlZWxcIixcIndoZWVsXCIsMV0sW1wiYWJvcnRcIixcImFib3J0XCIsMl0sW1hhLFwiYW5pbWF0aW9uRW5kXCIsMl0sW1lhLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsMl0sW1phLFwiYW5pbWF0aW9uU3RhcnRcIiwyXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsMl0sW1wiY2FucGxheXRocm91Z2hcIixcblwiY2FuUGxheVRocm91Z2hcIiwyXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIiwyXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsMl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIiwyXSxbXCJlbmRlZFwiLFwiZW5kZWRcIiwyXSxbXCJlcnJvclwiLFwiZXJyb3JcIiwyXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJsb2FkXCIsXCJsb2FkXCIsMl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLDJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLDJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsMl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsMl0sW1wicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsMl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiLDJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIiwyXSxbXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsMl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLFxuMl0sW2FiLFwidHJhbnNpdGlvbkVuZFwiLDJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIiwyXV0sRGQ9e30sRWQ9e30sRmQ9MDtmb3IoO0ZkPENkLmxlbmd0aDtGZCsrKXt2YXIgR2Q9Q2RbRmRdLEhkPUdkWzBdLElkPUdkWzFdLEpkPUdkWzJdLEtkPVwib25cIisoSWRbMF0udG9VcHBlckNhc2UoKStJZC5zbGljZSgxKSksTGQ9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOktkLGNhcHR1cmVkOktkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W0hkXSxldmVudFByaW9yaXR5OkpkfTtEZFtJZF09TGQ7RWRbSGRdPUxkfVxudmFyIE1kPXtldmVudFR5cGVzOkRkLGdldEV2ZW50UHJpb3JpdHk6ZnVuY3Rpb24oYSl7YT1FZFthXTtyZXR1cm4gdm9pZCAwIT09YT9hLmV2ZW50UHJpb3JpdHk6Mn0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1FZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PXVkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT14ZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9dGQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1kZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxueWQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT16ZDticmVhaztjYXNlIFhhOmNhc2UgWWE6Y2FzZSBaYTphPXJkO2JyZWFrO2Nhc2UgYWI6YT1BZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1XYzticmVhaztjYXNlIFwid2hlZWxcIjphPUJkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9c2Q7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1lZDticmVhaztkZWZhdWx0OmE9eX1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1FhKGIpO3JldHVybiBifX0sTmQ9TWQuZ2V0RXZlbnRQcmlvcml0eSxPZD1bXTtcbmZ1bmN0aW9uIFBkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ7Zm9yKGQ9YztkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWQpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChjKTtjPUhhKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPVJiKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7Zm9yKHZhciBmPWEubmF0aXZlRXZlbnQsaD1udWxsLGc9MDtnPGVhLmxlbmd0aDtnKyspe3ZhciBrPWVhW2ddO2smJihrPWsuZXh0cmFjdEV2ZW50cyhkLGIsZixlKSkmJihoPXhhKGgsaykpfUJhKGgpfX12YXIgUWQ9ITA7ZnVuY3Rpb24gRyhhLGIpe1JkKGIsYSwhMSl9XG5mdW5jdGlvbiBSZChhLGIsYyl7c3dpdGNoKE5kKGIpKXtjYXNlIDA6dmFyIGQ9U2QuYmluZChudWxsLGIsMSk7YnJlYWs7Y2FzZSAxOmQ9VGQuYmluZChudWxsLGIsMSk7YnJlYWs7ZGVmYXVsdDpkPVVkLmJpbmQobnVsbCxiLDEpfWM/YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMCk6YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMSl9ZnVuY3Rpb24gU2QoYSxiLGMpe05ifHxMYigpO3ZhciBkPVVkLGU9TmI7TmI9ITA7dHJ5e0tiKGQsYSxiLGMpfWZpbmFsbHl7KE5iPWUpfHxPYigpfX1mdW5jdGlvbiBUZChhLGIsYyl7VWQoYSxiLGMpfVxuZnVuY3Rpb24gVWQoYSxiLGMpe2lmKFFkKXtiPVJiKGMpO2I9SGEoYik7bnVsbD09PWJ8fFwibnVtYmVyXCIhPT10eXBlb2YgYi50YWd8fDI9PT1sZChiKXx8KGI9bnVsbCk7aWYoT2QubGVuZ3RoKXt2YXIgZD1PZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YztkLnRhcmdldEluc3Q9YjthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpjLHRhcmdldEluc3Q6YixhbmNlc3RvcnM6W119O3RyeXtpZihjPWEsTmIpUGQoYyx2b2lkIDApO2Vsc2V7TmI9ITA7dHJ5e01iKFBkLGMsdm9pZCAwKX1maW5hbGx5e05iPSExLE9iKCl9fX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPk9kLmxlbmd0aCYmT2QucHVzaChhKX19fXZhciBWZD1uZXcgKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwKTtcbmZ1bmN0aW9uIFdkKGEpe3ZhciBiPVZkLmdldChhKTt2b2lkIDA9PT1iJiYoYj1uZXcgU2V0LFZkLnNldChhLGIpKTtyZXR1cm4gYn1mdW5jdGlvbiBYZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gWWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gWmQoYSxiKXt2YXIgYz1ZZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1ZZChjKX19ZnVuY3Rpb24gJGQoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT8kZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBhZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YZChhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBiZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIGNlPVJhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsZGU9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LGVlPW51bGwsZmU9bnVsbCxnZT1udWxsLGhlPSExO1xuZnVuY3Rpb24gaWUoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihoZXx8bnVsbD09ZWV8fGVlIT09WGQoYykpcmV0dXJuIG51bGw7Yz1lZTtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZiZShjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBnZSYmamQoZ2UsYyk/bnVsbDooZ2U9YyxhPXkuZ2V0UG9vbGVkKGRlLnNlbGVjdCxmZSxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PWVlLFFhKGEpLGEpfVxudmFyIGplPXtldmVudFR5cGVzOmRlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPVdkKGUpO2Y9amEub25TZWxlY3Q7Zm9yKHZhciBoPTA7aDxmLmxlbmd0aDtoKyspaWYoIWUuaGFzKGZbaF0pKXtlPSExO2JyZWFrIGF9ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP0phKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoUWIoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpZWU9ZSxmZT1iLGdlPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpnZT1mZT1lZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpoZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuIGhlPSExLGllKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKGNlKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gaWUoYyxkKX1yZXR1cm4gbnVsbH19O0NhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7c2E9S2E7dGE9SWE7dmE9SmE7Q2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpNZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46Z2QsQ2hhbmdlRXZlbnRQbHVnaW46VmMsU2VsZWN0RXZlbnRQbHVnaW46amUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpDYn0pO2Z1bmN0aW9uIGtlKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifVxuZnVuY3Rpb24gbGUoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1rZShiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9ZnVuY3Rpb24gbWUoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK0FjKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBuZShhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgdChFcnJvcig5MSkpO3JldHVybiBtKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIG9lKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuZGVmYXVsdFZhbHVlO2I9Yi5jaGlsZHJlbjtpZihudWxsIT1iKXtpZihudWxsIT1jKXRocm93IHQoRXJyb3IoOTIpKTtpZihBcnJheS5pc0FycmF5KGIpKXtpZighKDE+PWIubGVuZ3RoKSl0aHJvdyB0KEVycm9yKDkzKSk7Yj1iWzBdfWM9Yn1udWxsPT1jJiYoYz1cIlwiKX1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpBYyhjKX19XG5mdW5jdGlvbiBwZShhLGIpe3ZhciBjPUFjKGIudmFsdWUpLGQ9QWMoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBxZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgcmU9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gc2UoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiB0ZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/c2UoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgdWU9dm9pZCAwLHZlPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PXJlLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle3VlPXVlfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3VlLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPXVlLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIHdlKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgeGU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0seWU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHhlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3llLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7eGVbYl09eGVbYV19KX0pO2Z1bmN0aW9uIHplKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHx4ZS5oYXNPd25Qcm9wZXJ0eShhKSYmeGVbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gQWUoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9emUoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgQ2U9bSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIERlKGEsYil7aWYoYil7aWYoQ2VbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyB0KEVycm9yKDEzNyksYSxcIlwiKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IHQoRXJyb3IoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IHQoRXJyb3IoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IHQoRXJyb3IoNjIpLFwiXCIpO319XG5mdW5jdGlvbiBFZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG5mdW5jdGlvbiBGZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1XZChhKTtiPWphW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhcyhlKSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpSZChhLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6UmQoYSxcImZvY3VzXCIsITApO1JkKGEsXCJibHVyXCIsITApO2MuYWRkKFwiYmx1clwiKTtjLmFkZChcImZvY3VzXCIpO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpTYihlKSYmUmQoYSxlLCEwKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YmIuaW5kZXhPZihlKSYmRyhlLGEpfWMuYWRkKGUpfX19ZnVuY3Rpb24gR2UoKXt9dmFyIEhlPW51bGwsSWU9bnVsbDtcbmZ1bmN0aW9uIEplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1mdW5jdGlvbiBLZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIExlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLE1lPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtcbmZ1bmN0aW9uIE5lKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfW5ldyBTZXQ7dmFyIE9lPVtdLFBlPS0xO2Z1bmN0aW9uIEgoYSl7MD5QZXx8KGEuY3VycmVudD1PZVtQZV0sT2VbUGVdPW51bGwsUGUtLSl9ZnVuY3Rpb24gSihhLGIpe1BlKys7T2VbUGVdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgUWU9e30sTD17Y3VycmVudDpRZX0sTT17Y3VycmVudDohMX0sUmU9UWU7XG5mdW5jdGlvbiBTZShhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFFlO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIE4oYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBUZShhKXtIKE0sYSk7SChMLGEpfWZ1bmN0aW9uIFVlKGEpe0goTSxhKTtIKEwsYSl9XG5mdW5jdGlvbiBWZShhLGIsYyl7aWYoTC5jdXJyZW50IT09UWUpdGhyb3cgdChFcnJvcigxNjgpKTtKKEwsYixhKTtKKE0sYyxhKX1mdW5jdGlvbiBXZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IHQoRXJyb3IoMTA4KSxvYyhiKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIG0oe30sYyxkKX1mdW5jdGlvbiBYZShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFFlO1JlPUwuY3VycmVudDtKKEwsYixhKTtKKE0sTS5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gWWUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IHQoRXJyb3IoMTY5KSk7Yz8oYj1XZShhLGIsUmUpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixIKE0sYSksSChMLGEpLEooTCxiLGEpKTpIKE0sYSk7SihNLGMsYSl9XG52YXIgWmU9cS51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksJGU9cS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLGFmPXEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssYmY9cS51bnN0YWJsZV9zaG91bGRZaWVsZCxjZj1xLnVuc3RhYmxlX3JlcXVlc3RQYWludCxkZj1xLnVuc3RhYmxlX25vdyxlZj1xLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZmPXEudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksaGY9cS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxqZj1xLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGtmPXEudW5zdGFibGVfTG93UHJpb3JpdHksbGY9cS51bnN0YWJsZV9JZGxlUHJpb3JpdHksbWY9e30sbmY9dm9pZCAwIT09Y2Y/Y2Y6ZnVuY3Rpb24oKXt9LG9mPW51bGwscGY9bnVsbCxxZj0hMSxyZj1kZigpLHNmPTFFND5yZj9kZjpmdW5jdGlvbigpe3JldHVybiBkZigpLXJmfTtcbmZ1bmN0aW9uIHRmKCl7c3dpdGNoKGVmKCkpe2Nhc2UgZmY6cmV0dXJuIDk5O2Nhc2UgaGY6cmV0dXJuIDk4O2Nhc2UgamY6cmV0dXJuIDk3O2Nhc2Uga2Y6cmV0dXJuIDk2O2Nhc2UgbGY6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgdChFcnJvcigzMzIpKTt9fWZ1bmN0aW9uIHVmKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBmZjtjYXNlIDk4OnJldHVybiBoZjtjYXNlIDk3OnJldHVybiBqZjtjYXNlIDk2OnJldHVybiBrZjtjYXNlIDk1OnJldHVybiBsZjtkZWZhdWx0OnRocm93IHQoRXJyb3IoMzMyKSk7fX1mdW5jdGlvbiB2ZihhLGIpe2E9dWYoYSk7cmV0dXJuIFplKGEsYil9ZnVuY3Rpb24gd2YoYSxiLGMpe2E9dWYoYSk7cmV0dXJuICRlKGEsYixjKX1mdW5jdGlvbiB4ZihhKXtudWxsPT09b2Y/KG9mPVthXSxwZj0kZShmZix5ZikpOm9mLnB1c2goYSk7cmV0dXJuIG1mfWZ1bmN0aW9uIE8oKXtudWxsIT09cGYmJmFmKHBmKTt5ZigpfVxuZnVuY3Rpb24geWYoKXtpZighcWYmJm51bGwhPT1vZil7cWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9b2Y7dmYoOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO29mPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PW9mJiYob2Y9b2Yuc2xpY2UoYSsxKSksJGUoZmYsTyksYzt9ZmluYWxseXtxZj0hMX19fWZ1bmN0aW9uIHpmKGEsYil7aWYoMTA3Mzc0MTgyMz09PWIpcmV0dXJuIDk5O2lmKDE9PT1iKXJldHVybiA5NTthPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWEpO3JldHVybiAwPj1hPzk5OjI1MD49YT85ODo1MjUwPj1hPzk3Ojk1fWZ1bmN0aW9uIEFmKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifVxuZnVuY3Rpb24gQmYoYSl7dmFyIGI9YS5fcmVzdWx0O3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYjtjYXNlIDI6dGhyb3cgYjtjYXNlIDA6dGhyb3cgYjtkZWZhdWx0OmEuX3N0YXR1cz0wO2I9YS5fY3RvcjtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pO3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYS5fcmVzdWx0O2Nhc2UgMjp0aHJvdyBhLl9yZXN1bHQ7fWEuX3Jlc3VsdD1iO3Rocm93IGI7fX12YXIgQ2Y9e2N1cnJlbnQ6bnVsbH0sRGY9bnVsbCxFZj1udWxsLEZmPW51bGw7ZnVuY3Rpb24gR2YoKXtGZj1FZj1EZj1udWxsfVxuZnVuY3Rpb24gSGYoYSxiKXt2YXIgYz1hLnR5cGUuX2NvbnRleHQ7SihDZixjLl9jdXJyZW50VmFsdWUsYSk7Yy5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gSWYoYSl7dmFyIGI9Q2YuY3VycmVudDtIKENmLGEpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gSmYoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoYS5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYS5jaGlsZEV4cGlyYXRpb25UaW1lPWIsbnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2Vsc2UgaWYobnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWMuY2hpbGRFeHBpcmF0aW9uVGltZT1iO2Vsc2UgYnJlYWs7YT1hLnJldHVybn19XG5mdW5jdGlvbiBLZihhLGIpe0RmPWE7RmY9RWY9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJihhLmV4cGlyYXRpb25UaW1lPj1iJiYoTGY9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfWZ1bmN0aW9uIE1mKGEsYil7aWYoRmYhPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKUZmPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1FZil7aWYobnVsbD09PURmKXRocm93IHQoRXJyb3IoMzA4KSk7RWY9YjtEZi5kZXBlbmRlbmNpZXM9e2V4cGlyYXRpb25UaW1lOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIEVmPUVmLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciBOZj0hMTtcbmZ1bmN0aW9uIE9mKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBQZihhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBRZihhLGIpe3JldHVybntleHBpcmF0aW9uVGltZTphLHN1c3BlbnNlQ29uZmlnOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gUmYoYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gU2YoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPU9mKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPU9mKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPU9mKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1QZihlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1QZihkKSk7bnVsbD09PWV8fGQ9PT1lP1JmKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8oUmYoZCxiKSxSZihlLGIpKTooUmYoZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBUZihhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPU9mKGEubWVtb2l6ZWRTdGF0ZSk6VWYoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiBVZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1QZihiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBWZihhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIDE6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIDM6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTIwNDl8NjQ7Y2FzZSAwOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBtKHt9LGQsZSk7Y2FzZSAyOk5mPSEwfXJldHVybiBkfVxuZnVuY3Rpb24gV2YoYSxiLGMsZCxlKXtOZj0hMTtiPVVmKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGg9bnVsbCxnPTAsaz1iLmZpcnN0VXBkYXRlLGw9ZjtudWxsIT09azspe3ZhciBuPWsuZXhwaXJhdGlvblRpbWU7bjxlPyhudWxsPT09aCYmKGg9ayxmPWwpLGc8biYmKGc9bikpOihYZihuLGsuc3VzcGVuc2VDb25maWcpLGw9VmYoYSxiLGssbCxjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9azooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RFZmZlY3Q9aykpKTtrPWsubmV4dH1uPW51bGw7Zm9yKGs9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1rOyl7dmFyIHo9ay5leHBpcmF0aW9uVGltZTt6PGU/KG51bGw9PT1uJiYobj1rLG51bGw9PT1oJiYoZj1sKSksZzx6JiYoZz16KSk6KGw9VmYoYSxiLGssbCxjLGQpLG51bGwhPT1cbmsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1rOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9aykpKTtrPWsubmV4dH1udWxsPT09aCYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bj9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09aCYmbnVsbD09PW4mJihmPWwpO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1oO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1uO2EuZXhwaXJhdGlvblRpbWU9ZzthLm1lbW9pemVkU3RhdGU9bH1cbmZ1bmN0aW9uIFlmKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTtaZihiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7WmYoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIFpmKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IHQoRXJyb3IoMTkxKSxjKTtjLmNhbGwoZCl9YT1hLm5leHRFZmZlY3R9fVxudmFyICRmPVhiLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGFnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIGJnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjptKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7ZD1hLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGQuYmFzZVN0YXRlPWMpfVxudmFyIGZnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09bGQoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9Y2coKSxlPSRmLnN1c3BlbnNlO2Q9ZGcoZCxhLGUpO2U9UWYoZCxlKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7U2YoYSxlKTtlZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1jZygpLGU9JGYuc3VzcGVuc2U7ZD1kZyhkLGEsZSk7ZT1RZihkLGUpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO1NmKGEsZSk7ZWcoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9Y2coKSxkPSRmLnN1c3BlbnNlO1xuYz1kZyhjLGEsZCk7ZD1RZihjLGQpO2QudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO1NmKGEsZCk7ZWcoYSxjKX19O2Z1bmN0aW9uIGdnKGEsYixjLGQsZSxmLGgpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixoKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWpkKGMsZCl8fCFqZChlLGYpOiEwfVxuZnVuY3Rpb24gaGcoYSxiLGMpe3ZhciBkPSExLGU9UWU7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9TWYoZik6KGU9TihiKT9SZTpMLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9TZShhLGUpOlFlKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9Zmc7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gaWcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJmZnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gamcoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1hZzt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PU1mKGYpOihmPU4oYik/UmU6TC5jdXJyZW50LGUuY29udGV4dD1TZShhLGYpKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJihXZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoYmcoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmZmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYoV2YoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBrZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gbGcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgdChFcnJvcigzMDkpKTtkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IHQoRXJyb3IoMTQ3KSxhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PWFnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IHQoRXJyb3IoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IHQoRXJyb3IoMjkwKSxhKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBtZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyB0KEVycm9yKDMxKSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIik7fVxuZnVuY3Rpb24gbmcoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT1vZyhhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGgoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gZyhhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPXBnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1sZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9cWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9bGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1yZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1zZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24geihhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9cGcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGM9cWcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9bGcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlICRiOnJldHVybiBiPXJnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihrZyhiKXx8XG5tYyhiKSlyZXR1cm4gYj1zZyhiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjttZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpnKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1hYz9uKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgJGI6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoa2coYyl8fG1jKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm4oYSxiLGMsZCxudWxsKTttZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHYoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGcoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBaYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09YWM/bihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgJGI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoa2coZCl8fG1jKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG4oYixhLGQsZSxudWxsKTttZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHJiKGUsaCxnLGspe2Zvcih2YXIgbD1udWxsLHU9bnVsbCxuPWgsdz1oPTAsQz1udWxsO251bGwhPT1uJiZ3PGcubGVuZ3RoO3crKyl7bi5pbmRleD53PyhDPW4sbj1udWxsKTpDPW4uc2libGluZzt2YXIgcD14KGUsbixnW3ddLGspO2lmKG51bGw9PT1wKXtudWxsPT09biYmKG49Qyk7YnJlYWt9YSYmXG5uJiZudWxsPT09cC5hbHRlcm5hdGUmJmIoZSxuKTtoPWYocCxoLHcpO251bGw9PT11P2w9cDp1LnNpYmxpbmc9cDt1PXA7bj1DfWlmKHc9PT1nLmxlbmd0aClyZXR1cm4gYyhlLG4pLGw7aWYobnVsbD09PW4pe2Zvcig7dzxnLmxlbmd0aDt3Kyspbj16KGUsZ1t3XSxrKSxudWxsIT09biYmKGg9ZihuLGgsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7cmV0dXJuIGx9Zm9yKG49ZChlLG4pO3c8Zy5sZW5ndGg7dysrKUM9dihuLGUsdyxnW3ddLGspLG51bGwhPT1DJiYoYSYmbnVsbCE9PUMuYWx0ZXJuYXRlJiZuLmRlbGV0ZShudWxsPT09Qy5rZXk/dzpDLmtleSksaD1mKEMsaCx3KSxudWxsPT09dT9sPUM6dS5zaWJsaW5nPUMsdT1DKTthJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIEJlKGUsaCxnLGspe3ZhciBsPW1jKGcpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IHQoRXJyb3IoMTUwKSk7Zz1sLmNhbGwoZyk7XG5pZihudWxsPT1nKXRocm93IHQoRXJyb3IoMTUxKSk7Zm9yKHZhciBuPWw9bnVsbCx1PWgsdz1oPTAsQz1udWxsLHA9Zy5uZXh0KCk7bnVsbCE9PXUmJiFwLmRvbmU7dysrLHA9Zy5uZXh0KCkpe3UuaW5kZXg+dz8oQz11LHU9bnVsbCk6Qz11LnNpYmxpbmc7dmFyIHI9eChlLHUscC52YWx1ZSxrKTtpZihudWxsPT09cil7bnVsbD09PXUmJih1PUMpO2JyZWFrfWEmJnUmJm51bGw9PT1yLmFsdGVybmF0ZSYmYihlLHUpO2g9ZihyLGgsdyk7bnVsbD09PW4/bD1yOm4uc2libGluZz1yO249cjt1PUN9aWYocC5kb25lKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDshcC5kb25lO3crKyxwPWcubmV4dCgpKXA9eihlLHAudmFsdWUsayksbnVsbCE9PXAmJihoPWYocCxoLHcpLG51bGw9PT1uP2w9cDpuLnNpYmxpbmc9cCxuPXApO3JldHVybiBsfWZvcih1PWQoZSx1KTshcC5kb25lO3crKyxwPWcubmV4dCgpKXA9dih1LGUsdyxwLnZhbHVlLGspLG51bGwhPT1wJiYoYSYmbnVsbCE9PVxucC5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1wLmtleT93OnAua2V5KSxoPWYocCxoLHcpLG51bGw9PT1uP2w9cDpuLnNpYmxpbmc9cCxuPXApO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGcpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFjJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFpiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7aWYoNz09PWsudGFnP2YudHlwZT09PWFjOmsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PWFjP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxnKTtkLnJlZj1sZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsXG5rKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1hYz8oZD1zZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxnLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGc9cWcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsZyksZy5yZWY9bGcoYSxkLGYpLGcucmV0dXJuPWEsYT1nKX1yZXR1cm4gaChhKTtjYXNlICRiOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKXtpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10sZyk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1yZyhmLGEubW9kZSxnKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gaChhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFxuXCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGcpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9cGcoZixhLm1vZGUsZyksZC5yZXR1cm49YSxhPWQpLGgoYSk7aWYoa2coZikpcmV0dXJuIHJiKGEsZCxmLGcpO2lmKG1jKGYpKXJldHVybiBCZShhLGQsZixnKTtsJiZtZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOnRocm93IGE9YS50eXBlLHQoRXJyb3IoMTUyKSxhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpO31yZXR1cm4gYyhhLGQpfX12YXIgdGc9bmcoITApLHVnPW5nKCExKSx2Zz17fSx3Zz17Y3VycmVudDp2Z30seGc9e2N1cnJlbnQ6dmd9LHlnPXtjdXJyZW50OnZnfTtmdW5jdGlvbiB6ZyhhKXtpZihhPT09dmcpdGhyb3cgdChFcnJvcigxNzQpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEFnKGEsYil7Sih5ZyxiLGEpO0ooeGcsYSxhKTtKKHdnLHZnLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOnRlKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj10ZShiLGMpfUgod2csYSk7Sih3ZyxiLGEpfWZ1bmN0aW9uIEJnKGEpe0god2csYSk7SCh4ZyxhKTtIKHlnLGEpfWZ1bmN0aW9uIENnKGEpe3pnKHlnLmN1cnJlbnQpO3ZhciBiPXpnKHdnLmN1cnJlbnQpO3ZhciBjPXRlKGIsYS50eXBlKTtiIT09YyYmKEooeGcsYSxhKSxKKHdnLGMsYSkpfWZ1bmN0aW9uIERnKGEpe3hnLmN1cnJlbnQ9PT1hJiYoSCh3ZyxhKSxIKHhnLGEpKX12YXIgRWc9MSxGZz0xLEdnPTIsUD17Y3VycmVudDowfTtcbmZ1bmN0aW9uIEhnKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIElnPTAsSmc9MixLZz00LExnPTgsTWc9MTYsTmc9MzIsT2c9NjQsUGc9MTI4LFFnPVhiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsUmc9MCxTZz1udWxsLFE9bnVsbCxUZz1udWxsLFVnPW51bGwsUj1udWxsLFZnPW51bGwsV2c9MCxYZz1udWxsLFlnPTAsWmc9ITEsJGc9bnVsbCxhaD0wO2Z1bmN0aW9uIGJoKCl7dGhyb3cgdChFcnJvcigzMjEpKTt9ZnVuY3Rpb24gY2goYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighaGQoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIGRoKGEsYixjLGQsZSxmKXtSZz1mO1NnPWI7VGc9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7UWcuY3VycmVudD1udWxsPT09VGc/ZWg6Zmg7Yj1jKGQsZSk7aWYoWmcpe2RvIFpnPSExLGFoKz0xLFRnPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsLFZnPVVnLFhnPVI9UT1udWxsLFFnLmN1cnJlbnQ9ZmgsYj1jKGQsZSk7d2hpbGUoWmcpOyRnPW51bGw7YWg9MH1RZy5jdXJyZW50PWhoO2E9U2c7YS5tZW1vaXplZFN0YXRlPVVnO2EuZXhwaXJhdGlvblRpbWU9V2c7YS51cGRhdGVRdWV1ZT1YZzthLmVmZmVjdFRhZ3w9WWc7YT1udWxsIT09USYmbnVsbCE9PVEubmV4dDtSZz0wO1ZnPVI9VWc9VGc9UT1TZz1udWxsO1dnPTA7WGc9bnVsbDtZZz0wO2lmKGEpdGhyb3cgdChFcnJvcigzMDApKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGloKCl7UWcuY3VycmVudD1oaDtSZz0wO1ZnPVI9VWc9VGc9UT1TZz1udWxsO1dnPTA7WGc9bnVsbDtZZz0wO1pnPSExOyRnPW51bGw7YWg9MH1mdW5jdGlvbiBqaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwscXVldWU6bnVsbCxiYXNlVXBkYXRlOm51bGwsbmV4dDpudWxsfTtudWxsPT09Uj9VZz1SPWE6Uj1SLm5leHQ9YTtyZXR1cm4gUn1mdW5jdGlvbiBraCgpe2lmKG51bGwhPT1WZylSPVZnLFZnPVIubmV4dCxRPVRnLFRnPW51bGwhPT1RP1EubmV4dDpudWxsO2Vsc2V7aWYobnVsbD09PVRnKXRocm93IHQoRXJyb3IoMzEwKSk7UT1UZzt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpRLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOlEuYmFzZVN0YXRlLHF1ZXVlOlEucXVldWUsYmFzZVVwZGF0ZTpRLmJhc2VVcGRhdGUsbmV4dDpudWxsfTtSPW51bGw9PT1SP1VnPWE6Ui5uZXh0PWE7VGc9US5uZXh0fXJldHVybiBSfVxuZnVuY3Rpb24gbGgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBtaChhKXt2YXIgYj1raCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyB0KEVycm9yKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO2lmKDA8YWgpe3ZhciBkPWMuZGlzcGF0Y2g7aWYobnVsbCE9PSRnKXt2YXIgZT0kZy5nZXQoYyk7aWYodm9pZCAwIT09ZSl7JGcuZGVsZXRlKGMpO3ZhciBmPWIubWVtb2l6ZWRTdGF0ZTtkbyBmPWEoZixlLmFjdGlvbiksZT1lLm5leHQ7d2hpbGUobnVsbCE9PWUpO2hkKGYsYi5tZW1vaXplZFN0YXRlKXx8KExmPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9PT1jLmxhc3QmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWY7cmV0dXJuW2YsZF19fXJldHVybltiLm1lbW9pemVkU3RhdGUsZF19ZD1jLmxhc3Q7dmFyIGg9Yi5iYXNlVXBkYXRlO2Y9Yi5iYXNlU3RhdGU7bnVsbCE9PWg/KG51bGwhPT1kJiYoZC5uZXh0PW51bGwpLGQ9aC5uZXh0KTpkPW51bGwhPT1kP2QubmV4dDpudWxsO2lmKG51bGwhPT1cbmQpe3ZhciBnPWU9bnVsbCxrPWQsbD0hMTtkb3t2YXIgbj1rLmV4cGlyYXRpb25UaW1lO248Umc/KGx8fChsPSEwLGc9aCxlPWYpLG4+V2cmJihXZz1uKSk6KFhmKG4say5zdXNwZW5zZUNvbmZpZyksZj1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZixrLmFjdGlvbikpO2g9aztrPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWQpO2x8fChnPWgsZT1mKTtoZChmLGIubWVtb2l6ZWRTdGF0ZSl8fChMZj0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPWc7Yi5iYXNlU3RhdGU9ZTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIG5oKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtudWxsPT09WGc/KFhnPXtsYXN0RWZmZWN0Om51bGx9LFhnLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihiPVhnLmxhc3RFZmZlY3QsbnVsbD09PWI/WGcubGFzdEVmZmVjdD1hLm5leHQ9YTooYz1iLm5leHQsYi5uZXh0PWEsYS5uZXh0PWMsWGcubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gb2goYSxiLGMsZCl7dmFyIGU9amgoKTtZZ3w9YTtlLm1lbW9pemVkU3RhdGU9bmgoYixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBwaChhLGIsYyxkKXt2YXIgZT1raCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1RKXt2YXIgaD1RLm1lbW9pemVkU3RhdGU7Zj1oLmRlc3Ryb3k7aWYobnVsbCE9PWQmJmNoKGQsaC5kZXBzKSl7bmgoSWcsYyxmLGQpO3JldHVybn19WWd8PWE7ZS5tZW1vaXplZFN0YXRlPW5oKGIsYyxmLGQpfWZ1bmN0aW9uIHFoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gcmgoKXt9XG5mdW5jdGlvbiBzaChhLGIsYyl7aWYoISgyNT5haCkpdGhyb3cgdChFcnJvcigzMDEpKTt2YXIgZD1hLmFsdGVybmF0ZTtpZihhPT09U2d8fG51bGwhPT1kJiZkPT09U2cpaWYoWmc9ITAsYT17ZXhwaXJhdGlvblRpbWU6Umcsc3VzcGVuc2VDb25maWc6bnVsbCxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxudWxsPT09JGcmJigkZz1uZXcgTWFwKSxjPSRnLmdldChiKSx2b2lkIDA9PT1jKSRnLnNldChiLGEpO2Vsc2V7Zm9yKGI9YztudWxsIT09Yi5uZXh0OyliPWIubmV4dDtiLm5leHQ9YX1lbHNle3ZhciBlPWNnKCksZj0kZi5zdXNwZW5zZTtlPWRnKGUsYSxmKTtmPXtleHBpcmF0aW9uVGltZTplLHN1c3BlbnNlQ29uZmlnOmYsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGg9Yi5sYXN0O2lmKG51bGw9PT1oKWYubmV4dD1mO2Vsc2V7dmFyIGc9aC5uZXh0O251bGwhPT1nJiZcbihmLm5leHQ9Zyk7aC5uZXh0PWZ9Yi5sYXN0PWY7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09ZHx8MD09PWQuZXhwaXJhdGlvblRpbWUpJiYoZD1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWQpKXRyeXt2YXIgaz1iLmxhc3RSZW5kZXJlZFN0YXRlLGw9ZChrLGMpO2YuZWFnZXJSZWR1Y2VyPWQ7Zi5lYWdlclN0YXRlPWw7aWYoaGQobCxrKSlyZXR1cm59Y2F0Y2gobil7fWZpbmFsbHl7fWVnKGEsZSl9fVxudmFyIGhoPXtyZWFkQ29udGV4dDpNZix1c2VDYWxsYmFjazpiaCx1c2VDb250ZXh0OmJoLHVzZUVmZmVjdDpiaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmJoLHVzZUxheW91dEVmZmVjdDpiaCx1c2VNZW1vOmJoLHVzZVJlZHVjZXI6YmgsdXNlUmVmOmJoLHVzZVN0YXRlOmJoLHVzZURlYnVnVmFsdWU6YmgsdXNlUmVzcG9uZGVyOmJofSxlaD17cmVhZENvbnRleHQ6TWYsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtqaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0Ok1mLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBvaCg1MTYsUGd8T2csYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIG9oKDQsS2d8TmcscWguYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBvaCg0LFxuS2d8TmcsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPWpoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWpoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9c2guYmluZChudWxsLFNnLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1qaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXt2YXIgYj1qaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT1cbntsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmxoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1zaC5iaW5kKG51bGwsU2csYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlRGVidWdWYWx1ZTpyaCx1c2VSZXNwb25kZXI6a2R9LGZoPXtyZWFkQ29udGV4dDpNZix1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3ZhciBjPWtoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZjaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpNZix1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gcGgoNTE2LFBnfE9nLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBwaCg0LEtnfE5nLHFoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBwaCg0LEtnfE5nLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1raCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmY2goYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6bWgsdXNlUmVmOmZ1bmN0aW9uKCl7cmV0dXJuIGtoKCkubWVtb2l6ZWRTdGF0ZX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG1oKGxoLGEpfSx1c2VEZWJ1Z1ZhbHVlOnJoLHVzZVJlc3BvbmRlcjprZH0sdGg9bnVsbCx1aD1udWxsLHZoPSExO1xuZnVuY3Rpb24gd2goYSxiKXt2YXIgYz14aCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIHloKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiB6aChhKXtpZih2aCl7dmFyIGI9dWg7aWYoYil7dmFyIGM9YjtpZigheWgoYSxiKSl7Yj1OZShjLm5leHRTaWJsaW5nKTtpZighYnx8IXloKGEsYikpe2EuZWZmZWN0VGFnfD0yO3ZoPSExO3RoPWE7cmV0dXJufXdoKHRoLGMpfXRoPWE7dWg9TmUoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnfD0yLHZoPSExLHRoPWF9fWZ1bmN0aW9uIEFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTghPT1hLnRhZzspYT1hLnJldHVybjt0aD1hfVxuZnVuY3Rpb24gQmgoYSl7aWYoYSE9PXRoKXJldHVybiExO2lmKCF2aClyZXR1cm4gQWgoYSksdmg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFLZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9dWg7Yjspd2goYSxiKSxiPU5lKGIubmV4dFNpYmxpbmcpO0FoKGEpO3VoPXRoP05lKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIENoKCl7dWg9dGg9bnVsbDt2aD0hMX12YXIgRGg9WGIuUmVhY3RDdXJyZW50T3duZXIsTGY9ITE7ZnVuY3Rpb24gUyhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP3VnKGIsbnVsbCxjLGQpOnRnKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gRWgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO0tmKGIsZSk7ZD1kaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFMZilyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLEZoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gR2goYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgaD1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGgmJiFIaChoKSYmdm9pZCAwPT09aC5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9aCxJaChhLGIsaCxkLGUsZik7YT1xZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1oPWEuY2hpbGQ7aWYoZTxmJiYoZT1oLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmpkLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIEZoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPW9nKGgsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBJaChhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZqZChhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihMZj0hMSxlPGYpP0ZoKGEsYixmKTpKaChhLGIsYyxkLGYpfWZ1bmN0aW9uIEtoKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gSmgoYSxiLGMsZCxlKXt2YXIgZj1OKGMpP1JlOkwuY3VycmVudDtmPVNlKGIsZik7S2YoYixlKTtjPWRoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIUxmKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksRmgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBMaChhLGIsYyxkLGUpe2lmKE4oYykpe3ZhciBmPSEwO1hlKGIpfWVsc2UgZj0hMTtLZihiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksaGcoYixjLGQsZSksamcoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgaD1iLnN0YXRlTm9kZSxnPWIubWVtb2l6ZWRQcm9wcztoLnByb3BzPWc7dmFyIGs9aC5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9TWYobCk6KGw9TihjKT9SZTpMLmN1cnJlbnQsbD1TZShiLGwpKTt2YXIgbj1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyx6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTt6fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoZyE9PWR8fGshPT1sKSYmaWcoYixoLGQsbCk7TmY9ITE7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2s9aC5zdGF0ZT14O3ZhciB2PWIudXBkYXRlUXVldWU7bnVsbCE9PXYmJihXZihiLHYsZCxoLGUpLGs9Yi5tZW1vaXplZFN0YXRlKTtnIT09ZHx8eCE9PWt8fE0uY3VycmVudHx8TmY/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoYmcoYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChnPU5mfHxnZyhiLGMsZyxkLHgsayxsKSk/KHp8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxNb3VudCYmaC5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmguVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxoLnByb3BzPWQsaC5zdGF0ZT1rLGguY29udGV4dD1sLGQ9Zyk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgaD1iLnN0YXRlTm9kZSxnPWIubWVtb2l6ZWRQcm9wcyxoLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/ZzpBZihiLnR5cGUsZyksaz1oLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1NZihsKToobD1OKGMpP1JlOkwuY3VycmVudCxsPVNlKGIsbCkpLG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHo9XG5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGguY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGchPT1kfHxrIT09bCkmJmlnKGIsaCxkLGwpLE5mPSExLGs9Yi5tZW1vaXplZFN0YXRlLHg9aC5zdGF0ZT1rLHY9Yi51cGRhdGVRdWV1ZSxudWxsIT09diYmKFdmKGIsdixkLGgsZSkseD1iLm1lbW9pemVkU3RhdGUpLGchPT1kfHxrIT09eHx8TS5jdXJyZW50fHxOZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihiZyhiLGMsbixkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKG49TmZ8fGdnKGIsYyxnLGQsayx4LGwpKT8oenx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxVcGRhdGV8fFxuKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxVcGRhdGUmJmguY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGwpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmNvbXBvbmVudERpZFVwZGF0ZXx8Zz09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8Zz09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1cbmQsYi5tZW1vaXplZFN0YXRlPXgpLGgucHJvcHM9ZCxoLnN0YXRlPXgsaC5jb250ZXh0PWwsZD1uKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGguY29tcG9uZW50RGlkVXBkYXRlfHxnPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxnPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIE1oKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIE1oKGEsYixjLGQsZSxmKXtLaChhLGIpO3ZhciBoPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhaClyZXR1cm4gZSYmWWUoYixjLCExKSxGaChhLGIsZik7ZD1iLnN0YXRlTm9kZTtEaC5jdXJyZW50PWI7dmFyIGc9aCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmaD8oYi5jaGlsZD10ZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPXRnKGIsbnVsbCxnLGYpKTpTKGEsYixnLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJlllKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gTmgoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9WZShhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZWZShhLGIuY29udGV4dCwhMSk7QWcoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIE9oPXt9O1xuZnVuY3Rpb24gUGgoYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9UC5jdXJyZW50LGg9bnVsbCxnPSExLGs7KGs9MCE9PShiLmVmZmVjdFRhZyY2NCkpfHwoaz0wIT09KGYmR2cpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtrPyhoPU9oLGc9ITAsYi5lZmZlY3RUYWcmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWUuZmFsbGJhY2t8fCEwPT09ZS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGZ8PUZnKTtmJj1FZztKKFAsZixiKTtpZihudWxsPT09YSlpZihnKXtlPWUuZmFsbGJhY2s7YT1zZyhudWxsLGQsMCxudWxsKTthLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGEuY2hpbGQ9ZztudWxsIT09ZzspZy5yZXR1cm49YSxnPWcuc2libGluZztjPXNnKGUsZCxjLG51bGwpO2MucmV0dXJuPWI7YS5zaWJsaW5nPVxuYztkPWF9ZWxzZSBkPWM9dWcoYixudWxsLGUuY2hpbGRyZW4sYyk7ZWxzZXtpZihudWxsIT09YS5tZW1vaXplZFN0YXRlKWlmKGY9YS5jaGlsZCxkPWYuc2libGluZyxnKXtlPWUuZmFsbGJhY2s7Yz1vZyhmLGYucGVuZGluZ1Byb3BzLDApO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1mLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2U9b2coZCxlLGQuZXhwaXJhdGlvblRpbWUpO2UucmV0dXJuPWI7Yy5zaWJsaW5nPWU7ZD1jO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2M9ZX1lbHNlIGQ9Yz10ZyhiLGYuY2hpbGQsZS5jaGlsZHJlbixjKTtlbHNlIGlmKGY9YS5jaGlsZCxnKXtnPWUuZmFsbGJhY2s7ZT1zZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2UuY2hpbGQ9ZjtudWxsIT09ZiYmKGYucmV0dXJuPWUpO2lmKDA9PT0oYi5tb2RlJlxuMikpZm9yKGY9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1mO251bGwhPT1mOylmLnJldHVybj1lLGY9Zi5zaWJsaW5nO2M9c2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtkPWU7ZS5jaGlsZEV4cGlyYXRpb25UaW1lPTB9ZWxzZSBjPWQ9dGcoYixmLGUuY2hpbGRyZW4sYyk7Yi5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGV9Yi5tZW1vaXplZFN0YXRlPWg7Yi5jaGlsZD1kO3JldHVybiBjfWZ1bmN0aW9uIFFoKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxsYXN0OmQsdGFpbDpjLHRhaWxFeHBpcmF0aW9uOjAsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbEV4cGlyYXRpb249MCxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24gUmgoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtTKGEsYixkLmNoaWxkcmVuLGMpO2Q9UC5jdXJyZW50O2lmKDAhPT0oZCZHZykpZD1kJkVnfEdnLGIuZWZmZWN0VGFnfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKXtpZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXthLmV4cGlyYXRpb25UaW1lPGMmJihhLmV4cGlyYXRpb25UaW1lPWMpO3ZhciBoPWEuYWx0ZXJuYXRlO251bGwhPT1oJiZoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO0pmKGEucmV0dXJuLGMpfX1lbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1cbmIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9RWd9SihQLGQsYik7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPW51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWQ9Yy5hbHRlcm5hdGUsbnVsbCE9PWQmJm51bGw9PT1IZyhkKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO1FoKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXtkPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiZudWxsPT09SGcoZCkpe2IuY2hpbGQ9ZTticmVha31kPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1kfVFoKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOlFoKGIsXG4hMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfWZ1bmN0aW9uIEZoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgdChFcnJvcigxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9b2coYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9b2coYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfWZ1bmN0aW9uIFNoKGEpe2EuZWZmZWN0VGFnfD00fVxudmFyIFRoPXZvaWQgMCxVaD12b2lkIDAsVmg9dm9pZCAwLFdoPXZvaWQgMDtUaD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZigyMD09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUuaW5zdGFuY2UpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O1VoPWZ1bmN0aW9uKCl7fTtcblZoPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgaD1iLnN0YXRlTm9kZTt6Zyh3Zy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9QmMoaCxmKTtkPUJjKGgsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1sZShoLGYpO2Q9bGUoaCxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW0oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1uZShoLGYpO2Q9bmUoaCxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGgub25jbGljaz1HZSl9RGUoYyxkKTtoPWM9dm9pZCAwO3ZhciBnPW51bGw7Zm9yKGMgaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShjKSYmZi5oYXNPd25Qcm9wZXJ0eShjKSYmbnVsbCE9ZltjXSlpZihcInN0eWxlXCI9PT1cbmMpe3ZhciBrPWZbY107Zm9yKGggaW4gaylrLmhhc093blByb3BlcnR5KGgpJiYoZ3x8KGc9e30pLGdbaF09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWMmJlwiY2hpbGRyZW5cIiE9PWMmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmXCJhdXRvRm9jdXNcIiE9PWMmJihpYS5oYXNPd25Qcm9wZXJ0eShjKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goYyxudWxsKSk7Zm9yKGMgaW4gZCl7dmFyIGw9ZFtjXTtrPW51bGwhPWY/ZltjXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShjKSYmbCE9PWsmJihudWxsIT1sfHxudWxsIT1rKSlpZihcInN0eWxlXCI9PT1jKWlmKGspe2ZvcihoIGluIGspIWsuaGFzT3duUHJvcGVydHkoaCl8fGwmJmwuaGFzT3duUHJvcGVydHkoaCl8fChnfHwoZz17fSksZ1toXT1cIlwiKTtmb3IoaCBpbiBsKWwuaGFzT3duUHJvcGVydHkoaCkmJmtbaF0hPT1sW2hdJiYoZ3x8XG4oZz17fSksZ1toXT1sW2hdKX1lbHNlIGd8fChhfHwoYT1bXSksYS5wdXNoKGMsZykpLGc9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Yz8obD1sP2wuX19odG1sOnZvaWQgMCxrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmshPT1sJiYoYT1hfHxbXSkucHVzaChjLFwiXCIrbCkpOlwiY2hpbGRyZW5cIj09PWM/az09PWx8fFwic3RyaW5nXCIhPT10eXBlb2YgbCYmXCJudW1iZXJcIiE9PXR5cGVvZiBsfHwoYT1hfHxbXSkucHVzaChjLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiYoaWEuaGFzT3duUHJvcGVydHkoYyk/KG51bGwhPWwmJkZlKGUsYyksYXx8az09PWx8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goYyxsKSl9ZyYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGcpO2U9YTsoYi51cGRhdGVRdWV1ZT1lKSYmU2goYil9fTtXaD1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmU2goYil9O1xuZnVuY3Rpb24gJGgoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gYWkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6TihhLnR5cGUpJiZUZShhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAzOkJnKGEpO1VlKGEpO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyB0KEVycm9yKDI4NSkpO2EuZWZmZWN0VGFnPWImLTIwNDl8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBEZyhhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoUCxhKSxiPWEuZWZmZWN0VGFnLGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMTg6cmV0dXJuIG51bGw7Y2FzZSAxOTpyZXR1cm4gSChQLGEpLG51bGw7Y2FzZSA0OnJldHVybiBCZyhhKSxudWxsO2Nhc2UgMTA6cmV0dXJuIElmKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19ZnVuY3Rpb24gYmkoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpwYyhiKX19XG52YXIgY2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1wYyhjKSk7bnVsbCE9PWMmJm9jKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJm9jKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIGVpKGEsYil7dHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXtmaShhLGMpfX1mdW5jdGlvbiBnaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtmaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBoaShhLGIsYyl7Yz1jLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2Rve2lmKChkLnRhZyZhKSE9PUlnKXt2YXIgZT1kLmRlc3Ryb3k7ZC5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1lJiZlKCl9KGQudGFnJmIpIT09SWcmJihlPWQuY3JlYXRlLGQuZGVzdHJveT1lKCkpO2Q9ZC5uZXh0fXdoaWxlKGQhPT1jKX19XG5mdW5jdGlvbiBpaShhLGIpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBqaSYmamkoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6dmFyIGM9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5sYXN0RWZmZWN0LG51bGwhPT1jKSl7dmFyIGQ9Yy5uZXh0O3ZmKDk3PGI/OTc6YixmdW5jdGlvbigpe3ZhciBiPWQ7ZG97dmFyIGM9Yi5kZXN0cm95O2lmKHZvaWQgMCE9PWMpe3ZhciBoPWE7dHJ5e2MoKX1jYXRjaChnKXtmaShoLGcpfX1iPWIubmV4dH13aGlsZShiIT09ZCl9KX1icmVhaztjYXNlIDE6Z2koYSk7Yj1hLnN0YXRlTm9kZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCYmZWkoYSxiKTticmVhaztjYXNlIDU6Z2koYSk7YnJlYWs7Y2FzZSA0OmtpKGEsYil9fVxuZnVuY3Rpb24gbGkoYSxiKXtmb3IodmFyIGM9YTs7KWlmKGlpKGMsYiksbnVsbCE9PWMuY2hpbGQmJjQhPT1jLnRhZyljLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZDtlbHNle2lmKGM9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fWZ1bmN0aW9uIG1pKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gbmkoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYobWkoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXRocm93IHQoRXJyb3IoMTYwKSk7fWI9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDE2MSkpO31jLmVmZmVjdFRhZyYxNiYmKHdlKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxtaShjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe3ZhciBmPTU9PT1lLnRhZ3x8Nj09PWUudGFnO2lmKGZ8fDIwPT09ZS50YWcpe3ZhciBoPWY/ZS5zdGF0ZU5vZGU6ZS5zdGF0ZU5vZGUuaW5zdGFuY2U7aWYoYylpZihkKXtmPWI7dmFyIGc9aDtoPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGgpOmYuaW5zZXJ0QmVmb3JlKGcsaCl9ZWxzZSBiLmluc2VydEJlZm9yZShoLGMpO2Vsc2UgZD8oZz1iLDg9PT1nLm5vZGVUeXBlPyhmPWcucGFyZW50Tm9kZSxmLmluc2VydEJlZm9yZShoLGcpKTooZj1nLGYuYXBwZW5kQ2hpbGQoaCkpLGc9Zy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1nJiZ2b2lkIDAhPT1nfHxudWxsIT09Zi5vbmNsaWNrfHwoZi5vbmNsaWNrPUdlKSk6XG5iLmFwcGVuZENoaWxkKGgpfWVsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiBraShhLGIpe2Zvcih2YXIgYz1hLGQ9ITEsZT12b2lkIDAsZj12b2lkIDA7Oyl7aWYoIWQpe2Q9Yy5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1kKXRocm93IHQoRXJyb3IoMTYwKSk7ZT1kLnN0YXRlTm9kZTtzd2l0Y2goZC50YWcpe2Nhc2UgNTpmPSExO2JyZWFrIGE7Y2FzZSAzOmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYTtjYXNlIDQ6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhfWQ9ZC5yZXR1cm59ZD0hMH1pZig1PT09Yy50YWd8fDY9PT1jLnRhZylpZihsaShjLGIpLGYpe3ZhciBoPWUsZz1jLnN0YXRlTm9kZTs4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6aC5yZW1vdmVDaGlsZChnKX1lbHNlIGUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoMjA9PT1jLnRhZylnPWMuc3RhdGVOb2RlLmluc3RhbmNlLGxpKGMsYiksZj8oaD1lLDg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpcbmgucmVtb3ZlQ2hpbGQoZykpOmUucmVtb3ZlQ2hpbGQoZyk7ZWxzZSBpZig0PT09Yy50YWcpe2lmKG51bGwhPT1jLmNoaWxkKXtlPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zj0hMDtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihpaShjLGIpLG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybjs0PT09Yy50YWcmJihkPSExKX1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIG9pKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aGkoS2csTGcsYik7YnJlYWs7Y2FzZSAxOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1tHYV09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmRGMoYyxkKTtFZShhLGUpO2I9RWUoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGg9ZltlXSxnPWZbZSsxXTtcInN0eWxlXCI9PT1oP0FlKGMsZyk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD92ZShjLGcpOlwiY2hpbGRyZW5cIj09PWg/d2UoYyxnKTp6YyhjLGgsZyxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6RWMoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpwZShjLFxuZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsYT1kLnZhbHVlLG51bGwhPWE/bWUoYywhIWQubXVsdGlwbGUsYSwhMSk6YiE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP21lKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTptZShjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fWJyZWFrO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgdChFcnJvcigxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/ZD0hMTooZD0hMCxjPWIuY2hpbGQscGk9c2YoKSk7aWYobnVsbCE9PWMpYTpmb3IoYT1jOzspe2lmKDU9PT1hLnRhZylmPWEuc3RhdGVOb2RlLGQ/KGY9XG5mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9emUoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7Zj1hLmNoaWxkLnNpYmxpbmc7Zi5yZXR1cm49YTthPWY7Y29udGludWV9ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWMpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09XG5hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfXFpKGIpO2JyZWFrO2Nhc2UgMTk6cWkoYik7YnJlYWs7Y2FzZSAxNzpicmVhaztjYXNlIDIwOmJyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigxNjMpKTt9fWZ1bmN0aW9uIHFpKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IGNpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9cmkuYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19dmFyIHNpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO1xuZnVuY3Rpb24gdGkoYSxiLGMpe2M9UWYoYyxudWxsKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXt1aXx8KHVpPSEwLHZpPWQpO2RpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gd2koYSxiLGMpe2M9UWYoYyxudWxsKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7ZGkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PXhpP3hpPW5ldyBTZXQoW3RoaXNdKTp4aS5hZGQodGhpcyksZGkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG52YXIgeWk9TWF0aC5jZWlsLHppPVhiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsQWk9WGIuUmVhY3RDdXJyZW50T3duZXIsVD0wLEJpPTgsQ2k9MTYsRGk9MzIsRWk9MCxGaT0xLEdpPTIsSGk9MyxJaT00LFU9VCxKaT1udWxsLFY9bnVsbCxXPTAsWD1FaSxLaT0xMDczNzQxODIzLExpPTEwNzM3NDE4MjMsTWk9bnVsbCxOaT0hMSxwaT0wLE9pPTUwMCxZPW51bGwsdWk9ITEsdmk9bnVsbCx4aT1udWxsLFBpPSExLFFpPW51bGwsUmk9OTAsU2k9MCxUaT1udWxsLFVpPTAsVmk9bnVsbCxXaT0wO2Z1bmN0aW9uIGNnKCl7cmV0dXJuKFUmKENpfERpKSkhPT1UPzEwNzM3NDE4MjEtKHNmKCkvMTB8MCk6MCE9PVdpP1dpOldpPTEwNzM3NDE4MjEtKHNmKCkvMTB8MCl9XG5mdW5jdGlvbiBkZyhhLGIsYyl7Yj1iLm1vZGU7aWYoMD09PShiJjIpKXJldHVybiAxMDczNzQxODIzO3ZhciBkPXRmKCk7aWYoMD09PShiJjQpKXJldHVybiA5OT09PWQ/MTA3Mzc0MTgyMzoxMDczNzQxODIyO2lmKChVJkNpKSE9PVQpcmV0dXJuIFc7aWYobnVsbCE9PWMpYT0xMDczNzQxODIxLTI1KigoKDEwNzM3NDE4MjEtYSsoYy50aW1lb3V0TXN8MHx8NUUzKS8xMCkvMjV8MCkrMSk7ZWxzZSBzd2l0Y2goZCl7Y2FzZSA5OTphPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA5ODphPTEwNzM3NDE4MjEtMTAqKCgoMTA3Mzc0MTgyMS1hKzE1KS8xMHwwKSsxKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT0xMDczNzQxODIxLTI1KigoKDEwNzM3NDE4MjEtYSs1MDApLzI1fDApKzEpO2JyZWFrO2Nhc2UgOTU6YT0xO2JyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigzMjYpKTt9bnVsbCE9PUppJiZhPT09VyYmLS1hO3JldHVybiBhfXZhciBYaT0wO1xuZnVuY3Rpb24gZWcoYSxiKXtpZig1MDxVaSl0aHJvdyBVaT0wLFZpPW51bGwsdChFcnJvcigxODUpKTthPVlpKGEsYik7aWYobnVsbCE9PWEpe2EucGluZ1RpbWU9MDt2YXIgYz10ZigpO2lmKDEwNzM3NDE4MjM9PT1iKWlmKChVJkJpKSE9PVQmJihVJihDaXxEaSkpPT09VClmb3IodmFyIGQ9WihhLDEwNzM3NDE4MjMsITApO251bGwhPT1kOylkPWQoITApO2Vsc2UgWmkoYSw5OSwxMDczNzQxODIzKSxVPT09VCYmTygpO2Vsc2UgWmkoYSxjLGIpOyhVJjQpPT09VHx8OTghPT1jJiY5OSE9PWN8fChudWxsPT09VGk/VGk9bmV3IE1hcChbW2EsYl1dKTooYz1UaS5nZXQoYSksKHZvaWQgMD09PWN8fGM+YikmJlRpLnNldChhLGIpKSl9fVxuZnVuY3Rpb24gWWkoYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1udWxsIT09ZSYmKGI+ZS5maXJzdFBlbmRpbmdUaW1lJiYoZS5maXJzdFBlbmRpbmdUaW1lPWIpLGE9ZS5sYXN0UGVuZGluZ1RpbWUsMD09PWF8fGI8YSkmJihlLmxhc3RQZW5kaW5nVGltZT1cbmIpO3JldHVybiBlfWZ1bmN0aW9uIFppKGEsYixjKXtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU8Yyl7dmFyIGQ9YS5jYWxsYmFja05vZGU7bnVsbCE9PWQmJmQhPT1tZiYmYWYoZCk7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPWM7MTA3Mzc0MTgyMz09PWM/YS5jYWxsYmFja05vZGU9eGYoJGkuYmluZChudWxsLGEsWi5iaW5kKG51bGwsYSxjKSkpOihkPW51bGwsMSE9PWMmJihkPXt0aW1lb3V0OjEwKigxMDczNzQxODIxLWMpLXNmKCl9KSxhLmNhbGxiYWNrTm9kZT13ZihiLCRpLmJpbmQobnVsbCxhLFouYmluZChudWxsLGEsYykpLGQpKX19ZnVuY3Rpb24gJGkoYSxiLGMpe3ZhciBkPWEuY2FsbGJhY2tOb2RlLGU9bnVsbDt0cnl7cmV0dXJuIGU9YihjKSxudWxsIT09ZT8kaS5iaW5kKG51bGwsYSxlKTpudWxsfWZpbmFsbHl7bnVsbD09PWUmJmQ9PT1hLmNhbGxiYWNrTm9kZSYmKGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTApfX1cbmZ1bmN0aW9uIGFqKCl7KFUmKDF8Q2l8RGkpKT09PVQmJihiaigpLGNqKCkpfWZ1bmN0aW9uIGRqKGEsYil7dmFyIGM9YS5maXJzdEJhdGNoO3JldHVybiBudWxsIT09YyYmYy5fZGVmZXImJmMuX2V4cGlyYXRpb25UaW1lPj1iPyh3Zig5NyxmdW5jdGlvbigpe2MuX29uQ29tcGxldGUoKTtyZXR1cm4gbnVsbH0pLCEwKTohMX1mdW5jdGlvbiBiaigpe2lmKG51bGwhPT1UaSl7dmFyIGE9VGk7VGk9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSxjKXt4ZihaLmJpbmQobnVsbCxjLGEpKX0pO08oKX19ZnVuY3Rpb24gZWooYSxiKXt2YXIgYz1VO1V8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VT1jLFU9PT1UJiZPKCl9fWZ1bmN0aW9uIGZqKGEsYixjLGQpe3ZhciBlPVU7VXw9NDt0cnl7cmV0dXJuIHZmKDk4LGEuYmluZChudWxsLGIsYyxkKSl9ZmluYWxseXtVPWUsVT09PVQmJk8oKX19XG5mdW5jdGlvbiBnaihhLGIpe3ZhciBjPVU7VSY9LTI7VXw9Qmk7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VT1jLFU9PT1UJiZPKCl9fVxuZnVuY3Rpb24gaGooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsTWUoYykpO2lmKG51bGwhPT1WKWZvcihjPVYucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTp2YXIgZT1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWUmJnZvaWQgMCE9PWUmJlRlKGQpO2JyZWFrO2Nhc2UgMzpCZyhkKTtVZShkKTticmVhaztjYXNlIDU6RGcoZCk7YnJlYWs7Y2FzZSA0OkJnKGQpO2JyZWFrO2Nhc2UgMTM6SChQLGQpO2JyZWFrO2Nhc2UgMTk6SChQLGQpO2JyZWFrO2Nhc2UgMTA6SWYoZCl9Yz1jLnJldHVybn1KaT1hO1Y9b2coYS5jdXJyZW50LG51bGwsYik7Vz1iO1g9RWk7TGk9S2k9MTA3Mzc0MTgyMztNaT1udWxsO05pPSExfVxuZnVuY3Rpb24gWihhLGIsYyl7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMzI3KSk7aWYoYS5maXJzdFBlbmRpbmdUaW1lPGIpcmV0dXJuIG51bGw7aWYoYyYmYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPT09YilyZXR1cm4gaWouYmluZChudWxsLGEpO2NqKCk7aWYoYSE9PUppfHxiIT09VyloaihhLGIpO2Vsc2UgaWYoWD09PUhpKWlmKE5pKWhqKGEsYik7ZWxzZXt2YXIgZD1hLmxhc3RQZW5kaW5nVGltZTtpZihkPGIpcmV0dXJuIFouYmluZChudWxsLGEsZCl9aWYobnVsbCE9PVYpe2Q9VTtVfD1DaTt2YXIgZT16aS5jdXJyZW50O251bGw9PT1lJiYoZT1oaCk7emkuY3VycmVudD1oaDtpZihjKXtpZigxMDczNzQxODIzIT09Yil7dmFyIGY9Y2coKTtpZihmPGIpcmV0dXJuIFU9ZCxHZigpLHppLmN1cnJlbnQ9ZSxaLmJpbmQobnVsbCxhLGYpfX1lbHNlIFdpPTA7ZG8gdHJ5e2lmKGMpZm9yKDtudWxsIT09VjspVj1qaihWKTtlbHNlIGZvcig7bnVsbCE9PVYmJiFiZigpOylWPVxuamooVik7YnJlYWt9Y2F0Y2gocmIpe0dmKCk7aWgoKTtmPVY7aWYobnVsbD09PWZ8fG51bGw9PT1mLnJldHVybil0aHJvdyBoaihhLGIpLFU9ZCxyYjthOnt2YXIgaD1hLGc9Zi5yZXR1cm4saz1mLGw9cmIsbj1XO2suZWZmZWN0VGFnfD0xMDI0O2suZmlyc3RFZmZlY3Q9ay5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWwmJlwib2JqZWN0XCI9PT10eXBlb2YgbCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGwudGhlbil7dmFyIHo9bCx4PTAhPT0oUC5jdXJyZW50JkZnKTtsPWc7ZG97dmFyIHY7aWYodj0xMz09PWwudGFnKW51bGwhPT1sLm1lbW9pemVkU3RhdGU/dj0hMToodj1sLm1lbW9pemVkUHJvcHMsdj12b2lkIDA9PT12LmZhbGxiYWNrPyExOiEwIT09di51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDp4PyExOiEwKTtpZih2KXtnPWwudXBkYXRlUXVldWU7bnVsbD09PWc/KGc9bmV3IFNldCxnLmFkZCh6KSxsLnVwZGF0ZVF1ZXVlPWcpOmcuYWRkKHopO2lmKDA9PT0obC5tb2RlJlxuMikpe2wuZWZmZWN0VGFnfD02NDtrLmVmZmVjdFRhZyY9LTE5NTc7MT09PWsudGFnJiYobnVsbD09PWsuYWx0ZXJuYXRlP2sudGFnPTE3OihuPVFmKDEwNzM3NDE4MjMsbnVsbCksbi50YWc9MixTZihrLG4pKSk7ay5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2JyZWFrIGF9az1oO2g9bjt4PWsucGluZ0NhY2hlO251bGw9PT14Pyh4PWsucGluZ0NhY2hlPW5ldyBzaSxnPW5ldyBTZXQseC5zZXQoeixnKSk6KGc9eC5nZXQoeiksdm9pZCAwPT09ZyYmKGc9bmV3IFNldCx4LnNldCh6LGcpKSk7Zy5oYXMoaCl8fChnLmFkZChoKSxrPWtqLmJpbmQobnVsbCxrLHosaCksei50aGVuKGssaykpO2wuZWZmZWN0VGFnfD0yMDQ4O2wuZXhwaXJhdGlvblRpbWU9bjticmVhayBhfWw9bC5yZXR1cm59d2hpbGUobnVsbCE9PWwpO2w9RXJyb3IoKG9jKGsudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitcbnBjKGspKX1YIT09SWkmJihYPUZpKTtsPWJpKGwsayk7az1nO2Rve3N3aXRjaChrLnRhZyl7Y2FzZSAzOmsuZWZmZWN0VGFnfD0yMDQ4O2suZXhwaXJhdGlvblRpbWU9bjtuPXRpKGssbCxuKTtUZihrLG4pO2JyZWFrIGE7Y2FzZSAxOmlmKHo9bCxoPWsudHlwZSxnPWsuc3RhdGVOb2RlLDA9PT0oay5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGguZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09ZyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09eGl8fCF4aS5oYXMoZykpKSl7ay5lZmZlY3RUYWd8PTIwNDg7ay5leHBpcmF0aW9uVGltZT1uO249d2koayx6LG4pO1RmKGssbik7YnJlYWsgYX19az1rLnJldHVybn13aGlsZShudWxsIT09ayl9Vj1saihmKX13aGlsZSgxKTtVPWQ7R2YoKTt6aS5jdXJyZW50PWU7aWYobnVsbCE9PVYpcmV0dXJuIFouYmluZChudWxsLGEsYil9YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTtcbmEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1iO2lmKGRqKGEsYikpcmV0dXJuIG51bGw7Smk9bnVsbDtzd2l0Y2goWCl7Y2FzZSBFaTp0aHJvdyB0KEVycm9yKDMyOCkpO2Nhc2UgRmk6cmV0dXJuIGQ9YS5sYXN0UGVuZGluZ1RpbWUsZDxiP1ouYmluZChudWxsLGEsZCk6Yz9pai5iaW5kKG51bGwsYSk6KGhqKGEsYikseGYoWi5iaW5kKG51bGwsYSxiKSksbnVsbCk7Y2FzZSBHaTppZigxMDczNzQxODIzPT09S2kmJiFjJiYoYz1waStPaS1zZigpLDEwPGMpKXtpZihOaSlyZXR1cm4gaGooYSxiKSxaLmJpbmQobnVsbCxhLGIpO2Q9YS5sYXN0UGVuZGluZ1RpbWU7aWYoZDxiKXJldHVybiBaLmJpbmQobnVsbCxhLGQpO2EudGltZW91dEhhbmRsZT1MZShpai5iaW5kKG51bGwsYSksYyk7cmV0dXJuIG51bGx9cmV0dXJuIGlqLmJpbmQobnVsbCxhKTtjYXNlIEhpOmlmKCFjKXtpZihOaSlyZXR1cm4gaGooYSxiKSxaLmJpbmQobnVsbCxhLGIpO2M9YS5sYXN0UGVuZGluZ1RpbWU7aWYoYzxiKXJldHVybiBaLmJpbmQobnVsbCxcbmEsYyk7MTA3Mzc0MTgyMyE9PUxpP2M9MTAqKDEwNzM3NDE4MjEtTGkpLXNmKCk6MTA3Mzc0MTgyMz09PUtpP2M9MDooYz0xMCooMTA3Mzc0MTgyMS1LaSktNUUzLGQ9c2YoKSxiPTEwKigxMDczNzQxODIxLWIpLWQsYz1kLWMsMD5jJiYoYz0wKSxjPSgxMjA+Yz8xMjA6NDgwPmM/NDgwOjEwODA+Yz8xMDgwOjE5MjA+Yz8xOTIwOjNFMz5jPzNFMzo0MzIwPmM/NDMyMDoxOTYwKnlpKGMvMTk2MCkpLWMsYjxjJiYoYz1iKSk7aWYoMTA8YylyZXR1cm4gYS50aW1lb3V0SGFuZGxlPUxlKGlqLmJpbmQobnVsbCxhKSxjKSxudWxsfXJldHVybiBpai5iaW5kKG51bGwsYSk7Y2FzZSBJaTpyZXR1cm4hYyYmMTA3Mzc0MTgyMyE9PUtpJiZudWxsIT09TWkmJihkPUtpLGU9TWksYj1lLmJ1c3lNaW5EdXJhdGlvbk1zfDAsMD49Yj9iPTA6KGM9ZS5idXN5RGVsYXlNc3wwLGQ9c2YoKS0oMTAqKDEwNzM3NDE4MjEtZCktKGUudGltZW91dE1zfDB8fDVFMykpLGI9ZDw9Yz8wOmMrYi1kKSwxMDxiKT8oYS50aW1lb3V0SGFuZGxlPVxuTGUoaWouYmluZChudWxsLGEpLGIpLG51bGwpOmlqLmJpbmQobnVsbCxhKTtkZWZhdWx0OnRocm93IHQoRXJyb3IoMzI5KSk7fX1mdW5jdGlvbiBYZihhLGIpe2E8S2kmJjE8YSYmKEtpPWEpO251bGwhPT1iJiZhPExpJiYxPGEmJihMaT1hLE1pPWIpfWZ1bmN0aW9uIGpqKGEpe3ZhciBiPW1qKGEuYWx0ZXJuYXRlLGEsVyk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1saihhKSk7QWkuY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gbGooYSl7Vj1hO2Rve3ZhciBiPVYuYWx0ZXJuYXRlO2E9Vi5yZXR1cm47aWYoMD09PShWLmVmZmVjdFRhZyYxMDI0KSl7YTp7dmFyIGM9YjtiPVY7dmFyIGQ9VyxlPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSAxNTpjYXNlIDA6YnJlYWs7Y2FzZSAxOk4oYi50eXBlKSYmVGUoYik7YnJlYWs7Y2FzZSAzOkJnKGIpO1VlKGIpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWN8fG51bGw9PT1jLmNoaWxkKUJoKGIpLGIuZWZmZWN0VGFnJj0tMztVaChiKTticmVhaztjYXNlIDU6RGcoYik7ZD16Zyh5Zy5jdXJyZW50KTt2YXIgZj1iLnR5cGU7aWYobnVsbCE9PWMmJm51bGwhPWIuc3RhdGVOb2RlKVZoKGMsYixmLGUsZCksYy5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2UgaWYoZSl7dmFyIGg9XG56Zyh3Zy5jdXJyZW50KTtpZihCaChiKSl7Yz1iO2U9dm9pZCAwO2Y9Yy5zdGF0ZU5vZGU7dmFyIGc9Yy50eXBlLGs9Yy5tZW1vaXplZFByb3BzO2ZbRmFdPWM7ZltHYV09aztzd2l0Y2goZyl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGYpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcih2YXIgbD0wO2w8YmIubGVuZ3RoO2wrKylHKGJiW2xdLGYpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixmKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixmKTtHKFwibG9hZFwiLGYpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RyhcInJlc2V0XCIsZik7RyhcInN1Ym1pdFwiLGYpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGYpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkNjKGYsayk7RyhcImludmFsaWRcIixmKTtGZShkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmYuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWsubXVsdGlwbGV9O0coXCJpbnZhbGlkXCIsZik7RmUoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOm9lKGYsayksRyhcImludmFsaWRcIixmKSxGZShkLFwib25DaGFuZ2VcIil9RGUoZyxrKTtsPW51bGw7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiYoaD1rW2VdLFwiY2hpbGRyZW5cIj09PWU/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2YudGV4dENvbnRlbnQhPT1oJiYobD1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmYudGV4dENvbnRlbnQhPT1cIlwiK2gmJihsPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6aWEuaGFzT3duUHJvcGVydHkoZSkmJm51bGwhPWgmJkZlKGQsZSkpO3N3aXRjaChnKXtjYXNlIFwiaW5wdXRcIjpWYihmKTtHYyhmLGssITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZiKGYpO3FlKGYsayk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLm9uQ2xpY2smJlxuKGYub25jbGljaz1HZSl9ZD1sO2MudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmU2goYil9ZWxzZXtrPWY7Yz1lO2c9YjtsPTk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50O2g9PT1yZS5odG1sJiYoaD1zZShrKSk7aD09PXJlLmh0bWw/XCJzY3JpcHRcIj09PWs/KGs9bC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGsuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsbD1rLnJlbW92ZUNoaWxkKGsuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgYy5pcz9sPWwuY3JlYXRlRWxlbWVudChrLHtpczpjLmlzfSk6KGw9bC5jcmVhdGVFbGVtZW50KGspLFwic2VsZWN0XCI9PT1rJiYoaz1sLGMubXVsdGlwbGU/ay5tdWx0aXBsZT0hMDpjLnNpemUmJihrLnNpemU9Yy5zaXplKSkpOmw9bC5jcmVhdGVFbGVtZW50TlMoaCxrKTtrPWw7a1tGYV09ZztrW0dhXT1jO2M9aztUaChjLGIsITEsITEpO2c9Yzt2YXIgbj1kLHo9RWUoZixlKTtzd2l0Y2goZil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLFxuZyk7ZD1lO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihkPTA7ZDxiYi5sZW5ndGg7ZCsrKUcoYmJbZF0sZyk7ZD1lO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixnKTtkPWU7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZyk7RyhcImxvYWRcIixnKTtkPWU7YnJlYWs7Y2FzZSBcImZvcm1cIjpHKFwicmVzZXRcIixnKTtHKFwic3VibWl0XCIsZyk7ZD1lO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGcpO2Q9ZTticmVhaztjYXNlIFwiaW5wdXRcIjpDYyhnLGUpO2Q9QmMoZyxlKTtHKFwiaW52YWxpZFwiLGcpO0ZlKG4sXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZD1sZShnLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpnLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZS5tdWx0aXBsZX07ZD1tKHt9LGUse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsZyk7RmUobixcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOm9lKGcsXG5lKTtkPW5lKGcsZSk7RyhcImludmFsaWRcIixnKTtGZShuLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpkPWV9RGUoZixkKTtrPXZvaWQgMDtsPWY7aD1nO3ZhciB4PWQ7Zm9yKGsgaW4geClpZih4Lmhhc093blByb3BlcnR5KGspKXt2YXIgdj14W2tdO1wic3R5bGVcIj09PWs/QWUoaCx2KTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1rPyh2PXY/di5fX2h0bWw6dm9pZCAwLG51bGwhPXYmJnZlKGgsdikpOlwiY2hpbGRyZW5cIj09PWs/XCJzdHJpbmdcIj09PXR5cGVvZiB2PyhcInRleHRhcmVhXCIhPT1sfHxcIlwiIT09dikmJndlKGgsdik6XCJudW1iZXJcIj09PXR5cGVvZiB2JiZ3ZShoLFwiXCIrdik6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWsmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1rJiZcImF1dG9Gb2N1c1wiIT09ayYmKGlhLmhhc093blByb3BlcnR5KGspP251bGwhPXYmJkZlKG4sayk6bnVsbCE9diYmemMoaCxrLHYseikpfXN3aXRjaChmKXtjYXNlIFwiaW5wdXRcIjpWYihnKTtcbkdjKGcsZSwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmIoZyk7cWUoZyxlKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZS52YWx1ZSYmZy5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrQWMoZS52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkPWc7Zz1lO2QubXVsdGlwbGU9ISFnLm11bHRpcGxlO2s9Zy52YWx1ZTtudWxsIT1rP21lKGQsISFnLm11bHRpcGxlLGssITEpOm51bGwhPWcuZGVmYXVsdFZhbHVlJiZtZShkLCEhZy5tdWx0aXBsZSxnLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPUdlKX1KZShmLGUpJiZTaChiKTtiLnN0YXRlTm9kZT1jfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2UgaWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IHQoRXJyb3IoMTY2KSk7YnJlYWs7Y2FzZSA2OmlmKGMmJm51bGwhPWIuc3RhdGVOb2RlKVdoKGMsYixjLm1lbW9pemVkUHJvcHMsXG5lKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZSYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IHQoRXJyb3IoMTY2KSk7Yz16Zyh5Zy5jdXJyZW50KTt6Zyh3Zy5jdXJyZW50KTtCaChiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW0ZhXT1iLGQubm9kZVZhbHVlIT09YyYmU2goYikpOihkPWIsYz0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGUpLGNbRmFdPWIsZC5zdGF0ZU5vZGU9Yyl9YnJlYWs7Y2FzZSAxMTpicmVhaztjYXNlIDEzOkgoUCxiKTtlPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSl7Yi5leHBpcmF0aW9uVGltZT1kO2JyZWFrIGF9ZD1udWxsIT09ZTtlPSExO251bGw9PT1jP0JoKGIpOihmPWMubWVtb2l6ZWRTdGF0ZSxlPW51bGwhPT1mLGR8fG51bGw9PT1mfHwoZj1jLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWYmJihnPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWc/KGIuZmlyc3RFZmZlY3Q9XG5mLGYubmV4dEVmZmVjdD1nKTooYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9ZixmLm5leHRFZmZlY3Q9bnVsbCksZi5lZmZlY3RUYWc9OCkpKTtpZihkJiYhZSYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWMmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KFAuY3VycmVudCZGZykpWD09PUVpJiYoWD1HaSk7ZWxzZSBpZihYPT09RWl8fFg9PT1HaSlYPUhpO2lmKGR8fGUpYi5lZmZlY3RUYWd8PTQ7YnJlYWs7Y2FzZSA3OmJyZWFrO2Nhc2UgODpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgNDpCZyhiKTtVaChiKTticmVhaztjYXNlIDEwOklmKGIpO2JyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDE0OmJyZWFrO2Nhc2UgMTc6TihiLnR5cGUpJiZUZShiKTticmVhaztjYXNlIDE4OmJyZWFrO2Nhc2UgMTk6SChQLGIpO2U9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1lKWJyZWFrO2Y9MCE9PShiLmVmZmVjdFRhZyY2NCk7Zz1lLnJlbmRlcmluZztcbmlmKG51bGw9PT1nKWlmKGYpJGgoZSwhMSk7ZWxzZXtpZihYIT09RWl8fG51bGwhPT1jJiYwIT09KGMuZWZmZWN0VGFnJjY0KSlmb3IoYz1iLmNoaWxkO251bGwhPT1jOyl7Zz1IZyhjKTtpZihudWxsIT09Zyl7Yi5lZmZlY3RUYWd8PTY0OyRoKGUsITEpO2M9Zy51cGRhdGVRdWV1ZTtudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmVmZmVjdFRhZ3w9NCk7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtmb3IoYz1iLmNoaWxkO251bGwhPT1jOyllPWMsZj1kLGUuZWZmZWN0VGFnJj0yLGUubmV4dEVmZmVjdD1udWxsLGUuZmlyc3RFZmZlY3Q9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCxnPWUuYWx0ZXJuYXRlLG51bGw9PT1nPyhlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxlLmV4cGlyYXRpb25UaW1lPWYsZS5jaGlsZD1udWxsLGUubWVtb2l6ZWRQcm9wcz1udWxsLGUubWVtb2l6ZWRTdGF0ZT1udWxsLGUudXBkYXRlUXVldWU9bnVsbCxlLmRlcGVuZGVuY2llcz1udWxsKTooZS5jaGlsZEV4cGlyYXRpb25UaW1lPVxuZy5jaGlsZEV4cGlyYXRpb25UaW1lLGUuZXhwaXJhdGlvblRpbWU9Zy5leHBpcmF0aW9uVGltZSxlLmNoaWxkPWcuY2hpbGQsZS5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxlLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGUudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmPWcuZGVwZW5kZW5jaWVzLGUuZGVwZW5kZW5jaWVzPW51bGw9PT1mP251bGw6e2V4cGlyYXRpb25UaW1lOmYuZXhwaXJhdGlvblRpbWUsZmlyc3RDb250ZXh0OmYuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Zi5yZXNwb25kZXJzfSksYz1jLnNpYmxpbmc7SihQLFAuY3VycmVudCZFZ3xHZyxiKTtiPWIuY2hpbGQ7YnJlYWsgYX1jPWMuc2libGluZ319ZWxzZXtpZighZilpZihjPUhnKGcpLG51bGwhPT1jKXtpZihiLmVmZmVjdFRhZ3w9NjQsZj0hMCwkaChlLCEwKSxudWxsPT09ZS50YWlsJiZcImhpZGRlblwiPT09ZS50YWlsTW9kZSl7ZD1jLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1cbmQsYi5lZmZlY3RUYWd8PTQpO2I9Yi5sYXN0RWZmZWN0PWUubGFzdEVmZmVjdDtudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKTticmVha319ZWxzZSBzZigpPmUudGFpbEV4cGlyYXRpb24mJjE8ZCYmKGIuZWZmZWN0VGFnfD02NCxmPSEwLCRoKGUsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWQtMSk7ZS5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooZD1lLmxhc3QsbnVsbCE9PWQ/ZC5zaWJsaW5nPWc6Yi5jaGlsZD1nLGUubGFzdD1nKX1pZihudWxsIT09ZS50YWlsKXswPT09ZS50YWlsRXhwaXJhdGlvbiYmKGUudGFpbEV4cGlyYXRpb249c2YoKSs1MDApO2Q9ZS50YWlsO2UucmVuZGVyaW5nPWQ7ZS50YWlsPWQuc2libGluZztlLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0O2Quc2libGluZz1udWxsO2M9UC5jdXJyZW50O2M9Zj9jJkVnfEdnOmMmRWc7SihQLGMsYik7Yj1kO2JyZWFrIGF9YnJlYWs7Y2FzZSAyMDpicmVhaztcbmRlZmF1bHQ6dGhyb3cgdChFcnJvcigxNTYpKTt9Yj1udWxsfWQ9VjtpZigxPT09V3x8MSE9PWQuY2hpbGRFeHBpcmF0aW9uVGltZSl7Yz0wO2ZvcihlPWQuY2hpbGQ7bnVsbCE9PWU7KWY9ZS5leHBpcmF0aW9uVGltZSxnPWUuY2hpbGRFeHBpcmF0aW9uVGltZSxmPmMmJihjPWYpLGc+YyYmKGM9ZyksZT1lLnNpYmxpbmc7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPWN9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWEmJjA9PT0oYS5lZmZlY3RUYWcmMTAyNCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9Vi5maXJzdEVmZmVjdCksbnVsbCE9PVYubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1WLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9Vi5sYXN0RWZmZWN0KSwxPFYuZWZmZWN0VGFnJiYobnVsbCE9PWEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1WOmEuZmlyc3RFZmZlY3Q9VixcbmEubGFzdEVmZmVjdD1WKSl9ZWxzZXtiPWFpKFYsVyk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZWZmZWN0VGFnJj0xMDIzLGI7bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZWZmZWN0VGFnfD0xMDI0KX1iPVYuc2libGluZztpZihudWxsIT09YilyZXR1cm4gYjtWPWF9d2hpbGUobnVsbCE9PVYpO1g9PT1FaSYmKFg9SWkpO3JldHVybiBudWxsfWZ1bmN0aW9uIGlqKGEpe3ZhciBiPXRmKCk7dmYoOTksbmouYmluZChudWxsLGEsYikpO251bGwhPT1RaSYmd2YoOTcsZnVuY3Rpb24oKXtjaigpO3JldHVybiBudWxsfSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuaihhLGIpe2NqKCk7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcmssZD1hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDtpZihjPT09YS5jdXJyZW50KXRocm93IHQoRXJyb3IoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MDt2YXIgZT1jLmV4cGlyYXRpb25UaW1lLGY9Yy5jaGlsZEV4cGlyYXRpb25UaW1lO2U9Zj5lP2Y6ZTthLmZpcnN0UGVuZGluZ1RpbWU9ZTtlPGEubGFzdFBlbmRpbmdUaW1lJiYoYS5sYXN0UGVuZGluZ1RpbWU9ZSk7YT09PUppJiYoVj1KaT1udWxsLFc9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtcbmlmKG51bGwhPT1lKXtmPVU7VXw9RGk7QWkuY3VycmVudD1udWxsO0hlPVFkO3ZhciBoPWFlKCk7aWYoYmUoaCkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGgpdmFyIGc9e3N0YXJ0Omguc2VsZWN0aW9uU3RhcnQsZW5kOmguc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2c9KGc9aC5vd25lckRvY3VtZW50KSYmZy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBrPWcuZ2V0U2VsZWN0aW9uJiZnLmdldFNlbGVjdGlvbigpO2lmKGsmJjAhPT1rLnJhbmdlQ291bnQpe2c9ay5hbmNob3JOb2RlO3ZhciBsPWsuYW5jaG9yT2Zmc2V0LG49ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O3RyeXtnLm5vZGVUeXBlLG4ubm9kZVR5cGV9Y2F0Y2goemIpe2c9bnVsbDticmVhayBhfXZhciB6PTAseD0tMSx2PS0xLHJiPTAsQmU9MCx1PWgsdz1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEM7Oyl7dSE9PWd8fDAhPT1sJiYzIT09dS5ub2RlVHlwZXx8KHg9eitsKTt1IT09bnx8MCE9PWsmJjMhPT11Lm5vZGVUeXBlfHxcbih2PXorayk7Mz09PXUubm9kZVR5cGUmJih6Kz11Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oQz11LmZpcnN0Q2hpbGQpKWJyZWFrO3c9dTt1PUN9Zm9yKDs7KXtpZih1PT09aClicmVhayBiO3c9PT1nJiYrK3JiPT09bCYmKHg9eik7dz09PW4mJisrQmU9PT1rJiYodj16KTtpZihudWxsIT09KEM9dS5uZXh0U2libGluZykpYnJlYWs7dT13O3c9dS5wYXJlbnROb2RlfXU9Q31nPS0xPT09eHx8LTE9PT12P251bGw6e3N0YXJ0OngsZW5kOnZ9fWVsc2UgZz1udWxsfWc9Z3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgZz1udWxsO0llPXtmb2N1c2VkRWxlbTpoLHNlbGVjdGlvblJhbmdlOmd9O1FkPSExO1k9ZTtkbyB0cnl7Zm9yKDtudWxsIT09WTspe2lmKDAhPT0oWS5lZmZlY3RUYWcmMjU2KSl7dmFyIEk9WS5hbHRlcm5hdGU7aD1ZO3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpoaShKZyxJZyxoKTticmVhaztjYXNlIDE6aWYoaC5lZmZlY3RUYWcmMjU2JiZudWxsIT09XG5JKXt2YXIgRT1JLm1lbW9pemVkUHJvcHMsdWE9SS5tZW1vaXplZFN0YXRlLGdoPWguc3RhdGVOb2RlLG9qPWdoLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGguZWxlbWVudFR5cGU9PT1oLnR5cGU/RTpBZihoLnR5cGUsRSksdWEpO2doLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPW9qfWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigxNjMpKTt9fVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh6Yil7aWYobnVsbD09PVkpdGhyb3cgdChFcnJvcigzMzApKTtmaShZLHpiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1lO2RvIHRyeXtmb3IoST1iO251bGwhPT1ZOyl7dmFyIEE9WS5lZmZlY3RUYWc7QSYxNiYmd2UoWS5zdGF0ZU5vZGUsXCJcIik7aWYoQSYxMjgpe3ZhciBwPVkuYWx0ZXJuYXRlO2lmKG51bGwhPT1wKXt2YXIgcj1wLnJlZjtudWxsIT09ciYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiByP1xucihudWxsKTpyLmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChBJjE0KXtjYXNlIDI6bmkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpuaShZKTtZLmVmZmVjdFRhZyY9LTM7b2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0Om9pKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpFPVk7a2koRSxJKTtFLnJldHVybj1udWxsO0UuY2hpbGQ9bnVsbDtFLm1lbW9pemVkU3RhdGU9bnVsbDtFLnVwZGF0ZVF1ZXVlPW51bGw7RS5kZXBlbmRlbmNpZXM9bnVsbDt2YXIgSz1FLmFsdGVybmF0ZTtudWxsIT09SyYmKEsucmV0dXJuPW51bGwsSy5jaGlsZD1udWxsLEsubWVtb2l6ZWRTdGF0ZT1udWxsLEsudXBkYXRlUXVldWU9bnVsbCxLLmRlcGVuZGVuY2llcz1udWxsKX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2goemIpe2lmKG51bGw9PT1ZKXRocm93IHQoRXJyb3IoMzMwKSk7ZmkoWSx6Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO3I9SWU7cD1hZSgpO0E9ci5mb2N1c2VkRWxlbTtcbkk9ci5zZWxlY3Rpb25SYW5nZTtpZihwIT09QSYmQSYmQS5vd25lckRvY3VtZW50JiYkZChBLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LEEpKXtudWxsIT09SSYmYmUoQSkmJihwPUkuc3RhcnQscj1JLmVuZCx2b2lkIDA9PT1yJiYocj1wKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBBPyhBLnNlbGVjdGlvblN0YXJ0PXAsQS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4ocixBLnZhbHVlLmxlbmd0aCkpOihyPShwPUEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZwLmRlZmF1bHRWaWV3fHx3aW5kb3csci5nZXRTZWxlY3Rpb24mJihyPXIuZ2V0U2VsZWN0aW9uKCksRT1BLnRleHRDb250ZW50Lmxlbmd0aCxLPU1hdGgubWluKEkuc3RhcnQsRSksST12b2lkIDA9PT1JLmVuZD9LOk1hdGgubWluKEkuZW5kLEUpLCFyLmV4dGVuZCYmSz5JJiYoRT1JLEk9SyxLPUUpLEU9WmQoQSxLKSx1YT1aZChBLEkpLEUmJnVhJiYoMSE9PXIucmFuZ2VDb3VudHx8ci5hbmNob3JOb2RlIT09RS5ub2RlfHxyLmFuY2hvck9mZnNldCE9PVxuRS5vZmZzZXR8fHIuZm9jdXNOb2RlIT09dWEubm9kZXx8ci5mb2N1c09mZnNldCE9PXVhLm9mZnNldCkmJihwPXAuY3JlYXRlUmFuZ2UoKSxwLnNldFN0YXJ0KEUubm9kZSxFLm9mZnNldCksci5yZW1vdmVBbGxSYW5nZXMoKSxLPkk/KHIuYWRkUmFuZ2UocCksci5leHRlbmQodWEubm9kZSx1YS5vZmZzZXQpKToocC5zZXRFbmQodWEubm9kZSx1YS5vZmZzZXQpLHIuYWRkUmFuZ2UocCkpKSkpKTtwPVtdO2ZvcihyPUE7cj1yLnBhcmVudE5vZGU7KTE9PT1yLm5vZGVUeXBlJiZwLnB1c2goe2VsZW1lbnQ6cixsZWZ0OnIuc2Nyb2xsTGVmdCx0b3A6ci5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQS5mb2N1cyYmQS5mb2N1cygpO2ZvcihBPTA7QTxwLmxlbmd0aDtBKyspcj1wW0FdLHIuZWxlbWVudC5zY3JvbGxMZWZ0PXIubGVmdCxyLmVsZW1lbnQuc2Nyb2xsVG9wPXIudG9wfUllPW51bGw7UWQ9ISFIZTtIZT1udWxsO2EuY3VycmVudD1jO1k9ZTtkbyB0cnl7Zm9yKEE9ZDtudWxsIT09XG5ZOyl7dmFyICRhPVkuZWZmZWN0VGFnO2lmKCRhJjM2KXt2YXIgbmM9WS5hbHRlcm5hdGU7cD1ZO3I9QTtzd2l0Y2gocC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6aGkoTWcsTmcscCk7YnJlYWs7Y2FzZSAxOnZhciBtZD1wLnN0YXRlTm9kZTtpZihwLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1uYyltZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIEZqPXAuZWxlbWVudFR5cGU9PT1wLnR5cGU/bmMubWVtb2l6ZWRQcm9wczpBZihwLnR5cGUsbmMubWVtb2l6ZWRQcm9wcyk7bWQuY29tcG9uZW50RGlkVXBkYXRlKEZqLG5jLm1lbW9pemVkU3RhdGUsbWQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBYaD1wLnVwZGF0ZVF1ZXVlO251bGwhPT1YaCYmWWYocCxYaCxtZCxyKTticmVhaztjYXNlIDM6dmFyIFloPXAudXBkYXRlUXVldWU7aWYobnVsbCE9PVloKXtLPW51bGw7aWYobnVsbCE9PXAuY2hpbGQpc3dpdGNoKHAuY2hpbGQudGFnKXtjYXNlIDU6Sz1cbnAuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpLPXAuY2hpbGQuc3RhdGVOb2RlfVlmKHAsWWgsSyxyKX1icmVhaztjYXNlIDU6dmFyIEdqPXAuc3RhdGVOb2RlO251bGw9PT1uYyYmcC5lZmZlY3RUYWcmNCYmKHI9R2osSmUocC50eXBlLHAubWVtb2l6ZWRQcm9wcykmJnIuZm9jdXMoKSk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDE2MykpO319aWYoJGEmMTI4KXt2YXIgbmQ9WS5yZWY7aWYobnVsbCE9PW5kKXt2YXIgWmg9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6dmFyIGdmPVpoO2JyZWFrO2RlZmF1bHQ6Z2Y9Wmh9XCJmdW5jdGlvblwiPT09dHlwZW9mIG5kP25kKGdmKTpuZC5jdXJyZW50PWdmfX0kYSY1MTImJihQaT0hMCk7WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHpiKXtpZihudWxsPT09WSl0aHJvdyB0KEVycm9yKDMzMCkpO1xuZmkoWSx6Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9bnVsbDtuZigpO1U9Zn1lbHNlIGEuY3VycmVudD1jO2lmKFBpKVBpPSExLFFpPWEsU2k9ZCxSaT1iO2Vsc2UgZm9yKFk9ZTtudWxsIT09WTspYj1ZLm5leHRFZmZlY3QsWS5uZXh0RWZmZWN0PW51bGwsWT1iO2I9YS5maXJzdFBlbmRpbmdUaW1lOzAhPT1iPygkYT1jZygpLCRhPXpmKCRhLGIpLFppKGEsJGEsYikpOnhpPW51bGw7XCJmdW5jdGlvblwiPT09dHlwZW9mIHBqJiZwaihjLnN0YXRlTm9kZSxkKTsxMDczNzQxODIzPT09Yj9hPT09Vmk/VWkrKzooVWk9MCxWaT1hKTpVaT0wO2lmKHVpKXRocm93IHVpPSExLGE9dmksdmk9bnVsbCxhO2lmKChVJkJpKSE9PVQpcmV0dXJuIG51bGw7TygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gY2ooKXtpZihudWxsPT09UWkpcmV0dXJuITE7dmFyIGE9UWksYj1TaSxjPVJpO1FpPW51bGw7U2k9MDtSaT05MDtyZXR1cm4gdmYoOTc8Yz85NzpjLHFqLmJpbmQobnVsbCxhLGIpKX1mdW5jdGlvbiBxaihhKXtpZigoVSYoQ2l8RGkpKSE9PVQpdGhyb3cgdChFcnJvcigzMzEpKTt2YXIgYj1VO1V8PURpO2ZvcihhPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09YTspe3RyeXt2YXIgYz1hO2lmKDAhPT0oYy5lZmZlY3RUYWcmNTEyKSlzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6aGkoUGcsSWcsYyksaGkoSWcsT2csYyl9fWNhdGNoKGQpe2lmKG51bGw9PT1hKXRocm93IHQoRXJyb3IoMzMwKSk7ZmkoYSxkKX1jPWEubmV4dEVmZmVjdDthLm5leHRFZmZlY3Q9bnVsbDthPWN9VT1iO08oKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIHJqKGEsYixjKXtiPWJpKGMsYik7Yj10aShhLGIsMTA3Mzc0MTgyMyk7U2YoYSxiKTthPVlpKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlppKGEsOTksMTA3Mzc0MTgyMyl9ZnVuY3Rpb24gZmkoYSxiKXtpZigzPT09YS50YWcpcmooYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtyaihjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT14aXx8IXhpLmhhcyhkKSkpe2E9YmkoYixhKTthPXdpKGMsYSwxMDczNzQxODIzKTtTZihjLGEpO2M9WWkoYywxMDczNzQxODIzKTtudWxsIT09YyYmWmkoYyw5OSwxMDczNzQxODIzKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBraihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO0ppPT09YSYmVz09PWM/WD09PUhpfHxYPT09R2kmJjEwNzM3NDE4MjM9PT1LaSYmc2YoKS1waTxPaT9oaihhLFcpOk5pPSEwOmEubGFzdFBlbmRpbmdUaW1lPGN8fChiPWEucGluZ1RpbWUsMCE9PWImJmI8Y3x8KGEucGluZ1RpbWU9YyxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9PT1jJiYoYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTAsYS5maW5pc2hlZFdvcms9bnVsbCksYj1jZygpLGI9emYoYixjKSxaaShhLGIsYykpKX1mdW5jdGlvbiByaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtjPWNnKCk7Yj1kZyhjLGEsbnVsbCk7Yz16ZihjLGIpO2E9WWkoYSxiKTtudWxsIT09YSYmWmkoYSxjLGIpfXZhciBtaj12b2lkIDA7XG5taj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8TS5jdXJyZW50KUxmPSEwO2Vsc2UgaWYoZDxjKXtMZj0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpOaChiKTtDaCgpO2JyZWFrO2Nhc2UgNTpDZyhiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOk4oYi50eXBlKSYmWGUoYik7YnJlYWs7Y2FzZSA0OkFnKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpIZihiLGIubWVtb2l6ZWRQcm9wcy52YWx1ZSk7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwIT09ZCYmZD49YylyZXR1cm4gUGgoYSxiLGMpO0ooUCxQLmN1cnJlbnQmXG5FZyxiKTtiPUZoKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SihQLFAuY3VycmVudCZFZyxiKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBSaChhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SihQLFAuY3VycmVudCxiKTtpZighZClyZXR1cm4gbnVsbH1yZXR1cm4gRmgoYSxiLGMpfX1lbHNlIExmPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPVNlKGIsTC5jdXJyZW50KTtLZihiLGMpO2U9ZGgobnVsbCxiLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmXG5udWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2loKCk7aWYoTihkKSl7dmFyIGY9ITA7WGUoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dmFyIGg9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGgmJmJnKGIsZCxoLGEpO2UudXBkYXRlcj1mZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO2pnKGIsZCxhLGMpO2I9TWgobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUyhudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1CZihlKTtiLnR5cGU9ZTtmPWIudGFnPXNqKGUpO1xuYT1BZihlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1KaChudWxsLGIsZSxhLGMpO2JyZWFrO2Nhc2UgMTpiPUxoKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxMTpiPUVoKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxNDpiPUdoKG51bGwsYixlLEFmKGUudHlwZSxhKSxkLGMpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigzMDYpLGUsXCJcIik7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6QWYoZCxlKSxKaChhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6QWYoZCxlKSxMaChhLGIsZCxlLGMpO2Nhc2UgMzpOaChiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWQpdGhyb3cgdChFcnJvcigyODIpKTtlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO1dmKGIsZCxiLnBlbmRpbmdQcm9wcyxcbm51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlDaCgpLGI9RmgoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihlPShudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZlLmh5ZHJhdGUpdWg9TmUoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx0aD1iLGU9dmg9ITA7ZT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD11ZyhiLG51bGwsZCxjKSk6KFMoYSxiLGQsYyksQ2goKSk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gQ2coYiksbnVsbD09PWEmJnpoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxoPWUuY2hpbGRyZW4sS2UoZCxlKT9oPW51bGw6bnVsbCE9PWYmJktlKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLEtoKGEsYiksYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOlxuKFMoYSxiLGgsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJnpoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gUGgoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gQWcoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9dGcoYixudWxsLGQsYyk6UyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkFmKGQsZSksRWgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2g9Yi5tZW1vaXplZFByb3BzO1xuZj1lLnZhbHVlO0hmKGIsZik7aWYobnVsbCE9PWgpe3ZhciBnPWgudmFsdWU7Zj1oZChnLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhnLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGguY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTS5jdXJyZW50KXtiPUZoKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihnPWIuY2hpbGQsbnVsbCE9PWcmJihnLnJldHVybj1iKTtudWxsIT09Zzspe3ZhciBrPWcuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtoPWcuY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWcudGFnJiYobD1RZihjLG51bGwpLGwudGFnPTIsU2YoZyxsKSk7Zy5leHBpcmF0aW9uVGltZTxjJiYoZy5leHBpcmF0aW9uVGltZT1jKTtsPWcuYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPFxuYyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7SmYoZy5yZXR1cm4sYyk7ay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTticmVha31sPWwubmV4dH19ZWxzZSBoPTEwPT09Zy50YWc/Zy50eXBlPT09Yi50eXBlP251bGw6Zy5jaGlsZDpnLmNoaWxkO2lmKG51bGwhPT1oKWgucmV0dXJuPWc7ZWxzZSBmb3IoaD1nO251bGwhPT1oOyl7aWYoaD09PWIpe2g9bnVsbDticmVha31nPWguc2libGluZztpZihudWxsIT09Zyl7Zy5yZXR1cm49aC5yZXR1cm47aD1nO2JyZWFrfWg9aC5yZXR1cm59Zz1ofX1TKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLEtmKGIsYyksZT1NZihlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9QWYoZSxiLnBlbmRpbmdQcm9wcyksXG5mPUFmKGUudHlwZSxmKSxHaChhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gSWgoYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkFmKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTihkKT8oYT0hMCxYZShiKSk6YT0hMSxLZihiLGMpLGhnKGIsZCxlLGMpLGpnKGIsZCxlLGMpLE1oKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gUmgoYSxiLGMpfXRocm93IHQoRXJyb3IoMTU2KSk7fTt2YXIgcGo9bnVsbCxqaT1udWxsO1xuZnVuY3Rpb24gdGooYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7cGo9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclJvb3QoYyxhLHZvaWQgMCw2ND09PShhLmN1cnJlbnQuZWZmZWN0VGFnJjY0KSl9Y2F0Y2goZSl7fX07amk9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclVubW91bnQoYyxhKX1jYXRjaChlKXt9fX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiB1aihhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIHhoKGEsYixjLGQpe3JldHVybiBuZXcgdWooYSxiLGMsZCl9XG5mdW5jdGlvbiBIaChhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIHNqKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBIaChhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Z2MpcmV0dXJuIDExO2lmKGE9PT1qYylyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBvZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPXhoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2V4cGlyYXRpb25UaW1lOmIuZXhwaXJhdGlvblRpbWUsXG5maXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHQscmVzcG9uZGVyczpiLnJlc3BvbmRlcnN9O2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gcWcoYSxiLGMsZCxlLGYpe3ZhciBoPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKUhoKGEpJiYoaD0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSloPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIGFjOnJldHVybiBzZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIGZjOmg9ODtlfD03O2JyZWFrO2Nhc2UgYmM6aD04O2V8PTE7YnJlYWs7Y2FzZSBjYzpyZXR1cm4gYT14aCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPWNjLGEudHlwZT1jYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGhjOnJldHVybiBhPXhoKDEzLGMsYixlKSxhLnR5cGU9aGMsYS5lbGVtZW50VHlwZT1oYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGljOnJldHVybiBhPXhoKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPWljLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBkYzpoPVxuMTA7YnJlYWsgYTtjYXNlIGVjOmg9OTticmVhayBhO2Nhc2UgZ2M6aD0xMTticmVhayBhO2Nhc2UgamM6aD0xNDticmVhayBhO2Nhc2Uga2M6aD0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyB0KEVycm9yKDEzMCksbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpO31iPXhoKGgsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gc2coYSxiLGMsZCl7YT14aCg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcGcoYSxiLGMpe2E9eGgoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gcmcoYSxiLGMpe2I9eGgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiB2aihhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmN1cnJlbnQ9bnVsbDt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLnBpbmdDYWNoZT10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3RoaXMuZmluaXNoZWRXb3JrPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5maXJzdEJhdGNoPW51bGw7dGhpcy5waW5nVGltZT10aGlzLmxhc3RQZW5kaW5nVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9dGhpcy5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTB9ZnVuY3Rpb24gd2ooYSxiLGMpe2E9bmV3IHZqKGEsYixjKTtiPXhoKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTthLmN1cnJlbnQ9YjtyZXR1cm4gYi5zdGF0ZU5vZGU9YX1cbmZ1bmN0aW9uIHhqKGEsYixjLGQsZSxmKXt2YXIgaD1iLmN1cnJlbnQ7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOntpZigyIT09bGQoYyl8fDEhPT1jLnRhZyl0aHJvdyB0KEVycm9yKDE3MCkpO3ZhciBnPWM7ZG97c3dpdGNoKGcudGFnKXtjYXNlIDM6Zz1nLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKE4oZy50eXBlKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1nPWcucmV0dXJufXdoaWxlKG51bGwhPT1nKTt0aHJvdyB0KEVycm9yKDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihOKGspKXtjPVdlKGMsayxnKTticmVhayBhfX1jPWd9ZWxzZSBjPVFlO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZjtlPVFmKGQsZSk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJlxuKGUuY2FsbGJhY2s9Yik7U2YoaCxlKTtlZyhoLGQpO3JldHVybiBkfWZ1bmN0aW9uIHlqKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPWNnKCksaD0kZi5zdXNwZW5zZTtlPWRnKGYsZSxoKTtyZXR1cm4geGooYSxiLGMsZSxoLGQpfWZ1bmN0aW9uIHpqKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gQWooYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjokYixrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbkRiPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6RWMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPUthKGQpO2lmKCFlKXRocm93IHQoRXJyb3IoOTApKTtXYihkKTtFYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6cGUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJm1lKGEsISFjLm11bHRpcGxlLGIsITEpfX07XG5mdW5jdGlvbiBCaihhKXt2YXIgYj0xMDczNzQxODIxLTI1KigoKDEwNzM3NDE4MjEtY2coKSs1MDApLzI1fDApKzEpO2I8PVhpJiYtLWI7dGhpcy5fZXhwaXJhdGlvblRpbWU9WGk9Yjt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfUJqLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7aWYoIXRoaXMuX2RlZmVyKXRocm93IHQoRXJyb3IoMjUwKSk7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBDajt4aihhLGIsbnVsbCxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtcbkJqLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbkJqLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7aWYoIXRoaXMuX2RlZmVyfHxudWxsPT09Yil0aHJvdyB0KEVycm9yKDI1MSkpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O2lmKG51bGw9PT1kKXRocm93IHQoRXJyb3IoMjUxKSk7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtiPWM7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMjUzKSk7eGYoWi5iaW5kKG51bGwsYSxiKSk7TygpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PVxubnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1udWxsLHRoaXMuX2RlZmVyPSExfTtCai5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gQ2ooKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1Dai5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuQ2oucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgdChFcnJvcigxOTEpLGMpO2MoKX19fTtmdW5jdGlvbiBEaihhLGIsYyl7dGhpcy5faW50ZXJuYWxSb290PXdqKGEsYixjKX1mdW5jdGlvbiBFaihhLGIpe3RoaXMuX2ludGVybmFsUm9vdD13aihhLDIsYil9RWoucHJvdG90eXBlLnJlbmRlcj1Eai5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IENqO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTt5aihhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xuRWoucHJvdG90eXBlLnVubW91bnQ9RGoucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IENqO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTt5aihudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O0VqLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBCaih0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O1xuZnVuY3Rpb24gSGooYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfUpiPWVqO0tiPWZqO0xiPWFqO01iPWZ1bmN0aW9uKGEsYil7dmFyIGM9VTtVfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1U9YyxVPT09VCYmTygpfX07ZnVuY3Rpb24gSWooYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBEaihhLDAsYil9XG5mdW5jdGlvbiBKaihhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcixoPXZvaWQgMDtpZihmKXtoPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9emooaCk7Zy5jYWxsKGEpfX15aihiLGgsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPUlqKGMsZCk7aD1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPXpqKGgpO2suY2FsbChhKX19Z2ooZnVuY3Rpb24oKXt5aihiLGgsYSxlKX0pfXJldHVybiB6aihoKX1mdW5jdGlvbiBLaihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFIaihiKSl0aHJvdyB0KEVycm9yKDIwMCkpO3JldHVybiBBaihhLGIsbnVsbCxjKX1cbnZhciBOaj17Y3JlYXRlUG9ydGFsOktqLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpYT1udWxsO2Vsc2UgaWYoMSE9PWEubm9kZVR5cGUpe3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgdChFcnJvcigxODgpKTt0aHJvdyB0KEVycm9yKDI2OCksT2JqZWN0LmtleXMoYSkpO31hPXFkKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX1yZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7aWYoIUhqKGIpKXRocm93IHQoRXJyb3IoMjAwKSk7cmV0dXJuIEpqKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe2lmKCFIaihiKSl0aHJvdyB0KEVycm9yKDIwMCkpO3JldHVybiBKaihudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIUhqKGMpKXRocm93IHQoRXJyb3IoMjAwKSk7XG5pZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXIpdGhyb3cgdChFcnJvcigzOCkpO3JldHVybiBKaihhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtpZighSGooYSkpdGhyb3cgdChFcnJvcig0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KGdqKGZ1bmN0aW9uKCl7SmoobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gS2ouYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOmVqLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbihhLGIsYyxkKXthaigpO3JldHVybiBmaihhLGIsYyxkKX0sdW5zdGFibGVfZGlzY3JldGVVcGRhdGVzOmZqLHVuc3RhYmxlX2ZsdXNoRGlzY3JldGVVcGRhdGVzOmFqLGZsdXNoU3luYzpmdW5jdGlvbihhLFxuYil7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMTg3KSk7dmFyIGM9VTtVfD0xO3RyeXtyZXR1cm4gdmYoOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7VT1jLE8oKX19LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6TGosdW5zdGFibGVfY3JlYXRlU3luY1Jvb3Q6TWosdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPVU7VXw9MTt0cnl7dmYoOTksYSl9ZmluYWxseXtVPWIsVT09PVQmJk8oKX19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudHM6W0lhLEphLEthLENhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSxmYSxRYSxmdW5jdGlvbihhKXt5YShhLFBhKX0sSGIsSWIsVWQsQmEsY2ose2N1cnJlbnQ6ITF9XX19O1xuZnVuY3Rpb24gTGooYSxiKXtpZighSGooYSkpdGhyb3cgdChFcnJvcigyOTkpLFwidW5zdGFibGVfY3JlYXRlUm9vdFwiKTtyZXR1cm4gbmV3IEVqKGEsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfWZ1bmN0aW9uIE1qKGEsYil7aWYoIUhqKGEpKXRocm93IHQoRXJyb3IoMjk5KSxcInVuc3RhYmxlX2NyZWF0ZVJvb3RcIik7cmV0dXJuIG5ldyBEaihhLDEsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfVxuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIHRqKG0oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpYYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9cWQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpIYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjkuMFwiLFxucmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIE9qPXtkZWZhdWx0Ok5qfSxQaj1PaiYmTmp8fE9qO21vZHVsZS5leHBvcnRzPVBqLmRlZmF1bHR8fFBqO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xNS4wXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGQ9dm9pZCAwLGU9dm9pZCAwLGc9dm9pZCAwLG09dm9pZCAwLG49dm9pZCAwO2V4cG9ydHMudW5zdGFibGVfbm93PXZvaWQgMDtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPXZvaWQgMDtcbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBwPW51bGwscT1udWxsLHI9ZnVuY3Rpb24oKXtpZihudWxsIT09cCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtwKCEwLGEpO3A9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHIsMCksYjt9fTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTtkPWZ1bmN0aW9uKGEpe251bGwhPT1wP3NldFRpbWVvdXQoZCwwLGEpOihwPWEsc2V0VGltZW91dChyLDApKX07ZT1mdW5jdGlvbihhLGIpe3E9c2V0VGltZW91dChhLGIpfTtnPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHEpfTttPWZ1bmN0aW9uKCl7cmV0dXJuITF9O249ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgdD13aW5kb3cucGVyZm9ybWFuY2UsdT13aW5kb3cuRGF0ZSx2PXdpbmRvdy5zZXRUaW1lb3V0LFxudz13aW5kb3cuY2xlYXJUaW1lb3V0LHg9d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSx5PXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeCYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpKTtleHBvcnRzLnVuc3RhYmxlX25vdz1cIm9iamVjdFwiPT09dHlwZW9mIHQmJlxuXCJmdW5jdGlvblwiPT09dHlwZW9mIHQubm93P2Z1bmN0aW9uKCl7cmV0dXJuIHQubm93KCl9OmZ1bmN0aW9uKCl7cmV0dXJuIHUubm93KCl9O3ZhciB6PSExLEE9bnVsbCxCPS0xLEM9LTEsRD0zMy4zMyxFPS0xLEY9LTEsRz0wLEg9ITE7bT1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1HfTtuPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3QgdW5zdXBwb3J0ZWRcIik6MDxhPyhEPU1hdGguZmxvb3IoMUUzL2EpLEg9ITApOihEPTMzLjMzLEg9ITEpfTt2YXIgSj1mdW5jdGlvbigpe2lmKG51bGwhPT1BKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpLGI9MDxHLWE7dHJ5e0EoYixcbmEpfHwoQT1udWxsKX1jYXRjaChjKXt0aHJvdyBJLnBvc3RNZXNzYWdlKG51bGwpLGM7fX19LEs9bmV3IE1lc3NhZ2VDaGFubmVsLEk9Sy5wb3J0MjtLLnBvcnQxLm9ubWVzc2FnZT1KO3ZhciBMPWZ1bmN0aW9uKGEpe2lmKG51bGw9PT1BKUY9RT0tMSx6PSExO2Vsc2V7ej0hMDt4KGZ1bmN0aW9uKGEpe3coQik7TChhKX0pO3ZhciBiPWZ1bmN0aW9uKCl7Rz1leHBvcnRzLnVuc3RhYmxlX25vdygpK0QvMjtKKCk7Qj12KGIsMypEKX07Qj12KGIsMypEKTtpZigtMSE9PUUmJi4xPGEtRSl7dmFyIGM9YS1FOyFIJiYtMSE9PUYmJmM8RCYmRjxEJiYoRD1jPEY/RjpjLDguMzM+RCYmKEQ9OC4zMykpO0Y9Y31FPWE7Rz1hK0Q7SS5wb3N0TWVzc2FnZShudWxsKX19O2Q9ZnVuY3Rpb24oYSl7QT1hO3p8fCh6PSEwLHgoZnVuY3Rpb24oYSl7TChhKX0pKX07ZT1mdW5jdGlvbihhLGIpe0M9dihmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtnPWZ1bmN0aW9uKCl7dyhDKTtcbkM9LTF9fXZhciBNPW51bGwsTj1udWxsLE89bnVsbCxQPTMsUT0hMSxSPSExLFM9ITE7XG5mdW5jdGlvbiBUKGEsYil7dmFyIGM9YS5uZXh0O2lmKGM9PT1hKU09bnVsbDtlbHNle2E9PT1NJiYoTT1jKTt2YXIgZj1hLnByZXZpb3VzO2YubmV4dD1jO2MucHJldmlvdXM9Zn1hLm5leHQ9YS5wcmV2aW91cz1udWxsO2M9YS5jYWxsYmFjaztmPVA7dmFyIGw9TztQPWEucHJpb3JpdHlMZXZlbDtPPWE7dHJ5e3ZhciBoPWEuZXhwaXJhdGlvblRpbWU8PWI7c3dpdGNoKFApe2Nhc2UgMTp2YXIgaz1jKGgpO2JyZWFrO2Nhc2UgMjprPWMoaCk7YnJlYWs7Y2FzZSAzOms9YyhoKTticmVhaztjYXNlIDQ6az1jKGgpO2JyZWFrO2Nhc2UgNTprPWMoaCl9fWNhdGNoKFope3Rocm93IFo7fWZpbmFsbHl7UD1mLE89bH1pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgaylpZihiPWEuZXhwaXJhdGlvblRpbWUsYS5jYWxsYmFjaz1rLG51bGw9PT1NKU09YS5uZXh0PWEucHJldmlvdXM9YTtlbHNle2s9bnVsbDtoPU07ZG97aWYoYjw9aC5leHBpcmF0aW9uVGltZSl7az1oO2JyZWFrfWg9aC5uZXh0fXdoaWxlKGghPT1cbk0pO251bGw9PT1rP2s9TTprPT09TSYmKE09YSk7Yj1rLnByZXZpb3VzO2IubmV4dD1rLnByZXZpb3VzPWE7YS5uZXh0PWs7YS5wcmV2aW91cz1ifX1mdW5jdGlvbiBVKGEpe2lmKG51bGwhPT1OJiZOLnN0YXJ0VGltZTw9YSl7ZG97dmFyIGI9TixjPWIubmV4dDtpZihiPT09YylOPW51bGw7ZWxzZXtOPWM7dmFyIGY9Yi5wcmV2aW91cztmLm5leHQ9YztjLnByZXZpb3VzPWZ9Yi5uZXh0PWIucHJldmlvdXM9bnVsbDtWKGIsYi5leHBpcmF0aW9uVGltZSl9d2hpbGUobnVsbCE9PU4mJk4uc3RhcnRUaW1lPD1hKX19ZnVuY3Rpb24gVyhhKXtTPSExO1UoYSk7Unx8KG51bGwhPT1NPyhSPSEwLGQoWCkpOm51bGwhPT1OJiZlKFcsTi5zdGFydFRpbWUtYSkpfVxuZnVuY3Rpb24gWChhLGIpe1I9ITE7UyYmKFM9ITEsZygpKTtVKGIpO1E9ITA7dHJ5e2lmKCFhKWZvcig7bnVsbCE9PU0mJk0uZXhwaXJhdGlvblRpbWU8PWI7KVQoTSxiKSxiPWV4cG9ydHMudW5zdGFibGVfbm93KCksVShiKTtlbHNlIGlmKG51bGwhPT1NKXtkbyBUKE0sYiksYj1leHBvcnRzLnVuc3RhYmxlX25vdygpLFUoYik7d2hpbGUobnVsbCE9PU0mJiFtKCkpfWlmKG51bGwhPT1NKXJldHVybiEwO251bGwhPT1OJiZlKFcsTi5zdGFydFRpbWUtYik7cmV0dXJuITF9ZmluYWxseXtRPSExfX1mdW5jdGlvbiBZKGEpe3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuLTE7Y2FzZSAyOnJldHVybiAyNTA7Y2FzZSA1OnJldHVybiAxMDczNzQxODIzO2Nhc2UgNDpyZXR1cm4gMUU0O2RlZmF1bHQ6cmV0dXJuIDVFM319XG5mdW5jdGlvbiBWKGEsYil7aWYobnVsbD09PU0pTT1hLm5leHQ9YS5wcmV2aW91cz1hO2Vsc2V7dmFyIGM9bnVsbCxmPU07ZG97aWYoYjxmLmV4cGlyYXRpb25UaW1lKXtjPWY7YnJlYWt9Zj1mLm5leHR9d2hpbGUoZiE9PU0pO251bGw9PT1jP2M9TTpjPT09TSYmKE09YSk7Yj1jLnByZXZpb3VzO2IubmV4dD1jLnByZXZpb3VzPWE7YS5uZXh0PWM7YS5wcmV2aW91cz1ifX12YXIgYWE9bjtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtcbmV4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UDtQPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtQPWN9fTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFApe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVB9dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtQPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGY9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgbD1jLmRlbGF5O2w9XCJudW1iZXJcIj09PXR5cGVvZiBsJiYwPGw/ZitsOmY7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxsPWY7Yz1sK2M7YT17Y2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmwsZXhwaXJhdGlvblRpbWU6YyxuZXh0Om51bGwscHJldmlvdXM6bnVsbH07aWYobD5mKXtjPWw7aWYobnVsbD09PU4pTj1hLm5leHQ9YS5wcmV2aW91cz1hO2Vsc2V7Yj1udWxsO3ZhciBoPU47ZG97aWYoYzxoLnN0YXJ0VGltZSl7Yj1oO2JyZWFrfWg9aC5uZXh0fXdoaWxlKGghPT1OKTtudWxsPT09Yj9iPU46Yj09PU4mJihOPWEpO2M9Yi5wcmV2aW91cztjLm5leHQ9Yi5wcmV2aW91cz1hO2EubmV4dD1iO2EucHJldmlvdXM9XG5jfW51bGw9PT1NJiZOPT09YSYmKFM/ZygpOlM9ITAsZShXLGwtZikpfWVsc2UgVihhLGMpLFJ8fFF8fChSPSEwLGQoWCkpO3JldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWEubmV4dDtpZihudWxsIT09Yil7aWYoYT09PWIpYT09PU0/TT1udWxsOmE9PT1OJiYoTj1udWxsKTtlbHNle2E9PT1NP009YjphPT09TiYmKE49Yik7dmFyIGM9YS5wcmV2aW91cztjLm5leHQ9YjtiLnByZXZpb3VzPWN9YS5uZXh0PWEucHJldmlvdXM9bnVsbH19O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1A9Y319fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFB9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7VShhKTtyZXR1cm4gbnVsbCE9PU8mJm51bGwhPT1NJiZNLnN0YXJ0VGltZTw9YSYmTS5leHBpcmF0aW9uVGltZTxPLmV4cGlyYXRpb25UaW1lfHxtKCl9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWFhO2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxkKFgpKX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBNfTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjkuMFxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7XG52YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTpcbjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx3PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExODtmdW5jdGlvbiB4KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgdDpjYXNlIHI6Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24geShhKXtyZXR1cm4geChhKT09PW19ZXhwb3J0cy50eXBlT2Y9eDtleHBvcnRzLkFzeW5jTW9kZT1sO1xuZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtleHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXZ8fGEuJCR0eXBlb2Y9PT13KX07ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geShhKXx8eChhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT15O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09aH07XG5leHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PXR9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09cH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwidmFyIG1hcCA9IHtcblx0XCIuL2FmXCI6IDYwLFxuXHRcIi4vYWYuanNcIjogNjAsXG5cdFwiLi9hclwiOiA2MSxcblx0XCIuL2FyLWR6XCI6IDYyLFxuXHRcIi4vYXItZHouanNcIjogNjIsXG5cdFwiLi9hci1rd1wiOiA2Myxcblx0XCIuL2FyLWt3LmpzXCI6IDYzLFxuXHRcIi4vYXItbHlcIjogNjQsXG5cdFwiLi9hci1seS5qc1wiOiA2NCxcblx0XCIuL2FyLW1hXCI6IDY1LFxuXHRcIi4vYXItbWEuanNcIjogNjUsXG5cdFwiLi9hci1zYVwiOiA2Nixcblx0XCIuL2FyLXNhLmpzXCI6IDY2LFxuXHRcIi4vYXItdG5cIjogNjcsXG5cdFwiLi9hci10bi5qc1wiOiA2Nyxcblx0XCIuL2FyLmpzXCI6IDYxLFxuXHRcIi4vYXpcIjogNjgsXG5cdFwiLi9hei5qc1wiOiA2OCxcblx0XCIuL2JlXCI6IDY5LFxuXHRcIi4vYmUuanNcIjogNjksXG5cdFwiLi9iZ1wiOiA3MCxcblx0XCIuL2JnLmpzXCI6IDcwLFxuXHRcIi4vYm1cIjogNzEsXG5cdFwiLi9ibS5qc1wiOiA3MSxcblx0XCIuL2JuXCI6IDcyLFxuXHRcIi4vYm4uanNcIjogNzIsXG5cdFwiLi9ib1wiOiA3Myxcblx0XCIuL2JvLmpzXCI6IDczLFxuXHRcIi4vYnJcIjogNzQsXG5cdFwiLi9ici5qc1wiOiA3NCxcblx0XCIuL2JzXCI6IDc1LFxuXHRcIi4vYnMuanNcIjogNzUsXG5cdFwiLi9jYVwiOiA3Nixcblx0XCIuL2NhLmpzXCI6IDc2LFxuXHRcIi4vY3NcIjogNzcsXG5cdFwiLi9jcy5qc1wiOiA3Nyxcblx0XCIuL2N2XCI6IDc4LFxuXHRcIi4vY3YuanNcIjogNzgsXG5cdFwiLi9jeVwiOiA3OSxcblx0XCIuL2N5LmpzXCI6IDc5LFxuXHRcIi4vZGFcIjogODAsXG5cdFwiLi9kYS5qc1wiOiA4MCxcblx0XCIuL2RlXCI6IDgxLFxuXHRcIi4vZGUtYXRcIjogODIsXG5cdFwiLi9kZS1hdC5qc1wiOiA4Mixcblx0XCIuL2RlLWNoXCI6IDgzLFxuXHRcIi4vZGUtY2guanNcIjogODMsXG5cdFwiLi9kZS5qc1wiOiA4MSxcblx0XCIuL2R2XCI6IDg0LFxuXHRcIi4vZHYuanNcIjogODQsXG5cdFwiLi9lbFwiOiA4NSxcblx0XCIuL2VsLmpzXCI6IDg1LFxuXHRcIi4vZW4tU0dcIjogODYsXG5cdFwiLi9lbi1TRy5qc1wiOiA4Nixcblx0XCIuL2VuLWF1XCI6IDg3LFxuXHRcIi4vZW4tYXUuanNcIjogODcsXG5cdFwiLi9lbi1jYVwiOiA4OCxcblx0XCIuL2VuLWNhLmpzXCI6IDg4LFxuXHRcIi4vZW4tZ2JcIjogODksXG5cdFwiLi9lbi1nYi5qc1wiOiA4OSxcblx0XCIuL2VuLWllXCI6IDkwLFxuXHRcIi4vZW4taWUuanNcIjogOTAsXG5cdFwiLi9lbi1pbFwiOiA5MSxcblx0XCIuL2VuLWlsLmpzXCI6IDkxLFxuXHRcIi4vZW4tbnpcIjogOTIsXG5cdFwiLi9lbi1uei5qc1wiOiA5Mixcblx0XCIuL2VvXCI6IDkzLFxuXHRcIi4vZW8uanNcIjogOTMsXG5cdFwiLi9lc1wiOiA5NCxcblx0XCIuL2VzLWRvXCI6IDk1LFxuXHRcIi4vZXMtZG8uanNcIjogOTUsXG5cdFwiLi9lcy11c1wiOiA5Nixcblx0XCIuL2VzLXVzLmpzXCI6IDk2LFxuXHRcIi4vZXMuanNcIjogOTQsXG5cdFwiLi9ldFwiOiA5Nyxcblx0XCIuL2V0LmpzXCI6IDk3LFxuXHRcIi4vZXVcIjogOTgsXG5cdFwiLi9ldS5qc1wiOiA5OCxcblx0XCIuL2ZhXCI6IDk5LFxuXHRcIi4vZmEuanNcIjogOTksXG5cdFwiLi9maVwiOiAxMDAsXG5cdFwiLi9maS5qc1wiOiAxMDAsXG5cdFwiLi9mb1wiOiAxMDEsXG5cdFwiLi9mby5qc1wiOiAxMDEsXG5cdFwiLi9mclwiOiAxMDIsXG5cdFwiLi9mci1jYVwiOiAxMDMsXG5cdFwiLi9mci1jYS5qc1wiOiAxMDMsXG5cdFwiLi9mci1jaFwiOiAxMDQsXG5cdFwiLi9mci1jaC5qc1wiOiAxMDQsXG5cdFwiLi9mci5qc1wiOiAxMDIsXG5cdFwiLi9meVwiOiAxMDUsXG5cdFwiLi9meS5qc1wiOiAxMDUsXG5cdFwiLi9nYVwiOiAxMDYsXG5cdFwiLi9nYS5qc1wiOiAxMDYsXG5cdFwiLi9nZFwiOiAxMDcsXG5cdFwiLi9nZC5qc1wiOiAxMDcsXG5cdFwiLi9nbFwiOiAxMDgsXG5cdFwiLi9nbC5qc1wiOiAxMDgsXG5cdFwiLi9nb20tbGF0blwiOiAxMDksXG5cdFwiLi9nb20tbGF0bi5qc1wiOiAxMDksXG5cdFwiLi9ndVwiOiAxMTAsXG5cdFwiLi9ndS5qc1wiOiAxMTAsXG5cdFwiLi9oZVwiOiAxMTEsXG5cdFwiLi9oZS5qc1wiOiAxMTEsXG5cdFwiLi9oaVwiOiAxMTIsXG5cdFwiLi9oaS5qc1wiOiAxMTIsXG5cdFwiLi9oclwiOiAxMTMsXG5cdFwiLi9oci5qc1wiOiAxMTMsXG5cdFwiLi9odVwiOiAxMTQsXG5cdFwiLi9odS5qc1wiOiAxMTQsXG5cdFwiLi9oeS1hbVwiOiAxMTUsXG5cdFwiLi9oeS1hbS5qc1wiOiAxMTUsXG5cdFwiLi9pZFwiOiAxMTYsXG5cdFwiLi9pZC5qc1wiOiAxMTYsXG5cdFwiLi9pc1wiOiAxMTcsXG5cdFwiLi9pcy5qc1wiOiAxMTcsXG5cdFwiLi9pdFwiOiAxMTgsXG5cdFwiLi9pdC1jaFwiOiAxMTksXG5cdFwiLi9pdC1jaC5qc1wiOiAxMTksXG5cdFwiLi9pdC5qc1wiOiAxMTgsXG5cdFwiLi9qYVwiOiAxMjAsXG5cdFwiLi9qYS5qc1wiOiAxMjAsXG5cdFwiLi9qdlwiOiAxMjEsXG5cdFwiLi9qdi5qc1wiOiAxMjEsXG5cdFwiLi9rYVwiOiAxMjIsXG5cdFwiLi9rYS5qc1wiOiAxMjIsXG5cdFwiLi9ra1wiOiAxMjMsXG5cdFwiLi9ray5qc1wiOiAxMjMsXG5cdFwiLi9rbVwiOiAxMjQsXG5cdFwiLi9rbS5qc1wiOiAxMjQsXG5cdFwiLi9rblwiOiAxMjUsXG5cdFwiLi9rbi5qc1wiOiAxMjUsXG5cdFwiLi9rb1wiOiAxMjYsXG5cdFwiLi9rby5qc1wiOiAxMjYsXG5cdFwiLi9rdVwiOiAxMjcsXG5cdFwiLi9rdS5qc1wiOiAxMjcsXG5cdFwiLi9reVwiOiAxMjgsXG5cdFwiLi9reS5qc1wiOiAxMjgsXG5cdFwiLi9sYlwiOiAxMjksXG5cdFwiLi9sYi5qc1wiOiAxMjksXG5cdFwiLi9sb1wiOiAxMzAsXG5cdFwiLi9sby5qc1wiOiAxMzAsXG5cdFwiLi9sdFwiOiAxMzEsXG5cdFwiLi9sdC5qc1wiOiAxMzEsXG5cdFwiLi9sdlwiOiAxMzIsXG5cdFwiLi9sdi5qc1wiOiAxMzIsXG5cdFwiLi9tZVwiOiAxMzMsXG5cdFwiLi9tZS5qc1wiOiAxMzMsXG5cdFwiLi9taVwiOiAxMzQsXG5cdFwiLi9taS5qc1wiOiAxMzQsXG5cdFwiLi9ta1wiOiAxMzUsXG5cdFwiLi9tay5qc1wiOiAxMzUsXG5cdFwiLi9tbFwiOiAxMzYsXG5cdFwiLi9tbC5qc1wiOiAxMzYsXG5cdFwiLi9tblwiOiAxMzcsXG5cdFwiLi9tbi5qc1wiOiAxMzcsXG5cdFwiLi9tclwiOiAxMzgsXG5cdFwiLi9tci5qc1wiOiAxMzgsXG5cdFwiLi9tc1wiOiAxMzksXG5cdFwiLi9tcy1teVwiOiAxNDAsXG5cdFwiLi9tcy1teS5qc1wiOiAxNDAsXG5cdFwiLi9tcy5qc1wiOiAxMzksXG5cdFwiLi9tdFwiOiAxNDEsXG5cdFwiLi9tdC5qc1wiOiAxNDEsXG5cdFwiLi9teVwiOiAxNDIsXG5cdFwiLi9teS5qc1wiOiAxNDIsXG5cdFwiLi9uYlwiOiAxNDMsXG5cdFwiLi9uYi5qc1wiOiAxNDMsXG5cdFwiLi9uZVwiOiAxNDQsXG5cdFwiLi9uZS5qc1wiOiAxNDQsXG5cdFwiLi9ubFwiOiAxNDUsXG5cdFwiLi9ubC1iZVwiOiAxNDYsXG5cdFwiLi9ubC1iZS5qc1wiOiAxNDYsXG5cdFwiLi9ubC5qc1wiOiAxNDUsXG5cdFwiLi9ublwiOiAxNDcsXG5cdFwiLi9ubi5qc1wiOiAxNDcsXG5cdFwiLi9wYS1pblwiOiAxNDgsXG5cdFwiLi9wYS1pbi5qc1wiOiAxNDgsXG5cdFwiLi9wbFwiOiAxNDksXG5cdFwiLi9wbC5qc1wiOiAxNDksXG5cdFwiLi9wdFwiOiAxNTAsXG5cdFwiLi9wdC1iclwiOiAxNTEsXG5cdFwiLi9wdC1ici5qc1wiOiAxNTEsXG5cdFwiLi9wdC5qc1wiOiAxNTAsXG5cdFwiLi9yb1wiOiAxNTIsXG5cdFwiLi9yby5qc1wiOiAxNTIsXG5cdFwiLi9ydVwiOiAxNTMsXG5cdFwiLi9ydS5qc1wiOiAxNTMsXG5cdFwiLi9zZFwiOiAxNTQsXG5cdFwiLi9zZC5qc1wiOiAxNTQsXG5cdFwiLi9zZVwiOiAxNTUsXG5cdFwiLi9zZS5qc1wiOiAxNTUsXG5cdFwiLi9zaVwiOiAxNTYsXG5cdFwiLi9zaS5qc1wiOiAxNTYsXG5cdFwiLi9za1wiOiAxNTcsXG5cdFwiLi9zay5qc1wiOiAxNTcsXG5cdFwiLi9zbFwiOiAxNTgsXG5cdFwiLi9zbC5qc1wiOiAxNTgsXG5cdFwiLi9zcVwiOiAxNTksXG5cdFwiLi9zcS5qc1wiOiAxNTksXG5cdFwiLi9zclwiOiAxNjAsXG5cdFwiLi9zci1jeXJsXCI6IDE2MSxcblx0XCIuL3NyLWN5cmwuanNcIjogMTYxLFxuXHRcIi4vc3IuanNcIjogMTYwLFxuXHRcIi4vc3NcIjogMTYyLFxuXHRcIi4vc3MuanNcIjogMTYyLFxuXHRcIi4vc3ZcIjogMTYzLFxuXHRcIi4vc3YuanNcIjogMTYzLFxuXHRcIi4vc3dcIjogMTY0LFxuXHRcIi4vc3cuanNcIjogMTY0LFxuXHRcIi4vdGFcIjogMTY1LFxuXHRcIi4vdGEuanNcIjogMTY1LFxuXHRcIi4vdGVcIjogMTY2LFxuXHRcIi4vdGUuanNcIjogMTY2LFxuXHRcIi4vdGV0XCI6IDE2Nyxcblx0XCIuL3RldC5qc1wiOiAxNjcsXG5cdFwiLi90Z1wiOiAxNjgsXG5cdFwiLi90Zy5qc1wiOiAxNjgsXG5cdFwiLi90aFwiOiAxNjksXG5cdFwiLi90aC5qc1wiOiAxNjksXG5cdFwiLi90bC1waFwiOiAxNzAsXG5cdFwiLi90bC1waC5qc1wiOiAxNzAsXG5cdFwiLi90bGhcIjogMTcxLFxuXHRcIi4vdGxoLmpzXCI6IDE3MSxcblx0XCIuL3RyXCI6IDE3Mixcblx0XCIuL3RyLmpzXCI6IDE3Mixcblx0XCIuL3R6bFwiOiAxNzMsXG5cdFwiLi90emwuanNcIjogMTczLFxuXHRcIi4vdHptXCI6IDE3NCxcblx0XCIuL3R6bS1sYXRuXCI6IDE3NSxcblx0XCIuL3R6bS1sYXRuLmpzXCI6IDE3NSxcblx0XCIuL3R6bS5qc1wiOiAxNzQsXG5cdFwiLi91Zy1jblwiOiAxNzYsXG5cdFwiLi91Zy1jbi5qc1wiOiAxNzYsXG5cdFwiLi91a1wiOiAxNzcsXG5cdFwiLi91ay5qc1wiOiAxNzcsXG5cdFwiLi91clwiOiAxNzgsXG5cdFwiLi91ci5qc1wiOiAxNzgsXG5cdFwiLi91elwiOiAxNzksXG5cdFwiLi91ei1sYXRuXCI6IDE4MCxcblx0XCIuL3V6LWxhdG4uanNcIjogMTgwLFxuXHRcIi4vdXouanNcIjogMTc5LFxuXHRcIi4vdmlcIjogMTgxLFxuXHRcIi4vdmkuanNcIjogMTgxLFxuXHRcIi4veC1wc2V1ZG9cIjogMTgyLFxuXHRcIi4veC1wc2V1ZG8uanNcIjogMTgyLFxuXHRcIi4veW9cIjogMTgzLFxuXHRcIi4veW8uanNcIjogMTgzLFxuXHRcIi4vemgtY25cIjogMTg0LFxuXHRcIi4vemgtY24uanNcIjogMTg0LFxuXHRcIi4vemgtaGtcIjogMTg1LFxuXHRcIi4vemgtaGsuanNcIjogMTg1LFxuXHRcIi4vemgtdHdcIjogMTg2LFxuXHRcIi4vemgtdHcuanNcIjogMTg2XG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMjU1OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhbGVuZGFyRGF5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9DYWxlbmRhckRheVtcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FsZW5kYXJNb250aFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ2FsZW5kYXJNb250aFtcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FsZW5kYXJNb250aEdyaWRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0NhbGVuZGFyTW9udGhHcmlkW1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEYXRlUmFuZ2VQaWNrZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0RhdGVSYW5nZVBpY2tlcltcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGF0ZVJhbmdlUGlja2VySW5wdXRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0RhdGVSYW5nZVBpY2tlcklucHV0W1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0RhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlcltcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGF0ZVJhbmdlUGlja2VyU2hhcGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0RhdGVSYW5nZVBpY2tlclNoYXBlW1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEYXlQaWNrZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0RheVBpY2tlcltcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9EYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXJbXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9EYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlcltcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2luZ2xlRGF0ZVBpY2tlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU2luZ2xlRGF0ZVBpY2tlcltcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2luZ2xlRGF0ZVBpY2tlcklucHV0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TaW5nbGVEYXRlUGlja2VySW5wdXRbXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNpbmdsZURhdGVQaWNrZXJTaGFwZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU2luZ2xlRGF0ZVBpY2tlclNoYXBlW1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0luY2x1c2l2ZWx5QWZ0ZXJEYXlcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lzSW5jbHVzaXZlbHlBZnRlckRheVtcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNJbmNsdXNpdmVseUJlZm9yZURheVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaXNJbmNsdXNpdmVseUJlZm9yZURheVtcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNOZXh0RGF5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pc05leHREYXlbXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzU2FtZURheVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0lTT0RhdGVTdHJpbmdcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3RvSVNPRGF0ZVN0cmluZ1tcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9Mb2NhbGl6ZWREYXRlU3RyaW5nXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF90b0xvY2FsaXplZERhdGVTdHJpbmdbXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvTW9tZW50T2JqZWN0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF90b01vbWVudE9iamVjdFtcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuXG52YXIgX0NhbGVuZGFyRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL0NhbGVuZGFyRGF5XCIpKTtcblxudmFyIF9DYWxlbmRhck1vbnRoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL0NhbGVuZGFyTW9udGhcIikpO1xuXG52YXIgX0NhbGVuZGFyTW9udGhHcmlkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL0NhbGVuZGFyTW9udGhHcmlkXCIpKTtcblxudmFyIF9EYXRlUmFuZ2VQaWNrZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvRGF0ZVJhbmdlUGlja2VyXCIpKTtcblxudmFyIF9EYXRlUmFuZ2VQaWNrZXJJbnB1dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tcG9uZW50cy9EYXRlUmFuZ2VQaWNrZXJJbnB1dFwiKSk7XG5cbnZhciBfRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL0RhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlclwiKSk7XG5cbnZhciBfRGF0ZVJhbmdlUGlja2VyU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NoYXBlcy9EYXRlUmFuZ2VQaWNrZXJTaGFwZVwiKSk7XG5cbnZhciBfRGF5UGlja2VyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL0RheVBpY2tlclwiKSk7XG5cbnZhciBfRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL0RheVBpY2tlclJhbmdlQ29udHJvbGxlclwiKSk7XG5cbnZhciBfRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXJcIikpO1xuXG52YXIgX1NpbmdsZURhdGVQaWNrZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvU2luZ2xlRGF0ZVBpY2tlclwiKSk7XG5cbnZhciBfU2luZ2xlRGF0ZVBpY2tlcklucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL1NpbmdsZURhdGVQaWNrZXJJbnB1dFwiKSk7XG5cbnZhciBfU2luZ2xlRGF0ZVBpY2tlclNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zaGFwZXMvU2luZ2xlRGF0ZVBpY2tlclNoYXBlXCIpKTtcblxudmFyIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2lzSW5jbHVzaXZlbHlBZnRlckRheVwiKSk7XG5cbnZhciBfaXNJbmNsdXNpdmVseUJlZm9yZURheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvaXNJbmNsdXNpdmVseUJlZm9yZURheVwiKSk7XG5cbnZhciBfaXNOZXh0RGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9pc05leHREYXlcIikpO1xuXG52YXIgX2lzU2FtZURheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvaXNTYW1lRGF5XCIpKTtcblxudmFyIF90b0lTT0RhdGVTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL3RvSVNPRGF0ZVN0cmluZ1wiKSk7XG5cbnZhciBfdG9Mb2NhbGl6ZWREYXRlU3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy90b0xvY2FsaXplZERhdGVTdHJpbmdcIikpO1xuXG52YXIgX3RvTW9tZW50T2JqZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy90b01vbWVudE9iamVjdFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1vYmplY3QuaXMgKi9cblxudmFyIE51bWJlcklzTmFOID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzKGEsIGIpIHtcblx0aWYgKGEgPT09IDAgJiYgYiA9PT0gMCkge1xuXHRcdHJldHVybiAxIC8gYSA9PT0gMSAvIGI7XG5cdH0gZWxzZSBpZiAoYSA9PT0gYikge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGVsc2UgaWYgKE51bWJlcklzTmFOKGEpICYmIE51bWJlcklzTmFOKGIpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAxICovXG5cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgJztcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZnVuY1R5cGUgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQodGhhdCkge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nIHx8IHRvU3RyLmNhbGwodGFyZ2V0KSAhPT0gZnVuY1R5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJPUl9NRVNTQUdFICsgdGFyZ2V0KTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICB2YXIgYm91bmQ7XG4gICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBib3VuZExlbmd0aCA9IE1hdGgubWF4KDAsIHRhcmdldC5sZW5ndGggLSBhcmdzLmxlbmd0aCk7XG4gICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICBib3VuZEFyZ3MucHVzaCgnJCcgKyBpKTtcbiAgICB9XG5cbiAgICBib3VuZCA9IEZ1bmN0aW9uKCdiaW5kZXInLCAncmV0dXJuIGZ1bmN0aW9uICgnICsgYm91bmRBcmdzLmpvaW4oJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTsgfScpKGJpbmRlcik7XG5cbiAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICBib3VuZC5wcm90b3R5cGUgPSBuZXcgRW1wdHkoKTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmQ7XG59O1xuIiwidmFyIG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuXG5mdW5jdGlvbiBpc1ZhbGlkTW9tZW50KHRlc3RNb21lbnQpIHtcbiAgaWYgKHR5cGVvZiBtb21lbnQuaXNNb21lbnQgPT09ICdmdW5jdGlvbicgJiYgIW1vbWVudC5pc01vbWVudCh0ZXN0TW9tZW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICAqL1xuICBpZiAodHlwZW9mIHRlc3RNb21lbnQuaXNWYWxpZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIG1vbWVudCAxLjcuMCtcbiAgICByZXR1cm4gdGVzdE1vbWVudC5pc1ZhbGlkKCk7XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gIWlzTmFOKHRlc3RNb21lbnQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNWYWxpZE1vbWVudCA6IGlzVmFsaWRNb21lbnQsXG59O1xuIiwidmFyIG1lc3NhZ2VzID0ge1xuICBpbnZhbGlkUHJlZGljYXRlOiAnYHByZWRpY2F0ZWAgbXVzdCBiZSBhIGZ1bmN0aW9uJyxcbiAgaW52YWxpZFByb3BWYWxpZGF0b3I6ICdgcHJvcFZhbGlkYXRvcmAgbXVzdCBiZSBhIGZ1bmN0aW9uJyxcbiAgcmVxdWlyZWRDb3JlOiAnaXMgbWFya2VkIGFzIHJlcXVpcmVkJyxcbiAgaW52YWxpZFR5cGVDb3JlOiAnSW52YWxpZCBpbnB1dCB0eXBlJyxcbiAgcHJlZGljYXRlRmFpbHVyZUNvcmU6ICdGYWlsZWQgdG8gc3VjY2VlZCB3aXRoIHByZWRpY2F0ZScsXG4gIGFub255bW91c01lc3NhZ2U6ICc8PGFub255bW91cz4+JyxcbiAgYmFzZUludmFsaWRNZXNzYWdlOiAnSW52YWxpZCAnLFxufTtcblxuZnVuY3Rpb24gY29uc3RydWN0UHJvcFZhbGlkYXRvclZhcmlhdGlvbnMocHJvcFZhbGlkYXRvcikge1xuICBpZiAodHlwZW9mIHByb3BWYWxpZGF0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXMuaW52YWxpZFByb3BWYWxpZGF0b3IpO1xuICB9XG5cbiAgdmFyIHJlcXVpcmVkUHJvcFZhbGlkYXRvciA9IHByb3BWYWxpZGF0b3IuYmluZChudWxsLCBmYWxzZSwgbnVsbCk7XG4gIHJlcXVpcmVkUHJvcFZhbGlkYXRvci5pc1JlcXVpcmVkID0gcHJvcFZhbGlkYXRvci5iaW5kKG51bGwsIHRydWUsIG51bGwpO1xuXG4gIHJlcXVpcmVkUHJvcFZhbGlkYXRvci53aXRoUHJlZGljYXRlID0gZnVuY3Rpb24gcHJlZGljYXRlQXBwbGljYXRpb24ocHJlZGljYXRlKSB7XG4gICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlcy5pbnZhbGlkUHJlZGljYXRlKTtcbiAgICB9XG4gICAgdmFyIGJhc2VQcm9wVmFsaWRhdG9yID0gcHJvcFZhbGlkYXRvci5iaW5kKG51bGwsIGZhbHNlLCBwcmVkaWNhdGUpO1xuICAgIGJhc2VQcm9wVmFsaWRhdG9yLmlzUmVxdWlyZWQgPSBwcm9wVmFsaWRhdG9yLmJpbmQobnVsbCwgdHJ1ZSwgcHJlZGljYXRlKTtcbiAgICByZXR1cm4gYmFzZVByb3BWYWxpZGF0b3I7XG4gIH07XG5cbiAgcmV0dXJuIHJlcXVpcmVkUHJvcFZhbGlkYXRvcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSW52YWxpZFJlcXVpcmVkRXJyb3JNZXNzYWdlKHByb3BOYW1lLCBjb21wb25lbnROYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gbmV3IEVycm9yKFxuICAgICdUaGUgcHJvcCBgJyArIHByb3BOYW1lICsgJ2AgJyArIG1lc3NhZ2VzLnJlcXVpcmVkQ29yZSArXG4gICAgJyBpbiBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgYnV0IGl0cyB2YWx1ZSBpcyBgJyArIHZhbHVlICsgJ2AuJ1xuICApO1xufVxuXG52YXIgaW5kZXBlbmRlbnRHdWFyZGlhblZhbHVlID0gLTE7XG5cbmZ1bmN0aW9uIHByZVZhbGlkYXRpb25SZXF1aXJlQ2hlY2soaXNSZXF1aXJlZCwgY29tcG9uZW50TmFtZSwgcHJvcEZ1bGxOYW1lLCBwcm9wVmFsdWUpIHtcbiAgdmFyIGlzUHJvcFZhbHVlVW5kZWZpbmVkID0gdHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBpc1Byb3BWYWx1ZU51bGwgPSBwcm9wVmFsdWUgPT09IG51bGw7XG5cbiAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICBpZiAoaXNQcm9wVmFsdWVVbmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkUmVxdWlyZWRFcnJvck1lc3NhZ2UocHJvcEZ1bGxOYW1lLCBjb21wb25lbnROYW1lLCAndW5kZWZpbmVkJyk7XG4gICAgfSBlbHNlIGlmIChpc1Byb3BWYWx1ZU51bGwpIHtcbiAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkUmVxdWlyZWRFcnJvck1lc3NhZ2UocHJvcEZ1bGxOYW1lLCBjb21wb25lbnROYW1lLCAnbnVsbCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc1Byb3BWYWx1ZVVuZGVmaW5lZCB8fCBpc1Byb3BWYWx1ZU51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBpbmRlcGVuZGVudEd1YXJkaWFuVmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1vbWVudENoZWNrZXIodHlwZSwgdHlwZVZhbGlkYXRvciwgdmFsaWRhdG9yLCBtb21lbnRUeXBlKSB7XG5cbiAgZnVuY3Rpb24gcHJvcFZhbGlkYXRvcihcbiAgICBpc1JlcXVpcmVkLCAvLyBCb3VuZCBwYXJhbWV0ZXIgdG8gaW5kaWNhdGUgd2l0aCB0aGUgcHJvcFR5cGUgaXMgcmVxdWlyZWRcbiAgICBwcmVkaWNhdGUsIC8vIEJvdW5kIHBhcmFtZXRlciB0byBhbGxvdyB1c2VyIHRvIGFkZCBkeW5hbWljIHZhbGlkYXRpb25cbiAgICBwcm9wcyxcbiAgICBwcm9wTmFtZSxcbiAgICBjb21wb25lbnROYW1lLFxuICAgIGxvY2F0aW9uLFxuICAgIHByb3BGdWxsTmFtZVxuICApIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbIHByb3BOYW1lIF07XG4gICAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcblxuICAgIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IG1lc3NhZ2VzLmFub255bW91c01lc3NhZ2U7XG4gICAgcHJvcEZ1bGxOYW1lID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgdmFyIHByZVZhbGlkYXRpb25SZXF1aXJlQ2hlY2tWYWx1ZSA9IHByZVZhbGlkYXRpb25SZXF1aXJlQ2hlY2soXG4gICAgICBpc1JlcXVpcmVkLCBjb21wb25lbnROYW1lLCBwcm9wRnVsbE5hbWUsIHByb3BWYWx1ZVxuICAgICk7XG5cbiAgICBpZiAocHJlVmFsaWRhdGlvblJlcXVpcmVDaGVja1ZhbHVlICE9PSBpbmRlcGVuZGVudEd1YXJkaWFuVmFsdWUpIHtcbiAgICAgIHJldHVybiBwcmVWYWxpZGF0aW9uUmVxdWlyZUNoZWNrVmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVWYWxpZGF0b3IgJiYgIXR5cGVWYWxpZGF0b3IocHJvcFZhbHVlKSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgbWVzc2FnZXMuaW52YWxpZFR5cGVDb3JlICsgJzogYCcgKyBwcm9wTmFtZSArICdgIG9mIHR5cGUgYCcgKyBwcm9wVHlwZSArICdgICcgK1xuICAgICAgICAnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGAnICsgdHlwZSArICdgLidcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCF2YWxpZGF0b3IocHJvcFZhbHVlKSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgbWVzc2FnZXMuYmFzZUludmFsaWRNZXNzYWdlICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICtcbiAgICAgICAgJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBgJyArIG1vbWVudFR5cGUgKyAnYC4nXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChwcmVkaWNhdGUgJiYgIXByZWRpY2F0ZShwcm9wVmFsdWUpKSB7XG4gICAgICB2YXIgcHJlZGljYXRlTmFtZSA9IHByZWRpY2F0ZS5uYW1lIHx8IG1lc3NhZ2VzLmFub255bW91c01lc3NhZ2U7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICBtZXNzYWdlcy5iYXNlSW52YWxpZE1lc3NhZ2UgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wTmFtZSArICdgIG9mIHR5cGUgYCcgKyBwcm9wVHlwZSArICdgICcgK1xuICAgICAgICAnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AuICcgKyBtZXNzYWdlcy5wcmVkaWNhdGVGYWlsdXJlQ29yZSArICcgYCcgK1xuICAgICAgICBwcmVkaWNhdGVOYW1lICsgJ2AuJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcblxuICB9XG5cbiAgcmV0dXJuIGNvbnN0cnVjdFByb3BWYWxpZGF0b3JWYXJpYXRpb25zKHByb3BWYWxpZGF0b3IpO1xuXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjb25zdHJ1Y3RQcm9wVmFsaWRhdG9yVmFyaWF0aW9uczogY29uc3RydWN0UHJvcFZhbGlkYXRvclZhcmlhdGlvbnMsXG4gIGNyZWF0ZU1vbWVudENoZWNrZXI6IGNyZWF0ZU1vbWVudENoZWNrZXIsXG4gIG1lc3NhZ2VzOiBtZXNzYWdlcyxcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gbm9vcCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbm5vb3AuaXNSZXF1aXJlZCA9IG5vb3A7XG5cbmZ1bmN0aW9uIG5vb3BUaHVuaygpIHtcbiAgcmV0dXJuIG5vb3A7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhbmQ6IG5vb3BUaHVuayxcbiAgYmV0d2Vlbjogbm9vcFRodW5rLFxuICBib29sZWFuU29tZTogbm9vcFRodW5rLFxuICBjaGlsZHJlbkhhdmVQcm9wWG9yQ2hpbGRyZW46IG5vb3BUaHVuayxcbiAgY2hpbGRyZW5PZjogbm9vcFRodW5rLFxuICBjaGlsZHJlbk9mVHlwZTogbm9vcFRodW5rLFxuICBjaGlsZHJlblNlcXVlbmNlT2Y6IG5vb3BUaHVuayxcbiAgY29tcG9uZW50V2l0aE5hbWU6IG5vb3BUaHVuayxcbiAgZGlzYWxsb3dlZElmOiBub29wVGh1bmssXG4gIGVsZW1lbnRUeXBlOiBub29wVGh1bmssXG4gIGVtcHR5OiBub29wVGh1bmssXG4gIGV4cGxpY2l0TnVsbDogbm9vcFRodW5rLFxuICBmb3JiaWRFeHRyYVByb3BzOiBPYmplY3QsXG4gIGludGVnZXI6IG5vb3BUaHVuayxcbiAga2V5c09mOiBub29wVGh1bmssXG4gIG11dHVhbGx5RXhjbHVzaXZlUHJvcHM6IG5vb3BUaHVuayxcbiAgbXV0dWFsbHlFeGNsdXNpdmVUcnVlUHJvcHM6IG5vb3BUaHVuayxcbiAgbkNoaWxkcmVuOiBub29wVGh1bmssXG4gIG5vbk5lZ2F0aXZlSW50ZWdlcjogbm9vcCxcbiAgbm9uTmVnYXRpdmVOdW1iZXI6IG5vb3BUaHVuayxcbiAgbnVtZXJpY1N0cmluZzogbm9vcFRodW5rLFxuICBvYmplY3Q6IG5vb3BUaHVuayxcbiAgb3I6IG5vb3BUaHVuayxcbiAgcmFuZ2U6IG5vb3BUaHVuayxcbiAgcmVmOiBub29wVGh1bmssXG4gIHJlcXVpcmVkQnk6IG5vb3BUaHVuayxcbiAgcmVzdHJpY3RlZFByb3A6IG5vb3BUaHVuayxcbiAgc2VxdWVuY2VPZjogbm9vcFRodW5rLFxuICBzaGFwZTogbm9vcFRodW5rLFxuICBzdHJpbmdFbmRzV2l0aDogbm9vcFRodW5rLFxuICBzdHJpbmdTdGFydHNXaXRoOiBub29wVGh1bmssXG4gIHVuaXF1ZUFycmF5OiBub29wVGh1bmssXG4gIHVuaXF1ZUFycmF5T2Y6IG5vb3BUaHVuayxcbiAgdmFsdWVzT2Y6IG5vb3BUaHVuayxcbiAgd2l0aFNoYXBlOiBub29wVGh1bmtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblxuZGVmaW5lUHJvcGVydGllcyhwb2x5ZmlsbCwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcG9seWZpbGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzU2hpbTtcbmlmICghT2JqZWN0LmtleXMpIHtcblx0Ly8gbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cblx0dmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cdHZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cdHZhciBpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ2xvYmFsLXJlcXVpcmVcblx0dmFyIGlzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cdHZhciBoYXNEb250RW51bUJ1ZyA9ICFpc0VudW1lcmFibGUuY2FsbCh7IHRvU3RyaW5nOiBudWxsIH0sICd0b1N0cmluZycpO1xuXHR2YXIgaGFzUHJvdG9FbnVtQnVnID0gaXNFbnVtZXJhYmxlLmNhbGwoZnVuY3Rpb24gKCkge30sICdwcm90b3R5cGUnKTtcblx0dmFyIGRvbnRFbnVtcyA9IFtcblx0XHQndG9TdHJpbmcnLFxuXHRcdCd0b0xvY2FsZVN0cmluZycsXG5cdFx0J3ZhbHVlT2YnLFxuXHRcdCdoYXNPd25Qcm9wZXJ0eScsXG5cdFx0J2lzUHJvdG90eXBlT2YnLFxuXHRcdCdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG5cdFx0J2NvbnN0cnVjdG9yJ1xuXHRdO1xuXHR2YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUgPSBmdW5jdGlvbiAobykge1xuXHRcdHZhciBjdG9yID0gby5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gY3RvciAmJiBjdG9yLnByb3RvdHlwZSA9PT0gbztcblx0fTtcblx0dmFyIGV4Y2x1ZGVkS2V5cyA9IHtcblx0XHQkYXBwbGljYXRpb25DYWNoZTogdHJ1ZSxcblx0XHQkY29uc29sZTogdHJ1ZSxcblx0XHQkZXh0ZXJuYWw6IHRydWUsXG5cdFx0JGZyYW1lOiB0cnVlLFxuXHRcdCRmcmFtZUVsZW1lbnQ6IHRydWUsXG5cdFx0JGZyYW1lczogdHJ1ZSxcblx0XHQkaW5uZXJIZWlnaHQ6IHRydWUsXG5cdFx0JGlubmVyV2lkdGg6IHRydWUsXG5cdFx0JG9ubW96ZnVsbHNjcmVlbmNoYW5nZTogdHJ1ZSxcblx0XHQkb25tb3pmdWxsc2NyZWVuZXJyb3I6IHRydWUsXG5cdFx0JG91dGVySGVpZ2h0OiB0cnVlLFxuXHRcdCRvdXRlcldpZHRoOiB0cnVlLFxuXHRcdCRwYWdlWE9mZnNldDogdHJ1ZSxcblx0XHQkcGFnZVlPZmZzZXQ6IHRydWUsXG5cdFx0JHBhcmVudDogdHJ1ZSxcblx0XHQkc2Nyb2xsTGVmdDogdHJ1ZSxcblx0XHQkc2Nyb2xsVG9wOiB0cnVlLFxuXHRcdCRzY3JvbGxYOiB0cnVlLFxuXHRcdCRzY3JvbGxZOiB0cnVlLFxuXHRcdCRzZWxmOiB0cnVlLFxuXHRcdCR3ZWJraXRJbmRleGVkREI6IHRydWUsXG5cdFx0JHdlYmtpdFN0b3JhZ2VJbmZvOiB0cnVlLFxuXHRcdCR3aW5kb3c6IHRydWVcblx0fTtcblx0dmFyIGhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1ZyA9IChmdW5jdGlvbiAoKSB7XG5cdFx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRmb3IgKHZhciBrIGluIHdpbmRvdykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0aWYgKCFleGNsdWRlZEtleXNbJyQnICsga10gJiYgaGFzLmNhbGwod2luZG93LCBrKSAmJiB3aW5kb3dba10gIT09IG51bGwgJiYgdHlwZW9mIHdpbmRvd1trXSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0ZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUod2luZG93W2tdKTtcblx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSgpKTtcblx0dmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSA9IGZ1bmN0aW9uIChvKSB7XG5cdFx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnKSB7XG5cdFx0XHRyZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUobyk7XG5cdFx0fVxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUobyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fTtcblxuXHRrZXlzU2hpbSA9IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG5cdFx0dmFyIGlzT2JqZWN0ID0gb2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnO1xuXHRcdHZhciBpc0Z1bmN0aW9uID0gdG9TdHIuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHRcdHZhciBpc0FyZ3VtZW50cyA9IGlzQXJncyhvYmplY3QpO1xuXHRcdHZhciBpc1N0cmluZyA9IGlzT2JqZWN0ICYmIHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cdFx0dmFyIHRoZUtleXMgPSBbXTtcblxuXHRcdGlmICghaXNPYmplY3QgJiYgIWlzRnVuY3Rpb24gJiYgIWlzQXJndW1lbnRzKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gYSBub24tb2JqZWN0Jyk7XG5cdFx0fVxuXG5cdFx0dmFyIHNraXBQcm90byA9IGhhc1Byb3RvRW51bUJ1ZyAmJiBpc0Z1bmN0aW9uO1xuXHRcdGlmIChpc1N0cmluZyAmJiBvYmplY3QubGVuZ3RoID4gMCAmJiAhaGFzLmNhbGwob2JqZWN0LCAwKSkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3QubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhpKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGlzQXJndW1lbnRzICYmIG9iamVjdC5sZW5ndGggPiAwKSB7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG9iamVjdC5sZW5ndGg7ICsraikge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKGopKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcblx0XHRcdFx0aWYgKCEoc2tpcFByb3RvICYmIG5hbWUgPT09ICdwcm90b3R5cGUnKSAmJiBoYXMuY2FsbChvYmplY3QsIG5hbWUpKSB7XG5cdFx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhuYW1lKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaGFzRG9udEVudW1CdWcpIHtcblx0XHRcdHZhciBza2lwQ29uc3RydWN0b3IgPSBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kob2JqZWN0KTtcblxuXHRcdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBkb250RW51bXMubGVuZ3RoOyArK2spIHtcblx0XHRcdFx0aWYgKCEoc2tpcENvbnN0cnVjdG9yICYmIGRvbnRFbnVtc1trXSA9PT0gJ2NvbnN0cnVjdG9yJykgJiYgaGFzLmNhbGwob2JqZWN0LCBkb250RW51bXNba10pKSB7XG5cdFx0XHRcdFx0dGhlS2V5cy5wdXNoKGRvbnRFbnVtc1trXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRoZUtleXM7XG5cdH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltQXNzaWduKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoXG5cdFx0T2JqZWN0LFxuXHRcdHsgYXNzaWduOiBwb2x5ZmlsbCB9LFxuXHRcdHsgYXNzaWduOiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYmplY3QuYXNzaWduICE9PSBwb2x5ZmlsbDsgfSB9XG5cdCk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgQ0hBTk5FTCA9IGV4cG9ydHMuQ0hBTk5FTCA9ICdfX2RpcmVjdGlvbl9fJztcblxudmFyIERJUkVDVElPTlMgPSBleHBvcnRzLkRJUkVDVElPTlMgPSB7XG4gIExUUjogJ2x0cicsXG4gIFJUTDogJ3J0bCdcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnNoYXBlKHtcbiAgZ2V0U3RhdGU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgc2V0U3RhdGU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgc3Vic2NyaWJlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmNcbn0pOyIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi4yXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBnZXROYW5vU2Vjb25kcywgaHJ0aW1lLCBsb2FkVGltZSwgbW9kdWxlTG9hZFRpbWUsIG5vZGVMb2FkVGltZSwgdXBUaW1lO1xuXG4gIGlmICgodHlwZW9mIHBlcmZvcm1hbmNlICE9PSBcInVuZGVmaW5lZFwiICYmIHBlcmZvcm1hbmNlICE9PSBudWxsKSAmJiBwZXJmb3JtYW5jZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MgIT09IG51bGwpICYmIHByb2Nlc3MuaHJ0aW1lKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoZ2V0TmFub1NlY29uZHMoKSAtIG5vZGVMb2FkVGltZSkgLyAxZTY7XG4gICAgfTtcbiAgICBocnRpbWUgPSBwcm9jZXNzLmhydGltZTtcbiAgICBnZXROYW5vU2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhyO1xuICAgICAgaHIgPSBocnRpbWUoKTtcbiAgICAgIHJldHVybiBoclswXSAqIDFlOSArIGhyWzFdO1xuICAgIH07XG4gICAgbW9kdWxlTG9hZFRpbWUgPSBnZXROYW5vU2Vjb25kcygpO1xuICAgIHVwVGltZSA9IHByb2Nlc3MudXB0aW1lKCkgKiAxZTk7XG4gICAgbm9kZUxvYWRUaW1lID0gbW9kdWxlTG9hZFRpbWUgLSB1cFRpbWU7XG4gIH0gZWxzZSBpZiAoRGF0ZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIERhdGUubm93KCkgLSBsb2FkVGltZTtcbiAgICB9O1xuICAgIGxvYWRUaW1lID0gRGF0ZS5ub3coKTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gbG9hZFRpbWU7XG4gICAgfTtcbiAgICBsb2FkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlcmZvcm1hbmNlLW5vdy5qcy5tYXBcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZ2V0UGhyYXNlO1xuXG5mdW5jdGlvbiBnZXRQaHJhc2UocGhyYXNlLCBhcmdzKSB7XG4gIGlmICh0eXBlb2YgcGhyYXNlID09PSAnc3RyaW5nJykgcmV0dXJuIHBocmFzZTtcblxuICBpZiAodHlwZW9mIHBocmFzZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBwaHJhc2UoYXJncyk7XG4gIH1cblxuICByZXR1cm4gJyc7XG59IiwiZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycjJbaV0gPSBhcnJbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjI7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRob3V0SG9sZXM7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVTcHJlYWQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBDYWxlbmRhcldlZWs7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG52YXIgX0NhbGVuZGFyRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYWxlbmRhckRheVwiKSk7XG5cbnZhciBfQ3VzdG9taXphYmxlQ2FsZW5kYXJEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0N1c3RvbWl6YWJsZUNhbGVuZGFyRGF5XCIpKTtcblxudmFyIHByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKHtcbiAgY2hpbGRyZW46ICgwLCBfYWlyYm5iUHJvcFR5cGVzLm9yKShbKDAsIF9haXJibmJQcm9wVHlwZXMuY2hpbGRyZW5PZlR5cGUpKF9DYWxlbmRhckRheVtcImRlZmF1bHRcIl0pLCAoMCwgX2FpcmJuYlByb3BUeXBlcy5jaGlsZHJlbk9mVHlwZSkoX0N1c3RvbWl6YWJsZUNhbGVuZGFyRGF5W1wiZGVmYXVsdFwiXSldKS5pc1JlcXVpcmVkXG59KSA6IHt9O1xuXG5mdW5jdGlvbiBDYWxlbmRhcldlZWsoX3JlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwidHJcIiwgbnVsbCwgY2hpbGRyZW4pO1xufVxuXG5DYWxlbmRhcldlZWsucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBleHBvcnRzLlB1cmVDdXN0b21pemFibGVDYWxlbmRhckRheSA9IGV4cG9ydHMuc2VsZWN0ZWRTdHlsZXMgPSBleHBvcnRzLmxhc3RJblJhbmdlU3R5bGVzID0gZXhwb3J0cy5zZWxlY3RlZFNwYW5TdHlsZXMgPSBleHBvcnRzLmhvdmVyZWRTcGFuU3R5bGVzID0gZXhwb3J0cy5ibG9ja2VkT3V0T2ZSYW5nZVN0eWxlcyA9IGV4cG9ydHMuYmxvY2tlZENhbGVuZGFyU3R5bGVzID0gZXhwb3J0cy5ibG9ja2VkTWluTmlnaHRzU3R5bGVzID0gZXhwb3J0cy5oaWdobGlnaHRlZENhbGVuZGFyU3R5bGVzID0gZXhwb3J0cy5vdXRzaWRlU3R5bGVzID0gZXhwb3J0cy5kZWZhdWx0U3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2VuenltZVNoYWxsb3dFcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImVuenltZS1zaGFsbG93LWVxdWFsXCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdE1vbWVudFByb3B0eXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LW1vbWVudC1wcm9wdHlwZXNcIikpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxudmFyIF9yZWFjdFdpdGhTdHlsZXMgPSByZXF1aXJlKFwicmVhY3Qtd2l0aC1zdHlsZXNcIik7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF9yYWYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYWZcIikpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKSk7XG5cbnZhciBfZ2V0Q2FsZW5kYXJEYXlTZXR0aW5ncyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldENhbGVuZGFyRGF5U2V0dGluZ3NcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbnZhciBfRGVmYXVsdFRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdGhlbWUvRGVmYXVsdFRoZW1lXCIpKTtcblxudmFyIGNvbG9yID0gX0RlZmF1bHRUaGVtZVtcImRlZmF1bHRcIl0ucmVhY3REYXRlcy5jb2xvcjtcblxuZnVuY3Rpb24gZ2V0U3R5bGVzKHN0eWxlc09iaiwgaXNIb3ZlcmVkKSB7XG4gIGlmICghc3R5bGVzT2JqKSByZXR1cm4gbnVsbDtcbiAgdmFyIGhvdmVyID0gc3R5bGVzT2JqLmhvdmVyO1xuXG4gIGlmIChpc0hvdmVyZWQgJiYgaG92ZXIpIHtcbiAgICByZXR1cm4gaG92ZXI7XG4gIH1cblxuICByZXR1cm4gc3R5bGVzT2JqO1xufVxuXG52YXIgRGF5U3R5bGVTaGFwZSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlKHtcbiAgYmFja2dyb3VuZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBib3JkZXI6ICgwLCBfYWlyYm5iUHJvcFR5cGVzLm9yKShbX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLCBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXJdKSxcbiAgY29sb3I6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgaG92ZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlKHtcbiAgICBiYWNrZ3JvdW5kOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gICAgYm9yZGVyOiAoMCwgX2FpcmJuYlByb3BUeXBlcy5vcikoW19wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZywgX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyXSksXG4gICAgY29sb3I6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZ1xuICB9KVxufSkgOiB7fTtcbnZhciBwcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKSgoMCwgX29iamVjdFNwcmVhZDNbXCJkZWZhdWx0XCJdKSh7fSwgX3JlYWN0V2l0aFN0eWxlcy53aXRoU3R5bGVzUHJvcFR5cGVzLCB7XG4gIGRheTogX3JlYWN0TW9tZW50UHJvcHR5cGVzW1wiZGVmYXVsdFwiXS5tb21lbnRPYmosXG4gIGRheVNpemU6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBpc091dHNpZGVEYXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG1vZGlmaWVyczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uaW5zdGFuY2VPZihTZXQpLFxuICBpc0ZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHRhYkluZGV4OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZihbMCwgLTFdKSxcbiAgb25EYXlDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25EYXlNb3VzZUVudGVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkRheU1vdXNlTGVhdmU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlckRheUNvbnRlbnRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBhcmlhTGFiZWxGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgLy8gc3R5bGUgb3ZlcnJpZGVzXG4gIGRlZmF1bHRTdHlsZXM6IERheVN0eWxlU2hhcGUsXG4gIG91dHNpZGVTdHlsZXM6IERheVN0eWxlU2hhcGUsXG4gIHRvZGF5U3R5bGVzOiBEYXlTdHlsZVNoYXBlLFxuICBmaXJzdERheU9mV2Vla1N0eWxlczogRGF5U3R5bGVTaGFwZSxcbiAgbGFzdERheU9mV2Vla1N0eWxlczogRGF5U3R5bGVTaGFwZSxcbiAgaGlnaGxpZ2h0ZWRDYWxlbmRhclN0eWxlczogRGF5U3R5bGVTaGFwZSxcbiAgYmxvY2tlZE1pbk5pZ2h0c1N0eWxlczogRGF5U3R5bGVTaGFwZSxcbiAgYmxvY2tlZENhbGVuZGFyU3R5bGVzOiBEYXlTdHlsZVNoYXBlLFxuICBibG9ja2VkT3V0T2ZSYW5nZVN0eWxlczogRGF5U3R5bGVTaGFwZSxcbiAgaG92ZXJlZFNwYW5TdHlsZXM6IERheVN0eWxlU2hhcGUsXG4gIHNlbGVjdGVkU3BhblN0eWxlczogRGF5U3R5bGVTaGFwZSxcbiAgbGFzdEluUmFuZ2VTdHlsZXM6IERheVN0eWxlU2hhcGUsXG4gIHNlbGVjdGVkU3R5bGVzOiBEYXlTdHlsZVNoYXBlLFxuICBzZWxlY3RlZFN0YXJ0U3R5bGVzOiBEYXlTdHlsZVNoYXBlLFxuICBzZWxlY3RlZEVuZFN0eWxlczogRGF5U3R5bGVTaGFwZSxcbiAgYWZ0ZXJIb3ZlcmVkU3RhcnRTdHlsZXM6IERheVN0eWxlU2hhcGUsXG4gIGhvdmVyZWRTdGFydEZpcnN0UG9zc2libGVFbmRTdHlsZXM6IERheVN0eWxlU2hhcGUsXG4gIGhvdmVyZWRTdGFydEJsb2NrZWRNaW5OaWdodHNTdHlsZXM6IERheVN0eWxlU2hhcGUsXG4gIC8vIGludGVybmF0aW9uYWxpemF0aW9uXG4gIHBocmFzZXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzW1wiZGVmYXVsdFwiXSkoX2RlZmF1bHRQaHJhc2VzLkNhbGVuZGFyRGF5UGhyYXNlcykpXG59KSkgOiB7fTtcbnZhciBkZWZhdWx0U3R5bGVzID0ge1xuICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5jb3JlLmJvcmRlckxpZ2h0KSxcbiAgY29sb3I6IGNvbG9yLnRleHQsXG4gIGJhY2tncm91bmQ6IGNvbG9yLmJhY2tncm91bmQsXG4gIGhvdmVyOiB7XG4gICAgYmFja2dyb3VuZDogY29sb3IuY29yZS5ib3JkZXJMaWdodCxcbiAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5jb3JlLmJvcmRlckxpZ2h0KSxcbiAgICBjb2xvcjogJ2luaGVyaXQnXG4gIH1cbn07XG5leHBvcnRzLmRlZmF1bHRTdHlsZXMgPSBkZWZhdWx0U3R5bGVzO1xudmFyIG91dHNpZGVTdHlsZXMgPSB7XG4gIGJhY2tncm91bmQ6IGNvbG9yLm91dHNpZGUuYmFja2dyb3VuZENvbG9yLFxuICBib3JkZXI6IDAsXG4gIGNvbG9yOiBjb2xvci5vdXRzaWRlLmNvbG9yXG59O1xuZXhwb3J0cy5vdXRzaWRlU3R5bGVzID0gb3V0c2lkZVN0eWxlcztcbnZhciBoaWdobGlnaHRlZENhbGVuZGFyU3R5bGVzID0ge1xuICBiYWNrZ3JvdW5kOiBjb2xvci5oaWdobGlnaHRlZC5iYWNrZ3JvdW5kQ29sb3IsXG4gIGNvbG9yOiBjb2xvci5oaWdobGlnaHRlZC5jb2xvcixcbiAgaG92ZXI6IHtcbiAgICBiYWNrZ3JvdW5kOiBjb2xvci5oaWdobGlnaHRlZC5iYWNrZ3JvdW5kQ29sb3JfaG92ZXIsXG4gICAgY29sb3I6IGNvbG9yLmhpZ2hsaWdodGVkLmNvbG9yX2FjdGl2ZVxuICB9XG59O1xuZXhwb3J0cy5oaWdobGlnaHRlZENhbGVuZGFyU3R5bGVzID0gaGlnaGxpZ2h0ZWRDYWxlbmRhclN0eWxlcztcbnZhciBibG9ja2VkTWluTmlnaHRzU3R5bGVzID0ge1xuICBiYWNrZ3JvdW5kOiBjb2xvci5taW5pbXVtTmlnaHRzLmJhY2tncm91bmRDb2xvcixcbiAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoY29sb3IubWluaW11bU5pZ2h0cy5ib3JkZXJDb2xvciksXG4gIGNvbG9yOiBjb2xvci5taW5pbXVtTmlnaHRzLmNvbG9yLFxuICBob3Zlcjoge1xuICAgIGJhY2tncm91bmQ6IGNvbG9yLm1pbmltdW1OaWdodHMuYmFja2dyb3VuZENvbG9yX2hvdmVyLFxuICAgIGNvbG9yOiBjb2xvci5taW5pbXVtTmlnaHRzLmNvbG9yX2FjdGl2ZVxuICB9XG59O1xuZXhwb3J0cy5ibG9ja2VkTWluTmlnaHRzU3R5bGVzID0gYmxvY2tlZE1pbk5pZ2h0c1N0eWxlcztcbnZhciBibG9ja2VkQ2FsZW5kYXJTdHlsZXMgPSB7XG4gIGJhY2tncm91bmQ6IGNvbG9yLmJsb2NrZWRfY2FsZW5kYXIuYmFja2dyb3VuZENvbG9yLFxuICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5ibG9ja2VkX2NhbGVuZGFyLmJvcmRlckNvbG9yKSxcbiAgY29sb3I6IGNvbG9yLmJsb2NrZWRfY2FsZW5kYXIuY29sb3IsXG4gIGhvdmVyOiB7XG4gICAgYmFja2dyb3VuZDogY29sb3IuYmxvY2tlZF9jYWxlbmRhci5iYWNrZ3JvdW5kQ29sb3JfaG92ZXIsXG4gICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoY29sb3IuYmxvY2tlZF9jYWxlbmRhci5ib3JkZXJDb2xvciksXG4gICAgY29sb3I6IGNvbG9yLmJsb2NrZWRfY2FsZW5kYXIuY29sb3JfYWN0aXZlXG4gIH1cbn07XG5leHBvcnRzLmJsb2NrZWRDYWxlbmRhclN0eWxlcyA9IGJsb2NrZWRDYWxlbmRhclN0eWxlcztcbnZhciBibG9ja2VkT3V0T2ZSYW5nZVN0eWxlcyA9IHtcbiAgYmFja2dyb3VuZDogY29sb3IuYmxvY2tlZF9vdXRfb2ZfcmFuZ2UuYmFja2dyb3VuZENvbG9yLFxuICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5ib3JkZXJDb2xvciksXG4gIGNvbG9yOiBjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5jb2xvcixcbiAgaG92ZXI6IHtcbiAgICBiYWNrZ3JvdW5kOiBjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5iYWNrZ3JvdW5kQ29sb3JfaG92ZXIsXG4gICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoY29sb3IuYmxvY2tlZF9vdXRfb2ZfcmFuZ2UuYm9yZGVyQ29sb3IpLFxuICAgIGNvbG9yOiBjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5jb2xvcl9hY3RpdmVcbiAgfVxufTtcbmV4cG9ydHMuYmxvY2tlZE91dE9mUmFuZ2VTdHlsZXMgPSBibG9ja2VkT3V0T2ZSYW5nZVN0eWxlcztcbnZhciBob3ZlcmVkU3BhblN0eWxlcyA9IHtcbiAgYmFja2dyb3VuZDogY29sb3IuaG92ZXJlZFNwYW4uYmFja2dyb3VuZENvbG9yLFxuICBib3JkZXI6IFwiMXB4IGRvdWJsZSBcIi5jb25jYXQoY29sb3IuaG92ZXJlZFNwYW4uYm9yZGVyQ29sb3IpLFxuICBjb2xvcjogY29sb3IuaG92ZXJlZFNwYW4uY29sb3IsXG4gIGhvdmVyOiB7XG4gICAgYmFja2dyb3VuZDogY29sb3IuaG92ZXJlZFNwYW4uYmFja2dyb3VuZENvbG9yX2hvdmVyLFxuICAgIGJvcmRlcjogXCIxcHggZG91YmxlIFwiLmNvbmNhdChjb2xvci5ob3ZlcmVkU3Bhbi5ib3JkZXJDb2xvciksXG4gICAgY29sb3I6IGNvbG9yLmhvdmVyZWRTcGFuLmNvbG9yX2FjdGl2ZVxuICB9XG59O1xuZXhwb3J0cy5ob3ZlcmVkU3BhblN0eWxlcyA9IGhvdmVyZWRTcGFuU3R5bGVzO1xudmFyIHNlbGVjdGVkU3BhblN0eWxlcyA9IHtcbiAgYmFja2dyb3VuZDogY29sb3Iuc2VsZWN0ZWRTcGFuLmJhY2tncm91bmRDb2xvcixcbiAgYm9yZGVyOiBcIjFweCBkb3VibGUgXCIuY29uY2F0KGNvbG9yLnNlbGVjdGVkU3Bhbi5ib3JkZXJDb2xvciksXG4gIGNvbG9yOiBjb2xvci5zZWxlY3RlZFNwYW4uY29sb3IsXG4gIGhvdmVyOiB7XG4gICAgYmFja2dyb3VuZDogY29sb3Iuc2VsZWN0ZWRTcGFuLmJhY2tncm91bmRDb2xvcl9ob3ZlcixcbiAgICBib3JkZXI6IFwiMXB4IGRvdWJsZSBcIi5jb25jYXQoY29sb3Iuc2VsZWN0ZWRTcGFuLmJvcmRlckNvbG9yKSxcbiAgICBjb2xvcjogY29sb3Iuc2VsZWN0ZWRTcGFuLmNvbG9yX2FjdGl2ZVxuICB9XG59O1xuZXhwb3J0cy5zZWxlY3RlZFNwYW5TdHlsZXMgPSBzZWxlY3RlZFNwYW5TdHlsZXM7XG52YXIgbGFzdEluUmFuZ2VTdHlsZXMgPSB7fTtcbmV4cG9ydHMubGFzdEluUmFuZ2VTdHlsZXMgPSBsYXN0SW5SYW5nZVN0eWxlcztcbnZhciBzZWxlY3RlZFN0eWxlcyA9IHtcbiAgYmFja2dyb3VuZDogY29sb3Iuc2VsZWN0ZWQuYmFja2dyb3VuZENvbG9yLFxuICBib3JkZXI6IFwiMXB4IGRvdWJsZSBcIi5jb25jYXQoY29sb3Iuc2VsZWN0ZWQuYm9yZGVyQ29sb3IpLFxuICBjb2xvcjogY29sb3Iuc2VsZWN0ZWQuY29sb3IsXG4gIGhvdmVyOiB7XG4gICAgYmFja2dyb3VuZDogY29sb3Iuc2VsZWN0ZWQuYmFja2dyb3VuZENvbG9yX2hvdmVyLFxuICAgIGJvcmRlcjogXCIxcHggZG91YmxlIFwiLmNvbmNhdChjb2xvci5zZWxlY3RlZC5ib3JkZXJDb2xvciksXG4gICAgY29sb3I6IGNvbG9yLnNlbGVjdGVkLmNvbG9yX2FjdGl2ZVxuICB9XG59O1xuZXhwb3J0cy5zZWxlY3RlZFN0eWxlcyA9IHNlbGVjdGVkU3R5bGVzO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZGF5OiAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCksXG4gIGRheVNpemU6IF9jb25zdGFudHMuREFZX1NJWkUsXG4gIGlzT3V0c2lkZURheTogZmFsc2UsXG4gIG1vZGlmaWVyczogbmV3IFNldCgpLFxuICBpc0ZvY3VzZWQ6IGZhbHNlLFxuICB0YWJJbmRleDogLTEsXG4gIG9uRGF5Q2xpY2s6IGZ1bmN0aW9uIG9uRGF5Q2xpY2soKSB7fSxcbiAgb25EYXlNb3VzZUVudGVyOiBmdW5jdGlvbiBvbkRheU1vdXNlRW50ZXIoKSB7fSxcbiAgb25EYXlNb3VzZUxlYXZlOiBmdW5jdGlvbiBvbkRheU1vdXNlTGVhdmUoKSB7fSxcbiAgcmVuZGVyRGF5Q29udGVudHM6IG51bGwsXG4gIGFyaWFMYWJlbEZvcm1hdDogJ2RkZGQsIExMJyxcbiAgLy8gc3R5bGUgZGVmYXVsdHNcbiAgZGVmYXVsdFN0eWxlczogZGVmYXVsdFN0eWxlcyxcbiAgb3V0c2lkZVN0eWxlczogb3V0c2lkZVN0eWxlcyxcbiAgdG9kYXlTdHlsZXM6IHt9LFxuICBoaWdobGlnaHRlZENhbGVuZGFyU3R5bGVzOiBoaWdobGlnaHRlZENhbGVuZGFyU3R5bGVzLFxuICBibG9ja2VkTWluTmlnaHRzU3R5bGVzOiBibG9ja2VkTWluTmlnaHRzU3R5bGVzLFxuICBibG9ja2VkQ2FsZW5kYXJTdHlsZXM6IGJsb2NrZWRDYWxlbmRhclN0eWxlcyxcbiAgYmxvY2tlZE91dE9mUmFuZ2VTdHlsZXM6IGJsb2NrZWRPdXRPZlJhbmdlU3R5bGVzLFxuICBob3ZlcmVkU3BhblN0eWxlczogaG92ZXJlZFNwYW5TdHlsZXMsXG4gIHNlbGVjdGVkU3BhblN0eWxlczogc2VsZWN0ZWRTcGFuU3R5bGVzLFxuICBsYXN0SW5SYW5nZVN0eWxlczogbGFzdEluUmFuZ2VTdHlsZXMsXG4gIHNlbGVjdGVkU3R5bGVzOiBzZWxlY3RlZFN0eWxlcyxcbiAgc2VsZWN0ZWRTdGFydFN0eWxlczoge30sXG4gIHNlbGVjdGVkRW5kU3R5bGVzOiB7fSxcbiAgYWZ0ZXJIb3ZlcmVkU3RhcnRTdHlsZXM6IHt9LFxuICBmaXJzdERheU9mV2Vla1N0eWxlczoge30sXG4gIGxhc3REYXlPZldlZWtTdHlsZXM6IHt9LFxuICBob3ZlcmVkU3RhcnRGaXJzdFBvc3NpYmxlRW5kU3R5bGVzOiB7fSxcbiAgaG92ZXJlZFN0YXJ0QmxvY2tlZE1pbk5pZ2h0c1N0eWxlczoge30sXG4gIC8vIGludGVybmF0aW9uYWxpemF0aW9uXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5DYWxlbmRhckRheVBocmFzZXNcbn07XG5cbnZhciBDdXN0b21pemFibGVDYWxlbmRhckRheSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX3JlZikge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyW1wiZGVmYXVsdFwiXSkoQ3VzdG9taXphYmxlQ2FsZW5kYXJEYXksIF9yZWYpO1xuICB2YXIgX3Byb3RvID0gQ3VzdG9taXphYmxlQ2FsZW5kYXJEYXkucHJvdG90eXBlO1xuXG4gIF9wcm90b1shX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICYmIFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCJdID0gZnVuY3Rpb24gKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgcmV0dXJuICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKTtcbiAgfTtcblxuICBmdW5jdGlvbiBDdXN0b21pemFibGVDYWxlbmRhckRheSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcmVmLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzSG92ZXJlZDogZmFsc2VcbiAgICB9O1xuICAgIF90aGlzLnNldEJ1dHRvblJlZiA9IF90aGlzLnNldEJ1dHRvblJlZi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlzRm9jdXNlZCA9IF90aGlzJHByb3BzLmlzRm9jdXNlZCxcbiAgICAgICAgdGFiSW5kZXggPSBfdGhpcyRwcm9wcy50YWJJbmRleDtcblxuICAgIGlmICh0YWJJbmRleCA9PT0gMCkge1xuICAgICAgaWYgKGlzRm9jdXNlZCB8fCB0YWJJbmRleCAhPT0gcHJldlByb3BzLnRhYkluZGV4KSB7XG4gICAgICAgICgwLCBfcmFmW1wiZGVmYXVsdFwiXSkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChfdGhpczIuYnV0dG9uUmVmKSB7XG4gICAgICAgICAgICBfdGhpczIuYnV0dG9uUmVmLmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uRGF5Q2xpY2sgPSBmdW5jdGlvbiBvbkRheUNsaWNrKGRheSwgZSkge1xuICAgIHZhciBvbkRheUNsaWNrID0gdGhpcy5wcm9wcy5vbkRheUNsaWNrO1xuICAgIG9uRGF5Q2xpY2soZGF5LCBlKTtcbiAgfTtcblxuICBfcHJvdG8ub25EYXlNb3VzZUVudGVyID0gZnVuY3Rpb24gb25EYXlNb3VzZUVudGVyKGRheSwgZSkge1xuICAgIHZhciBvbkRheU1vdXNlRW50ZXIgPSB0aGlzLnByb3BzLm9uRGF5TW91c2VFbnRlcjtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzSG92ZXJlZDogdHJ1ZVxuICAgIH0pO1xuICAgIG9uRGF5TW91c2VFbnRlcihkYXksIGUpO1xuICB9O1xuXG4gIF9wcm90by5vbkRheU1vdXNlTGVhdmUgPSBmdW5jdGlvbiBvbkRheU1vdXNlTGVhdmUoZGF5LCBlKSB7XG4gICAgdmFyIG9uRGF5TW91c2VMZWF2ZSA9IHRoaXMucHJvcHMub25EYXlNb3VzZUxlYXZlO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNIb3ZlcmVkOiBmYWxzZVxuICAgIH0pO1xuICAgIG9uRGF5TW91c2VMZWF2ZShkYXksIGUpO1xuICB9O1xuXG4gIF9wcm90by5vbktleURvd24gPSBmdW5jdGlvbiBvbktleURvd24oZGF5LCBlKSB7XG4gICAgdmFyIG9uRGF5Q2xpY2sgPSB0aGlzLnByb3BzLm9uRGF5Q2xpY2s7XG4gICAgdmFyIGtleSA9IGUua2V5O1xuXG4gICAgaWYgKGtleSA9PT0gJ0VudGVyJyB8fCBrZXkgPT09ICcgJykge1xuICAgICAgb25EYXlDbGljayhkYXksIGUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2V0QnV0dG9uUmVmID0gZnVuY3Rpb24gc2V0QnV0dG9uUmVmKHJlZikge1xuICAgIHRoaXMuYnV0dG9uUmVmID0gcmVmO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZGF5ID0gX3RoaXMkcHJvcHMyLmRheSxcbiAgICAgICAgYXJpYUxhYmVsRm9ybWF0ID0gX3RoaXMkcHJvcHMyLmFyaWFMYWJlbEZvcm1hdCxcbiAgICAgICAgZGF5U2l6ZSA9IF90aGlzJHByb3BzMi5kYXlTaXplLFxuICAgICAgICBpc091dHNpZGVEYXkgPSBfdGhpcyRwcm9wczIuaXNPdXRzaWRlRGF5LFxuICAgICAgICBtb2RpZmllcnMgPSBfdGhpcyRwcm9wczIubW9kaWZpZXJzLFxuICAgICAgICB0YWJJbmRleCA9IF90aGlzJHByb3BzMi50YWJJbmRleCxcbiAgICAgICAgcmVuZGVyRGF5Q29udGVudHMgPSBfdGhpcyRwcm9wczIucmVuZGVyRGF5Q29udGVudHMsXG4gICAgICAgIHN0eWxlcyA9IF90aGlzJHByb3BzMi5zdHlsZXMsXG4gICAgICAgIHBocmFzZXMgPSBfdGhpcyRwcm9wczIucGhyYXNlcyxcbiAgICAgICAgZGVmYXVsdFN0eWxlc1dpdGhIb3ZlciA9IF90aGlzJHByb3BzMi5kZWZhdWx0U3R5bGVzLFxuICAgICAgICBvdXRzaWRlU3R5bGVzV2l0aEhvdmVyID0gX3RoaXMkcHJvcHMyLm91dHNpZGVTdHlsZXMsXG4gICAgICAgIHRvZGF5U3R5bGVzV2l0aEhvdmVyID0gX3RoaXMkcHJvcHMyLnRvZGF5U3R5bGVzLFxuICAgICAgICBmaXJzdERheU9mV2Vla1N0eWxlc1dpdGhIb3ZlciA9IF90aGlzJHByb3BzMi5maXJzdERheU9mV2Vla1N0eWxlcyxcbiAgICAgICAgbGFzdERheU9mV2Vla1N0eWxlc1dpdGhIb3ZlciA9IF90aGlzJHByb3BzMi5sYXN0RGF5T2ZXZWVrU3R5bGVzLFxuICAgICAgICBoaWdobGlnaHRlZENhbGVuZGFyU3R5bGVzV2l0aEhvdmVyID0gX3RoaXMkcHJvcHMyLmhpZ2hsaWdodGVkQ2FsZW5kYXJTdHlsZXMsXG4gICAgICAgIGJsb2NrZWRNaW5OaWdodHNTdHlsZXNXaXRoSG92ZXIgPSBfdGhpcyRwcm9wczIuYmxvY2tlZE1pbk5pZ2h0c1N0eWxlcyxcbiAgICAgICAgYmxvY2tlZENhbGVuZGFyU3R5bGVzV2l0aEhvdmVyID0gX3RoaXMkcHJvcHMyLmJsb2NrZWRDYWxlbmRhclN0eWxlcyxcbiAgICAgICAgYmxvY2tlZE91dE9mUmFuZ2VTdHlsZXNXaXRoSG92ZXIgPSBfdGhpcyRwcm9wczIuYmxvY2tlZE91dE9mUmFuZ2VTdHlsZXMsXG4gICAgICAgIGhvdmVyZWRTcGFuU3R5bGVzV2l0aEhvdmVyID0gX3RoaXMkcHJvcHMyLmhvdmVyZWRTcGFuU3R5bGVzLFxuICAgICAgICBzZWxlY3RlZFNwYW5TdHlsZXNXaXRoSG92ZXIgPSBfdGhpcyRwcm9wczIuc2VsZWN0ZWRTcGFuU3R5bGVzLFxuICAgICAgICBsYXN0SW5SYW5nZVN0eWxlc1dpdGhIb3ZlciA9IF90aGlzJHByb3BzMi5sYXN0SW5SYW5nZVN0eWxlcyxcbiAgICAgICAgc2VsZWN0ZWRTdHlsZXNXaXRoSG92ZXIgPSBfdGhpcyRwcm9wczIuc2VsZWN0ZWRTdHlsZXMsXG4gICAgICAgIHNlbGVjdGVkU3RhcnRTdHlsZXNXaXRoSG92ZXIgPSBfdGhpcyRwcm9wczIuc2VsZWN0ZWRTdGFydFN0eWxlcyxcbiAgICAgICAgc2VsZWN0ZWRFbmRTdHlsZXNXaXRoSG92ZXIgPSBfdGhpcyRwcm9wczIuc2VsZWN0ZWRFbmRTdHlsZXMsXG4gICAgICAgIGFmdGVySG92ZXJlZFN0YXJ0U3R5bGVzV2l0aEhvdmVyID0gX3RoaXMkcHJvcHMyLmFmdGVySG92ZXJlZFN0YXJ0U3R5bGVzLFxuICAgICAgICBob3ZlcmVkU3RhcnRGaXJzdFBvc3NpYmxlRW5kU3R5bGVzV2l0aEhvdmVyID0gX3RoaXMkcHJvcHMyLmhvdmVyZWRTdGFydEZpcnN0UG9zc2libGVFbmRTdHlsZXMsXG4gICAgICAgIGhvdmVyZWRTdGFydEJsb2NrZWRNaW5OaWdodHNTdHlsZXNXaXRoSG92ZXIgPSBfdGhpcyRwcm9wczIuaG92ZXJlZFN0YXJ0QmxvY2tlZE1pbk5pZ2h0c1N0eWxlcztcbiAgICB2YXIgaXNIb3ZlcmVkID0gdGhpcy5zdGF0ZS5pc0hvdmVyZWQ7XG4gICAgaWYgKCFkYXkpIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiLCBudWxsKTtcblxuICAgIHZhciBfZ2V0Q2FsZW5kYXJEYXlTZXR0aW4gPSAoMCwgX2dldENhbGVuZGFyRGF5U2V0dGluZ3NbXCJkZWZhdWx0XCJdKShkYXksIGFyaWFMYWJlbEZvcm1hdCwgZGF5U2l6ZSwgbW9kaWZpZXJzLCBwaHJhc2VzKSxcbiAgICAgICAgZGF5U2l6ZVN0eWxlcyA9IF9nZXRDYWxlbmRhckRheVNldHRpbi5kYXlTaXplU3R5bGVzLFxuICAgICAgICB1c2VEZWZhdWx0Q3Vyc29yID0gX2dldENhbGVuZGFyRGF5U2V0dGluLnVzZURlZmF1bHRDdXJzb3IsXG4gICAgICAgIHNlbGVjdGVkID0gX2dldENhbGVuZGFyRGF5U2V0dGluLnNlbGVjdGVkLFxuICAgICAgICBob3ZlcmVkU3BhbiA9IF9nZXRDYWxlbmRhckRheVNldHRpbi5ob3ZlcmVkU3BhbixcbiAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBfZ2V0Q2FsZW5kYXJEYXlTZXR0aW4uaXNPdXRzaWRlUmFuZ2UsXG4gICAgICAgIGFyaWFMYWJlbCA9IF9nZXRDYWxlbmRhckRheVNldHRpbi5hcmlhTGFiZWw7XG5cbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwidGRcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5DYWxlbmRhckRheSwgdXNlRGVmYXVsdEN1cnNvciAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX2RlZmF1bHRDdXJzb3IsIGRheVNpemVTdHlsZXMsIGdldFN0eWxlcyhkZWZhdWx0U3R5bGVzV2l0aEhvdmVyLCBpc0hvdmVyZWQpLCBpc091dHNpZGVEYXkgJiYgZ2V0U3R5bGVzKG91dHNpZGVTdHlsZXNXaXRoSG92ZXIsIGlzSG92ZXJlZCksIG1vZGlmaWVycy5oYXMoJ3RvZGF5JykgJiYgZ2V0U3R5bGVzKHRvZGF5U3R5bGVzV2l0aEhvdmVyLCBpc0hvdmVyZWQpLCBtb2RpZmllcnMuaGFzKCdmaXJzdC1kYXktb2Ytd2VlaycpICYmIGdldFN0eWxlcyhmaXJzdERheU9mV2Vla1N0eWxlc1dpdGhIb3ZlciwgaXNIb3ZlcmVkKSwgbW9kaWZpZXJzLmhhcygnbGFzdC1kYXktb2Ytd2VlaycpICYmIGdldFN0eWxlcyhsYXN0RGF5T2ZXZWVrU3R5bGVzV2l0aEhvdmVyLCBpc0hvdmVyZWQpLCBtb2RpZmllcnMuaGFzKCdob3ZlcmVkLXN0YXJ0LWZpcnN0LXBvc3NpYmxlLWVuZCcpICYmIGdldFN0eWxlcyhob3ZlcmVkU3RhcnRGaXJzdFBvc3NpYmxlRW5kU3R5bGVzV2l0aEhvdmVyLCBpc0hvdmVyZWQpLCBtb2RpZmllcnMuaGFzKCdob3ZlcmVkLXN0YXJ0LWJsb2NrZWQtbWluaW11bS1uaWdodHMnKSAmJiBnZXRTdHlsZXMoaG92ZXJlZFN0YXJ0QmxvY2tlZE1pbk5pZ2h0c1N0eWxlc1dpdGhIb3ZlciwgaXNIb3ZlcmVkKSwgbW9kaWZpZXJzLmhhcygnaGlnaGxpZ2h0ZWQtY2FsZW5kYXInKSAmJiBnZXRTdHlsZXMoaGlnaGxpZ2h0ZWRDYWxlbmRhclN0eWxlc1dpdGhIb3ZlciwgaXNIb3ZlcmVkKSwgbW9kaWZpZXJzLmhhcygnYmxvY2tlZC1taW5pbXVtLW5pZ2h0cycpICYmIGdldFN0eWxlcyhibG9ja2VkTWluTmlnaHRzU3R5bGVzV2l0aEhvdmVyLCBpc0hvdmVyZWQpLCBtb2RpZmllcnMuaGFzKCdibG9ja2VkLWNhbGVuZGFyJykgJiYgZ2V0U3R5bGVzKGJsb2NrZWRDYWxlbmRhclN0eWxlc1dpdGhIb3ZlciwgaXNIb3ZlcmVkKSwgaG92ZXJlZFNwYW4gJiYgZ2V0U3R5bGVzKGhvdmVyZWRTcGFuU3R5bGVzV2l0aEhvdmVyLCBpc0hvdmVyZWQpLCBtb2RpZmllcnMuaGFzKCdhZnRlci1ob3ZlcmVkLXN0YXJ0JykgJiYgZ2V0U3R5bGVzKGFmdGVySG92ZXJlZFN0YXJ0U3R5bGVzV2l0aEhvdmVyLCBpc0hvdmVyZWQpLCBtb2RpZmllcnMuaGFzKCdzZWxlY3RlZC1zcGFuJykgJiYgZ2V0U3R5bGVzKHNlbGVjdGVkU3BhblN0eWxlc1dpdGhIb3ZlciwgaXNIb3ZlcmVkKSwgbW9kaWZpZXJzLmhhcygnbGFzdC1pbi1yYW5nZScpICYmIGdldFN0eWxlcyhsYXN0SW5SYW5nZVN0eWxlc1dpdGhIb3ZlciwgaXNIb3ZlcmVkKSwgc2VsZWN0ZWQgJiYgZ2V0U3R5bGVzKHNlbGVjdGVkU3R5bGVzV2l0aEhvdmVyLCBpc0hvdmVyZWQpLCBtb2RpZmllcnMuaGFzKCdzZWxlY3RlZC1zdGFydCcpICYmIGdldFN0eWxlcyhzZWxlY3RlZFN0YXJ0U3R5bGVzV2l0aEhvdmVyLCBpc0hvdmVyZWQpLCBtb2RpZmllcnMuaGFzKCdzZWxlY3RlZC1lbmQnKSAmJiBnZXRTdHlsZXMoc2VsZWN0ZWRFbmRTdHlsZXNXaXRoSG92ZXIsIGlzSG92ZXJlZCksIGlzT3V0c2lkZVJhbmdlICYmIGdldFN0eWxlcyhibG9ja2VkT3V0T2ZSYW5nZVN0eWxlc1dpdGhIb3ZlciwgaXNIb3ZlcmVkKSksIHtcbiAgICAgIHJvbGU6IFwiYnV0dG9uXCIgLy8gZXNsaW50LWRpc2FibGUtbGluZSBqc3gtYTExeS9uby1ub25pbnRlcmFjdGl2ZS1lbGVtZW50LXRvLWludGVyYWN0aXZlLXJvbGVcbiAgICAgICxcbiAgICAgIHJlZjogdGhpcy5zZXRCdXR0b25SZWYsXG4gICAgICBcImFyaWEtZGlzYWJsZWRcIjogbW9kaWZpZXJzLmhhcygnYmxvY2tlZCcpLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbCxcbiAgICAgIG9uTW91c2VFbnRlcjogZnVuY3Rpb24gb25Nb3VzZUVudGVyKGUpIHtcbiAgICAgICAgX3RoaXMzLm9uRGF5TW91c2VFbnRlcihkYXksIGUpO1xuICAgICAgfSxcbiAgICAgIG9uTW91c2VMZWF2ZTogZnVuY3Rpb24gb25Nb3VzZUxlYXZlKGUpIHtcbiAgICAgICAgX3RoaXMzLm9uRGF5TW91c2VMZWF2ZShkYXksIGUpO1xuICAgICAgfSxcbiAgICAgIG9uTW91c2VVcDogZnVuY3Rpb24gb25Nb3VzZVVwKGUpIHtcbiAgICAgICAgZS5jdXJyZW50VGFyZ2V0LmJsdXIoKTtcbiAgICAgIH0sXG4gICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgX3RoaXMzLm9uRGF5Q2xpY2soZGF5LCBlKTtcbiAgICAgIH0sXG4gICAgICBvbktleURvd246IGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7XG4gICAgICAgIF90aGlzMy5vbktleURvd24oZGF5LCBlKTtcbiAgICAgIH0sXG4gICAgICB0YWJJbmRleDogdGFiSW5kZXhcbiAgICB9KSwgcmVuZGVyRGF5Q29udGVudHMgPyByZW5kZXJEYXlDb250ZW50cyhkYXksIG1vZGlmaWVycykgOiBkYXkuZm9ybWF0KCdEJykpO1xuICB9O1xuXG4gIHJldHVybiBDdXN0b21pemFibGVDYWxlbmRhckRheTtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuZXhwb3J0cy5QdXJlQ3VzdG9taXphYmxlQ2FsZW5kYXJEYXkgPSBDdXN0b21pemFibGVDYWxlbmRhckRheTtcbkN1c3RvbWl6YWJsZUNhbGVuZGFyRGF5LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuQ3VzdG9taXphYmxlQ2FsZW5kYXJEYXkuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3JlYWN0V2l0aFN0eWxlcy53aXRoU3R5bGVzKShmdW5jdGlvbiAoX3JlZjIpIHtcbiAgdmFyIGZvbnQgPSBfcmVmMi5yZWFjdERhdGVzLmZvbnQ7XG4gIHJldHVybiB7XG4gICAgQ2FsZW5kYXJEYXk6IHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICBmb250U2l6ZTogZm9udC5zaXplLFxuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICc6YWN0aXZlJzoge1xuICAgICAgICBvdXRsaW5lOiAwXG4gICAgICB9XG4gICAgfSxcbiAgICBDYWxlbmRhckRheV9fZGVmYXVsdEN1cnNvcjoge1xuICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICB9XG4gIH07XG59LCB7XG4gIHB1cmVDb21wb25lbnQ6IHR5cGVvZiBfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgIT09ICd1bmRlZmluZWQnXG59KShDdXN0b21pemFibGVDYWxlbmRhckRheSk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBnZXRDYWxlbmRhck1vbnRoV2Vla3M7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG5mdW5jdGlvbiBnZXRDYWxlbmRhck1vbnRoV2Vla3MobW9udGgsIGVuYWJsZU91dHNpZGVEYXlzKSB7XG4gIHZhciBmaXJzdERheU9mV2VlayA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogX21vbWVudFtcImRlZmF1bHRcIl0ubG9jYWxlRGF0YSgpLmZpcnN0RGF5T2ZXZWVrKCk7XG5cbiAgaWYgKCFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChtb250aCkgfHwgIW1vbnRoLmlzVmFsaWQoKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Btb250aGAgbXVzdCBiZSBhIHZhbGlkIG1vbWVudCBvYmplY3QnKTtcbiAgfVxuXG4gIGlmIChfY29uc3RhbnRzLldFRUtEQVlTLmluZGV4T2YoZmlyc3REYXlPZldlZWspID09PSAtMSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BmaXJzdERheU9mV2Vla2AgbXVzdCBiZSBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNicpO1xuICB9IC8vIHNldCB1dGMgb2Zmc2V0IHRvIGdldCBjb3JyZWN0IGRhdGVzIGluIGZ1dHVyZSAod2hlbiB0aW1lem9uZSBjaGFuZ2VzKVxuXG5cbiAgdmFyIGZpcnN0T2ZNb250aCA9IG1vbnRoLmNsb25lKCkuc3RhcnRPZignbW9udGgnKS5ob3VyKDEyKTtcbiAgdmFyIGxhc3RPZk1vbnRoID0gbW9udGguY2xvbmUoKS5lbmRPZignbW9udGgnKS5ob3VyKDEyKTsgLy8gY2FsY3VsYXRlIHRoZSBleGFjdCBmaXJzdCBhbmQgbGFzdCBkYXlzIHRvIGZpbGwgdGhlIGVudGlyZSBtYXRyaXhcbiAgLy8gKGNvbnNpZGVyaW5nIGRheXMgb3V0c2lkZSBtb250aClcblxuICB2YXIgcHJldkRheXMgPSAoZmlyc3RPZk1vbnRoLmRheSgpICsgNyAtIGZpcnN0RGF5T2ZXZWVrKSAlIDc7XG4gIHZhciBuZXh0RGF5cyA9IChmaXJzdERheU9mV2VlayArIDYgLSBsYXN0T2ZNb250aC5kYXkoKSkgJSA3O1xuICB2YXIgZmlyc3REYXkgPSBmaXJzdE9mTW9udGguY2xvbmUoKS5zdWJ0cmFjdChwcmV2RGF5cywgJ2RheScpO1xuICB2YXIgbGFzdERheSA9IGxhc3RPZk1vbnRoLmNsb25lKCkuYWRkKG5leHREYXlzLCAnZGF5Jyk7XG4gIHZhciB0b3RhbERheXMgPSBsYXN0RGF5LmRpZmYoZmlyc3REYXksICdkYXlzJykgKyAxO1xuICB2YXIgY3VycmVudERheSA9IGZpcnN0RGF5LmNsb25lKCk7XG4gIHZhciB3ZWVrc0luTW9udGggPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdGFsRGF5czsgaSArPSAxKSB7XG4gICAgaWYgKGkgJSA3ID09PSAwKSB7XG4gICAgICB3ZWVrc0luTW9udGgucHVzaChbXSk7XG4gICAgfVxuXG4gICAgdmFyIGRheSA9IG51bGw7XG5cbiAgICBpZiAoaSA+PSBwcmV2RGF5cyAmJiBpIDwgdG90YWxEYXlzIC0gbmV4dERheXMgfHwgZW5hYmxlT3V0c2lkZURheXMpIHtcbiAgICAgIGRheSA9IGN1cnJlbnREYXkuY2xvbmUoKTtcbiAgICB9XG5cbiAgICB3ZWVrc0luTW9udGhbd2Vla3NJbk1vbnRoLmxlbmd0aCAtIDFdLnB1c2goZGF5KTtcbiAgICBjdXJyZW50RGF5LmFkZCgxLCAnZGF5Jyk7XG4gIH1cblxuICByZXR1cm4gd2Vla3NJbk1vbnRoO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBpc1RyYW5zaXRpb25FbmRTdXBwb3J0ZWQ7XG5cbmZ1bmN0aW9uIGlzVHJhbnNpdGlvbkVuZFN1cHBvcnRlZCgpIHtcbiAgcmV0dXJuICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICdUcmFuc2l0aW9uRXZlbnQnIGluIHdpbmRvdyk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGdldFRyYW5zZm9ybVN0eWxlcztcblxuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtU3R5bGVzKHRyYW5zZm9ybVZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1WYWx1ZSxcbiAgICBtc1RyYW5zZm9ybTogdHJhbnNmb3JtVmFsdWUsXG4gICAgTW96VHJhbnNmb3JtOiB0cmFuc2Zvcm1WYWx1ZSxcbiAgICBXZWJraXRUcmFuc2Zvcm06IHRyYW5zZm9ybVZhbHVlXG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBpc1ByZXZNb250aDtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX2lzU2FtZU1vbnRoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc1NhbWVNb250aFwiKSk7XG5cbmZ1bmN0aW9uIGlzUHJldk1vbnRoKGEsIGIpIHtcbiAgaWYgKCFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChhKSB8fCAhX21vbWVudFtcImRlZmF1bHRcIl0uaXNNb21lbnQoYikpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICgwLCBfaXNTYW1lTW9udGhbXCJkZWZhdWx0XCJdKShhLmNsb25lKCkuc3VidHJhY3QoMSwgJ21vbnRoJyksIGIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gaXNOZXh0TW9udGg7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF9pc1NhbWVNb250aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNTYW1lTW9udGhcIikpO1xuXG5mdW5jdGlvbiBpc05leHRNb250aChhLCBiKSB7XG4gIGlmICghX21vbWVudFtcImRlZmF1bHRcIl0uaXNNb21lbnQoYSkgfHwgIV9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGIpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAoMCwgX2lzU2FtZU1vbnRoW1wiZGVmYXVsdFwiXSkoYS5jbG9uZSgpLmFkZCgxLCAnbW9udGgnKSwgYik7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBleHBvcnRzLlB1cmVEYXRlUmFuZ2VQaWNrZXIgPSB2b2lkIDA7XG5cbnZhciBfZW56eW1lU2hhbGxvd0VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZW56eW1lLXNoYWxsb3ctZXF1YWxcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQ0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfcmVhY3RXaXRoU3R5bGVzID0gcmVxdWlyZShcInJlYWN0LXdpdGgtc3R5bGVzXCIpO1xuXG52YXIgX3JlYWN0UG9ydGFsID0gcmVxdWlyZShcInJlYWN0LXBvcnRhbFwiKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbnZhciBfY29uc29saWRhdGVkRXZlbnRzID0gcmVxdWlyZShcImNvbnNvbGlkYXRlZC1ldmVudHNcIik7XG5cbnZhciBfaXNUb3VjaERldmljZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlzLXRvdWNoLWRldmljZVwiKSk7XG5cbnZhciBfcmVhY3RPdXRzaWRlQ2xpY2tIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3Qtb3V0c2lkZS1jbGljay1oYW5kbGVyXCIpKTtcblxudmFyIF9EYXRlUmFuZ2VQaWNrZXJTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9EYXRlUmFuZ2VQaWNrZXJTaGFwZVwiKSk7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbnZhciBfZ2V0UmVzcG9uc2l2ZUNvbnRhaW5lclN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFJlc3BvbnNpdmVDb250YWluZXJTdHlsZXNcIikpO1xuXG52YXIgX2dldERldGFjaGVkQ29udGFpbmVyU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0RGV0YWNoZWRDb250YWluZXJTdHlsZXNcIikpO1xuXG52YXIgX2dldElucHV0SGVpZ2h0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0SW5wdXRIZWlnaHRcIikpO1xuXG52YXIgX2lzSW5jbHVzaXZlbHlBZnRlckRheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzSW5jbHVzaXZlbHlBZnRlckRheVwiKSk7XG5cbnZhciBfZGlzYWJsZVNjcm9sbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9kaXNhYmxlU2Nyb2xsXCIpKTtcblxudmFyIF9ub2ZsaXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9ub2ZsaXBcIikpO1xuXG52YXIgX0RhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyXCIpKTtcblxudmFyIF9EYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0RheVBpY2tlclJhbmdlQ29udHJvbGxlclwiKSk7XG5cbnZhciBfQ2xvc2VCdXR0b24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Nsb3NlQnV0dG9uXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG52YXIgcHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9haXJibmJQcm9wVHlwZXMuZm9yYmlkRXh0cmFQcm9wcykoKDAsIF9vYmplY3RTcHJlYWQ0W1wiZGVmYXVsdFwiXSkoe30sIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlc1Byb3BUeXBlcywge30sIF9EYXRlUmFuZ2VQaWNrZXJTaGFwZVtcImRlZmF1bHRcIl0pKSA6IHt9O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgLy8gcmVxdWlyZWQgcHJvcHMgZm9yIGEgZnVuY3Rpb25hbCBpbnRlcmFjdGl2ZSBEYXRlUmFuZ2VQaWNrZXJcbiAgc3RhcnREYXRlOiBudWxsLFxuICBlbmREYXRlOiBudWxsLFxuICBmb2N1c2VkSW5wdXQ6IG51bGwsXG4gIC8vIGlucHV0IHJlbGF0ZWQgcHJvcHNcbiAgc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0OiAnU3RhcnQgRGF0ZScsXG4gIGVuZERhdGVQbGFjZWhvbGRlclRleHQ6ICdFbmQgRGF0ZScsXG4gIHN0YXJ0RGF0ZUFyaWFMYWJlbDogdW5kZWZpbmVkLFxuICBlbmREYXRlQXJpYUxhYmVsOiB1bmRlZmluZWQsXG4gIHN0YXJ0RGF0ZU9mZnNldDogdW5kZWZpbmVkLFxuICBlbmREYXRlT2Zmc2V0OiB1bmRlZmluZWQsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgcmVxdWlyZWQ6IGZhbHNlLFxuICByZWFkT25seTogZmFsc2UsXG4gIHNjcmVlblJlYWRlcklucHV0TWVzc2FnZTogJycsXG4gIHNob3dDbGVhckRhdGVzOiBmYWxzZSxcbiAgc2hvd0RlZmF1bHRJbnB1dEljb246IGZhbHNlLFxuICBpbnB1dEljb25Qb3NpdGlvbjogX2NvbnN0YW50cy5JQ09OX0JFRk9SRV9QT1NJVElPTixcbiAgY3VzdG9tSW5wdXRJY29uOiBudWxsLFxuICBjdXN0b21BcnJvd0ljb246IG51bGwsXG4gIGN1c3RvbUNsb3NlSWNvbjogbnVsbCxcbiAgbm9Cb3JkZXI6IGZhbHNlLFxuICBibG9jazogZmFsc2UsXG4gIHNtYWxsOiBmYWxzZSxcbiAgcmVndWxhcjogZmFsc2UsXG4gIGtlZXBGb2N1c09uSW5wdXQ6IGZhbHNlLFxuICAvLyBjYWxlbmRhciBwcmVzZW50YXRpb24gYW5kIGludGVyYWN0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgcmVuZGVyTW9udGhUZXh0OiBudWxsLFxuICBvcmllbnRhdGlvbjogX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OLFxuICBhbmNob3JEaXJlY3Rpb246IF9jb25zdGFudHMuQU5DSE9SX0xFRlQsXG4gIG9wZW5EaXJlY3Rpb246IF9jb25zdGFudHMuT1BFTl9ET1dOLFxuICBob3Jpem9udGFsTWFyZ2luOiAwLFxuICB3aXRoUG9ydGFsOiBmYWxzZSxcbiAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWw6IGZhbHNlLFxuICBhcHBlbmRUb0JvZHk6IGZhbHNlLFxuICBkaXNhYmxlU2Nyb2xsOiBmYWxzZSxcbiAgaW5pdGlhbFZpc2libGVNb250aDogbnVsbCxcbiAgbnVtYmVyT2ZNb250aHM6IDIsXG4gIGtlZXBPcGVuT25EYXRlU2VsZWN0OiBmYWxzZSxcbiAgcmVvcGVuUGlja2VyT25DbGVhckRhdGVzOiBmYWxzZSxcbiAgcmVuZGVyQ2FsZW5kYXJJbmZvOiBudWxsLFxuICBjYWxlbmRhckluZm9Qb3NpdGlvbjogX2NvbnN0YW50cy5JTkZPX1BPU0lUSU9OX0JPVFRPTSxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGZhbHNlLFxuICBkYXlTaXplOiBfY29uc3RhbnRzLkRBWV9TSVpFLFxuICBpc1JUTDogZmFsc2UsXG4gIGZpcnN0RGF5T2ZXZWVrOiBudWxsLFxuICB2ZXJ0aWNhbEhlaWdodDogbnVsbCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiB1bmRlZmluZWQsXG4gIHZlcnRpY2FsU3BhY2luZzogX2NvbnN0YW50cy5ERUZBVUxUX1ZFUlRJQ0FMX1NQQUNJTkcsXG4gIGhvcml6b250YWxNb250aFBhZGRpbmc6IHVuZGVmaW5lZCxcbiAgLy8gbmF2aWdhdGlvbiByZWxhdGVkIHByb3BzXG4gIG5hdlByZXY6IG51bGwsXG4gIG5hdk5leHQ6IG51bGwsXG4gIG9uUHJldk1vbnRoQ2xpY2s6IGZ1bmN0aW9uIG9uUHJldk1vbnRoQ2xpY2soKSB7fSxcbiAgb25OZXh0TW9udGhDbGljazogZnVuY3Rpb24gb25OZXh0TW9udGhDbGljaygpIHt9LFxuICBvbkNsb3NlOiBmdW5jdGlvbiBvbkNsb3NlKCkge30sXG4gIC8vIGRheSBwcmVzZW50YXRpb24gYW5kIGludGVyYWN0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IHVuZGVmaW5lZCxcbiAgcmVuZGVyRGF5Q29udGVudHM6IG51bGwsXG4gIHJlbmRlck1vbnRoRWxlbWVudDogbnVsbCxcbiAgbWluaW11bU5pZ2h0czogMSxcbiAgZW5hYmxlT3V0c2lkZURheXM6IGZhbHNlLFxuICBpc0RheUJsb2NrZWQ6IGZ1bmN0aW9uIGlzRGF5QmxvY2tlZCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGlzT3V0c2lkZVJhbmdlOiBmdW5jdGlvbiBpc091dHNpZGVSYW5nZShkYXkpIHtcbiAgICByZXR1cm4gISgwLCBfaXNJbmNsdXNpdmVseUFmdGVyRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCkpO1xuICB9LFxuICBpc0RheUhpZ2hsaWdodGVkOiBmdW5jdGlvbiBpc0RheUhpZ2hsaWdodGVkKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgLy8gaW50ZXJuYXRpb25hbGl6YXRpb25cbiAgZGlzcGxheUZvcm1hdDogZnVuY3Rpb24gZGlzcGxheUZvcm1hdCgpIHtcbiAgICByZXR1cm4gX21vbWVudFtcImRlZmF1bHRcIl0ubG9jYWxlRGF0YSgpLmxvbmdEYXRlRm9ybWF0KCdMJyk7XG4gIH0sXG4gIG1vbnRoRm9ybWF0OiAnTU1NTSBZWVlZJyxcbiAgd2Vla0RheUZvcm1hdDogJ2RkJyxcbiAgcGhyYXNlczogX2RlZmF1bHRQaHJhc2VzLkRhdGVSYW5nZVBpY2tlclBocmFzZXMsXG4gIGRheUFyaWFMYWJlbEZvcm1hdDogdW5kZWZpbmVkXG59O1xuXG52YXIgRGF0ZVJhbmdlUGlja2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfcmVmKSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTJbXCJkZWZhdWx0XCJdKShEYXRlUmFuZ2VQaWNrZXIsIF9yZWYpO1xuICB2YXIgX3Byb3RvID0gRGF0ZVJhbmdlUGlja2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG9bIV9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAmJiBcInNob3VsZENvbXBvbmVudFVwZGF0ZVwiXSA9IGZ1bmN0aW9uIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIHJldHVybiAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnByb3BzLCBuZXh0UHJvcHMpIHx8ICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gRGF0ZVJhbmdlUGlja2VyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfcmVmLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBkYXlQaWNrZXJDb250YWluZXJTdHlsZXM6IHt9LFxuICAgICAgaXNEYXRlUmFuZ2VQaWNrZXJJbnB1dEZvY3VzZWQ6IGZhbHNlLFxuICAgICAgaXNEYXlQaWNrZXJGb2N1c2VkOiBmYWxzZSxcbiAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogZmFsc2VcbiAgICB9O1xuICAgIF90aGlzLmlzVG91Y2hEZXZpY2UgPSBmYWxzZTtcbiAgICBfdGhpcy5vbk91dHNpZGVDbGljayA9IF90aGlzLm9uT3V0c2lkZUNsaWNrLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbkRhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXMgPSBfdGhpcy5vbkRhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXMuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uRGF5UGlja2VyRm9jdXMgPSBfdGhpcy5vbkRheVBpY2tlckZvY3VzLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbkRheVBpY2tlckZvY3VzT3V0ID0gX3RoaXMub25EYXlQaWNrZXJGb2N1c091dC5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25EYXlQaWNrZXJCbHVyID0gX3RoaXMub25EYXlQaWNrZXJCbHVyLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5zaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9IF90aGlzLnNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5yZXNwb25zaXZpemVQaWNrZXJQb3NpdGlvbiA9IF90aGlzLnJlc3BvbnNpdml6ZVBpY2tlclBvc2l0aW9uLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5kaXNhYmxlU2Nyb2xsID0gX3RoaXMuZGlzYWJsZVNjcm9sbC5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMuc2V0RGF5UGlja2VyQ29udGFpbmVyUmVmID0gX3RoaXMuc2V0RGF5UGlja2VyQ29udGFpbmVyUmVmLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5zZXRDb250YWluZXJSZWYgPSBfdGhpcy5zZXRDb250YWluZXJSZWYuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9ICgwLCBfY29uc29saWRhdGVkRXZlbnRzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMucmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb24sIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgICB0aGlzLnJlc3BvbnNpdml6ZVBpY2tlclBvc2l0aW9uKCk7XG4gICAgdGhpcy5kaXNhYmxlU2Nyb2xsKCk7XG4gICAgdmFyIGZvY3VzZWRJbnB1dCA9IHRoaXMucHJvcHMuZm9jdXNlZElucHV0O1xuXG4gICAgaWYgKGZvY3VzZWRJbnB1dCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzRGF0ZVJhbmdlUGlja2VySW5wdXRGb2N1c2VkOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmlzVG91Y2hEZXZpY2UgPSAoMCwgX2lzVG91Y2hEZXZpY2VbXCJkZWZhdWx0XCJdKSgpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIGZvY3VzZWRJbnB1dCA9IHRoaXMucHJvcHMuZm9jdXNlZElucHV0O1xuXG4gICAgaWYgKCFwcmV2UHJvcHMuZm9jdXNlZElucHV0ICYmIGZvY3VzZWRJbnB1dCAmJiB0aGlzLmlzT3BlbmVkKCkpIHtcbiAgICAgIC8vIFRoZSBkYXRlIHBpY2tlciBqdXN0IGNoYW5nZWQgZnJvbSBiZWluZyBjbG9zZWQgdG8gYmVpbmcgb3Blbi5cbiAgICAgIHRoaXMucmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb24oKTtcbiAgICAgIHRoaXMuZGlzYWJsZVNjcm9sbCgpO1xuICAgIH0gZWxzZSBpZiAocHJldlByb3BzLmZvY3VzZWRJbnB1dCAmJiAhZm9jdXNlZElucHV0ICYmICF0aGlzLmlzT3BlbmVkKCkpIHtcbiAgICAgIC8vIFRoZSBkYXRlIHBpY2tlciBqdXN0IGNoYW5nZWQgZnJvbSBiZWluZyBvcGVuIHRvIGJlaW5nIGNsb3NlZC5cbiAgICAgIGlmICh0aGlzLmVuYWJsZVNjcm9sbCkgdGhpcy5lbmFibGVTY3JvbGwoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5yZW1vdmVEYXlQaWNrZXJFdmVudExpc3RlbmVycygpO1xuICAgIGlmICh0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigpO1xuICAgIGlmICh0aGlzLmVuYWJsZVNjcm9sbCkgdGhpcy5lbmFibGVTY3JvbGwoKTtcbiAgfTtcblxuICBfcHJvdG8ub25PdXRzaWRlQ2xpY2sgPSBmdW5jdGlvbiBvbk91dHNpZGVDbGljayhldmVudCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfdGhpcyRwcm9wcy5vbkZvY3VzQ2hhbmdlLFxuICAgICAgICBvbkNsb3NlID0gX3RoaXMkcHJvcHMub25DbG9zZSxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHMuc3RhcnREYXRlLFxuICAgICAgICBlbmREYXRlID0gX3RoaXMkcHJvcHMuZW5kRGF0ZSxcbiAgICAgICAgYXBwZW5kVG9Cb2R5ID0gX3RoaXMkcHJvcHMuYXBwZW5kVG9Cb2R5O1xuICAgIGlmICghdGhpcy5pc09wZW5lZCgpKSByZXR1cm47XG4gICAgaWYgKGFwcGVuZFRvQm9keSAmJiB0aGlzLmRheVBpY2tlckNvbnRhaW5lci5jb250YWlucyhldmVudC50YXJnZXQpKSByZXR1cm47XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc0RhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXNlZDogZmFsc2UsXG4gICAgICBpc0RheVBpY2tlckZvY3VzZWQ6IGZhbHNlLFxuICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBmYWxzZVxuICAgIH0pO1xuICAgIG9uRm9jdXNDaGFuZ2UobnVsbCk7XG4gICAgb25DbG9zZSh7XG4gICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICAgIGVuZERhdGU6IGVuZERhdGVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25EYXRlUmFuZ2VQaWNrZXJJbnB1dEZvY3VzID0gZnVuY3Rpb24gb25EYXRlUmFuZ2VQaWNrZXJJbnB1dEZvY3VzKGZvY3VzZWRJbnB1dCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHMyLm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgIHJlYWRPbmx5ID0gX3RoaXMkcHJvcHMyLnJlYWRPbmx5LFxuICAgICAgICB3aXRoUG9ydGFsID0gX3RoaXMkcHJvcHMyLndpdGhQb3J0YWwsXG4gICAgICAgIHdpdGhGdWxsU2NyZWVuUG9ydGFsID0gX3RoaXMkcHJvcHMyLndpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgICBrZWVwRm9jdXNPbklucHV0ID0gX3RoaXMkcHJvcHMyLmtlZXBGb2N1c09uSW5wdXQ7XG5cbiAgICBpZiAoZm9jdXNlZElucHV0KSB7XG4gICAgICB2YXIgd2l0aEFueVBvcnRhbCA9IHdpdGhQb3J0YWwgfHwgd2l0aEZ1bGxTY3JlZW5Qb3J0YWw7XG4gICAgICB2YXIgbW92ZUZvY3VzVG9EYXlQaWNrZXIgPSB3aXRoQW55UG9ydGFsIHx8IHJlYWRPbmx5ICYmICFrZWVwRm9jdXNPbklucHV0IHx8IHRoaXMuaXNUb3VjaERldmljZSAmJiAha2VlcEZvY3VzT25JbnB1dDtcblxuICAgICAgaWYgKG1vdmVGb2N1c1RvRGF5UGlja2VyKSB7XG4gICAgICAgIHRoaXMub25EYXlQaWNrZXJGb2N1cygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbkRheVBpY2tlckJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBvbkZvY3VzQ2hhbmdlKGZvY3VzZWRJbnB1dCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uRGF5UGlja2VyRm9jdXMgPSBmdW5jdGlvbiBvbkRheVBpY2tlckZvY3VzKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBmb2N1c2VkSW5wdXQgPSBfdGhpcyRwcm9wczMuZm9jdXNlZElucHV0LFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHMzLm9uRm9jdXNDaGFuZ2U7XG4gICAgaWYgKCFmb2N1c2VkSW5wdXQpIG9uRm9jdXNDaGFuZ2UoX2NvbnN0YW50cy5TVEFSVF9EQVRFKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzRGF0ZVJhbmdlUGlja2VySW5wdXRGb2N1c2VkOiBmYWxzZSxcbiAgICAgIGlzRGF5UGlja2VyRm9jdXNlZDogdHJ1ZSxcbiAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogZmFsc2VcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25EYXlQaWNrZXJGb2N1c091dCA9IGZ1bmN0aW9uIG9uRGF5UGlja2VyRm9jdXNPdXQoZXZlbnQpIHtcbiAgICAvLyBJbiBjYXNlcyB3aGVyZSAqKnJlbGF0ZWRUYXJnZXQqKiBpcyBub3QgbnVsbCwgaXQgcG9pbnRzIHRvIHRoZSByaWdodFxuICAgIC8vIGVsZW1lbnQgaGVyZS4gSG93ZXZlciwgaW4gY2FzZXMgd2hlcmUgaXQgaXMgbnVsbCAoc3VjaCBhcyBjbGlja2luZyBvbiBhXG4gICAgLy8gc3BlY2lmaWMgZGF5KSBvciBpdCBpcyAqKmRvY3VtZW50LmJvZHkqKiAoSUUxMSksIHRoZSBhcHByb3ByaWF0ZSB2YWx1ZSBpcyAqKmV2ZW50LnRhcmdldCoqLlxuICAgIC8vXG4gICAgLy8gV2UgaGFuZGxlIGJvdGggc2l0dWF0aW9ucyBoZXJlIGJ5IHVzaW5nIHRoZSBgIHx8IGAgb3BlcmF0b3IgdG8gZmFsbGJhY2tcbiAgICAvLyB0byAqZXZlbnQudGFyZ2V0Kiogd2hlbiAqKnJlbGF0ZWRUYXJnZXQqKiBpcyBub3QgcHJvdmlkZWQuXG4gICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSBldmVudC5yZWxhdGVkVGFyZ2V0ID09PSBkb2N1bWVudC5ib2R5ID8gZXZlbnQudGFyZ2V0IDogZXZlbnQucmVsYXRlZFRhcmdldCB8fCBldmVudC50YXJnZXQ7XG4gICAgaWYgKHRoaXMuZGF5UGlja2VyQ29udGFpbmVyLmNvbnRhaW5zKHJlbGF0ZWRUYXJnZXQpKSByZXR1cm47XG4gICAgdGhpcy5vbk91dHNpZGVDbGljayhldmVudCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uRGF5UGlja2VyQmx1ciA9IGZ1bmN0aW9uIG9uRGF5UGlja2VyQmx1cigpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzRGF0ZVJhbmdlUGlja2VySW5wdXRGb2N1c2VkOiB0cnVlLFxuICAgICAgaXNEYXlQaWNrZXJGb2N1c2VkOiBmYWxzZSxcbiAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogZmFsc2VcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uc2V0RGF5UGlja2VyQ29udGFpbmVyUmVmID0gZnVuY3Rpb24gc2V0RGF5UGlja2VyQ29udGFpbmVyUmVmKHJlZikge1xuICAgIGlmIChyZWYgPT09IHRoaXMuZGF5UGlja2VyQ29udGFpbmVyKSByZXR1cm47XG4gICAgaWYgKHRoaXMuZGF5UGlja2VyQ29udGFpbmVyKSB0aGlzLnJlbW92ZURheVBpY2tlckV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5kYXlQaWNrZXJDb250YWluZXIgPSByZWY7XG4gICAgaWYgKCFyZWYpIHJldHVybjtcbiAgICB0aGlzLmFkZERheVBpY2tlckV2ZW50TGlzdGVuZXJzKCk7XG4gIH07XG5cbiAgX3Byb3RvLnNldENvbnRhaW5lclJlZiA9IGZ1bmN0aW9uIHNldENvbnRhaW5lclJlZihyZWYpIHtcbiAgICB0aGlzLmNvbnRhaW5lciA9IHJlZjtcbiAgfTtcblxuICBfcHJvdG8uYWRkRGF5UGlja2VyRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBhZGREYXlQaWNrZXJFdmVudExpc3RlbmVycygpIHtcbiAgICAvLyBOT1RFOiBXZSBhcmUgdXNpbmcgYSBtYW51YWwgZXZlbnQgbGlzdGVuZXIgaGVyZSwgYmVjYXVzZSBSZWFjdCBkb2Vzbid0XG4gICAgLy8gcHJvdmlkZSBGb2N1c091dCwgd2hpbGUgYmx1ciBhbmQga2V5ZG93biBkb24ndCBwcm92aWRlIHRoZSBpbmZvcm1hdGlvblxuICAgIC8vIG5lZWRlZCBpbiBvcmRlciB0byBrbm93IHdoZXRoZXIgd2UgaGF2ZSBsZWZ0IGZvY3VzIG9yIG5vdC5cbiAgICAvL1xuICAgIC8vIEZvciByZWZlcmVuY2UsIHRoaXMgaXNzdWUgaXMgZnVydGhlciBkZXNjcmliZWQgaGVyZTpcbiAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNjQxMFxuICAgIHRoaXMucmVtb3ZlRGF5UGlja2VyRm9jdXNPdXQgPSAoMCwgX2NvbnNvbGlkYXRlZEV2ZW50cy5hZGRFdmVudExpc3RlbmVyKSh0aGlzLmRheVBpY2tlckNvbnRhaW5lciwgJ2ZvY3Vzb3V0JywgdGhpcy5vbkRheVBpY2tlckZvY3VzT3V0KTtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlRGF5UGlja2VyRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVEYXlQaWNrZXJFdmVudExpc3RlbmVycygpIHtcbiAgICBpZiAodGhpcy5yZW1vdmVEYXlQaWNrZXJGb2N1c091dCkgdGhpcy5yZW1vdmVEYXlQaWNrZXJGb2N1c091dCgpO1xuICB9O1xuXG4gIF9wcm90by5pc09wZW5lZCA9IGZ1bmN0aW9uIGlzT3BlbmVkKCkge1xuICAgIHZhciBmb2N1c2VkSW5wdXQgPSB0aGlzLnByb3BzLmZvY3VzZWRJbnB1dDtcbiAgICByZXR1cm4gZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLlNUQVJUX0RBVEUgfHwgZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLkVORF9EQVRFO1xuICB9O1xuXG4gIF9wcm90by5kaXNhYmxlU2Nyb2xsID0gZnVuY3Rpb24gZGlzYWJsZVNjcm9sbCgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYXBwZW5kVG9Cb2R5ID0gX3RoaXMkcHJvcHM0LmFwcGVuZFRvQm9keSxcbiAgICAgICAgcHJvcERpc2FibGVTY3JvbGwgPSBfdGhpcyRwcm9wczQuZGlzYWJsZVNjcm9sbDtcbiAgICBpZiAoIWFwcGVuZFRvQm9keSAmJiAhcHJvcERpc2FibGVTY3JvbGwpIHJldHVybjtcbiAgICBpZiAoIXRoaXMuaXNPcGVuZWQoKSkgcmV0dXJuOyAvLyBEaXNhYmxlIHNjcm9sbCBmb3IgZXZlcnkgYW5jZXN0b3Igb2YgdGhpcyBEYXRlUmFuZ2VQaWNrZXIgdXAgdG8gdGhlXG4gICAgLy8gZG9jdW1lbnQgbGV2ZWwuIFRoaXMgZW5zdXJlcyB0aGUgaW5wdXQgYW5kIHRoZSBwaWNrZXIgbmV2ZXIgbW92ZS4gT3RoZXJcbiAgICAvLyBzaWJsaW5nIGVsZW1lbnRzIG9yIHRoZSBwaWNrZXIgaXRzZWxmIGNhbiBzY3JvbGwuXG5cbiAgICB0aGlzLmVuYWJsZVNjcm9sbCA9ICgwLCBfZGlzYWJsZVNjcm9sbDJbXCJkZWZhdWx0XCJdKSh0aGlzLmNvbnRhaW5lcik7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3BvbnNpdml6ZVBpY2tlclBvc2l0aW9uID0gZnVuY3Rpb24gcmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb24oKSB7XG4gICAgLy8gSXQncyBwb3NzaWJsZSB0aGUgcG9ydGFsIHByb3BzIGhhdmUgYmVlbiBjaGFuZ2VkIGluIHJlc3BvbnNlIHRvIHdpbmRvdyByZXNpemVzXG4gICAgLy8gU28gbGV0J3MgZW5zdXJlIHdlIHJlc2V0IHRoaXMgYmFjayB0byB0aGUgYmFzZSBzdGF0ZSBlYWNoIHRpbWVcbiAgICB2YXIgZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzID0gdGhpcy5zdGF0ZS5kYXlQaWNrZXJDb250YWluZXJTdHlsZXM7XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzKS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzOiB7fVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzT3BlbmVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb3BlbkRpcmVjdGlvbiA9IF90aGlzJHByb3BzNS5vcGVuRGlyZWN0aW9uLFxuICAgICAgICBhbmNob3JEaXJlY3Rpb24gPSBfdGhpcyRwcm9wczUuYW5jaG9yRGlyZWN0aW9uLFxuICAgICAgICBob3Jpem9udGFsTWFyZ2luID0gX3RoaXMkcHJvcHM1Lmhvcml6b250YWxNYXJnaW4sXG4gICAgICAgIHdpdGhQb3J0YWwgPSBfdGhpcyRwcm9wczUud2l0aFBvcnRhbCxcbiAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfdGhpcyRwcm9wczUud2l0aEZ1bGxTY3JlZW5Qb3J0YWwsXG4gICAgICAgIGFwcGVuZFRvQm9keSA9IF90aGlzJHByb3BzNS5hcHBlbmRUb0JvZHk7XG4gICAgdmFyIGlzQW5jaG9yZWRMZWZ0ID0gYW5jaG9yRGlyZWN0aW9uID09PSBfY29uc3RhbnRzLkFOQ0hPUl9MRUZUO1xuXG4gICAgaWYgKCF3aXRoUG9ydGFsICYmICF3aXRoRnVsbFNjcmVlblBvcnRhbCkge1xuICAgICAgdmFyIGNvbnRhaW5lclJlY3QgPSB0aGlzLmRheVBpY2tlckNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzW2FuY2hvckRpcmVjdGlvbl0gfHwgMDtcbiAgICAgIHZhciBjb250YWluZXJFZGdlID0gaXNBbmNob3JlZExlZnQgPyBjb250YWluZXJSZWN0W19jb25zdGFudHMuQU5DSE9SX1JJR0hUXSA6IGNvbnRhaW5lclJlY3RbX2NvbnN0YW50cy5BTkNIT1JfTEVGVF07XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzOiAoMCwgX29iamVjdFNwcmVhZDRbXCJkZWZhdWx0XCJdKSh7fSwgKDAsIF9nZXRSZXNwb25zaXZlQ29udGFpbmVyU3R5bGVzW1wiZGVmYXVsdFwiXSkoYW5jaG9yRGlyZWN0aW9uLCBjdXJyZW50T2Zmc2V0LCBjb250YWluZXJFZGdlLCBob3Jpem9udGFsTWFyZ2luKSwge30sIGFwcGVuZFRvQm9keSAmJiAoMCwgX2dldERldGFjaGVkQ29udGFpbmVyU3R5bGVzW1wiZGVmYXVsdFwiXSkob3BlbkRpcmVjdGlvbiwgYW5jaG9yRGlyZWN0aW9uLCB0aGlzLmNvbnRhaW5lcikpXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsID0gZnVuY3Rpb24gc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWwoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc0RhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXNlZDogZmFsc2UsXG4gICAgICBpc0RheVBpY2tlckZvY3VzZWQ6IHRydWUsXG4gICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IHRydWVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubWF5YmVSZW5kZXJEYXlQaWNrZXJXaXRoUG9ydGFsID0gZnVuY3Rpb24gbWF5YmVSZW5kZXJEYXlQaWNrZXJXaXRoUG9ydGFsKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczYgPSB0aGlzLnByb3BzLFxuICAgICAgICB3aXRoUG9ydGFsID0gX3RoaXMkcHJvcHM2LndpdGhQb3J0YWwsXG4gICAgICAgIHdpdGhGdWxsU2NyZWVuUG9ydGFsID0gX3RoaXMkcHJvcHM2LndpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgICBhcHBlbmRUb0JvZHkgPSBfdGhpcyRwcm9wczYuYXBwZW5kVG9Cb2R5O1xuXG4gICAgaWYgKCF0aGlzLmlzT3BlbmVkKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICh3aXRoUG9ydGFsIHx8IHdpdGhGdWxsU2NyZWVuUG9ydGFsIHx8IGFwcGVuZFRvQm9keSkge1xuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfcmVhY3RQb3J0YWwuUG9ydGFsLCBudWxsLCB0aGlzLnJlbmRlckRheVBpY2tlcigpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5yZW5kZXJEYXlQaWNrZXIoKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyRGF5UGlja2VyID0gZnVuY3Rpb24gcmVuZGVyRGF5UGlja2VyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczcgPSB0aGlzLnByb3BzLFxuICAgICAgICBhbmNob3JEaXJlY3Rpb24gPSBfdGhpcyRwcm9wczcuYW5jaG9yRGlyZWN0aW9uLFxuICAgICAgICBvcGVuRGlyZWN0aW9uID0gX3RoaXMkcHJvcHM3Lm9wZW5EaXJlY3Rpb24sXG4gICAgICAgIGlzRGF5QmxvY2tlZCA9IF90aGlzJHByb3BzNy5pc0RheUJsb2NrZWQsXG4gICAgICAgIGlzRGF5SGlnaGxpZ2h0ZWQgPSBfdGhpcyRwcm9wczcuaXNEYXlIaWdobGlnaHRlZCxcbiAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBfdGhpcyRwcm9wczcuaXNPdXRzaWRlUmFuZ2UsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHM3Lm51bWJlck9mTW9udGhzLFxuICAgICAgICBvcmllbnRhdGlvbiA9IF90aGlzJHByb3BzNy5vcmllbnRhdGlvbixcbiAgICAgICAgbW9udGhGb3JtYXQgPSBfdGhpcyRwcm9wczcubW9udGhGb3JtYXQsXG4gICAgICAgIHJlbmRlck1vbnRoVGV4dCA9IF90aGlzJHByb3BzNy5yZW5kZXJNb250aFRleHQsXG4gICAgICAgIG5hdlByZXYgPSBfdGhpcyRwcm9wczcubmF2UHJldixcbiAgICAgICAgbmF2TmV4dCA9IF90aGlzJHByb3BzNy5uYXZOZXh0LFxuICAgICAgICBvblByZXZNb250aENsaWNrID0gX3RoaXMkcHJvcHM3Lm9uUHJldk1vbnRoQ2xpY2ssXG4gICAgICAgIG9uTmV4dE1vbnRoQ2xpY2sgPSBfdGhpcyRwcm9wczcub25OZXh0TW9udGhDbGljayxcbiAgICAgICAgb25EYXRlc0NoYW5nZSA9IF90aGlzJHByb3BzNy5vbkRhdGVzQ2hhbmdlLFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHM3Lm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgIHdpdGhQb3J0YWwgPSBfdGhpcyRwcm9wczcud2l0aFBvcnRhbCxcbiAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfdGhpcyRwcm9wczcud2l0aEZ1bGxTY3JlZW5Qb3J0YWwsXG4gICAgICAgIGRheVNpemUgPSBfdGhpcyRwcm9wczcuZGF5U2l6ZSxcbiAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfdGhpcyRwcm9wczcuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgIGZvY3VzZWRJbnB1dCA9IF90aGlzJHByb3BzNy5mb2N1c2VkSW5wdXQsXG4gICAgICAgIHN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzNy5zdGFydERhdGUsXG4gICAgICAgIHN0YXJ0RGF0ZU9mZnNldCA9IF90aGlzJHByb3BzNy5zdGFydERhdGVPZmZzZXQsXG4gICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wczcuZW5kRGF0ZSxcbiAgICAgICAgZW5kRGF0ZU9mZnNldCA9IF90aGlzJHByb3BzNy5lbmREYXRlT2Zmc2V0LFxuICAgICAgICBtaW5pbXVtTmlnaHRzID0gX3RoaXMkcHJvcHM3Lm1pbmltdW1OaWdodHMsXG4gICAgICAgIGtlZXBPcGVuT25EYXRlU2VsZWN0ID0gX3RoaXMkcHJvcHM3LmtlZXBPcGVuT25EYXRlU2VsZWN0LFxuICAgICAgICByZW5kZXJDYWxlbmRhckRheSA9IF90aGlzJHByb3BzNy5yZW5kZXJDYWxlbmRhckRheSxcbiAgICAgICAgcmVuZGVyRGF5Q29udGVudHMgPSBfdGhpcyRwcm9wczcucmVuZGVyRGF5Q29udGVudHMsXG4gICAgICAgIHJlbmRlckNhbGVuZGFySW5mbyA9IF90aGlzJHByb3BzNy5yZW5kZXJDYWxlbmRhckluZm8sXG4gICAgICAgIHJlbmRlck1vbnRoRWxlbWVudCA9IF90aGlzJHByb3BzNy5yZW5kZXJNb250aEVsZW1lbnQsXG4gICAgICAgIGNhbGVuZGFySW5mb1Bvc2l0aW9uID0gX3RoaXMkcHJvcHM3LmNhbGVuZGFySW5mb1Bvc2l0aW9uLFxuICAgICAgICBmaXJzdERheU9mV2VlayA9IF90aGlzJHByb3BzNy5maXJzdERheU9mV2VlayxcbiAgICAgICAgaW5pdGlhbFZpc2libGVNb250aCA9IF90aGlzJHByb3BzNy5pbml0aWFsVmlzaWJsZU1vbnRoLFxuICAgICAgICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9IF90aGlzJHByb3BzNy5oaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgICAgY3VzdG9tQ2xvc2VJY29uID0gX3RoaXMkcHJvcHM3LmN1c3RvbUNsb3NlSWNvbixcbiAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzNy5vbkNsb3NlLFxuICAgICAgICBwaHJhc2VzID0gX3RoaXMkcHJvcHM3LnBocmFzZXMsXG4gICAgICAgIGRheUFyaWFMYWJlbEZvcm1hdCA9IF90aGlzJHByb3BzNy5kYXlBcmlhTGFiZWxGb3JtYXQsXG4gICAgICAgIGlzUlRMID0gX3RoaXMkcHJvcHM3LmlzUlRMLFxuICAgICAgICB3ZWVrRGF5Rm9ybWF0ID0gX3RoaXMkcHJvcHM3LndlZWtEYXlGb3JtYXQsXG4gICAgICAgIHN0eWxlcyA9IF90aGlzJHByb3BzNy5zdHlsZXMsXG4gICAgICAgIHZlcnRpY2FsSGVpZ2h0ID0gX3RoaXMkcHJvcHM3LnZlcnRpY2FsSGVpZ2h0LFxuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfdGhpcyRwcm9wczcudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgICB2ZXJ0aWNhbFNwYWNpbmcgPSBfdGhpcyRwcm9wczcudmVydGljYWxTcGFjaW5nLFxuICAgICAgICBob3Jpem9udGFsTW9udGhQYWRkaW5nID0gX3RoaXMkcHJvcHM3Lmhvcml6b250YWxNb250aFBhZGRpbmcsXG4gICAgICAgIHNtYWxsID0gX3RoaXMkcHJvcHM3LnNtYWxsLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzNy5kaXNhYmxlZCxcbiAgICAgICAgcmVhY3REYXRlcyA9IF90aGlzJHByb3BzNy50aGVtZS5yZWFjdERhdGVzO1xuICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGRheVBpY2tlckNvbnRhaW5lclN0eWxlcyA9IF90aGlzJHN0YXRlLmRheVBpY2tlckNvbnRhaW5lclN0eWxlcyxcbiAgICAgICAgaXNEYXlQaWNrZXJGb2N1c2VkID0gX3RoaXMkc3RhdGUuaXNEYXlQaWNrZXJGb2N1c2VkLFxuICAgICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHMgPSBfdGhpcyRzdGF0ZS5zaG93S2V5Ym9hcmRTaG9ydGN1dHM7XG4gICAgdmFyIG9uT3V0c2lkZUNsaWNrID0gIXdpdGhGdWxsU2NyZWVuUG9ydGFsICYmIHdpdGhQb3J0YWwgPyB0aGlzLm9uT3V0c2lkZUNsaWNrIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGluaXRpYWxWaXNpYmxlTW9udGhUaHVuayA9IGluaXRpYWxWaXNpYmxlTW9udGggfHwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN0YXJ0RGF0ZSB8fCBlbmREYXRlIHx8ICgwLCBfbW9tZW50W1wiZGVmYXVsdFwiXSkoKTtcbiAgICB9O1xuXG4gICAgdmFyIGNsb3NlSWNvbiA9IGN1c3RvbUNsb3NlSWNvbiB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0Nsb3NlQnV0dG9uW1wiZGVmYXVsdFwiXSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF0ZVJhbmdlUGlja2VyX2Nsb3NlQnV0dG9uX3N2ZykpO1xuXG4gICAgdmFyIGlucHV0SGVpZ2h0ID0gKDAsIF9nZXRJbnB1dEhlaWdodFtcImRlZmF1bHRcIl0pKHJlYWN0RGF0ZXMsIHNtYWxsKTtcbiAgICB2YXIgd2l0aEFueVBvcnRhbCA9IHdpdGhQb3J0YWwgfHwgd2l0aEZ1bGxTY3JlZW5Qb3J0YWw7XG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBqc3gtYTExeS9uby1zdGF0aWMtZWxlbWVudC1pbnRlcmFjdGlvbnNcbiAgICAgIHJlZjogdGhpcy5zZXREYXlQaWNrZXJDb250YWluZXJSZWZcbiAgICB9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJfcGlja2VyLCBhbmNob3JEaXJlY3Rpb24gPT09IF9jb25zdGFudHMuQU5DSE9SX0xFRlQgJiYgc3R5bGVzLkRhdGVSYW5nZVBpY2tlcl9waWNrZXJfX2RpcmVjdGlvbkxlZnQsIGFuY2hvckRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5BTkNIT1JfUklHSFQgJiYgc3R5bGVzLkRhdGVSYW5nZVBpY2tlcl9waWNrZXJfX2RpcmVjdGlvblJpZ2h0LCBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OICYmIHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJfcGlja2VyX19ob3Jpem9udGFsLCBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9PUklFTlRBVElPTiAmJiBzdHlsZXMuRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9fdmVydGljYWwsICF3aXRoQW55UG9ydGFsICYmIG9wZW5EaXJlY3Rpb24gPT09IF9jb25zdGFudHMuT1BFTl9ET1dOICYmIHtcbiAgICAgIHRvcDogaW5wdXRIZWlnaHQgKyB2ZXJ0aWNhbFNwYWNpbmdcbiAgICB9LCAhd2l0aEFueVBvcnRhbCAmJiBvcGVuRGlyZWN0aW9uID09PSBfY29uc3RhbnRzLk9QRU5fVVAgJiYge1xuICAgICAgYm90dG9tOiBpbnB1dEhlaWdodCArIHZlcnRpY2FsU3BhY2luZ1xuICAgIH0sIHdpdGhBbnlQb3J0YWwgJiYgc3R5bGVzLkRhdGVSYW5nZVBpY2tlcl9waWNrZXJfX3BvcnRhbCwgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgJiYgc3R5bGVzLkRhdGVSYW5nZVBpY2tlcl9waWNrZXJfX2Z1bGxTY3JlZW5Qb3J0YWwsIGlzUlRMICYmIHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJfcGlja2VyX19ydGwsIGRheVBpY2tlckNvbnRhaW5lclN0eWxlcyksIHtcbiAgICAgIG9uQ2xpY2s6IG9uT3V0c2lkZUNsaWNrXG4gICAgfSksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyW1wiZGVmYXVsdFwiXSwge1xuICAgICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uLFxuICAgICAgZW5hYmxlT3V0c2lkZURheXM6IGVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgbnVtYmVyT2ZNb250aHM6IG51bWJlck9mTW9udGhzLFxuICAgICAgb25QcmV2TW9udGhDbGljazogb25QcmV2TW9udGhDbGljayxcbiAgICAgIG9uTmV4dE1vbnRoQ2xpY2s6IG9uTmV4dE1vbnRoQ2xpY2ssXG4gICAgICBvbkRhdGVzQ2hhbmdlOiBvbkRhdGVzQ2hhbmdlLFxuICAgICAgb25Gb2N1c0NoYW5nZTogb25Gb2N1c0NoYW5nZSxcbiAgICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgICBmb2N1c2VkSW5wdXQ6IGZvY3VzZWRJbnB1dCxcbiAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLFxuICAgICAgc3RhcnREYXRlT2Zmc2V0OiBzdGFydERhdGVPZmZzZXQsXG4gICAgICBlbmREYXRlOiBlbmREYXRlLFxuICAgICAgZW5kRGF0ZU9mZnNldDogZW5kRGF0ZU9mZnNldCxcbiAgICAgIG1vbnRoRm9ybWF0OiBtb250aEZvcm1hdCxcbiAgICAgIHJlbmRlck1vbnRoVGV4dDogcmVuZGVyTW9udGhUZXh0LFxuICAgICAgd2l0aFBvcnRhbDogd2l0aEFueVBvcnRhbCxcbiAgICAgIGRheVNpemU6IGRheVNpemUsXG4gICAgICBpbml0aWFsVmlzaWJsZU1vbnRoOiBpbml0aWFsVmlzaWJsZU1vbnRoVGh1bmssXG4gICAgICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICBuYXZQcmV2OiBuYXZQcmV2LFxuICAgICAgbmF2TmV4dDogbmF2TmV4dCxcbiAgICAgIG1pbmltdW1OaWdodHM6IG1pbmltdW1OaWdodHMsXG4gICAgICBpc091dHNpZGVSYW5nZTogaXNPdXRzaWRlUmFuZ2UsXG4gICAgICBpc0RheUhpZ2hsaWdodGVkOiBpc0RheUhpZ2hsaWdodGVkLFxuICAgICAgaXNEYXlCbG9ja2VkOiBpc0RheUJsb2NrZWQsXG4gICAgICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDoga2VlcE9wZW5PbkRhdGVTZWxlY3QsXG4gICAgICByZW5kZXJDYWxlbmRhckRheTogcmVuZGVyQ2FsZW5kYXJEYXksXG4gICAgICByZW5kZXJEYXlDb250ZW50czogcmVuZGVyRGF5Q29udGVudHMsXG4gICAgICByZW5kZXJDYWxlbmRhckluZm86IHJlbmRlckNhbGVuZGFySW5mbyxcbiAgICAgIHJlbmRlck1vbnRoRWxlbWVudDogcmVuZGVyTW9udGhFbGVtZW50LFxuICAgICAgY2FsZW5kYXJJbmZvUG9zaXRpb246IGNhbGVuZGFySW5mb1Bvc2l0aW9uLFxuICAgICAgaXNGb2N1c2VkOiBpc0RheVBpY2tlckZvY3VzZWQsXG4gICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IHNob3dLZXlib2FyZFNob3J0Y3V0cyxcbiAgICAgIG9uQmx1cjogdGhpcy5vbkRheVBpY2tlckJsdXIsXG4gICAgICBwaHJhc2VzOiBwaHJhc2VzLFxuICAgICAgZGF5QXJpYUxhYmVsRm9ybWF0OiBkYXlBcmlhTGFiZWxGb3JtYXQsXG4gICAgICBpc1JUTDogaXNSVEwsXG4gICAgICBmaXJzdERheU9mV2VlazogZmlyc3REYXlPZldlZWssXG4gICAgICB3ZWVrRGF5Rm9ybWF0OiB3ZWVrRGF5Rm9ybWF0LFxuICAgICAgdmVydGljYWxIZWlnaHQ6IHZlcnRpY2FsSGVpZ2h0LFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiBob3Jpem9udGFsTW9udGhQYWRkaW5nXG4gICAgfSksIHdpdGhGdWxsU2NyZWVuUG9ydGFsICYmIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRhdGVSYW5nZVBpY2tlcl9jbG9zZUJ1dHRvbiksIHtcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICBvbkNsaWNrOiB0aGlzLm9uT3V0c2lkZUNsaWNrLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IHBocmFzZXMuY2xvc2VEYXRlUGlja2VyXG4gICAgfSksIGNsb3NlSWNvbikpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzOCA9IHRoaXMucHJvcHMsXG4gICAgICAgIHN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzOC5zdGFydERhdGUsXG4gICAgICAgIHN0YXJ0RGF0ZUlkID0gX3RoaXMkcHJvcHM4LnN0YXJ0RGF0ZUlkLFxuICAgICAgICBzdGFydERhdGVQbGFjZWhvbGRlclRleHQgPSBfdGhpcyRwcm9wczguc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0LFxuICAgICAgICBzdGFydERhdGVBcmlhTGFiZWwgPSBfdGhpcyRwcm9wczguc3RhcnREYXRlQXJpYUxhYmVsLFxuICAgICAgICBlbmREYXRlID0gX3RoaXMkcHJvcHM4LmVuZERhdGUsXG4gICAgICAgIGVuZERhdGVJZCA9IF90aGlzJHByb3BzOC5lbmREYXRlSWQsXG4gICAgICAgIGVuZERhdGVQbGFjZWhvbGRlclRleHQgPSBfdGhpcyRwcm9wczguZW5kRGF0ZVBsYWNlaG9sZGVyVGV4dCxcbiAgICAgICAgZW5kRGF0ZUFyaWFMYWJlbCA9IF90aGlzJHByb3BzOC5lbmREYXRlQXJpYUxhYmVsLFxuICAgICAgICBmb2N1c2VkSW5wdXQgPSBfdGhpcyRwcm9wczguZm9jdXNlZElucHV0LFxuICAgICAgICBzY3JlZW5SZWFkZXJJbnB1dE1lc3NhZ2UgPSBfdGhpcyRwcm9wczguc2NyZWVuUmVhZGVySW5wdXRNZXNzYWdlLFxuICAgICAgICBzaG93Q2xlYXJEYXRlcyA9IF90aGlzJHByb3BzOC5zaG93Q2xlYXJEYXRlcyxcbiAgICAgICAgc2hvd0RlZmF1bHRJbnB1dEljb24gPSBfdGhpcyRwcm9wczguc2hvd0RlZmF1bHRJbnB1dEljb24sXG4gICAgICAgIGlucHV0SWNvblBvc2l0aW9uID0gX3RoaXMkcHJvcHM4LmlucHV0SWNvblBvc2l0aW9uLFxuICAgICAgICBjdXN0b21JbnB1dEljb24gPSBfdGhpcyRwcm9wczguY3VzdG9tSW5wdXRJY29uLFxuICAgICAgICBjdXN0b21BcnJvd0ljb24gPSBfdGhpcyRwcm9wczguY3VzdG9tQXJyb3dJY29uLFxuICAgICAgICBjdXN0b21DbG9zZUljb24gPSBfdGhpcyRwcm9wczguY3VzdG9tQ2xvc2VJY29uLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzOC5kaXNhYmxlZCxcbiAgICAgICAgcmVxdWlyZWQgPSBfdGhpcyRwcm9wczgucmVxdWlyZWQsXG4gICAgICAgIHJlYWRPbmx5ID0gX3RoaXMkcHJvcHM4LnJlYWRPbmx5LFxuICAgICAgICBvcGVuRGlyZWN0aW9uID0gX3RoaXMkcHJvcHM4Lm9wZW5EaXJlY3Rpb24sXG4gICAgICAgIHBocmFzZXMgPSBfdGhpcyRwcm9wczgucGhyYXNlcyxcbiAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBfdGhpcyRwcm9wczguaXNPdXRzaWRlUmFuZ2UsXG4gICAgICAgIG1pbmltdW1OaWdodHMgPSBfdGhpcyRwcm9wczgubWluaW11bU5pZ2h0cyxcbiAgICAgICAgd2l0aFBvcnRhbCA9IF90aGlzJHByb3BzOC53aXRoUG9ydGFsLFxuICAgICAgICB3aXRoRnVsbFNjcmVlblBvcnRhbCA9IF90aGlzJHByb3BzOC53aXRoRnVsbFNjcmVlblBvcnRhbCxcbiAgICAgICAgZGlzcGxheUZvcm1hdCA9IF90aGlzJHByb3BzOC5kaXNwbGF5Rm9ybWF0LFxuICAgICAgICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZXMgPSBfdGhpcyRwcm9wczgucmVvcGVuUGlja2VyT25DbGVhckRhdGVzLFxuICAgICAgICBrZWVwT3Blbk9uRGF0ZVNlbGVjdCA9IF90aGlzJHByb3BzOC5rZWVwT3Blbk9uRGF0ZVNlbGVjdCxcbiAgICAgICAgb25EYXRlc0NoYW5nZSA9IF90aGlzJHByb3BzOC5vbkRhdGVzQ2hhbmdlLFxuICAgICAgICBvbkNsb3NlID0gX3RoaXMkcHJvcHM4Lm9uQ2xvc2UsXG4gICAgICAgIGlzUlRMID0gX3RoaXMkcHJvcHM4LmlzUlRMLFxuICAgICAgICBub0JvcmRlciA9IF90aGlzJHByb3BzOC5ub0JvcmRlcixcbiAgICAgICAgYmxvY2sgPSBfdGhpcyRwcm9wczguYmxvY2ssXG4gICAgICAgIHZlcnRpY2FsU3BhY2luZyA9IF90aGlzJHByb3BzOC52ZXJ0aWNhbFNwYWNpbmcsXG4gICAgICAgIHNtYWxsID0gX3RoaXMkcHJvcHM4LnNtYWxsLFxuICAgICAgICByZWd1bGFyID0gX3RoaXMkcHJvcHM4LnJlZ3VsYXIsXG4gICAgICAgIHN0eWxlcyA9IF90aGlzJHByb3BzOC5zdHlsZXM7XG4gICAgdmFyIGlzRGF0ZVJhbmdlUGlja2VySW5wdXRGb2N1c2VkID0gdGhpcy5zdGF0ZS5pc0RhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXNlZDtcbiAgICB2YXIgZW5hYmxlT3V0c2lkZUNsaWNrID0gIXdpdGhQb3J0YWwgJiYgIXdpdGhGdWxsU2NyZWVuUG9ydGFsO1xuICAgIHZhciBoaWRlRmFuZyA9IHZlcnRpY2FsU3BhY2luZyA8IF9jb25zdGFudHMuRkFOR19IRUlHSFRfUFg7XG5cbiAgICB2YXIgaW5wdXQgPSBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0RhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlcltcImRlZmF1bHRcIl0sIHtcbiAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLFxuICAgICAgc3RhcnREYXRlSWQ6IHN0YXJ0RGF0ZUlkLFxuICAgICAgc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0OiBzdGFydERhdGVQbGFjZWhvbGRlclRleHQsXG4gICAgICBpc1N0YXJ0RGF0ZUZvY3VzZWQ6IGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5TVEFSVF9EQVRFLFxuICAgICAgc3RhcnREYXRlQXJpYUxhYmVsOiBzdGFydERhdGVBcmlhTGFiZWwsXG4gICAgICBlbmREYXRlOiBlbmREYXRlLFxuICAgICAgZW5kRGF0ZUlkOiBlbmREYXRlSWQsXG4gICAgICBlbmREYXRlUGxhY2Vob2xkZXJUZXh0OiBlbmREYXRlUGxhY2Vob2xkZXJUZXh0LFxuICAgICAgaXNFbmREYXRlRm9jdXNlZDogZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLkVORF9EQVRFLFxuICAgICAgZW5kRGF0ZUFyaWFMYWJlbDogZW5kRGF0ZUFyaWFMYWJlbCxcbiAgICAgIGRpc3BsYXlGb3JtYXQ6IGRpc3BsYXlGb3JtYXQsXG4gICAgICBzaG93Q2xlYXJEYXRlczogc2hvd0NsZWFyRGF0ZXMsXG4gICAgICBzaG93Q2FyZXQ6ICF3aXRoUG9ydGFsICYmICF3aXRoRnVsbFNjcmVlblBvcnRhbCAmJiAhaGlkZUZhbmcsXG4gICAgICBzaG93RGVmYXVsdElucHV0SWNvbjogc2hvd0RlZmF1bHRJbnB1dEljb24sXG4gICAgICBpbnB1dEljb25Qb3NpdGlvbjogaW5wdXRJY29uUG9zaXRpb24sXG4gICAgICBjdXN0b21JbnB1dEljb246IGN1c3RvbUlucHV0SWNvbixcbiAgICAgIGN1c3RvbUFycm93SWNvbjogY3VzdG9tQXJyb3dJY29uLFxuICAgICAgY3VzdG9tQ2xvc2VJY29uOiBjdXN0b21DbG9zZUljb24sXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICByZXF1aXJlZDogcmVxdWlyZWQsXG4gICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICBvcGVuRGlyZWN0aW9uOiBvcGVuRGlyZWN0aW9uLFxuICAgICAgcmVvcGVuUGlja2VyT25DbGVhckRhdGVzOiByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZXMsXG4gICAgICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDoga2VlcE9wZW5PbkRhdGVTZWxlY3QsXG4gICAgICBpc091dHNpZGVSYW5nZTogaXNPdXRzaWRlUmFuZ2UsXG4gICAgICBtaW5pbXVtTmlnaHRzOiBtaW5pbXVtTmlnaHRzLFxuICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWw6IHdpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgb25EYXRlc0NoYW5nZTogb25EYXRlc0NoYW5nZSxcbiAgICAgIG9uRm9jdXNDaGFuZ2U6IHRoaXMub25EYXRlUmFuZ2VQaWNrZXJJbnB1dEZvY3VzLFxuICAgICAgb25LZXlEb3duQXJyb3dEb3duOiB0aGlzLm9uRGF5UGlja2VyRm9jdXMsXG4gICAgICBvbktleURvd25RdWVzdGlvbk1hcms6IHRoaXMuc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgICAgcGhyYXNlczogcGhyYXNlcyxcbiAgICAgIHNjcmVlblJlYWRlck1lc3NhZ2U6IHNjcmVlblJlYWRlcklucHV0TWVzc2FnZSxcbiAgICAgIGlzRm9jdXNlZDogaXNEYXRlUmFuZ2VQaWNrZXJJbnB1dEZvY3VzZWQsXG4gICAgICBpc1JUTDogaXNSVEwsXG4gICAgICBub0JvcmRlcjogbm9Cb3JkZXIsXG4gICAgICBibG9jazogYmxvY2ssXG4gICAgICBzbWFsbDogc21hbGwsXG4gICAgICByZWd1bGFyOiByZWd1bGFyLFxuICAgICAgdmVydGljYWxTcGFjaW5nOiB2ZXJ0aWNhbFNwYWNpbmdcbiAgICB9LCB0aGlzLm1heWJlUmVuZGVyRGF5UGlja2VyV2l0aFBvcnRhbCgpKTtcblxuICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHtcbiAgICAgIHJlZjogdGhpcy5zZXRDb250YWluZXJSZWZcbiAgICB9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXIsIGJsb2NrICYmIHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJfX2Jsb2NrKSksIGVuYWJsZU91dHNpZGVDbGljayAmJiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX3JlYWN0T3V0c2lkZUNsaWNrSGFuZGxlcltcImRlZmF1bHRcIl0sIHtcbiAgICAgIG9uT3V0c2lkZUNsaWNrOiB0aGlzLm9uT3V0c2lkZUNsaWNrXG4gICAgfSwgaW5wdXQpLCBlbmFibGVPdXRzaWRlQ2xpY2sgfHwgaW5wdXQpO1xuICB9O1xuXG4gIHJldHVybiBEYXRlUmFuZ2VQaWNrZXI7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuUHVyZURhdGVSYW5nZVBpY2tlciA9IERhdGVSYW5nZVBpY2tlcjtcbkRhdGVSYW5nZVBpY2tlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBwcm9wVHlwZXMgOiB7fTtcbkRhdGVSYW5nZVBpY2tlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXMpKGZ1bmN0aW9uIChfcmVmMikge1xuICB2YXIgX3JlZjIkcmVhY3REYXRlcyA9IF9yZWYyLnJlYWN0RGF0ZXMsXG4gICAgICBjb2xvciA9IF9yZWYyJHJlYWN0RGF0ZXMuY29sb3IsXG4gICAgICB6SW5kZXggPSBfcmVmMiRyZWFjdERhdGVzLnpJbmRleDtcbiAgcmV0dXJuIHtcbiAgICBEYXRlUmFuZ2VQaWNrZXI6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaydcbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcl9fYmxvY2s6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcl9waWNrZXI6IHtcbiAgICAgIHpJbmRleDogekluZGV4ICsgMSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IuYmFja2dyb3VuZCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJfcGlja2VyX19ydGw6IHtcbiAgICAgIGRpcmVjdGlvbjogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgncnRsJylcbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcl9waWNrZXJfX2RpcmVjdGlvbkxlZnQ6IHtcbiAgICAgIGxlZnQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoMClcbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcl9waWNrZXJfX2RpcmVjdGlvblJpZ2h0OiB7XG4gICAgICByaWdodDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgwKVxuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9fcG9ydGFsOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuMyknLFxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKDApLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJfcGlja2VyX19mdWxsU2NyZWVuUG9ydGFsOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLmJhY2tncm91bmRcbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcl9jbG9zZUJ1dHRvbjoge1xuICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICAgIGxpbmVIZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJyxcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICByaWdodDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgwKSxcbiAgICAgIHBhZGRpbmc6IDE1LFxuICAgICAgekluZGV4OiB6SW5kZXggKyAyLFxuICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgY29sb3I6IFwiZGFya2VuKFwiLmNvbmNhdChjb2xvci5jb3JlLmdyYXlMaWdodGVyLCBcIiwgMTAlKVwiKSxcbiAgICAgICAgdGV4dERlY29yYXRpb246ICdub25lJ1xuICAgICAgfSxcbiAgICAgICc6Zm9jdXMnOiB7XG4gICAgICAgIGNvbG9yOiBcImRhcmtlbihcIi5jb25jYXQoY29sb3IuY29yZS5ncmF5TGlnaHRlciwgXCIsIDEwJSlcIiksXG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZSdcbiAgICAgIH1cbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcl9jbG9zZUJ1dHRvbl9zdmc6IHtcbiAgICAgIGhlaWdodDogMTUsXG4gICAgICB3aWR0aDogMTUsXG4gICAgICBmaWxsOiBjb2xvci5jb3JlLmdyYXlMaWdodGVyXG4gICAgfVxuICB9O1xufSwge1xuICBwdXJlQ29tcG9uZW50OiB0eXBlb2YgX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICE9PSAndW5kZWZpbmVkJ1xufSkoRGF0ZVJhbmdlUGlja2VyKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZSgnYWlyYm5iLXByb3AtdHlwZXMnKTtcblxudmFyIF9jb25zb2xpZGF0ZWRFdmVudHMgPSByZXF1aXJlKCdjb25zb2xpZGF0ZWQtZXZlbnRzJyk7XG5cbnZhciBfb2JqZWN0ID0gcmVxdWlyZSgnb2JqZWN0LnZhbHVlcycpO1xuXG52YXIgX29iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3QpO1xuXG52YXIgX2RvY3VtZW50ID0gcmVxdWlyZSgnZG9jdW1lbnQuY29udGFpbnMnKTtcblxudmFyIF9kb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb2N1bWVudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgRElTUExBWSA9IHtcbiAgQkxPQ0s6ICdibG9jaycsXG4gIEZMRVg6ICdmbGV4JyxcbiAgSU5MSU5FX0JMT0NLOiAnaW5saW5lLWJsb2NrJ1xufTtcblxudmFyIHByb3BUeXBlcyA9ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZS5pc1JlcXVpcmVkLFxuICBvbk91dHNpZGVDbGljazogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIHVzZUNhcHR1cmU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgZGlzcGxheTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZigoMCwgX29iamVjdDJbJ2RlZmF1bHQnXSkoRElTUExBWSkpXG59KTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuXG4gIC8vIGB1c2VDYXB0dXJlYCBpcyBzZXQgdG8gdHJ1ZSBieSBkZWZhdWx0IHNvIHRoYXQgYSBgc3RvcFByb3BhZ2F0aW9uYCBpbiB0aGVcbiAgLy8gY2hpbGRyZW4gd2lsbCBub3QgcHJldmVudCBhbGwgb3V0c2lkZSBjbGljayBoYW5kbGVycyBmcm9tIGZpcmluZyAtIG1hamFcbiAgdXNlQ2FwdHVyZTogdHJ1ZSxcbiAgZGlzcGxheTogRElTUExBWS5CTE9DS1xufTtcblxudmFyIE91dHNpZGVDbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoT3V0c2lkZUNsaWNrSGFuZGxlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gT3V0c2lkZUNsaWNrSGFuZGxlcigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPdXRzaWRlQ2xpY2tIYW5kbGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gT3V0c2lkZUNsaWNrSGFuZGxlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE91dHNpZGVDbGlja0hhbmRsZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF90aGlzLm9uTW91c2VEb3duID0gX3RoaXMub25Nb3VzZURvd24uYmluZChfdGhpcyk7XG4gICAgX3RoaXMub25Nb3VzZVVwID0gX3RoaXMub25Nb3VzZVVwLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLnNldENoaWxkTm9kZVJlZiA9IF90aGlzLnNldENoaWxkTm9kZVJlZi5iaW5kKF90aGlzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoT3V0c2lkZUNsaWNrSGFuZGxlciwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgdXNlQ2FwdHVyZSA9IF9wcm9wcy51c2VDYXB0dXJlO1xuXG5cbiAgICAgICAgaWYgKCFkaXNhYmxlZCkgdGhpcy5hZGRNb3VzZURvd25FdmVudExpc3RlbmVyKHVzZUNhcHR1cmUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcG9uZW50RGlkTW91bnQ7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhfcmVmMikge1xuICAgICAgICB2YXIgZGlzYWJsZWQgPSBfcmVmMi5kaXNhYmxlZCxcbiAgICAgICAgICAgIHVzZUNhcHR1cmUgPSBfcmVmMi51c2VDYXB0dXJlO1xuICAgICAgICB2YXIgcHJldkRpc2FibGVkID0gdGhpcy5wcm9wcy5kaXNhYmxlZDtcblxuICAgICAgICBpZiAocHJldkRpc2FibGVkICE9PSBkaXNhYmxlZCkge1xuICAgICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZE1vdXNlRG93bkV2ZW50TGlzdGVuZXIodXNlQ2FwdHVyZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcG9uZW50V2lsbFVubW91bnQ7XG4gICAgfSgpXG5cbiAgICAvLyBVc2UgbW91c2Vkb3duL21vdXNldXAgdG8gZW5mb3JjZSB0aGF0IGNsaWNrcyByZW1haW4gb3V0c2lkZSB0aGUgcm9vdCdzXG4gICAgLy8gZGVzY2VuZGFudCB0cmVlLCBldmVuIHdoZW4gZHJhZ2dlZC4gVGhpcyBzaG91bGQgYWxzbyBnZXQgdHJpZ2dlcmVkIG9uXG4gICAgLy8gdG91Y2ggZGV2aWNlcy5cblxuICB9LCB7XG4gICAga2V5OiAnb25Nb3VzZURvd24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbk1vdXNlRG93bihlKSB7XG4gICAgICAgIHZhciB1c2VDYXB0dXJlID0gdGhpcy5wcm9wcy51c2VDYXB0dXJlO1xuXG5cbiAgICAgICAgdmFyIGlzRGVzY2VuZGFudE9mUm9vdCA9IHRoaXMuY2hpbGROb2RlICYmICgwLCBfZG9jdW1lbnQyWydkZWZhdWx0J10pKHRoaXMuY2hpbGROb2RlLCBlLnRhcmdldCk7XG4gICAgICAgIGlmICghaXNEZXNjZW5kYW50T2ZSb290KSB7XG4gICAgICAgICAgaWYgKHRoaXMucmVtb3ZlTW91c2VVcCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVNb3VzZVVwKCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZU1vdXNlVXAgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnJlbW92ZU1vdXNlVXAgPSAoMCwgX2NvbnNvbGlkYXRlZEV2ZW50cy5hZGRFdmVudExpc3RlbmVyKShkb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLm9uTW91c2VVcCwgeyBjYXB0dXJlOiB1c2VDYXB0dXJlIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbk1vdXNlRG93bjtcbiAgICB9KClcblxuICAgIC8vIFVzZSBtb3VzZWRvd24vbW91c2V1cCB0byBlbmZvcmNlIHRoYXQgY2xpY2tzIHJlbWFpbiBvdXRzaWRlIHRoZSByb290J3NcbiAgICAvLyBkZXNjZW5kYW50IHRyZWUsIGV2ZW4gd2hlbiBkcmFnZ2VkLiBUaGlzIHNob3VsZCBhbHNvIGdldCB0cmlnZ2VyZWQgb25cbiAgICAvLyB0b3VjaCBkZXZpY2VzLlxuXG4gIH0sIHtcbiAgICBrZXk6ICdvbk1vdXNlVXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBvbk1vdXNlVXAoZSkge1xuICAgICAgICB2YXIgb25PdXRzaWRlQ2xpY2sgPSB0aGlzLnByb3BzLm9uT3V0c2lkZUNsaWNrO1xuXG5cbiAgICAgICAgdmFyIGlzRGVzY2VuZGFudE9mUm9vdCA9IHRoaXMuY2hpbGROb2RlICYmICgwLCBfZG9jdW1lbnQyWydkZWZhdWx0J10pKHRoaXMuY2hpbGROb2RlLCBlLnRhcmdldCk7XG4gICAgICAgIGlmICh0aGlzLnJlbW92ZU1vdXNlVXApIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZU1vdXNlVXAoKTtcbiAgICAgICAgICB0aGlzLnJlbW92ZU1vdXNlVXAgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0Rlc2NlbmRhbnRPZlJvb3QpIHtcbiAgICAgICAgICBvbk91dHNpZGVDbGljayhlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25Nb3VzZVVwO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnc2V0Q2hpbGROb2RlUmVmJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gc2V0Q2hpbGROb2RlUmVmKHJlZikge1xuICAgICAgICB0aGlzLmNoaWxkTm9kZSA9IHJlZjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNldENoaWxkTm9kZVJlZjtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2FkZE1vdXNlRG93bkV2ZW50TGlzdGVuZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBhZGRNb3VzZURvd25FdmVudExpc3RlbmVyKHVzZUNhcHR1cmUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVNb3VzZURvd24gPSAoMCwgX2NvbnNvbGlkYXRlZEV2ZW50cy5hZGRFdmVudExpc3RlbmVyKShkb2N1bWVudCwgJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24sIHsgY2FwdHVyZTogdXNlQ2FwdHVyZSB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFkZE1vdXNlRG93bkV2ZW50TGlzdGVuZXI7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICBpZiAodGhpcy5yZW1vdmVNb3VzZURvd24pIHRoaXMucmVtb3ZlTW91c2VEb3duKCk7XG4gICAgICAgIGlmICh0aGlzLnJlbW92ZU1vdXNlVXApIHRoaXMucmVtb3ZlTW91c2VVcCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVtb3ZlRXZlbnRMaXN0ZW5lcnM7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzMi5jaGlsZHJlbixcbiAgICAgICAgICAgIGRpc3BsYXkgPSBfcHJvcHMyLmRpc3BsYXk7XG5cblxuICAgICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgcmVmOiB0aGlzLnNldENoaWxkTm9kZVJlZixcbiAgICAgICAgICAgIHN0eWxlOiBkaXNwbGF5ICE9PSBESVNQTEFZLkJMT0NLICYmICgwLCBfb2JqZWN0MlsnZGVmYXVsdCddKShESVNQTEFZKS5pbmNsdWRlcyhkaXNwbGF5KSA/IHsgZGlzcGxheTogZGlzcGxheSB9IDogdW5kZWZpbmVkXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjaGlsZHJlblxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVuZGVyO1xuICAgIH0oKVxuICB9XSk7XG5cbiAgcmV0dXJuIE91dHNpZGVDbGlja0hhbmRsZXI7XG59KF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBPdXRzaWRlQ2xpY2tIYW5kbGVyO1xuXG5cbk91dHNpZGVDbGlja0hhbmRsZXIucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuT3V0c2lkZUNsaWNrSGFuZGxlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZXMyMDE2Jyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJ2VzLXRvLXByaW1pdGl2ZS9lczYnKTtcbnZhciBrZXlzID0gcmVxdWlyZSgnb2JqZWN0LWtleXMnKTtcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyICRTeW50YXhFcnJvciA9IEdldEludHJpbnNpYygnJVN5bnRheEVycm9yJScpO1xudmFyICRBcnJheSA9IEdldEludHJpbnNpYygnJUFycmF5JScpO1xudmFyICRTdHJpbmcgPSBHZXRJbnRyaW5zaWMoJyVTdHJpbmclJyk7XG52YXIgJE9iamVjdCA9IEdldEludHJpbnNpYygnJU9iamVjdCUnKTtcbnZhciAkTnVtYmVyID0gR2V0SW50cmluc2ljKCclTnVtYmVyJScpO1xudmFyICRTeW1ib2wgPSBHZXRJbnRyaW5zaWMoJyVTeW1ib2wlJywgdHJ1ZSk7XG52YXIgJFJlZ0V4cCA9IEdldEludHJpbnNpYygnJVJlZ0V4cCUnKTtcblxudmFyIGhhc1N5bWJvbHMgPSAhISRTeW1ib2w7XG5cbnZhciBhc3NlcnRSZWNvcmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYXNzZXJ0UmVjb3JkJyk7XG52YXIgJGlzTmFOID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzTmFOJyk7XG52YXIgJGlzRmluaXRlID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzRmluaXRlJyk7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9ICROdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fCBNYXRoLnBvdygyLCA1MykgLSAxO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9oZWxwZXJzL2Fzc2lnbicpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL2hlbHBlcnMvc2lnbicpO1xudmFyIG1vZCA9IHJlcXVpcmUoJy4vaGVscGVycy9tb2QnKTtcbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vaGVscGVycy9pc1ByaW1pdGl2ZScpO1xudmFyIHBhcnNlSW50ZWdlciA9IHBhcnNlSW50O1xudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgYXJyYXlTbGljZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCAkQXJyYXkucHJvdG90eXBlLnNsaWNlKTtcbnZhciBzdHJTbGljZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCAkU3RyaW5nLnByb3RvdHlwZS5zbGljZSk7XG52YXIgaXNCaW5hcnkgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgJFJlZ0V4cC5wcm90b3R5cGUudGVzdCwgL14wYlswMV0rJC9pKTtcbnZhciBpc09jdGFsID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsICRSZWdFeHAucHJvdG90eXBlLnRlc3QsIC9eMG9bMC03XSskL2kpO1xudmFyIHJlZ2V4RXhlYyA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCAkUmVnRXhwLnByb3RvdHlwZS5leGVjKTtcbnZhciBub25XUyA9IFsnXFx1MDA4NScsICdcXHUyMDBiJywgJ1xcdWZmZmUnXS5qb2luKCcnKTtcbnZhciBub25XU3JlZ2V4ID0gbmV3ICRSZWdFeHAoJ1snICsgbm9uV1MgKyAnXScsICdnJyk7XG52YXIgaGFzTm9uV1MgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgJFJlZ0V4cC5wcm90b3R5cGUudGVzdCwgbm9uV1NyZWdleCk7XG52YXIgaW52YWxpZEhleExpdGVyYWwgPSAvXlstK10weFswLTlhLWZdKyQvaTtcbnZhciBpc0ludmFsaWRIZXhMaXRlcmFsID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsICRSZWdFeHAucHJvdG90eXBlLnRlc3QsIGludmFsaWRIZXhMaXRlcmFsKTtcbnZhciAkY2hhckNvZGVBdCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCAkU3RyaW5nLnByb3RvdHlwZS5jaGFyQ29kZUF0KTtcblxudmFyIHRvU3RyID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpO1xuXG52YXIgJE51bWJlclZhbHVlT2YgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgR2V0SW50cmluc2ljKCclTnVtYmVyUHJvdG90eXBlJScpLnZhbHVlT2YpO1xudmFyICRCb29sZWFuVmFsdWVPZiA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBHZXRJbnRyaW5zaWMoJyVCb29sZWFuUHJvdG90eXBlJScpLnZhbHVlT2YpO1xudmFyICRTdHJpbmdWYWx1ZU9mID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIEdldEludHJpbnNpYygnJVN0cmluZ1Byb3RvdHlwZSUnKS52YWx1ZU9mKTtcbnZhciAkRGF0ZVZhbHVlT2YgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgR2V0SW50cmluc2ljKCclRGF0ZVByb3RvdHlwZSUnKS52YWx1ZU9mKTtcblxudmFyICRmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgJGFicyA9IE1hdGguYWJzO1xuXG52YXIgJE9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgJGdPUEQgPSAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyICRpc0V4dGVuc2libGUgPSAkT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9ICRPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIHdoaXRlc3BhY2UgZnJvbTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS41LjQuMjBcbi8vIGltcGxlbWVudGF0aW9uIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2Jsb2IvdjMuNC4wL2VzNS1zaGltLmpzI0wxMzA0LUwxMzI0XG52YXIgd3MgPSBbXG5cdCdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycsXG5cdCdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOCcsXG5cdCdcXHUyMDI5XFx1RkVGRidcbl0uam9pbignJyk7XG52YXIgdHJpbVJlZ2V4ID0gbmV3IFJlZ0V4cCgnKF5bJyArIHdzICsgJ10rKXwoWycgKyB3cyArICddKyQpJywgJ2cnKTtcbnZhciByZXBsYWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsICRTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xudmFyIHRyaW0gPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0cmV0dXJuIHJlcGxhY2UodmFsdWUsIHRyaW1SZWdleCwgJycpO1xufTtcblxudmFyIEVTNSA9IHJlcXVpcmUoJy4vZXM1Jyk7XG5cbnZhciBoYXNSZWdFeHBNYXRjaGVyID0gcmVxdWlyZSgnaXMtcmVnZXgnKTtcblxuLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWFic3RyYWN0LW9wZXJhdGlvbnNcbnZhciBFUzYgPSBhc3NpZ24oYXNzaWduKHt9LCBFUzUpLCB7XG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWNhbGwtZi12LWFyZ3Ncblx0Q2FsbDogZnVuY3Rpb24gQ2FsbChGLCBWKSB7XG5cdFx0dmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IFtdO1xuXHRcdGlmICghdGhpcy5Jc0NhbGxhYmxlKEYpKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcihGICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuXHRcdH1cblx0XHRyZXR1cm4gRi5hcHBseShWLCBhcmdzKTtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9wcmltaXRpdmVcblx0VG9QcmltaXRpdmU6IHRvUHJpbWl0aXZlLFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2Jvb2xlYW5cblx0Ly8gVG9Cb29sZWFuOiBFUzUuVG9Cb29sZWFuLFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b251bWJlclxuXHRUb051bWJlcjogZnVuY3Rpb24gVG9OdW1iZXIoYXJndW1lbnQpIHtcblx0XHR2YXIgdmFsdWUgPSBpc1ByaW1pdGl2ZShhcmd1bWVudCkgPyBhcmd1bWVudCA6IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAkTnVtYmVyKTtcblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgbnVtYmVyJyk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRpZiAoaXNCaW5hcnkodmFsdWUpKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLlRvTnVtYmVyKHBhcnNlSW50ZWdlcihzdHJTbGljZSh2YWx1ZSwgMiksIDIpKTtcblx0XHRcdH0gZWxzZSBpZiAoaXNPY3RhbCh2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuVG9OdW1iZXIocGFyc2VJbnRlZ2VyKHN0clNsaWNlKHZhbHVlLCAyKSwgOCkpO1xuXHRcdFx0fSBlbHNlIGlmIChoYXNOb25XUyh2YWx1ZSkgfHwgaXNJbnZhbGlkSGV4TGl0ZXJhbCh2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuIE5hTjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciB0cmltbWVkID0gdHJpbSh2YWx1ZSk7XG5cdFx0XHRcdGlmICh0cmltbWVkICE9PSB2YWx1ZSkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLlRvTnVtYmVyKHRyaW1tZWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAkTnVtYmVyKHZhbHVlKTtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9pbnRlZ2VyXG5cdC8vIFRvSW50ZWdlcjogRVM1LlRvTnVtYmVyLFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2ludDMyXG5cdC8vIFRvSW50MzI6IEVTNS5Ub0ludDMyLFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b3VpbnQzMlxuXHQvLyBUb1VpbnQzMjogRVM1LlRvVWludDMyLFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2ludDE2XG5cdFRvSW50MTY6IGZ1bmN0aW9uIFRvSW50MTYoYXJndW1lbnQpIHtcblx0XHR2YXIgaW50MTZiaXQgPSB0aGlzLlRvVWludDE2KGFyZ3VtZW50KTtcblx0XHRyZXR1cm4gaW50MTZiaXQgPj0gMHg4MDAwID8gaW50MTZiaXQgLSAweDEwMDAwIDogaW50MTZiaXQ7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvdWludDE2XG5cdC8vIFRvVWludDE2OiBFUzUuVG9VaW50MTYsXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvaW50OFxuXHRUb0ludDg6IGZ1bmN0aW9uIFRvSW50OChhcmd1bWVudCkge1xuXHRcdHZhciBpbnQ4Yml0ID0gdGhpcy5Ub1VpbnQ4KGFyZ3VtZW50KTtcblx0XHRyZXR1cm4gaW50OGJpdCA+PSAweDgwID8gaW50OGJpdCAtIDB4MTAwIDogaW50OGJpdDtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG91aW50OFxuXHRUb1VpbnQ4OiBmdW5jdGlvbiBUb1VpbnQ4KGFyZ3VtZW50KSB7XG5cdFx0dmFyIG51bWJlciA9IHRoaXMuVG9OdW1iZXIoYXJndW1lbnQpO1xuXHRcdGlmICgkaXNOYU4obnVtYmVyKSB8fCBudW1iZXIgPT09IDAgfHwgISRpc0Zpbml0ZShudW1iZXIpKSB7IHJldHVybiAwOyB9XG5cdFx0dmFyIHBvc0ludCA9IHNpZ24obnVtYmVyKSAqICRmbG9vcigkYWJzKG51bWJlcikpO1xuXHRcdHJldHVybiBtb2QocG9zSW50LCAweDEwMCk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvdWludDhjbGFtcFxuXHRUb1VpbnQ4Q2xhbXA6IGZ1bmN0aW9uIFRvVWludDhDbGFtcChhcmd1bWVudCkge1xuXHRcdHZhciBudW1iZXIgPSB0aGlzLlRvTnVtYmVyKGFyZ3VtZW50KTtcblx0XHRpZiAoJGlzTmFOKG51bWJlcikgfHwgbnVtYmVyIDw9IDApIHsgcmV0dXJuIDA7IH1cblx0XHRpZiAobnVtYmVyID49IDB4RkYpIHsgcmV0dXJuIDB4RkY7IH1cblx0XHR2YXIgZiA9ICRmbG9vcihhcmd1bWVudCk7XG5cdFx0aWYgKGYgKyAwLjUgPCBudW1iZXIpIHsgcmV0dXJuIGYgKyAxOyB9XG5cdFx0aWYgKG51bWJlciA8IGYgKyAwLjUpIHsgcmV0dXJuIGY7IH1cblx0XHRpZiAoZiAlIDIgIT09IDApIHsgcmV0dXJuIGYgKyAxOyB9XG5cdFx0cmV0dXJuIGY7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvc3RyaW5nXG5cdFRvU3RyaW5nOiBmdW5jdGlvbiBUb1N0cmluZyhhcmd1bWVudCkge1xuXHRcdGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdzeW1ib2wnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBzdHJpbmcnKTtcblx0XHR9XG5cdFx0cmV0dXJuICRTdHJpbmcoYXJndW1lbnQpO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b29iamVjdFxuXHRUb09iamVjdDogZnVuY3Rpb24gVG9PYmplY3QodmFsdWUpIHtcblx0XHR0aGlzLlJlcXVpcmVPYmplY3RDb2VyY2libGUodmFsdWUpO1xuXHRcdHJldHVybiAkT2JqZWN0KHZhbHVlKTtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9wcm9wZXJ0eWtleVxuXHRUb1Byb3BlcnR5S2V5OiBmdW5jdGlvbiBUb1Byb3BlcnR5S2V5KGFyZ3VtZW50KSB7XG5cdFx0dmFyIGtleSA9IHRoaXMuVG9QcmltaXRpdmUoYXJndW1lbnQsICRTdHJpbmcpO1xuXHRcdHJldHVybiB0eXBlb2Yga2V5ID09PSAnc3ltYm9sJyA/IGtleSA6IHRoaXMuVG9TdHJpbmcoa2V5KTtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9sZW5ndGhcblx0VG9MZW5ndGg6IGZ1bmN0aW9uIFRvTGVuZ3RoKGFyZ3VtZW50KSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMuVG9JbnRlZ2VyKGFyZ3VtZW50KTtcblx0XHRpZiAobGVuIDw9IDApIHsgcmV0dXJuIDA7IH0gLy8gaW5jbHVkZXMgY29udmVydGluZyAtMCB0byArMFxuXHRcdGlmIChsZW4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7IHJldHVybiBNQVhfU0FGRV9JTlRFR0VSOyB9XG5cdFx0cmV0dXJuIGxlbjtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtY2Fub25pY2FsbnVtZXJpY2luZGV4c3RyaW5nXG5cdENhbm9uaWNhbE51bWVyaWNJbmRleFN0cmluZzogZnVuY3Rpb24gQ2Fub25pY2FsTnVtZXJpY0luZGV4U3RyaW5nKGFyZ3VtZW50KSB7XG5cdFx0aWYgKHRvU3RyKGFyZ3VtZW50KSAhPT0gJ1tvYmplY3QgU3RyaW5nXScpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdtdXN0IGJlIGEgc3RyaW5nJyk7XG5cdFx0fVxuXHRcdGlmIChhcmd1bWVudCA9PT0gJy0wJykgeyByZXR1cm4gLTA7IH1cblx0XHR2YXIgbiA9IHRoaXMuVG9OdW1iZXIoYXJndW1lbnQpO1xuXHRcdGlmICh0aGlzLlNhbWVWYWx1ZSh0aGlzLlRvU3RyaW5nKG4pLCBhcmd1bWVudCkpIHsgcmV0dXJuIG47IH1cblx0XHRyZXR1cm4gdm9pZCAwO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5cdFJlcXVpcmVPYmplY3RDb2VyY2libGU6IEVTNS5DaGVja09iamVjdENvZXJjaWJsZSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtaXNhcnJheVxuXHRJc0FycmF5OiAkQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBJc0FycmF5KGFyZ3VtZW50KSB7XG5cdFx0cmV0dXJuIHRvU3RyKGFyZ3VtZW50KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtaXNjYWxsYWJsZVxuXHQvLyBJc0NhbGxhYmxlOiBFUzUuSXNDYWxsYWJsZSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtaXNjb25zdHJ1Y3RvclxuXHRJc0NvbnN0cnVjdG9yOiBmdW5jdGlvbiBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG5cdFx0cmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PT0gJ2Z1bmN0aW9uJyAmJiAhIWFyZ3VtZW50LnByb3RvdHlwZTsgLy8gdW5mb3J0dW5hdGVseSB0aGVyZSdzIG5vIHdheSB0byB0cnVseSBjaGVjayB0aGlzIHdpdGhvdXQgdHJ5L2NhdGNoIGBuZXcgYXJndW1lbnRgXG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWlzZXh0ZW5zaWJsZS1vXG5cdElzRXh0ZW5zaWJsZTogT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zXG5cdFx0PyBmdW5jdGlvbiBJc0V4dGVuc2libGUob2JqKSB7XG5cdFx0XHRpZiAoaXNQcmltaXRpdmUob2JqKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gJGlzRXh0ZW5zaWJsZShvYmopO1xuXHRcdH1cblx0XHQ6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShvYmopIHsgcmV0dXJuIHRydWU7IH0sIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtaXNpbnRlZ2VyXG5cdElzSW50ZWdlcjogZnVuY3Rpb24gSXNJbnRlZ2VyKGFyZ3VtZW50KSB7XG5cdFx0aWYgKHR5cGVvZiBhcmd1bWVudCAhPT0gJ251bWJlcicgfHwgJGlzTmFOKGFyZ3VtZW50KSB8fCAhJGlzRmluaXRlKGFyZ3VtZW50KSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHR2YXIgYWJzID0gJGFicyhhcmd1bWVudCk7XG5cdFx0cmV0dXJuICRmbG9vcihhYnMpID09PSBhYnM7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWlzcHJvcGVydHlrZXlcblx0SXNQcm9wZXJ0eUtleTogZnVuY3Rpb24gSXNQcm9wZXJ0eUtleShhcmd1bWVudCkge1xuXHRcdHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N5bWJvbCc7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzcmVnZXhwXG5cdElzUmVnRXhwOiBmdW5jdGlvbiBJc1JlZ0V4cChhcmd1bWVudCkge1xuXHRcdGlmICghYXJndW1lbnQgfHwgdHlwZW9mIGFyZ3VtZW50ICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoaGFzU3ltYm9scykge1xuXHRcdFx0dmFyIGlzUmVnRXhwID0gYXJndW1lbnRbJFN5bWJvbC5tYXRjaF07XG5cdFx0XHRpZiAodHlwZW9mIGlzUmVnRXhwICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRyZXR1cm4gRVM1LlRvQm9vbGVhbihpc1JlZ0V4cCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBoYXNSZWdFeHBNYXRjaGVyKGFyZ3VtZW50KTtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtc2FtZXZhbHVlXG5cdC8vIFNhbWVWYWx1ZTogRVM1LlNhbWVWYWx1ZSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtc2FtZXZhbHVlemVyb1xuXHRTYW1lVmFsdWVaZXJvOiBmdW5jdGlvbiBTYW1lVmFsdWVaZXJvKHgsIHkpIHtcblx0XHRyZXR1cm4gKHggPT09IHkpIHx8ICgkaXNOYU4oeCkgJiYgJGlzTmFOKHkpKTtcblx0fSxcblxuXHQvKipcblx0ICogNy4zLjIgR2V0ViAoViwgUClcblx0ICogMS4gQXNzZXJ0OiBJc1Byb3BlcnR5S2V5KFApIGlzIHRydWUuXG5cdCAqIDIuIExldCBPIGJlIFRvT2JqZWN0KFYpLlxuXHQgKiAzLiBSZXR1cm5JZkFicnVwdChPKS5cblx0ICogNC4gUmV0dXJuIE8uW1tHZXRdXShQLCBWKS5cblx0ICovXG5cdEdldFY6IGZ1bmN0aW9uIEdldFYoViwgUCkge1xuXHRcdC8vIDcuMy4yLjFcblx0XHRpZiAoIXRoaXMuSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0XHR9XG5cblx0XHQvLyA3LjMuMi4yLTNcblx0XHR2YXIgTyA9IHRoaXMuVG9PYmplY3QoVik7XG5cblx0XHQvLyA3LjMuMi40XG5cdFx0cmV0dXJuIE9bUF07XG5cdH0sXG5cblx0LyoqXG5cdCAqIDcuMy45IC0gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWdldG1ldGhvZFxuXHQgKiAxLiBBc3NlcnQ6IElzUHJvcGVydHlLZXkoUCkgaXMgdHJ1ZS5cblx0ICogMi4gTGV0IGZ1bmMgYmUgR2V0VihPLCBQKS5cblx0ICogMy4gUmV0dXJuSWZBYnJ1cHQoZnVuYykuXG5cdCAqIDQuIElmIGZ1bmMgaXMgZWl0aGVyIHVuZGVmaW5lZCBvciBudWxsLCByZXR1cm4gdW5kZWZpbmVkLlxuXHQgKiA1LiBJZiBJc0NhbGxhYmxlKGZ1bmMpIGlzIGZhbHNlLCB0aHJvdyBhIFR5cGVFcnJvciBleGNlcHRpb24uXG5cdCAqIDYuIFJldHVybiBmdW5jLlxuXHQgKi9cblx0R2V0TWV0aG9kOiBmdW5jdGlvbiBHZXRNZXRob2QoTywgUCkge1xuXHRcdC8vIDcuMy45LjFcblx0XHRpZiAoIXRoaXMuSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0XHR9XG5cblx0XHQvLyA3LjMuOS4yXG5cdFx0dmFyIGZ1bmMgPSB0aGlzLkdldFYoTywgUCk7XG5cblx0XHQvLyA3LjMuOS40XG5cdFx0aWYgKGZ1bmMgPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIHZvaWQgMDtcblx0XHR9XG5cblx0XHQvLyA3LjMuOS41XG5cdFx0aWYgKCF0aGlzLklzQ2FsbGFibGUoZnVuYykpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKFAgKyAnaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cblx0XHQvLyA3LjMuOS42XG5cdFx0cmV0dXJuIGZ1bmM7XG5cdH0sXG5cblx0LyoqXG5cdCAqIDcuMy4xIEdldCAoTywgUCkgLSBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZ2V0LW8tcFxuXHQgKiAxLiBBc3NlcnQ6IFR5cGUoTykgaXMgT2JqZWN0LlxuXHQgKiAyLiBBc3NlcnQ6IElzUHJvcGVydHlLZXkoUCkgaXMgdHJ1ZS5cblx0ICogMy4gUmV0dXJuIE8uW1tHZXRdXShQLCBPKS5cblx0ICovXG5cdEdldDogZnVuY3Rpb24gR2V0KE8sIFApIHtcblx0XHQvLyA3LjMuMS4xXG5cdFx0aWYgKHRoaXMuVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0XHR9XG5cdFx0Ly8gNy4zLjEuMlxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHRcdH1cblx0XHQvLyA3LjMuMS4zXG5cdFx0cmV0dXJuIE9bUF07XG5cdH0sXG5cblx0VHlwZTogZnVuY3Rpb24gVHlwZSh4KSB7XG5cdFx0aWYgKHR5cGVvZiB4ID09PSAnc3ltYm9sJykge1xuXHRcdFx0cmV0dXJuICdTeW1ib2wnO1xuXHRcdH1cblx0XHRyZXR1cm4gRVM1LlR5cGUoeCk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXNwZWNpZXNjb25zdHJ1Y3RvclxuXHRTcGVjaWVzQ29uc3RydWN0b3I6IGZ1bmN0aW9uIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcblx0XHRpZiAodGhpcy5UeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoTykgaXMgbm90IE9iamVjdCcpO1xuXHRcdH1cblx0XHR2YXIgQyA9IE8uY29uc3RydWN0b3I7XG5cdFx0aWYgKHR5cGVvZiBDID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIGRlZmF1bHRDb25zdHJ1Y3Rvcjtcblx0XHR9XG5cdFx0aWYgKHRoaXMuVHlwZShDKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdPLmNvbnN0cnVjdG9yIGlzIG5vdCBhbiBPYmplY3QnKTtcblx0XHR9XG5cdFx0dmFyIFMgPSBoYXNTeW1ib2xzICYmICRTeW1ib2wuc3BlY2llcyA/IENbJFN5bWJvbC5zcGVjaWVzXSA6IHZvaWQgMDtcblx0XHRpZiAoUyA9PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gZGVmYXVsdENvbnN0cnVjdG9yO1xuXHRcdH1cblx0XHRpZiAodGhpcy5Jc0NvbnN0cnVjdG9yKFMpKSB7XG5cdFx0XHRyZXR1cm4gUztcblx0XHR9XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ25vIGNvbnN0cnVjdG9yIGZvdW5kJyk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWNvbXBsZXRlcHJvcGVydHlkZXNjcmlwdG9yXG5cdENvbXBsZXRlUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBDb21wbGV0ZVByb3BlcnR5RGVzY3JpcHRvcihEZXNjKSB7XG5cdFx0YXNzZXJ0UmVjb3JkKHRoaXMsICdQcm9wZXJ0eSBEZXNjcmlwdG9yJywgJ0Rlc2MnLCBEZXNjKTtcblxuXHRcdGlmICh0aGlzLklzR2VuZXJpY0Rlc2NyaXB0b3IoRGVzYykgfHwgdGhpcy5Jc0RhdGFEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0XHRpZiAoIWhhcyhEZXNjLCAnW1tWYWx1ZV1dJykpIHtcblx0XHRcdFx0RGVzY1snW1tWYWx1ZV1dJ10gPSB2b2lkIDA7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWhhcyhEZXNjLCAnW1tXcml0YWJsZV1dJykpIHtcblx0XHRcdFx0RGVzY1snW1tXcml0YWJsZV1dJ10gPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCFoYXMoRGVzYywgJ1tbR2V0XV0nKSkge1xuXHRcdFx0XHREZXNjWydbW0dldF1dJ10gPSB2b2lkIDA7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWhhcyhEZXNjLCAnW1tTZXRdXScpKSB7XG5cdFx0XHRcdERlc2NbJ1tbU2V0XV0nXSA9IHZvaWQgMDtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCFoYXMoRGVzYywgJ1tbRW51bWVyYWJsZV1dJykpIHtcblx0XHRcdERlc2NbJ1tbRW51bWVyYWJsZV1dJ10gPSBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKCFoYXMoRGVzYywgJ1tbQ29uZmlndXJhYmxlXV0nKSkge1xuXHRcdFx0RGVzY1snW1tDb25maWd1cmFibGVdXSddID0gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiBEZXNjO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zZXQtby1wLXYtdGhyb3dcblx0U2V0OiBmdW5jdGlvbiBTZXQoTywgUCwgViwgVGhyb3cpIHtcblx0XHRpZiAodGhpcy5UeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ08gbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdQIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuVHlwZShUaHJvdykgIT09ICdCb29sZWFuJykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1Rocm93IG11c3QgYmUgYSBCb29sZWFuJyk7XG5cdFx0fVxuXHRcdGlmIChUaHJvdykge1xuXHRcdFx0T1tQXSA9IFY7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0T1tQXSA9IFY7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWhhc293bnByb3BlcnR5XG5cdEhhc093blByb3BlcnR5OiBmdW5jdGlvbiBIYXNPd25Qcm9wZXJ0eShPLCBQKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdPIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUCBtdXN0IGJlIGEgUHJvcGVydHkgS2V5Jyk7XG5cdFx0fVxuXHRcdHJldHVybiBoYXMoTywgUCk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWhhc3Byb3BlcnR5XG5cdEhhc1Byb3BlcnR5OiBmdW5jdGlvbiBIYXNQcm9wZXJ0eShPLCBQKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdPIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUCBtdXN0IGJlIGEgUHJvcGVydHkgS2V5Jyk7XG5cdFx0fVxuXHRcdHJldHVybiBQIGluIE87XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzY29uY2F0c3ByZWFkYWJsZVxuXHRJc0NvbmNhdFNwcmVhZGFibGU6IGZ1bmN0aW9uIElzQ29uY2F0U3ByZWFkYWJsZShPKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKGhhc1N5bWJvbHMgJiYgdHlwZW9mICRTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlID09PSAnc3ltYm9sJykge1xuXHRcdFx0dmFyIHNwcmVhZGFibGUgPSB0aGlzLkdldChPLCBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlKTtcblx0XHRcdGlmICh0eXBlb2Ygc3ByZWFkYWJsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuVG9Cb29sZWFuKHNwcmVhZGFibGUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5Jc0FycmF5KE8pO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pbnZva2Vcblx0SW52b2tlOiBmdW5jdGlvbiBJbnZva2UoTywgUCkge1xuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUCBtdXN0IGJlIGEgUHJvcGVydHkgS2V5Jyk7XG5cdFx0fVxuXHRcdHZhciBhcmd1bWVudHNMaXN0ID0gYXJyYXlTbGljZShhcmd1bWVudHMsIDIpO1xuXHRcdHZhciBmdW5jID0gdGhpcy5HZXRWKE8sIFApO1xuXHRcdHJldHVybiB0aGlzLkNhbGwoZnVuYywgTywgYXJndW1lbnRzTGlzdCk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWdldGl0ZXJhdG9yXG5cdEdldEl0ZXJhdG9yOiBmdW5jdGlvbiBHZXRJdGVyYXRvcihvYmosIG1ldGhvZCkge1xuXHRcdGlmICghaGFzU3ltYm9scykge1xuXHRcdFx0dGhyb3cgbmV3IFN5bnRheEVycm9yKCdFUy5HZXRJdGVyYXRvciBkZXBlbmRzIG9uIG5hdGl2ZSBpdGVyYXRvciBzdXBwb3J0LicpO1xuXHRcdH1cblxuXHRcdHZhciBhY3R1YWxNZXRob2QgPSBtZXRob2Q7XG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG5cdFx0XHRhY3R1YWxNZXRob2QgPSB0aGlzLkdldE1ldGhvZChvYmosICRTeW1ib2wuaXRlcmF0b3IpO1xuXHRcdH1cblx0XHR2YXIgaXRlcmF0b3IgPSB0aGlzLkNhbGwoYWN0dWFsTWV0aG9kLCBvYmopO1xuXHRcdGlmICh0aGlzLlR5cGUoaXRlcmF0b3IpICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2l0ZXJhdG9yIG11c3QgcmV0dXJuIGFuIG9iamVjdCcpO1xuXHRcdH1cblxuXHRcdHJldHVybiBpdGVyYXRvcjtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXRlcmF0b3JuZXh0XG5cdEl0ZXJhdG9yTmV4dDogZnVuY3Rpb24gSXRlcmF0b3JOZXh0KGl0ZXJhdG9yLCB2YWx1ZSkge1xuXHRcdHZhciByZXN1bHQgPSB0aGlzLkludm9rZShpdGVyYXRvciwgJ25leHQnLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IFtdIDogW3ZhbHVlXSk7XG5cdFx0aWYgKHRoaXMuVHlwZShyZXN1bHQpICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2l0ZXJhdG9yIG5leHQgbXVzdCByZXR1cm4gYW4gb2JqZWN0Jyk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWl0ZXJhdG9yY29tcGxldGVcblx0SXRlcmF0b3JDb21wbGV0ZTogZnVuY3Rpb24gSXRlcmF0b3JDb21wbGV0ZShpdGVyUmVzdWx0KSB7XG5cdFx0aWYgKHRoaXMuVHlwZShpdGVyUmVzdWx0KSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKGl0ZXJSZXN1bHQpIGlzIG5vdCBPYmplY3QnKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuVG9Cb29sZWFuKHRoaXMuR2V0KGl0ZXJSZXN1bHQsICdkb25lJykpO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pdGVyYXRvcnZhbHVlXG5cdEl0ZXJhdG9yVmFsdWU6IGZ1bmN0aW9uIEl0ZXJhdG9yVmFsdWUoaXRlclJlc3VsdCkge1xuXHRcdGlmICh0aGlzLlR5cGUoaXRlclJlc3VsdCkgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShpdGVyUmVzdWx0KSBpcyBub3QgT2JqZWN0Jyk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLkdldChpdGVyUmVzdWx0LCAndmFsdWUnKTtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXRlcmF0b3JzdGVwXG5cdEl0ZXJhdG9yU3RlcDogZnVuY3Rpb24gSXRlcmF0b3JTdGVwKGl0ZXJhdG9yKSB7XG5cdFx0dmFyIHJlc3VsdCA9IHRoaXMuSXRlcmF0b3JOZXh0KGl0ZXJhdG9yKTtcblx0XHR2YXIgZG9uZSA9IHRoaXMuSXRlcmF0b3JDb21wbGV0ZShyZXN1bHQpO1xuXHRcdHJldHVybiBkb25lID09PSB0cnVlID8gZmFsc2UgOiByZXN1bHQ7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWl0ZXJhdG9yY2xvc2Vcblx0SXRlcmF0b3JDbG9zZTogZnVuY3Rpb24gSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbikge1xuXHRcdGlmICh0aGlzLlR5cGUoaXRlcmF0b3IpICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoaXRlcmF0b3IpIGlzIG5vdCBPYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLklzQ2FsbGFibGUoY29tcGxldGlvbikpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBjb21wbGV0aW9uIGlzIG5vdCBhIHRodW5rIGZvciBhIENvbXBsZXRpb24gUmVjb3JkJyk7XG5cdFx0fVxuXHRcdHZhciBjb21wbGV0aW9uVGh1bmsgPSBjb21wbGV0aW9uO1xuXG5cdFx0dmFyIGl0ZXJhdG9yUmV0dXJuID0gdGhpcy5HZXRNZXRob2QoaXRlcmF0b3IsICdyZXR1cm4nKTtcblxuXHRcdGlmICh0eXBlb2YgaXRlcmF0b3JSZXR1cm4gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gY29tcGxldGlvblRodW5rKCk7XG5cdFx0fVxuXG5cdFx0dmFyIGNvbXBsZXRpb25SZWNvcmQ7XG5cdFx0dHJ5IHtcblx0XHRcdHZhciBpbm5lclJlc3VsdCA9IHRoaXMuQ2FsbChpdGVyYXRvclJldHVybiwgaXRlcmF0b3IsIFtdKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHQvLyBpZiB3ZSBoaXQgaGVyZSwgdGhlbiBcImVcIiBpcyB0aGUgaW5uZXJSZXN1bHQgY29tcGxldGlvbiB0aGF0IG5lZWRzIHJlLXRocm93aW5nXG5cblx0XHRcdC8vIGlmIHRoZSBjb21wbGV0aW9uIGlzIG9mIHR5cGUgXCJ0aHJvd1wiLCB0aGlzIHdpbGwgdGhyb3cuXG5cdFx0XHRjb21wbGV0aW9uUmVjb3JkID0gY29tcGxldGlvblRodW5rKCk7XG5cdFx0XHRjb21wbGV0aW9uVGh1bmsgPSBudWxsOyAvLyBlbnN1cmUgaXQncyBub3QgY2FsbGVkIHR3aWNlLlxuXG5cdFx0XHQvLyBpZiBub3QsIHRoZW4gcmV0dXJuIHRoZSBpbm5lclJlc3VsdCBjb21wbGV0aW9uXG5cdFx0XHR0aHJvdyBlO1xuXHRcdH1cblx0XHRjb21wbGV0aW9uUmVjb3JkID0gY29tcGxldGlvblRodW5rKCk7IC8vIGlmIGlubmVyUmVzdWx0IHdvcmtlZCwgdGhlbiB0aHJvdyBpZiB0aGUgY29tcGxldGlvbiBkb2VzXG5cdFx0Y29tcGxldGlvblRodW5rID0gbnVsbDsgLy8gZW5zdXJlIGl0J3Mgbm90IGNhbGxlZCB0d2ljZS5cblxuXHRcdGlmICh0aGlzLlR5cGUoaW5uZXJSZXN1bHQpICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2l0ZXJhdG9yIC5yZXR1cm4gbXVzdCByZXR1cm4gYW4gb2JqZWN0Jyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBsZXRpb25SZWNvcmQ7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWNyZWF0ZWl0ZXJyZXN1bHRvYmplY3Rcblx0Q3JlYXRlSXRlclJlc3VsdE9iamVjdDogZnVuY3Rpb24gQ3JlYXRlSXRlclJlc3VsdE9iamVjdCh2YWx1ZSwgZG9uZSkge1xuXHRcdGlmICh0aGlzLlR5cGUoZG9uZSkgIT09ICdCb29sZWFuJykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoZG9uZSkgaXMgbm90IEJvb2xlYW4nKTtcblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdGRvbmU6IGRvbmVcblx0XHR9O1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1yZWdleHBleGVjXG5cdFJlZ0V4cEV4ZWM6IGZ1bmN0aW9uIFJlZ0V4cEV4ZWMoUiwgUykge1xuXHRcdGlmICh0aGlzLlR5cGUoUikgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUiBtdXN0IGJlIGFuIE9iamVjdCcpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5UeXBlKFMpICE9PSAnU3RyaW5nJykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1MgbXVzdCBiZSBhIFN0cmluZycpO1xuXHRcdH1cblx0XHR2YXIgZXhlYyA9IHRoaXMuR2V0KFIsICdleGVjJyk7XG5cdFx0aWYgKHRoaXMuSXNDYWxsYWJsZShleGVjKSkge1xuXHRcdFx0dmFyIHJlc3VsdCA9IHRoaXMuQ2FsbChleGVjLCBSLCBbU10pO1xuXHRcdFx0aWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0aGlzLlR5cGUocmVzdWx0KSA9PT0gJ09iamVjdCcpIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH1cblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdcImV4ZWNcIiBtZXRob2QgbXVzdCByZXR1cm4gYG51bGxgIG9yIGFuIE9iamVjdCcpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVnZXhFeGVjKFIsIFMpO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcblx0QXJyYXlTcGVjaWVzQ3JlYXRlOiBmdW5jdGlvbiBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG5cdFx0aWYgKCF0aGlzLklzSW50ZWdlcihsZW5ndGgpIHx8IGxlbmd0aCA8IDApIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBsZW5ndGggbXVzdCBiZSBhbiBpbnRlZ2VyID49IDAnKTtcblx0XHR9XG5cdFx0dmFyIGxlbiA9IGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGg7XG5cdFx0dmFyIEM7XG5cdFx0dmFyIGlzQXJyYXkgPSB0aGlzLklzQXJyYXkob3JpZ2luYWxBcnJheSk7XG5cdFx0aWYgKGlzQXJyYXkpIHtcblx0XHRcdEMgPSB0aGlzLkdldChvcmlnaW5hbEFycmF5LCAnY29uc3RydWN0b3InKTtcblx0XHRcdC8vIFRPRE86IGZpZ3VyZSBvdXQgaG93IHRvIG1ha2UgYSBjcm9zcy1yZWFsbSBub3JtYWwgQXJyYXksIGEgc2FtZS1yZWFsbSBBcnJheVxuXHRcdFx0Ly8gaWYgKHRoaXMuSXNDb25zdHJ1Y3RvcihDKSkge1xuXHRcdFx0Ly8gXHRpZiBDIGlzIGFub3RoZXIgcmVhbG0ncyBBcnJheSwgQyA9IHVuZGVmaW5lZFxuXHRcdFx0Ly8gXHRPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5nZXRQcm90b3R5cGVPZihBcnJheSkpKSA9PT0gbnVsbCA/XG5cdFx0XHQvLyB9XG5cdFx0XHRpZiAodGhpcy5UeXBlKEMpID09PSAnT2JqZWN0JyAmJiBoYXNTeW1ib2xzICYmICRTeW1ib2wuc3BlY2llcykge1xuXHRcdFx0XHRDID0gdGhpcy5HZXQoQywgJFN5bWJvbC5zcGVjaWVzKTtcblx0XHRcdFx0aWYgKEMgPT09IG51bGwpIHtcblx0XHRcdFx0XHRDID0gdm9pZCAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgQyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiAkQXJyYXkobGVuKTtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLklzQ29uc3RydWN0b3IoQykpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdDIG11c3QgYmUgYSBjb25zdHJ1Y3RvcicpO1xuXHRcdH1cblx0XHRyZXR1cm4gbmV3IEMobGVuKTsgLy8gdGhpcy5Db25zdHJ1Y3QoQywgbGVuKTtcblx0fSxcblxuXHRDcmVhdGVEYXRhUHJvcGVydHk6IGZ1bmN0aW9uIENyZWF0ZURhdGFQcm9wZXJ0eShPLCBQLCBWKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBJc1Byb3BlcnR5S2V5KFApIGlzIG5vdCB0cnVlJyk7XG5cdFx0fVxuXHRcdHZhciBvbGREZXNjID0gJGdPUEQoTywgUCk7XG5cdFx0dmFyIGV4dGVuc2libGUgPSBvbGREZXNjIHx8ICh0eXBlb2YgJGlzRXh0ZW5zaWJsZSAhPT0gJ2Z1bmN0aW9uJyB8fCAkaXNFeHRlbnNpYmxlKE8pKTtcblx0XHR2YXIgaW1tdXRhYmxlID0gb2xkRGVzYyAmJiAoIW9sZERlc2Mud3JpdGFibGUgfHwgIW9sZERlc2MuY29uZmlndXJhYmxlKTtcblx0XHRpZiAoaW1tdXRhYmxlIHx8ICFleHRlbnNpYmxlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHZhciBuZXdEZXNjID0ge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdHZhbHVlOiBWLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9O1xuXHRcdCRkZWZpbmVQcm9wZXJ0eShPLCBQLCBuZXdEZXNjKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtY3JlYXRlZGF0YXByb3BlcnR5b3J0aHJvd1xuXHRDcmVhdGVEYXRhUHJvcGVydHlPclRocm93OiBmdW5jdGlvbiBDcmVhdGVEYXRhUHJvcGVydHlPclRocm93KE8sIFAsIFYpIHtcblx0XHRpZiAodGhpcy5UeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoTykgaXMgbm90IE9iamVjdCcpO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMuSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0XHR9XG5cdFx0dmFyIHN1Y2Nlc3MgPSB0aGlzLkNyZWF0ZURhdGFQcm9wZXJ0eShPLCBQLCBWKTtcblx0XHRpZiAoIXN1Y2Nlc3MpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCd1bmFibGUgdG8gY3JlYXRlIGRhdGEgcHJvcGVydHknKTtcblx0XHR9XG5cdFx0cmV0dXJuIHN1Y2Nlc3M7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vYmplY3RjcmVhdGVcblx0T2JqZWN0Q3JlYXRlOiBmdW5jdGlvbiBPYmplY3RDcmVhdGUocHJvdG8sIGludGVybmFsU2xvdHNMaXN0KSB7XG5cdFx0aWYgKHByb3RvICE9PSBudWxsICYmIHRoaXMuVHlwZShwcm90bykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogcHJvdG8gbXVzdCBiZSBudWxsIG9yIGFuIG9iamVjdCcpO1xuXHRcdH1cblx0XHR2YXIgc2xvdHMgPSBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IFtdIDogaW50ZXJuYWxTbG90c0xpc3Q7XG5cdFx0aWYgKHNsb3RzLmxlbmd0aCA+IDApIHtcblx0XHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2VzLWFic3RyYWN0IGRvZXMgbm90IHlldCBzdXBwb3J0IGludGVybmFsIHNsb3RzJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHByb3RvID09PSBudWxsICYmICEkT2JqZWN0Q3JlYXRlKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCduYXRpdmUgT2JqZWN0LmNyZWF0ZSBzdXBwb3J0IGlzIHJlcXVpcmVkIHRvIGNyZWF0ZSBudWxsIG9iamVjdHMnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gJE9iamVjdENyZWF0ZShwcm90byk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxuXHRBZHZhbmNlU3RyaW5nSW5kZXg6IGZ1bmN0aW9uIEFkdmFuY2VTdHJpbmdJbmRleChTLCBpbmRleCwgdW5pY29kZSkge1xuXHRcdGlmICh0aGlzLlR5cGUoUykgIT09ICdTdHJpbmcnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUyBtdXN0IGJlIGEgU3RyaW5nJyk7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5Jc0ludGVnZXIoaW5kZXgpIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBsZW5ndGggbXVzdCBiZSBhbiBpbnRlZ2VyID49IDAgYW5kIDw9IDIqKjUzJyk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLlR5cGUodW5pY29kZSkgIT09ICdCb29sZWFuJykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IHVuaWNvZGUgbXVzdCBiZSBhIEJvb2xlYW4nKTtcblx0XHR9XG5cdFx0aWYgKCF1bmljb2RlKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHRcdH1cblx0XHR2YXIgbGVuZ3RoID0gUy5sZW5ndGg7XG5cdFx0aWYgKChpbmRleCArIDEpID49IGxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIGluZGV4ICsgMTtcblx0XHR9XG5cblx0XHR2YXIgZmlyc3QgPSAkY2hhckNvZGVBdChTLCBpbmRleCk7XG5cdFx0aWYgKGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHRcdH1cblxuXHRcdHZhciBzZWNvbmQgPSAkY2hhckNvZGVBdChTLCBpbmRleCArIDEpO1xuXHRcdGlmIChzZWNvbmQgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHRcdH1cblxuXHRcdHJldHVybiBpbmRleCArIDI7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1jcmVhdGVtZXRob2Rwcm9wZXJ0eVxuXHRDcmVhdGVNZXRob2RQcm9wZXJ0eTogZnVuY3Rpb24gQ3JlYXRlTWV0aG9kUHJvcGVydHkoTywgUCwgVikge1xuXHRcdGlmICh0aGlzLlR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBJc1Byb3BlcnR5S2V5KFApIGlzIG5vdCB0cnVlJyk7XG5cdFx0fVxuXG5cdFx0dmFyIG5ld0Rlc2MgPSB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdHZhbHVlOiBWLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9O1xuXHRcdHJldHVybiAhISRkZWZpbmVQcm9wZXJ0eShPLCBQLCBuZXdEZXNjKTtcblx0fSxcblxuXHQvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWRlZmluZXByb3BlcnR5b3J0aHJvd1xuXHREZWZpbmVQcm9wZXJ0eU9yVGhyb3c6IGZ1bmN0aW9uIERlZmluZVByb3BlcnR5T3JUaHJvdyhPLCBQLCBkZXNjKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gISEkZGVmaW5lUHJvcGVydHkoTywgUCwgZGVzYyk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1kZWxldGVwcm9wZXJ0eW9ydGhyb3dcblx0RGVsZXRlUHJvcGVydHlPclRocm93OiBmdW5jdGlvbiBEZWxldGVQcm9wZXJ0eU9yVGhyb3coTywgUCkge1xuXHRcdGlmICh0aGlzLlR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBJc1Byb3BlcnR5S2V5KFApIGlzIG5vdCB0cnVlJyk7XG5cdFx0fVxuXG5cdFx0dmFyIHN1Y2Nlc3MgPSBkZWxldGUgT1tQXTtcblx0XHRpZiAoIXN1Y2Nlc3MpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0F0dGVtcHQgdG8gZGVsZXRlIHByb3BlcnR5IGZhaWxlZC4nKTtcblx0XHR9XG5cdFx0cmV0dXJuIHN1Y2Nlc3M7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1lbnVtZXJhYmxlb3dubmFtZXNcblx0RW51bWVyYWJsZU93bk5hbWVzOiBmdW5jdGlvbiBFbnVtZXJhYmxlT3duTmFtZXMoTykge1xuXHRcdGlmICh0aGlzLlR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGtleXMoTyk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW51bWJlci1wcm90b3R5cGUtb2JqZWN0XG5cdHRoaXNOdW1iZXJWYWx1ZTogZnVuY3Rpb24gdGhpc051bWJlclZhbHVlKHZhbHVlKSB7XG5cdFx0aWYgKHRoaXMuVHlwZSh2YWx1ZSkgPT09ICdOdW1iZXInKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICROdW1iZXJWYWx1ZU9mKHZhbHVlKTtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtYm9vbGVhbi1wcm90b3R5cGUtb2JqZWN0XG5cdHRoaXNCb29sZWFuVmFsdWU6IGZ1bmN0aW9uIHRoaXNCb29sZWFuVmFsdWUodmFsdWUpIHtcblx0XHRpZiAodGhpcy5UeXBlKHZhbHVlKSA9PT0gJ0Jvb2xlYW4nKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICRCb29sZWFuVmFsdWVPZih2YWx1ZSk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLXN0cmluZy1wcm90b3R5cGUtb2JqZWN0XG5cdHRoaXNTdHJpbmdWYWx1ZTogZnVuY3Rpb24gdGhpc1N0cmluZ1ZhbHVlKHZhbHVlKSB7XG5cdFx0aWYgKHRoaXMuVHlwZSh2YWx1ZSkgPT09ICdTdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICRTdHJpbmdWYWx1ZU9mKHZhbHVlKTtcblx0fSxcblxuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtZGF0ZS1wcm90b3R5cGUtb2JqZWN0XG5cdHRoaXNUaW1lVmFsdWU6IGZ1bmN0aW9uIHRoaXNUaW1lVmFsdWUodmFsdWUpIHtcblx0XHRyZXR1cm4gJERhdGVWYWx1ZU9mKHZhbHVlKTtcblx0fVxufSk7XG5cbmRlbGV0ZSBFUzYuQ2hlY2tPYmplY3RDb2VyY2libGU7IC8vIHJlbmFtZWQgaW4gRVM2IHRvIFJlcXVpcmVPYmplY3RDb2VyY2libGVcblxubW9kdWxlLmV4cG9ydHMgPSBFUzY7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9lczIwMTUnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnO1xuXG52YXIgaXNQcmltaXRpdmUgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnaXMtY2FsbGFibGUnKTtcbnZhciBpc0RhdGUgPSByZXF1aXJlKCdpcy1kYXRlLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnaXMtc3ltYm9sJyk7XG5cbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gZnVuY3Rpb24gT3JkaW5hcnlUb1ByaW1pdGl2ZShPLCBoaW50KSB7XG5cdGlmICh0eXBlb2YgTyA9PT0gJ3VuZGVmaW5lZCcgfHwgTyA9PT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIG1ldGhvZCBvbiAnICsgTyk7XG5cdH1cblx0aWYgKHR5cGVvZiBoaW50ICE9PSAnc3RyaW5nJyB8fCAoaGludCAhPT0gJ251bWJlcicgJiYgaGludCAhPT0gJ3N0cmluZycpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaGludCBtdXN0IGJlIFwic3RyaW5nXCIgb3IgXCJudW1iZXJcIicpO1xuXHR9XG5cdHZhciBtZXRob2ROYW1lcyA9IGhpbnQgPT09ICdzdHJpbmcnID8gWyd0b1N0cmluZycsICd2YWx1ZU9mJ10gOiBbJ3ZhbHVlT2YnLCAndG9TdHJpbmcnXTtcblx0dmFyIG1ldGhvZCwgcmVzdWx0LCBpO1xuXHRmb3IgKGkgPSAwOyBpIDwgbWV0aG9kTmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHRtZXRob2QgPSBPW21ldGhvZE5hbWVzW2ldXTtcblx0XHRpZiAoaXNDYWxsYWJsZShtZXRob2QpKSB7XG5cdFx0XHRyZXN1bHQgPSBtZXRob2QuY2FsbChPKTtcblx0XHRcdGlmIChpc1ByaW1pdGl2ZShyZXN1bHQpKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIGRlZmF1bHQgdmFsdWUnKTtcbn07XG5cbnZhciBHZXRNZXRob2QgPSBmdW5jdGlvbiBHZXRNZXRob2QoTywgUCkge1xuXHR2YXIgZnVuYyA9IE9bUF07XG5cdGlmIChmdW5jICE9PSBudWxsICYmIHR5cGVvZiBmdW5jICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGlmICghaXNDYWxsYWJsZShmdW5jKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihmdW5jICsgJyByZXR1cm5lZCBmb3IgcHJvcGVydHkgJyArIFAgKyAnIG9mIG9iamVjdCAnICsgTyArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZ1bmM7XG5cdH1cblx0cmV0dXJuIHZvaWQgMDtcbn07XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1ByaW1pdGl2ZShpbnB1dCkge1xuXHRpZiAoaXNQcmltaXRpdmUoaW5wdXQpKSB7XG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG5cdHZhciBoaW50ID0gJ2RlZmF1bHQnO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRpZiAoYXJndW1lbnRzWzFdID09PSBTdHJpbmcpIHtcblx0XHRcdGhpbnQgPSAnc3RyaW5nJztcblx0XHR9IGVsc2UgaWYgKGFyZ3VtZW50c1sxXSA9PT0gTnVtYmVyKSB7XG5cdFx0XHRoaW50ID0gJ251bWJlcic7XG5cdFx0fVxuXHR9XG5cblx0dmFyIGV4b3RpY1RvUHJpbTtcblx0aWYgKGhhc1N5bWJvbHMpIHtcblx0XHRpZiAoU3ltYm9sLnRvUHJpbWl0aXZlKSB7XG5cdFx0XHRleG90aWNUb1ByaW0gPSBHZXRNZXRob2QoaW5wdXQsIFN5bWJvbC50b1ByaW1pdGl2ZSk7XG5cdFx0fSBlbHNlIGlmIChpc1N5bWJvbChpbnB1dCkpIHtcblx0XHRcdGV4b3RpY1RvUHJpbSA9IFN5bWJvbC5wcm90b3R5cGUudmFsdWVPZjtcblx0XHR9XG5cdH1cblx0aWYgKHR5cGVvZiBleG90aWNUb1ByaW0gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0dmFyIHJlc3VsdCA9IGV4b3RpY1RvUHJpbS5jYWxsKGlucHV0LCBoaW50KTtcblx0XHRpZiAoaXNQcmltaXRpdmUocmVzdWx0KSkge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcigndW5hYmxlIHRvIGNvbnZlcnQgZXhvdGljIG9iamVjdCB0byBwcmltaXRpdmUnKTtcblx0fVxuXHRpZiAoaGludCA9PT0gJ2RlZmF1bHQnICYmIChpc0RhdGUoaW5wdXQpIHx8IGlzU3ltYm9sKGlucHV0KSkpIHtcblx0XHRoaW50ID0gJ3N0cmluZyc7XG5cdH1cblx0cmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIGhpbnQgPT09ICdkZWZhdWx0JyA/ICdudW1iZXInIDogaGludCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0RGF5ID0gRGF0ZS5wcm90b3R5cGUuZ2V0RGF5O1xudmFyIHRyeURhdGVPYmplY3QgPSBmdW5jdGlvbiB0cnlEYXRlT2JqZWN0KHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0Z2V0RGF5LmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGRhdGVDbGFzcyA9ICdbb2JqZWN0IERhdGVdJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNEYXRlT2JqZWN0KHZhbHVlKSB7XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKSB7IHJldHVybiBmYWxzZTsgfVxuXHRyZXR1cm4gaGFzVG9TdHJpbmdUYWcgPyB0cnlEYXRlT2JqZWN0KHZhbHVlKSA6IHRvU3RyLmNhbGwodmFsdWUpID09PSBkYXRlQ2xhc3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgb3JpZ1N5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgaGFzU3ltYm9sU2hhbSA9IHJlcXVpcmUoJy4vc2hhbXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNOYXRpdmVTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIG9yaWdTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIG9yaWdTeW1ib2woJ2ZvbycpICE9PSAnc3ltYm9sJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2woJ2JhcicpICE9PSAnc3ltYm9sJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRyZXR1cm4gaGFzU3ltYm9sU2hhbSgpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlID09PSBudWxsIHx8ICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRPYmplY3QgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QlJyk7XG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcbnZhciAkU3RyaW5nID0gR2V0SW50cmluc2ljKCclU3RyaW5nJScpO1xuXG52YXIgYXNzZXJ0UmVjb3JkID0gcmVxdWlyZSgnLi9oZWxwZXJzL2Fzc2VydFJlY29yZCcpO1xudmFyICRpc05hTiA9IHJlcXVpcmUoJy4vaGVscGVycy9pc05hTicpO1xudmFyICRpc0Zpbml0ZSA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0Zpbml0ZScpO1xuXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vaGVscGVycy9zaWduJyk7XG52YXIgbW9kID0gcmVxdWlyZSgnLi9oZWxwZXJzL21vZCcpO1xuXG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2lzLWNhbGxhYmxlJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCdlcy10by1wcmltaXRpdmUvZXM1Jyk7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcblxuLy8gaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4OVxudmFyIEVTNSA9IHtcblx0VG9QcmltaXRpdmU6IHRvUHJpbWl0aXZlLFxuXG5cdFRvQm9vbGVhbjogZnVuY3Rpb24gVG9Cb29sZWFuKHZhbHVlKSB7XG5cdFx0cmV0dXJuICEhdmFsdWU7XG5cdH0sXG5cdFRvTnVtYmVyOiBmdW5jdGlvbiBUb051bWJlcih2YWx1ZSkge1xuXHRcdHJldHVybiArdmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8taW1wbGljaXQtY29lcmNpb25cblx0fSxcblx0VG9JbnRlZ2VyOiBmdW5jdGlvbiBUb0ludGVnZXIodmFsdWUpIHtcblx0XHR2YXIgbnVtYmVyID0gdGhpcy5Ub051bWJlcih2YWx1ZSk7XG5cdFx0aWYgKCRpc05hTihudW1iZXIpKSB7IHJldHVybiAwOyB9XG5cdFx0aWYgKG51bWJlciA9PT0gMCB8fCAhJGlzRmluaXRlKG51bWJlcikpIHsgcmV0dXJuIG51bWJlcjsgfVxuXHRcdHJldHVybiBzaWduKG51bWJlcikgKiBNYXRoLmZsb29yKE1hdGguYWJzKG51bWJlcikpO1xuXHR9LFxuXHRUb0ludDMyOiBmdW5jdGlvbiBUb0ludDMyKHgpIHtcblx0XHRyZXR1cm4gdGhpcy5Ub051bWJlcih4KSA+PiAwO1xuXHR9LFxuXHRUb1VpbnQzMjogZnVuY3Rpb24gVG9VaW50MzIoeCkge1xuXHRcdHJldHVybiB0aGlzLlRvTnVtYmVyKHgpID4+PiAwO1xuXHR9LFxuXHRUb1VpbnQxNjogZnVuY3Rpb24gVG9VaW50MTYodmFsdWUpIHtcblx0XHR2YXIgbnVtYmVyID0gdGhpcy5Ub051bWJlcih2YWx1ZSk7XG5cdFx0aWYgKCRpc05hTihudW1iZXIpIHx8IG51bWJlciA9PT0gMCB8fCAhJGlzRmluaXRlKG51bWJlcikpIHsgcmV0dXJuIDA7IH1cblx0XHR2YXIgcG9zSW50ID0gc2lnbihudW1iZXIpICogTWF0aC5mbG9vcihNYXRoLmFicyhudW1iZXIpKTtcblx0XHRyZXR1cm4gbW9kKHBvc0ludCwgMHgxMDAwMCk7XG5cdH0sXG5cdFRvU3RyaW5nOiBmdW5jdGlvbiBUb1N0cmluZyh2YWx1ZSkge1xuXHRcdHJldHVybiAkU3RyaW5nKHZhbHVlKTtcblx0fSxcblx0VG9PYmplY3Q6IGZ1bmN0aW9uIFRvT2JqZWN0KHZhbHVlKSB7XG5cdFx0dGhpcy5DaGVja09iamVjdENvZXJjaWJsZSh2YWx1ZSk7XG5cdFx0cmV0dXJuICRPYmplY3QodmFsdWUpO1xuXHR9LFxuXHRDaGVja09iamVjdENvZXJjaWJsZTogZnVuY3Rpb24gQ2hlY2tPYmplY3RDb2VyY2libGUodmFsdWUsIG9wdE1lc3NhZ2UpIHtcblx0XHQvKiBqc2hpbnQgZXFudWxsOnRydWUgKi9cblx0XHRpZiAodmFsdWUgPT0gbnVsbCkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3Iob3B0TWVzc2FnZSB8fCAnQ2Fubm90IGNhbGwgbWV0aG9kIG9uICcgKyB2YWx1ZSk7XG5cdFx0fVxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0SXNDYWxsYWJsZTogSXNDYWxsYWJsZSxcblx0U2FtZVZhbHVlOiBmdW5jdGlvbiBTYW1lVmFsdWUoeCwgeSkge1xuXHRcdGlmICh4ID09PSB5KSB7IC8vIDAgPT09IC0wLCBidXQgdGhleSBhcmUgbm90IGlkZW50aWNhbC5cblx0XHRcdGlmICh4ID09PSAwKSB7IHJldHVybiAxIC8geCA9PT0gMSAvIHk7IH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gJGlzTmFOKHgpICYmICRpc05hTih5KTtcblx0fSxcblxuXHQvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLThcblx0VHlwZTogZnVuY3Rpb24gVHlwZSh4KSB7XG5cdFx0aWYgKHggPT09IG51bGwpIHtcblx0XHRcdHJldHVybiAnTnVsbCc7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgeCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiAnVW5kZWZpbmVkJztcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4ID09PSAnb2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuICdPYmplY3QnO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHggPT09ICdudW1iZXInKSB7XG5cdFx0XHRyZXR1cm4gJ051bWJlcic7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgeCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0XHRyZXR1cm4gJ0Jvb2xlYW4nO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gJ1N0cmluZyc7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1wcm9wZXJ0eS1kZXNjcmlwdG9yLXNwZWNpZmljYXRpb24tdHlwZVxuXHRJc1Byb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gSXNQcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykge1xuXHRcdGlmICh0aGlzLlR5cGUoRGVzYykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHZhciBhbGxvd2VkID0ge1xuXHRcdFx0J1tbQ29uZmlndXJhYmxlXV0nOiB0cnVlLFxuXHRcdFx0J1tbRW51bWVyYWJsZV1dJzogdHJ1ZSxcblx0XHRcdCdbW0dldF1dJzogdHJ1ZSxcblx0XHRcdCdbW1NldF1dJzogdHJ1ZSxcblx0XHRcdCdbW1ZhbHVlXV0nOiB0cnVlLFxuXHRcdFx0J1tbV3JpdGFibGVdXSc6IHRydWVcblx0XHR9O1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIERlc2MpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXHRcdFx0aWYgKGhhcyhEZXNjLCBrZXkpICYmICFhbGxvd2VkW2tleV0pIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBpc0RhdGEgPSBoYXMoRGVzYywgJ1tbVmFsdWVdXScpO1xuXHRcdHZhciBJc0FjY2Vzc29yID0gaGFzKERlc2MsICdbW0dldF1dJykgfHwgaGFzKERlc2MsICdbW1NldF1dJyk7XG5cdFx0aWYgKGlzRGF0YSAmJiBJc0FjY2Vzc29yKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUHJvcGVydHkgRGVzY3JpcHRvcnMgbWF5IG5vdCBiZSBib3RoIGFjY2Vzc29yIGFuZCBkYXRhIGRlc2NyaXB0b3JzJyk7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy04LjEwLjFcblx0SXNBY2Nlc3NvckRlc2NyaXB0b3I6IGZ1bmN0aW9uIElzQWNjZXNzb3JEZXNjcmlwdG9yKERlc2MpIHtcblx0XHRpZiAodHlwZW9mIERlc2MgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0YXNzZXJ0UmVjb3JkKHRoaXMsICdQcm9wZXJ0eSBEZXNjcmlwdG9yJywgJ0Rlc2MnLCBEZXNjKTtcblxuXHRcdGlmICghaGFzKERlc2MsICdbW0dldF1dJykgJiYgIWhhcyhEZXNjLCAnW1tTZXRdXScpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTguMTAuMlxuXHRJc0RhdGFEZXNjcmlwdG9yOiBmdW5jdGlvbiBJc0RhdGFEZXNjcmlwdG9yKERlc2MpIHtcblx0XHRpZiAodHlwZW9mIERlc2MgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0YXNzZXJ0UmVjb3JkKHRoaXMsICdQcm9wZXJ0eSBEZXNjcmlwdG9yJywgJ0Rlc2MnLCBEZXNjKTtcblxuXHRcdGlmICghaGFzKERlc2MsICdbW1ZhbHVlXV0nKSAmJiAhaGFzKERlc2MsICdbW1dyaXRhYmxlXV0nKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy04LjEwLjNcblx0SXNHZW5lcmljRGVzY3JpcHRvcjogZnVuY3Rpb24gSXNHZW5lcmljRGVzY3JpcHRvcihEZXNjKSB7XG5cdFx0aWYgKHR5cGVvZiBEZXNjID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGFzc2VydFJlY29yZCh0aGlzLCAnUHJvcGVydHkgRGVzY3JpcHRvcicsICdEZXNjJywgRGVzYyk7XG5cblx0XHRpZiAoIXRoaXMuSXNBY2Nlc3NvckRlc2NyaXB0b3IoRGVzYykgJiYgIXRoaXMuSXNEYXRhRGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy04LjEwLjRcblx0RnJvbVByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gRnJvbVByb3BlcnR5RGVzY3JpcHRvcihEZXNjKSB7XG5cdFx0aWYgKHR5cGVvZiBEZXNjID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIERlc2M7XG5cdFx0fVxuXG5cdFx0YXNzZXJ0UmVjb3JkKHRoaXMsICdQcm9wZXJ0eSBEZXNjcmlwdG9yJywgJ0Rlc2MnLCBEZXNjKTtcblxuXHRcdGlmICh0aGlzLklzRGF0YURlc2NyaXB0b3IoRGVzYykpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHZhbHVlOiBEZXNjWydbW1ZhbHVlXV0nXSxcblx0XHRcdFx0d3JpdGFibGU6ICEhRGVzY1snW1tXcml0YWJsZV1dJ10sXG5cdFx0XHRcdGVudW1lcmFibGU6ICEhRGVzY1snW1tFbnVtZXJhYmxlXV0nXSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiAhIURlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXVxuXHRcdFx0fTtcblx0XHR9IGVsc2UgaWYgKHRoaXMuSXNBY2Nlc3NvckRlc2NyaXB0b3IoRGVzYykpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGdldDogRGVzY1snW1tHZXRdXSddLFxuXHRcdFx0XHRzZXQ6IERlc2NbJ1tbU2V0XV0nXSxcblx0XHRcdFx0ZW51bWVyYWJsZTogISFEZXNjWydbW0VudW1lcmFibGVdXSddLFxuXHRcdFx0XHRjb25maWd1cmFibGU6ICEhRGVzY1snW1tDb25maWd1cmFibGVdXSddXG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignRnJvbVByb3BlcnR5RGVzY3JpcHRvciBtdXN0IGJlIGNhbGxlZCB3aXRoIGEgZnVsbHkgcG9wdWxhdGVkIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTguMTAuNVxuXHRUb1Byb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gVG9Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShPYmopICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1RvUHJvcGVydHlEZXNjcmlwdG9yIHJlcXVpcmVzIGFuIG9iamVjdCcpO1xuXHRcdH1cblxuXHRcdHZhciBkZXNjID0ge307XG5cdFx0aWYgKGhhcyhPYmosICdlbnVtZXJhYmxlJykpIHtcblx0XHRcdGRlc2NbJ1tbRW51bWVyYWJsZV1dJ10gPSB0aGlzLlRvQm9vbGVhbihPYmouZW51bWVyYWJsZSk7XG5cdFx0fVxuXHRcdGlmIChoYXMoT2JqLCAnY29uZmlndXJhYmxlJykpIHtcblx0XHRcdGRlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXSA9IHRoaXMuVG9Cb29sZWFuKE9iai5jb25maWd1cmFibGUpO1xuXHRcdH1cblx0XHRpZiAoaGFzKE9iaiwgJ3ZhbHVlJykpIHtcblx0XHRcdGRlc2NbJ1tbVmFsdWVdXSddID0gT2JqLnZhbHVlO1xuXHRcdH1cblx0XHRpZiAoaGFzKE9iaiwgJ3dyaXRhYmxlJykpIHtcblx0XHRcdGRlc2NbJ1tbV3JpdGFibGVdXSddID0gdGhpcy5Ub0Jvb2xlYW4oT2JqLndyaXRhYmxlKTtcblx0XHR9XG5cdFx0aWYgKGhhcyhPYmosICdnZXQnKSkge1xuXHRcdFx0dmFyIGdldHRlciA9IE9iai5nZXQ7XG5cdFx0XHRpZiAodHlwZW9mIGdldHRlciAhPT0gJ3VuZGVmaW5lZCcgJiYgIXRoaXMuSXNDYWxsYWJsZShnZXR0ZXIpKSB7XG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2dldHRlciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblx0XHRcdH1cblx0XHRcdGRlc2NbJ1tbR2V0XV0nXSA9IGdldHRlcjtcblx0XHR9XG5cdFx0aWYgKGhhcyhPYmosICdzZXQnKSkge1xuXHRcdFx0dmFyIHNldHRlciA9IE9iai5zZXQ7XG5cdFx0XHRpZiAodHlwZW9mIHNldHRlciAhPT0gJ3VuZGVmaW5lZCcgJiYgIXRoaXMuSXNDYWxsYWJsZShzZXR0ZXIpKSB7XG5cdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdzZXR0ZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdFx0XHR9XG5cdFx0XHRkZXNjWydbW1NldF1dJ10gPSBzZXR0ZXI7XG5cdFx0fVxuXG5cdFx0aWYgKChoYXMoZGVzYywgJ1tbR2V0XV0nKSB8fCBoYXMoZGVzYywgJ1tbU2V0XV0nKSkgJiYgKGhhcyhkZXNjLCAnW1tWYWx1ZV1dJykgfHwgaGFzKGRlc2MsICdbW1dyaXRhYmxlXV0nKSkpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdJbnZhbGlkIHByb3BlcnR5IGRlc2NyaXB0b3IuIENhbm5vdCBib3RoIHNwZWNpZnkgYWNjZXNzb3JzIGFuZCBhIHZhbHVlIG9yIHdyaXRhYmxlIGF0dHJpYnV0ZScpO1xuXHRcdH1cblx0XHRyZXR1cm4gZGVzYztcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFUzU7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vaGVscGVycy9pc1ByaW1pdGl2ZScpO1xuXG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2lzLWNhbGxhYmxlJyk7XG5cbi8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTguMTIuOFxudmFyIEVTNWludGVybmFsU2xvdHMgPSB7XG5cdCdbW0RlZmF1bHRWYWx1ZV1dJzogZnVuY3Rpb24gKE8pIHtcblx0XHR2YXIgYWN0dWFsSGludDtcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdGFjdHVhbEhpbnQgPSBhcmd1bWVudHNbMV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFjdHVhbEhpbnQgPSB0b1N0ci5jYWxsKE8pID09PSAnW29iamVjdCBEYXRlXScgPyBTdHJpbmcgOiBOdW1iZXI7XG5cdFx0fVxuXG5cdFx0aWYgKGFjdHVhbEhpbnQgPT09IFN0cmluZyB8fCBhY3R1YWxIaW50ID09PSBOdW1iZXIpIHtcblx0XHRcdHZhciBtZXRob2RzID0gYWN0dWFsSGludCA9PT0gU3RyaW5nID8gWyd0b1N0cmluZycsICd2YWx1ZU9mJ10gOiBbJ3ZhbHVlT2YnLCAndG9TdHJpbmcnXTtcblx0XHRcdHZhciB2YWx1ZSwgaTtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBtZXRob2RzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdGlmIChpc0NhbGxhYmxlKE9bbWV0aG9kc1tpXV0pKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBPW21ldGhvZHNbaV1dKCk7XG5cdFx0XHRcdFx0aWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignTm8gZGVmYXVsdCB2YWx1ZScpO1xuXHRcdH1cblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIFtbRGVmYXVsdFZhbHVlXV0gaGludCBzdXBwbGllZCcpO1xuXHR9XG59O1xuXG4vLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy05LjFcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9QcmltaXRpdmUoaW5wdXQpIHtcblx0aWYgKGlzUHJpbWl0aXZlKGlucHV0KSkge1xuXHRcdHJldHVybiBpbnB1dDtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRyZXR1cm4gRVM1aW50ZXJuYWxTbG90c1snW1tEZWZhdWx0VmFsdWVdXSddKGlucHV0LCBhcmd1bWVudHNbMV0pO1xuXHR9XG5cdHJldHVybiBFUzVpbnRlcm5hbFNsb3RzWydbW0RlZmF1bHRWYWx1ZV1dJ10oaW5wdXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xudmFyIHJlZ2V4RXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIHRyeVJlZ2V4RXhlY0NhbGwgPSBmdW5jdGlvbiB0cnlSZWdleEV4ZWModmFsdWUpIHtcblx0dHJ5IHtcblx0XHR2YXIgbGFzdEluZGV4ID0gdmFsdWUubGFzdEluZGV4O1xuXHRcdHZhbHVlLmxhc3RJbmRleCA9IDA7XG5cblx0XHRyZWdleEV4ZWMuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0dmFsdWUubGFzdEluZGV4ID0gbGFzdEluZGV4O1xuXHR9XG59O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciByZWdleENsYXNzID0gJ1tvYmplY3QgUmVnRXhwXSc7XG52YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzUmVnZXgodmFsdWUpIHtcblx0aWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcpIHtcblx0XHRyZXR1cm4gdG9TdHIuY2FsbCh2YWx1ZSkgPT09IHJlZ2V4Q2xhc3M7XG5cdH1cblxuXHR2YXIgZGVzY3JpcHRvciA9IGdPUEQodmFsdWUsICdsYXN0SW5kZXgnKTtcblx0dmFyIGhhc0xhc3RJbmRleERhdGFQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgaGFzKGRlc2NyaXB0b3IsICd2YWx1ZScpO1xuXHRpZiAoIWhhc0xhc3RJbmRleERhdGFQcm9wZXJ0eSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0cnlSZWdleEV4ZWNDYWxsKHZhbHVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1WYWx1ZXMoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShPYmplY3QsIHsgdmFsdWVzOiBwb2x5ZmlsbCB9LCB7XG5cdFx0dmFsdWVzOiBmdW5jdGlvbiB0ZXN0VmFsdWVzKCkge1xuXHRcdFx0cmV0dXJuIE9iamVjdC52YWx1ZXMgIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIGJvdW5kQ29udGFpbnMgPSBmdW5jdGlvbiBjb250YWlucyhub2RlLCBvdGhlcikge1xuXHRyZXR1cm4gcG9seWZpbGwuYXBwbHkobm9kZSwgW290aGVyXSk7XG59O1xuXG5kZWZpbmUoYm91bmRDb250YWlucywge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYm91bmRDb250YWlucztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUNvbnRhaW5zKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGRlZmluZShcblx0XHRcdGRvY3VtZW50LFxuXHRcdFx0eyBjb250YWluczogcG9seWZpbGwgfSxcblx0XHRcdHsgY29udGFpbnM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LmNvbnRhaW5zICE9PSBwb2x5ZmlsbDsgfSB9XG5cdFx0KTtcblx0XHRpZiAodHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRkZWZpbmUoXG5cdFx0XHRcdEVsZW1lbnQucHJvdG90eXBlLFxuXHRcdFx0XHR7IGNvbnRhaW5zOiBwb2x5ZmlsbCB9LFxuXHRcdFx0XHR7IGNvbnRhaW5zOiBmdW5jdGlvbiAoKSB7IHJldHVybiBFbGVtZW50LnByb3RvdHlwZS5jb250YWlucyAhPT0gcG9seWZpbGw7IH0gfVxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBub3cgPSByZXF1aXJlKCcuL25vdycpLFxuICAgIHRvTnVtYmVyID0gcmVxdWlyZSgnLi90b051bWJlcicpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTWluID0gTWF0aC5taW47XG5cbi8qKlxuICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICogaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gKlxuICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAqIH0pKTtcbiAqXG4gKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsYXN0QXJncyxcbiAgICAgIGxhc3RUaGlzLFxuICAgICAgbWF4V2FpdCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHRpbWVySWQsXG4gICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgdGltZVdhaXRpbmcgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nXG4gICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICA6IHRpbWVXYWl0aW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWJvdW5jZTtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vdztcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvTnVtYmVyO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwiZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheVdpdGhIb2xlczsiLCJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXRlcmFibGVUb0FycmF5TGltaXQ7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlUmVzdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZ2V0U2VsZWN0ZWREYXRlT2Zmc2V0O1xuXG52YXIgZGVmYXVsdE1vZGlmaWVyID0gZnVuY3Rpb24gZGVmYXVsdE1vZGlmaWVyKGRheSkge1xuICByZXR1cm4gZGF5O1xufTtcblxuZnVuY3Rpb24gZ2V0U2VsZWN0ZWREYXRlT2Zmc2V0KGZuLCBkYXkpIHtcbiAgdmFyIG1vZGlmaWVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBkZWZhdWx0TW9kaWZpZXI7XG4gIGlmICghZm4pIHJldHVybiBkYXk7XG4gIHJldHVybiBtb2RpZmllcihmbihkYXkuY2xvbmUoKSkpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBnZXRQcmV2aW91c01vbnRoTWVtb0xhc3Q7XG52YXIgZ2V0UHJldmlvdXNNb250aE1lbW9LZXk7XG52YXIgZ2V0UHJldmlvdXNNb250aE1lbW9WYWx1ZTtcblxuZnVuY3Rpb24gZ2V0UHJldmlvdXNNb250aE1lbW9MYXN0KG1vbnRoKSB7XG4gIGlmIChtb250aCAhPT0gZ2V0UHJldmlvdXNNb250aE1lbW9LZXkpIHtcbiAgICBnZXRQcmV2aW91c01vbnRoTWVtb0tleSA9IG1vbnRoO1xuICAgIGdldFByZXZpb3VzTW9udGhNZW1vVmFsdWUgPSBtb250aC5jbG9uZSgpLnN1YnRyYWN0KDEsICdtb250aCcpO1xuICB9XG5cbiAgcmV0dXJuIGdldFByZXZpb3VzTW9udGhNZW1vVmFsdWU7XG59IiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7XG4gIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9IGVsc2Uge1xuICAgIHZhciBuZXdPYmogPSB7fTtcblxuICAgIGlmIChvYmogIT0gbnVsbCkge1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9O1xuXG4gICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7XG4gICAgcmV0dXJuIG5ld09iajtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKTtcblxudmFyIF9vYmplY3RTcHJlYWQzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWRcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxudmFyIF9yZWFjdFdpdGhTdHlsZXMgPSByZXF1aXJlKFwicmVhY3Qtd2l0aC1zdHlsZXNcIik7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0UGhyYXNlUHJvcFR5cGVzXCIpKTtcblxudmFyIF9ub2ZsaXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9ub2ZsaXBcIikpO1xuXG52YXIgX0xlZnRBcnJvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTGVmdEFycm93XCIpKTtcblxudmFyIF9SaWdodEFycm93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9SaWdodEFycm93XCIpKTtcblxudmFyIF9DaGV2cm9uVXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NoZXZyb25VcFwiKSk7XG5cbnZhciBfQ2hldnJvbkRvd24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NoZXZyb25Eb3duXCIpKTtcblxudmFyIF9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZVwiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxudmFyIHByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKCgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKHt9LCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXNQcm9wVHlwZXMsIHtcbiAgZGlzYWJsZVByZXY6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGRpc2FibGVOZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBuYXZQcmV2OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBuYXZOZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBvcmllbnRhdGlvbjogX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgb25QcmV2TW9udGhDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25OZXh0TW9udGhDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgLy8gaW50ZXJuYXRpb25hbGl6YXRpb25cbiAgcGhyYXNlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc2hhcGUoKDAsIF9nZXRQaHJhc2VQcm9wVHlwZXNbXCJkZWZhdWx0XCJdKShfZGVmYXVsdFBocmFzZXMuRGF5UGlja2VyTmF2aWdhdGlvblBocmFzZXMpKSxcbiAgaXNSVEw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2xcbn0pKSA6IHt9O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZVByZXY6IGZhbHNlLFxuICBkaXNhYmxlTmV4dDogZmFsc2UsXG4gIG5hdlByZXY6IG51bGwsXG4gIG5hdk5leHQ6IG51bGwsXG4gIG9yaWVudGF0aW9uOiBfY29uc3RhbnRzLkhPUklaT05UQUxfT1JJRU5UQVRJT04sXG4gIG9uUHJldk1vbnRoQ2xpY2s6IGZ1bmN0aW9uIG9uUHJldk1vbnRoQ2xpY2soKSB7fSxcbiAgb25OZXh0TW9udGhDbGljazogZnVuY3Rpb24gb25OZXh0TW9udGhDbGljaygpIHt9LFxuICAvLyBpbnRlcm5hdGlvbmFsaXphdGlvblxuICBwaHJhc2VzOiBfZGVmYXVsdFBocmFzZXMuRGF5UGlja2VyTmF2aWdhdGlvblBocmFzZXMsXG4gIGlzUlRMOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gRGF5UGlja2VyTmF2aWdhdGlvbihfcmVmKSB7XG4gIHZhciBkaXNhYmxlUHJldiA9IF9yZWYuZGlzYWJsZVByZXYsXG4gICAgICBkaXNhYmxlTmV4dCA9IF9yZWYuZGlzYWJsZU5leHQsXG4gICAgICBuYXZQcmV2ID0gX3JlZi5uYXZQcmV2LFxuICAgICAgbmF2TmV4dCA9IF9yZWYubmF2TmV4dCxcbiAgICAgIG9uUHJldk1vbnRoQ2xpY2sgPSBfcmVmLm9uUHJldk1vbnRoQ2xpY2ssXG4gICAgICBvbk5leHRNb250aENsaWNrID0gX3JlZi5vbk5leHRNb250aENsaWNrLFxuICAgICAgb3JpZW50YXRpb24gPSBfcmVmLm9yaWVudGF0aW9uLFxuICAgICAgcGhyYXNlcyA9IF9yZWYucGhyYXNlcyxcbiAgICAgIGlzUlRMID0gX3JlZi5pc1JUTCxcbiAgICAgIHN0eWxlcyA9IF9yZWYuc3R5bGVzO1xuICB2YXIgaXNIb3Jpem9udGFsID0gb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTjtcbiAgdmFyIGlzVmVydGljYWwgPSBvcmllbnRhdGlvbiAhPT0gX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OO1xuICB2YXIgaXNWZXJ0aWNhbFNjcm9sbGFibGUgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuICB2YXIgbmF2UHJldkljb24gPSBuYXZQcmV2O1xuICB2YXIgbmF2TmV4dEljb24gPSBuYXZOZXh0O1xuICB2YXIgaXNEZWZhdWx0TmF2UHJldiA9IGZhbHNlO1xuICB2YXIgaXNEZWZhdWx0TmF2TmV4dCA9IGZhbHNlO1xuICB2YXIgbmF2UHJldlRhYkluZGV4ID0ge307XG4gIHZhciBuYXZOZXh0VGFiSW5kZXggPSB7fTtcblxuICBpZiAoIW5hdlByZXZJY29uKSB7XG4gICAgbmF2UHJldlRhYkluZGV4ID0ge1xuICAgICAgdGFiSW5kZXg6ICcwJ1xuICAgIH07XG4gICAgaXNEZWZhdWx0TmF2UHJldiA9IHRydWU7XG4gICAgdmFyIEljb24gPSBpc1ZlcnRpY2FsID8gX0NoZXZyb25VcFtcImRlZmF1bHRcIl0gOiBfTGVmdEFycm93W1wiZGVmYXVsdFwiXTtcblxuICAgIGlmIChpc1JUTCAmJiAhaXNWZXJ0aWNhbCkge1xuICAgICAgSWNvbiA9IF9SaWdodEFycm93W1wiZGVmYXVsdFwiXTtcbiAgICB9XG5cbiAgICBuYXZQcmV2SWNvbiA9IF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChJY29uLCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKGlzSG9yaXpvbnRhbCAmJiBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9zdmdfX2hvcml6b250YWwsIGlzVmVydGljYWwgJiYgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fc3ZnX192ZXJ0aWNhbCwgZGlzYWJsZVByZXYgJiYgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fc3ZnX19kaXNhYmxlZCkpO1xuICB9XG5cbiAgaWYgKCFuYXZOZXh0SWNvbikge1xuICAgIG5hdk5leHRUYWJJbmRleCA9IHtcbiAgICAgIHRhYkluZGV4OiAnMCdcbiAgICB9O1xuICAgIGlzRGVmYXVsdE5hdk5leHQgPSB0cnVlO1xuXG4gICAgdmFyIF9JY29uID0gaXNWZXJ0aWNhbCA/IF9DaGV2cm9uRG93bltcImRlZmF1bHRcIl0gOiBfUmlnaHRBcnJvd1tcImRlZmF1bHRcIl07XG5cbiAgICBpZiAoaXNSVEwgJiYgIWlzVmVydGljYWwpIHtcbiAgICAgIF9JY29uID0gX0xlZnRBcnJvd1tcImRlZmF1bHRcIl07XG4gICAgfVxuXG4gICAgbmF2TmV4dEljb24gPSBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0ljb24sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoaXNIb3Jpem9udGFsICYmIHN0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX3N2Z19faG9yaXpvbnRhbCwgaXNWZXJ0aWNhbCAmJiBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9zdmdfX3ZlcnRpY2FsLCBkaXNhYmxlTmV4dCAmJiBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9zdmdfX2Rpc2FibGVkKSk7XG4gIH1cblxuICB2YXIgaXNEZWZhdWx0TmF2ID0gaXNWZXJ0aWNhbFNjcm9sbGFibGUgPyBpc0RlZmF1bHROYXZOZXh0IDogaXNEZWZhdWx0TmF2TmV4dCB8fCBpc0RlZmF1bHROYXZQcmV2O1xuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9yZWFjdFdpdGhTdHlsZXMuY3NzLmFwcGx5KHZvaWQgMCwgW3N0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uLCBpc0hvcml6b250YWwgJiYgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fX2hvcml6b250YWxdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKGlzVmVydGljYWwgPyBbc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fX3ZlcnRpY2FsLCBpc0RlZmF1bHROYXYgJiYgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fX3ZlcnRpY2FsRGVmYXVsdF0gOiBbXSksICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkoaXNWZXJ0aWNhbFNjcm9sbGFibGUgPyBbc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fX3ZlcnRpY2FsU2Nyb2xsYWJsZSwgaXNEZWZhdWx0TmF2ICYmIHN0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX192ZXJ0aWNhbFNjcm9sbGFibGVEZWZhdWx0XSA6IFtdKSkpLCAhaXNWZXJ0aWNhbFNjcm9sbGFibGUgJiYgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBqc3gtYTExeS9pbnRlcmFjdGl2ZS1zdXBwb3J0cy1mb2N1c1xuICAgIHJvbGU6IFwiYnV0dG9uXCJcbiAgfSwgbmF2UHJldlRhYkluZGV4LCBfcmVhY3RXaXRoU3R5bGVzLmNzcy5hcHBseSh2b2lkIDAsIFtzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b24sIGlzRGVmYXVsdE5hdlByZXYgJiYgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uX19kZWZhdWx0LCBkaXNhYmxlUHJldiAmJiBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX2Rpc2FibGVkXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShpc0hvcml6b250YWwgPyBbc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uX19ob3Jpem9udGFsXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShpc0RlZmF1bHROYXZQcmV2ID8gW3N0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9faG9yaXpvbnRhbERlZmF1bHQsICFpc1JUTCAmJiBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9sZWZ0QnV0dG9uX19ob3Jpem9udGFsRGVmYXVsdCwgaXNSVEwgJiYgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fcmlnaHRCdXR0b25fX2hvcml6b250YWxEZWZhdWx0XSA6IFtdKSkgOiBbXSksICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkoaXNWZXJ0aWNhbCA/IFtzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX3ZlcnRpY2FsXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShpc0RlZmF1bHROYXZQcmV2ID8gW3N0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9fdmVydGljYWxEZWZhdWx0LCBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9wcmV2QnV0dG9uX192ZXJ0aWNhbERlZmF1bHRdIDogW10pKSA6IFtdKSkpLCB7XG4gICAgXCJhcmlhLWRpc2FibGVkXCI6IGRpc2FibGVQcmV2ID8gdHJ1ZSA6IHVuZGVmaW5lZCxcbiAgICBcImFyaWEtbGFiZWxcIjogcGhyYXNlcy5qdW1wVG9QcmV2TW9udGgsXG4gICAgb25DbGljazogZGlzYWJsZVByZXYgPyB1bmRlZmluZWQgOiBvblByZXZNb250aENsaWNrLFxuICAgIG9uS2V5VXA6IGRpc2FibGVQcmV2ID8gdW5kZWZpbmVkIDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBrZXkgPSBlLmtleTtcbiAgICAgIGlmIChrZXkgPT09ICdFbnRlcicgfHwga2V5ID09PSAnICcpIG9uUHJldk1vbnRoQ2xpY2soZSk7XG4gICAgfSxcbiAgICBvbk1vdXNlVXA6IGRpc2FibGVQcmV2ID8gdW5kZWZpbmVkIDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGUuY3VycmVudFRhcmdldC5ibHVyKCk7XG4gICAgfVxuICB9KSwgbmF2UHJldkljb24pLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGpzeC1hMTF5L2ludGVyYWN0aXZlLXN1cHBvcnRzLWZvY3VzXG4gICAgcm9sZTogXCJidXR0b25cIlxuICB9LCBuYXZOZXh0VGFiSW5kZXgsIF9yZWFjdFdpdGhTdHlsZXMuY3NzLmFwcGx5KHZvaWQgMCwgW3N0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbiwgaXNEZWZhdWx0TmF2TmV4dCAmJiBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX2RlZmF1bHQsIGRpc2FibGVOZXh0ICYmIHN0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9fZGlzYWJsZWRdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKGlzSG9yaXpvbnRhbCA/IFtzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX2hvcml6b250YWxdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKGlzRGVmYXVsdE5hdk5leHQgPyBbc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uX19ob3Jpem9udGFsRGVmYXVsdCwgaXNSVEwgJiYgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fbGVmdEJ1dHRvbl9faG9yaXpvbnRhbERlZmF1bHQsICFpc1JUTCAmJiBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9yaWdodEJ1dHRvbl9faG9yaXpvbnRhbERlZmF1bHRdIDogW10pKSA6IFtdKSwgKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShpc1ZlcnRpY2FsID8gW3N0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9fdmVydGljYWwsIHN0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX25leHRCdXR0b25fX3ZlcnRpY2FsXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShpc0RlZmF1bHROYXZOZXh0ID8gW3N0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9fdmVydGljYWxEZWZhdWx0LCBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9uZXh0QnV0dG9uX192ZXJ0aWNhbERlZmF1bHQsIGlzVmVydGljYWxTY3JvbGxhYmxlICYmIHN0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX25leHRCdXR0b25fX3ZlcnRpY2FsU2Nyb2xsYWJsZURlZmF1bHRdIDogW10pKSA6IFtdKSkpLCB7XG4gICAgXCJhcmlhLWRpc2FibGVkXCI6IGRpc2FibGVOZXh0ID8gdHJ1ZSA6IHVuZGVmaW5lZCxcbiAgICBcImFyaWEtbGFiZWxcIjogcGhyYXNlcy5qdW1wVG9OZXh0TW9udGgsXG4gICAgb25DbGljazogZGlzYWJsZU5leHQgPyB1bmRlZmluZWQgOiBvbk5leHRNb250aENsaWNrLFxuICAgIG9uS2V5VXA6IGRpc2FibGVOZXh0ID8gdW5kZWZpbmVkIDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBrZXkgPSBlLmtleTtcbiAgICAgIGlmIChrZXkgPT09ICdFbnRlcicgfHwga2V5ID09PSAnICcpIG9uTmV4dE1vbnRoQ2xpY2soZSk7XG4gICAgfSxcbiAgICBvbk1vdXNlVXA6IGRpc2FibGVOZXh0ID8gdW5kZWZpbmVkIDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGUuY3VycmVudFRhcmdldC5ibHVyKCk7XG4gICAgfVxuICB9KSwgbmF2TmV4dEljb24pKTtcbn1cblxuRGF5UGlja2VyTmF2aWdhdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBwcm9wVHlwZXMgOiB7fTtcbkRheVBpY2tlck5hdmlnYXRpb24uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3JlYWN0V2l0aFN0eWxlcy53aXRoU3R5bGVzKShmdW5jdGlvbiAoX3JlZjIpIHtcbiAgdmFyIF9yZWYyJHJlYWN0RGF0ZXMgPSBfcmVmMi5yZWFjdERhdGVzLFxuICAgICAgY29sb3IgPSBfcmVmMiRyZWFjdERhdGVzLmNvbG9yLFxuICAgICAgekluZGV4ID0gX3JlZjIkcmVhY3REYXRlcy56SW5kZXg7XG4gIHJldHVybiB7XG4gICAgRGF5UGlja2VyTmF2aWdhdGlvbjoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICB6SW5kZXg6IHpJbmRleCArIDJcbiAgICB9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fX2hvcml6b250YWw6IHtcbiAgICAgIGhlaWdodDogMFxuICAgIH0sXG4gICAgRGF5UGlja2VyTmF2aWdhdGlvbl9fdmVydGljYWw6IHt9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fX3ZlcnRpY2FsU2Nyb2xsYWJsZToge30sXG4gICAgRGF5UGlja2VyTmF2aWdhdGlvbl9fdmVydGljYWxEZWZhdWx0OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6IDUyLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgwKVxuICAgIH0sXG4gICAgRGF5UGlja2VyTmF2aWdhdGlvbl9fdmVydGljYWxTY3JvbGxhYmxlRGVmYXVsdDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uOiB7XG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBtYXJnaW46IDBcbiAgICB9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uX19kZWZhdWx0OiB7XG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5jb3JlLmJvcmRlckxpZ2h0KSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IuYmFja2dyb3VuZCxcbiAgICAgIGNvbG9yOiBjb2xvci5wbGFjZWhvbGRlclRleHQsXG4gICAgICAnOmZvY3VzJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5jb3JlLmJvcmRlck1lZGl1bSlcbiAgICAgIH0sXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5jb3JlLmJvcmRlck1lZGl1bSlcbiAgICAgIH0sXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3IuYmFja2dyb3VuZERhcmtcbiAgICAgIH1cbiAgICB9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uX19kaXNhYmxlZDoge1xuICAgICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5kaXNhYmxlZCksXG4gICAgICAnOmZvY3VzJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5kaXNhYmxlZClcbiAgICAgIH0sXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5kaXNhYmxlZClcbiAgICAgIH0sXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgYmFja2dyb3VuZDogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcbiAgICBEYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9faG9yaXpvbnRhbDoge30sXG4gICAgRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX2hvcml6b250YWxEZWZhdWx0OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMTgsXG4gICAgICBsaW5lSGVpZ2h0OiAwLjc4LFxuICAgICAgYm9yZGVyUmFkaXVzOiAzLFxuICAgICAgcGFkZGluZzogJzZweCA5cHgnXG4gICAgfSxcbiAgICBEYXlQaWNrZXJOYXZpZ2F0aW9uX2xlZnRCdXR0b25fX2hvcml6b250YWxEZWZhdWx0OiB7XG4gICAgICBsZWZ0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKDIyKVxuICAgIH0sXG4gICAgRGF5UGlja2VyTmF2aWdhdGlvbl9yaWdodEJ1dHRvbl9faG9yaXpvbnRhbERlZmF1bHQ6IHtcbiAgICAgIHJpZ2h0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKDIyKVxuICAgIH0sXG4gICAgRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX3ZlcnRpY2FsOiB7fSxcbiAgICBEYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9fdmVydGljYWxEZWZhdWx0OiB7XG4gICAgICBwYWRkaW5nOiA1LFxuICAgICAgYmFja2dyb3VuZDogY29sb3IuYmFja2dyb3VuZCxcbiAgICAgIGJveFNoYWRvdzogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgnMCAwIDVweCAycHggcmdiYSgwLCAwLCAwLCAwLjEpJyksXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgd2lkdGg6ICc1MCUnXG4gICAgfSxcbiAgICBEYXlQaWNrZXJOYXZpZ2F0aW9uX3ByZXZCdXR0b25fX3ZlcnRpY2FsRGVmYXVsdDoge30sXG4gICAgRGF5UGlja2VyTmF2aWdhdGlvbl9uZXh0QnV0dG9uX192ZXJ0aWNhbERlZmF1bHQ6IHtcbiAgICAgIGJvcmRlckxlZnQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoMClcbiAgICB9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fbmV4dEJ1dHRvbl9fdmVydGljYWxTY3JvbGxhYmxlRGVmYXVsdDoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG4gICAgRGF5UGlja2VyTmF2aWdhdGlvbl9zdmdfX2hvcml6b250YWw6IHtcbiAgICAgIGhlaWdodDogMTksXG4gICAgICB3aWR0aDogMTksXG4gICAgICBmaWxsOiBjb2xvci5jb3JlLmdyYXlMaWdodCxcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fc3ZnX192ZXJ0aWNhbDoge1xuICAgICAgaGVpZ2h0OiA0MixcbiAgICAgIHdpZHRoOiA0MixcbiAgICAgIGZpbGw6IGNvbG9yLnRleHRcbiAgICB9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fc3ZnX19kaXNhYmxlZDoge1xuICAgICAgZmlsbDogY29sb3IuZGlzYWJsZWRcbiAgICB9XG4gIH07XG59LCB7XG4gIHB1cmVDb21wb25lbnQ6IHR5cGVvZiBfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgIT09ICd1bmRlZmluZWQnXG59KShEYXlQaWNrZXJOYXZpZ2F0aW9uKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIENoZXZyb25VcCA9IGZ1bmN0aW9uIENoZXZyb25VcChwcm9wcykge1xuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHByb3BzLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk0zMiA3MTNsNDUzLTQ1M2MxMS0xMSAyMS0xMSAzMiAwbDQ1MyA0NTNjNSA1IDcgMTAgNyAxNiAwIDEzLTEwIDIzLTIyIDIzLTcgMC0xMi0yLTE2LTdMNTAxIDMwOSA2NCA3NDVjLTQgNS05IDctMTUgNy03IDAtMTItMi0xNy03LTktMTEtOS0yMSAwLTMyelwiXG4gIH0pKTtcbn07XG5cbkNoZXZyb25VcC5kZWZhdWx0UHJvcHMgPSB7XG4gIGZvY3VzYWJsZTogXCJmYWxzZVwiLFxuICB2aWV3Qm94OiBcIjAgMCAxMDAwIDEwMDBcIlxufTtcbnZhciBfZGVmYXVsdCA9IENoZXZyb25VcDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBDaGV2cm9uRG93biA9IGZ1bmN0aW9uIENoZXZyb25Eb3duKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgcHJvcHMsIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTk2OCAyODlMNTE0IDc0MWMtMTEgMTEtMjEgMTEtMzIgMEwyOSAyODljLTQtNS02LTExLTYtMTYgMC0xMyAxMC0yMyAyMy0yMyA2IDAgMTEgMiAxNSA3bDQzNyA0MzYgNDM4LTQzNmM0LTUgOS03IDE2LTcgNiAwIDExIDIgMTYgNyA5IDEwIDkgMjEgMCAzMnpcIlxuICB9KSk7XG59O1xuXG5DaGV2cm9uRG93bi5kZWZhdWx0UHJvcHMgPSB7XG4gIGZvY3VzYWJsZTogXCJmYWxzZVwiLFxuICB2aWV3Qm94OiBcIjAgMCAxMDAwIDEwMDBcIlxufTtcbnZhciBfZGVmYXVsdCA9IENoZXZyb25Eb3duO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGV4cG9ydHMuQk9UVE9NX1JJR0hUID0gZXhwb3J0cy5UT1BfUklHSFQgPSBleHBvcnRzLlRPUF9MRUZUID0gdm9pZCAwO1xuXG52YXIgX2VuenltZVNoYWxsb3dFcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImVuenltZS1zaGFsbG93LWVxdWFsXCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfb2JqZWN0U3ByZWFkMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbnZhciBfcmVhY3RXaXRoU3R5bGVzID0gcmVxdWlyZShcInJlYWN0LXdpdGgtc3R5bGVzXCIpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKSk7XG5cbnZhciBfS2V5Ym9hcmRTaG9ydGN1dFJvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vS2V5Ym9hcmRTaG9ydGN1dFJvd1wiKSk7XG5cbnZhciBfQ2xvc2VCdXR0b24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Nsb3NlQnV0dG9uXCIpKTtcblxudmFyIFRPUF9MRUZUID0gJ3RvcC1sZWZ0JztcbmV4cG9ydHMuVE9QX0xFRlQgPSBUT1BfTEVGVDtcbnZhciBUT1BfUklHSFQgPSAndG9wLXJpZ2h0JztcbmV4cG9ydHMuVE9QX1JJR0hUID0gVE9QX1JJR0hUO1xudmFyIEJPVFRPTV9SSUdIVCA9ICdib3R0b20tcmlnaHQnO1xuZXhwb3J0cy5CT1RUT01fUklHSFQgPSBCT1RUT01fUklHSFQ7XG52YXIgcHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9haXJibmJQcm9wVHlwZXMuZm9yYmlkRXh0cmFQcm9wcykoKDAsIF9vYmplY3RTcHJlYWQzW1wiZGVmYXVsdFwiXSkoe30sIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlc1Byb3BUeXBlcywge1xuICBibG9jazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgLy8gVE9ETzogcmVuYW1lIGJ1dHRvbiBsb2NhdGlvbiB0byBiZSBkaXJlY3Rpb24tYWdub3N0aWNcbiAgYnV0dG9uTG9jYXRpb246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mKFtUT1BfTEVGVCwgVE9QX1JJR0hULCBCT1RUT01fUklHSFRdKSxcbiAgc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBjbG9zZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHBocmFzZXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzW1wiZGVmYXVsdFwiXSkoX2RlZmF1bHRQaHJhc2VzLkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzUGhyYXNlcykpLFxuICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuY1xufSkpIDoge307XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBibG9jazogZmFsc2UsXG4gIGJ1dHRvbkxvY2F0aW9uOiBCT1RUT01fUklHSFQsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBmYWxzZSxcbiAgb3BlbktleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGZ1bmN0aW9uIG9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsKCkge30sXG4gIGNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogZnVuY3Rpb24gY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsKCkge30sXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c1BocmFzZXMsXG4gIHJlbmRlcktleWJvYXJkU2hvcnRjdXRzQnV0dG9uOiB1bmRlZmluZWRcbn07XG5cbmZ1bmN0aW9uIGdldEtleWJvYXJkU2hvcnRjdXRzKHBocmFzZXMpIHtcbiAgcmV0dXJuIFt7XG4gICAgdW5pY29kZTogJ+KGtScsXG4gICAgbGFiZWw6IHBocmFzZXMuZW50ZXJLZXksXG4gICAgYWN0aW9uOiBwaHJhc2VzLnNlbGVjdEZvY3VzZWREYXRlXG4gIH0sIHtcbiAgICB1bmljb2RlOiAn4oaQL+KGkicsXG4gICAgbGFiZWw6IHBocmFzZXMubGVmdEFycm93UmlnaHRBcnJvdyxcbiAgICBhY3Rpb246IHBocmFzZXMubW92ZUZvY3VzQnlPbmVEYXlcbiAgfSwge1xuICAgIHVuaWNvZGU6ICfihpEv4oaTJyxcbiAgICBsYWJlbDogcGhyYXNlcy51cEFycm93RG93bkFycm93LFxuICAgIGFjdGlvbjogcGhyYXNlcy5tb3ZlRm9jdXNCeU9uZVdlZWtcbiAgfSwge1xuICAgIHVuaWNvZGU6ICdQZ1VwL1BnRG4nLFxuICAgIGxhYmVsOiBwaHJhc2VzLnBhZ2VVcFBhZ2VEb3duLFxuICAgIGFjdGlvbjogcGhyYXNlcy5tb3ZlRm9jdXNCeU9uZU1vbnRoXG4gIH0sIHtcbiAgICB1bmljb2RlOiAnSG9tZS9FbmQnLFxuICAgIGxhYmVsOiBwaHJhc2VzLmhvbWVFbmQsXG4gICAgYWN0aW9uOiBwaHJhc2VzLm1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWtcbiAgfSwge1xuICAgIHVuaWNvZGU6ICdFc2MnLFxuICAgIGxhYmVsOiBwaHJhc2VzLmVzY2FwZSxcbiAgICBhY3Rpb246IHBocmFzZXMucmV0dXJuRm9jdXNUb0lucHV0XG4gIH0sIHtcbiAgICB1bmljb2RlOiAnPycsXG4gICAgbGFiZWw6IHBocmFzZXMucXVlc3Rpb25NYXJrLFxuICAgIGFjdGlvbjogcGhyYXNlcy5vcGVuVGhpc1BhbmVsXG4gIH1dO1xufVxuXG52YXIgRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9yZWYpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMltcImRlZmF1bHRcIl0pKERheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzLCBfcmVmKTtcbiAgdmFyIF9wcm90byA9IERheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzLnByb3RvdHlwZTtcblxuICBfcHJvdG9bIV9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAmJiBcInNob3VsZENvbXBvbmVudFVwZGF0ZVwiXSA9IGZ1bmN0aW9uIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIHJldHVybiAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnByb3BzLCBuZXh0UHJvcHMpIHx8ICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3JlZi5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgdmFyIHBocmFzZXMgPSBfdGhpcy5wcm9wcy5waHJhc2VzO1xuICAgIF90aGlzLmtleWJvYXJkU2hvcnRjdXRzID0gZ2V0S2V5Ym9hcmRTaG9ydGN1dHMocGhyYXNlcyk7XG4gICAgX3RoaXMub25TaG93S2V5Ym9hcmRTaG9ydGN1dHNCdXR0b25DbGljayA9IF90aGlzLm9uU2hvd0tleWJvYXJkU2hvcnRjdXRzQnV0dG9uQ2xpY2suYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLnNldFNob3dLZXlib2FyZFNob3J0Y3V0c0J1dHRvblJlZiA9IF90aGlzLnNldFNob3dLZXlib2FyZFNob3J0Y3V0c0J1dHRvblJlZi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMuc2V0SGlkZUtleWJvYXJkU2hvcnRjdXRzQnV0dG9uUmVmID0gX3RoaXMuc2V0SGlkZUtleWJvYXJkU2hvcnRjdXRzQnV0dG9uUmVmLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5oYW5kbGVGb2N1cyA9IF90aGlzLmhhbmRsZUZvY3VzLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbktleURvd24gPSBfdGhpcy5vbktleURvd24uYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB2YXIgcGhyYXNlcyA9IHRoaXMucHJvcHMucGhyYXNlcztcblxuICAgIGlmIChuZXh0UHJvcHMucGhyYXNlcyAhPT0gcGhyYXNlcykge1xuICAgICAgdGhpcy5rZXlib2FyZFNob3J0Y3V0cyA9IGdldEtleWJvYXJkU2hvcnRjdXRzKG5leHRQcm9wcy5waHJhc2VzKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLmhhbmRsZUZvY3VzKCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uS2V5RG93biA9IGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB2YXIgY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsID0gdGhpcy5wcm9wcy5jbG9zZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw7IC8vIEJlY2F1c2UgdGhlIGNsb3NlIGJ1dHRvbiBpcyB0aGUgb25seSBmb2N1c2FibGUgZWxlbWVudCBpbnNpZGUgb2YgdGhlIHBhbmVsLCB0aGlzXG4gICAgLy8gYW1vdW50cyB0byBhIHZlcnkgYmFzaWMgZm9jdXMgdHJhcC4gVGhlIHVzZXIgY2FuIGV4aXQgdGhlIHBhbmVsIGJ5IFwicHJlc3NpbmdcIiB0aGVcbiAgICAvLyBjbG9zZSBidXR0b24gb3IgaGl0dGluZyBlc2NhcGVcblxuICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgIGNhc2UgJ0VzY2FwZSc6XG4gICAgICAgIGNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIGRvIG5vdGhpbmcgLSB0aGlzIGFsbG93cyB0aGUgdXAgYW5kIGRvd24gYXJyb3dzIGNvbnRpbnVlIHRoZWlyXG4gICAgICAvLyBkZWZhdWx0IGJlaGF2aW9yIG9mIHNjcm9sbGluZyB0aGUgY29udGVudCBvZiB0aGUgS2V5Ym9hcmQgU2hvcnRjdXRzIFBhbmVsXG4gICAgICAvLyB3aGljaCBpcyBuZWVkZWQgd2hlbiBvbmx5IGEgc2luZ2xlIG1vbnRoIGlzIHNob3duIGZvciBpbnN0YW5jZS5cblxuICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICBicmVhaztcbiAgICAgIC8vIGNvbXBsZXRlbHkgYmxvY2sgdGhlIHJlc3Qgb2YgdGhlIGtleXMgdGhhdCBoYXZlIGZ1bmN0aW9uYWxpdHkgb3V0c2lkZSBvZiB0aGlzIHBhbmVsXG5cbiAgICAgIGNhc2UgJ1RhYic6XG4gICAgICBjYXNlICdIb21lJzpcbiAgICAgIGNhc2UgJ0VuZCc6XG4gICAgICBjYXNlICdQYWdlVXAnOlxuICAgICAgY2FzZSAnUGFnZURvd24nOlxuICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uU2hvd0tleWJvYXJkU2hvcnRjdXRzQnV0dG9uQ2xpY2sgPSBmdW5jdGlvbiBvblNob3dLZXlib2FyZFNob3J0Y3V0c0J1dHRvbkNsaWNrKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIG9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsID0gdGhpcy5wcm9wcy5vcGVuS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDsgLy8gd2Ugd2FudCB0byByZXR1cm4gZm9jdXMgdG8gdGhpcyBidXR0b24gYWZ0ZXIgY2xvc2luZyB0aGUga2V5Ym9hcmQgc2hvcnRjdXRzIHBhbmVsXG5cbiAgICBvcGVuS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIuc2hvd0tleWJvYXJkU2hvcnRjdXRzQnV0dG9uLmZvY3VzKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnNldFNob3dLZXlib2FyZFNob3J0Y3V0c0J1dHRvblJlZiA9IGZ1bmN0aW9uIHNldFNob3dLZXlib2FyZFNob3J0Y3V0c0J1dHRvblJlZihyZWYpIHtcbiAgICB0aGlzLnNob3dLZXlib2FyZFNob3J0Y3V0c0J1dHRvbiA9IHJlZjtcbiAgfTtcblxuICBfcHJvdG8uc2V0SGlkZUtleWJvYXJkU2hvcnRjdXRzQnV0dG9uUmVmID0gZnVuY3Rpb24gc2V0SGlkZUtleWJvYXJkU2hvcnRjdXRzQnV0dG9uUmVmKHJlZikge1xuICAgIHRoaXMuaGlkZUtleWJvYXJkU2hvcnRjdXRzQnV0dG9uID0gcmVmO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzKCkge1xuICAgIGlmICh0aGlzLmhpZGVLZXlib2FyZFNob3J0Y3V0c0J1dHRvbikge1xuICAgICAgLy8gYXV0b21hdGljYWxseSBtb3ZlIGZvY3VzIGludG8gdGhlIGRpYWxvZyBieSBtb3ZpbmdcbiAgICAgIC8vIHRvIHRoZSBvbmx5IGludGVyYWN0aXZlIGVsZW1lbnQsIHRoZSBoaWRlIGJ1dHRvblxuICAgICAgdGhpcy5oaWRlS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b24uZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBibG9jayA9IF90aGlzJHByb3BzLmJsb2NrLFxuICAgICAgICBidXR0b25Mb2NhdGlvbiA9IF90aGlzJHByb3BzLmJ1dHRvbkxvY2F0aW9uLFxuICAgICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9IF90aGlzJHByb3BzLnNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgICBjbG9zZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBfdGhpcyRwcm9wcy5jbG9zZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICAgIHN0eWxlcyA9IF90aGlzJHByb3BzLnN0eWxlcyxcbiAgICAgICAgcGhyYXNlcyA9IF90aGlzJHByb3BzLnBocmFzZXMsXG4gICAgICAgIHJlbmRlcktleWJvYXJkU2hvcnRjdXRzQnV0dG9uID0gX3RoaXMkcHJvcHMucmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b247XG4gICAgdmFyIHRvZ2dsZUJ1dHRvblRleHQgPSBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA/IHBocmFzZXMuaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwgOiBwaHJhc2VzLnNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsO1xuICAgIHZhciBib3R0b21SaWdodCA9IGJ1dHRvbkxvY2F0aW9uID09PSBCT1RUT01fUklHSFQ7XG4gICAgdmFyIHRvcFJpZ2h0ID0gYnV0dG9uTG9jYXRpb24gPT09IFRPUF9SSUdIVDtcbiAgICB2YXIgdG9wTGVmdCA9IGJ1dHRvbkxvY2F0aW9uID09PSBUT1BfTEVGVDtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIHJlbmRlcktleWJvYXJkU2hvcnRjdXRzQnV0dG9uICYmIHJlbmRlcktleWJvYXJkU2hvcnRjdXRzQnV0dG9uKHtcbiAgICAgIC8vIHBhc3NpbmcgaW4gY29udGV4dC1zcGVjaWZpYyBwcm9wc1xuICAgICAgcmVmOiB0aGlzLnNldFNob3dLZXlib2FyZFNob3J0Y3V0c0J1dHRvblJlZixcbiAgICAgIG9uQ2xpY2s6IHRoaXMub25TaG93S2V5Ym9hcmRTaG9ydGN1dHNCdXR0b25DbGljayxcbiAgICAgIGFyaWFMYWJlbDogdG9nZ2xlQnV0dG9uVGV4dFxuICAgIH0pLCByZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbiB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHtcbiAgICAgIHJlZjogdGhpcy5zZXRTaG93S2V5Ym9hcmRTaG9ydGN1dHNCdXR0b25SZWZcbiAgICB9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19idXR0b25SZXNldCwgc3R5bGVzLkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3csIGJvdHRvbVJpZ2h0ICYmIHN0eWxlcy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93X19ib3R0b21SaWdodCwgdG9wUmlnaHQgJiYgc3R5bGVzLkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dfX3RvcFJpZ2h0LCB0b3BMZWZ0ICYmIHN0eWxlcy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93X190b3BMZWZ0KSwge1xuICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiB0b2dnbGVCdXR0b25UZXh0LFxuICAgICAgb25DbGljazogdGhpcy5vblNob3dLZXlib2FyZFNob3J0Y3V0c0J1dHRvbkNsaWNrLFxuICAgICAgb25Nb3VzZVVwOiBmdW5jdGlvbiBvbk1vdXNlVXAoZSkge1xuICAgICAgICBlLmN1cnJlbnRUYXJnZXQuYmx1cigpO1xuICAgICAgfVxuICAgIH0pLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dTcGFuLCBib3R0b21SaWdodCAmJiBzdHlsZXMuRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfc2hvd1NwYW5fX2JvdHRvbVJpZ2h0LCB0b3BSaWdodCAmJiBzdHlsZXMuRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfc2hvd1NwYW5fX3RvcFJpZ2h0LCB0b3BMZWZ0ICYmIHN0eWxlcy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93U3Bhbl9fdG9wTGVmdCksIFwiP1wiKSksIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsICYmIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3BhbmVsKSwge1xuICAgICAgcm9sZTogXCJkaWFsb2dcIixcbiAgICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IFwiRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfdGl0bGVcIixcbiAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBcIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX2Rlc2NyaXB0aW9uXCJcbiAgICB9KSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfdGl0bGUpLCB7XG4gICAgICBpZDogXCJEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c190aXRsZVwiXG4gICAgfSksIHBocmFzZXMua2V5Ym9hcmRTaG9ydGN1dHMpLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHtcbiAgICAgIHJlZjogdGhpcy5zZXRIaWRlS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b25SZWZcbiAgICB9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19idXR0b25SZXNldCwgc3R5bGVzLkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX2Nsb3NlKSwge1xuICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgIHRhYkluZGV4OiBcIjBcIixcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBwaHJhc2VzLmhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgb25DbGljazogY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgb25LZXlEb3duOiB0aGlzLm9uS2V5RG93blxuICAgIH0pLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0Nsb3NlQnV0dG9uW1wiZGVmYXVsdFwiXSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfY2xvc2VTdmcpKSksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInVsXCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfbGlzdCksIHtcbiAgICAgIGlkOiBcIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX2Rlc2NyaXB0aW9uXCJcbiAgICB9KSwgdGhpcy5rZXlib2FyZFNob3J0Y3V0cy5tYXAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIgdW5pY29kZSA9IF9yZWYyLnVuaWNvZGUsXG4gICAgICAgICAgbGFiZWwgPSBfcmVmMi5sYWJlbCxcbiAgICAgICAgICBhY3Rpb24gPSBfcmVmMi5hY3Rpb247XG4gICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9LZXlib2FyZFNob3J0Y3V0Um93W1wiZGVmYXVsdFwiXSwge1xuICAgICAgICBrZXk6IGxhYmVsLFxuICAgICAgICB1bmljb2RlOiB1bmljb2RlLFxuICAgICAgICBsYWJlbDogbGFiZWwsXG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBibG9jazogYmxvY2tcbiAgICAgIH0pO1xuICAgIH0pKSkpO1xuICB9O1xuXG4gIHJldHVybiBEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cztcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHMucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cy5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXMpKGZ1bmN0aW9uIChfcmVmMykge1xuICB2YXIgX3JlZjMkcmVhY3REYXRlcyA9IF9yZWYzLnJlYWN0RGF0ZXMsXG4gICAgICBjb2xvciA9IF9yZWYzJHJlYWN0RGF0ZXMuY29sb3IsXG4gICAgICBmb250ID0gX3JlZjMkcmVhY3REYXRlcy5mb250LFxuICAgICAgekluZGV4ID0gX3JlZjMkcmVhY3REYXRlcy56SW5kZXg7XG4gIHJldHVybiB7XG4gICAgRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfYnV0dG9uUmVzZXQ6IHtcbiAgICAgIGJhY2tncm91bmQ6ICdub25lJyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICBmb250OiAnaW5oZXJpdCcsXG4gICAgICBsaW5lSGVpZ2h0OiAnbm9ybWFsJyxcbiAgICAgIG92ZXJmbG93OiAndmlzaWJsZScsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICBmb250U2l6ZTogZm9udC5zaXplLFxuICAgICAgJzphY3RpdmUnOiB7XG4gICAgICAgIG91dGxpbmU6ICdub25lJ1xuICAgICAgfVxuICAgIH0sXG4gICAgRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfc2hvdzoge1xuICAgICAgd2lkdGg6IDMzLFxuICAgICAgaGVpZ2h0OiAyNixcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgekluZGV4OiB6SW5kZXggKyAyLFxuICAgICAgJzo6YmVmb3JlJzoge1xuICAgICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICB9XG4gICAgfSxcbiAgICBEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93X19ib3R0b21SaWdodDoge1xuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICAnOjpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlclRvcDogJzI2cHggc29saWQgdHJhbnNwYXJlbnQnLFxuICAgICAgICBib3JkZXJSaWdodDogXCIzM3B4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5jb3JlLnByaW1hcnkpLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIHJpZ2h0OiAwXG4gICAgICB9LFxuICAgICAgJzpob3Zlcjo6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJSaWdodDogXCIzM3B4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5jb3JlLnByaW1hcnlfZGFyaylcbiAgICAgIH1cbiAgICB9LFxuICAgIERheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dfX3RvcFJpZ2h0OiB7XG4gICAgICB0b3A6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgICc6OmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiAnMjZweCBzb2xpZCB0cmFuc3BhcmVudCcsXG4gICAgICAgIGJvcmRlclJpZ2h0OiBcIjMzcHggc29saWQgXCIuY29uY2F0KGNvbG9yLmNvcmUucHJpbWFyeSksXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgcmlnaHQ6IDBcbiAgICAgIH0sXG4gICAgICAnOmhvdmVyOjpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlclJpZ2h0OiBcIjMzcHggc29saWQgXCIuY29uY2F0KGNvbG9yLmNvcmUucHJpbWFyeV9kYXJrKVxuICAgICAgfVxuICAgIH0sXG4gICAgRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfc2hvd19fdG9wTGVmdDoge1xuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgICc6OmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiAnMjZweCBzb2xpZCB0cmFuc3BhcmVudCcsXG4gICAgICAgIGJvcmRlckxlZnQ6IFwiMzNweCBzb2xpZCBcIi5jb25jYXQoY29sb3IuY29yZS5wcmltYXJ5KSxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwXG4gICAgICB9LFxuICAgICAgJzpob3Zlcjo6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJMZWZ0OiBcIjMzcHggc29saWQgXCIuY29uY2F0KGNvbG9yLmNvcmUucHJpbWFyeV9kYXJrKVxuICAgICAgfVxuICAgIH0sXG4gICAgRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfc2hvd1NwYW46IHtcbiAgICAgIGNvbG9yOiBjb2xvci5jb3JlLndoaXRlLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuICAgIERheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dTcGFuX19ib3R0b21SaWdodDoge1xuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDVcbiAgICB9LFxuICAgIERheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dTcGFuX190b3BSaWdodDoge1xuICAgICAgdG9wOiAxLFxuICAgICAgcmlnaHQ6IDVcbiAgICB9LFxuICAgIERheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dTcGFuX190b3BMZWZ0OiB7XG4gICAgICB0b3A6IDEsXG4gICAgICBsZWZ0OiA1XG4gICAgfSxcbiAgICBEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19wYW5lbDoge1xuICAgICAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmJhY2tncm91bmQsXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5jb3JlLmJvcmRlciksXG4gICAgICBib3JkZXJSYWRpdXM6IDIsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHpJbmRleDogekluZGV4ICsgMixcbiAgICAgIHBhZGRpbmc6IDIyLFxuICAgICAgbWFyZ2luOiAzMyxcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnIC8vIFRPRE86IGludmVzdGlnYXRlIHVzZSBvZiB0ZXh0LWFsaWduIHRocm91Z2hvdXQgdGhlIGxpYnJhcnlcblxuICAgIH0sXG4gICAgRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfdGl0bGU6IHtcbiAgICAgIGZvbnRTaXplOiAxNixcbiAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICAgIG1hcmdpbjogMFxuICAgIH0sXG4gICAgRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfbGlzdDoge1xuICAgICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgZm9udFNpemU6IGZvbnQuc2l6ZVxuICAgIH0sXG4gICAgRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfY2xvc2U6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgcmlnaHQ6IDIyLFxuICAgICAgdG9wOiAyMixcbiAgICAgIHpJbmRleDogekluZGV4ICsgMixcbiAgICAgICc6YWN0aXZlJzoge1xuICAgICAgICBvdXRsaW5lOiAnbm9uZSdcbiAgICAgIH1cbiAgICB9LFxuICAgIERheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX2Nsb3NlU3ZnOiB7XG4gICAgICBoZWlnaHQ6IDE1LFxuICAgICAgd2lkdGg6IDE1LFxuICAgICAgZmlsbDogY29sb3IuY29yZS5ncmF5TGlnaHRlcixcbiAgICAgICc6aG92ZXInOiB7XG4gICAgICAgIGZpbGw6IGNvbG9yLmNvcmUuZ3JheUxpZ2h0XG4gICAgICB9LFxuICAgICAgJzpmb2N1cyc6IHtcbiAgICAgICAgZmlsbDogY29sb3IuY29yZS5ncmF5TGlnaHRcbiAgICAgIH1cbiAgICB9XG4gIH07XG59LCB7XG4gIHB1cmVDb21wb25lbnQ6IHR5cGVvZiBfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgIT09ICd1bmRlZmluZWQnXG59KShEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cyk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG52YXIgX3JlYWN0V2l0aFN0eWxlcyA9IHJlcXVpcmUoXCJyZWFjdC13aXRoLXN0eWxlc1wiKTtcblxudmFyIHByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKCgwLCBfb2JqZWN0U3ByZWFkM1tcImRlZmF1bHRcIl0pKHt9LCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXNQcm9wVHlwZXMsIHtcbiAgdW5pY29kZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGxhYmVsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgYWN0aW9uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgYmxvY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2xcbn0pKSA6IHt9O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYmxvY2s6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBLZXlib2FyZFNob3J0Y3V0Um93KF9yZWYpIHtcbiAgdmFyIHVuaWNvZGUgPSBfcmVmLnVuaWNvZGUsXG4gICAgICBsYWJlbCA9IF9yZWYubGFiZWwsXG4gICAgICBhY3Rpb24gPSBfcmVmLmFjdGlvbixcbiAgICAgIGJsb2NrID0gX3JlZi5ibG9jayxcbiAgICAgIHN0eWxlcyA9IF9yZWYuc3R5bGVzO1xuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwibGlcIiwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuS2V5Ym9hcmRTaG9ydGN1dFJvdywgYmxvY2sgJiYgc3R5bGVzLktleWJvYXJkU2hvcnRjdXRSb3dfX2Jsb2NrKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLktleWJvYXJkU2hvcnRjdXRSb3dfa2V5Q29udGFpbmVyLCBibG9jayAmJiBzdHlsZXMuS2V5Ym9hcmRTaG9ydGN1dFJvd19rZXlDb250YWluZXJfX2Jsb2NrKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLktleWJvYXJkU2hvcnRjdXRSb3dfa2V5KSwge1xuICAgIHJvbGU6IFwiaW1nXCIsXG4gICAgXCJhcmlhLWxhYmVsXCI6IFwiXCIuY29uY2F0KGxhYmVsLCBcIixcIikgLy8gYWRkIGNvbW1hIHNvIHNjcmVlbiByZWFkZXJzIHdpbGwgcGF1c2UgYmVmb3JlIHJlYWRpbmcgYWN0aW9uXG5cbiAgfSksIHVuaWNvZGUpKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLktleWJvYXJkU2hvcnRjdXRSb3dfYWN0aW9uKSwgYWN0aW9uKSk7XG59XG5cbktleWJvYXJkU2hvcnRjdXRSb3cucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5LZXlib2FyZFNob3J0Y3V0Um93LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlcykoZnVuY3Rpb24gKF9yZWYyKSB7XG4gIHZhciBjb2xvciA9IF9yZWYyLnJlYWN0RGF0ZXMuY29sb3I7XG4gIHJldHVybiB7XG4gICAgS2V5Ym9hcmRTaG9ydGN1dFJvdzoge1xuICAgICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgICBtYXJnaW46ICc2cHggMCdcbiAgICB9LFxuICAgIEtleWJvYXJkU2hvcnRjdXRSb3dfX2Jsb2NrOiB7XG4gICAgICBtYXJnaW5Cb3R0b206IDE2XG4gICAgfSxcbiAgICBLZXlib2FyZFNob3J0Y3V0Um93X2tleUNvbnRhaW5lcjoge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIHRleHRBbGlnbjogJ3JpZ2h0JyxcbiAgICAgIC8vIGlzIG5vdCBoYW5kbGVkIGJ5IGlzUlRMXG4gICAgICBtYXJnaW5SaWdodDogNiAvLyBpcyBub3QgaGFuZGxlZCBieSBpc1JUTFxuXG4gICAgfSxcbiAgICBLZXlib2FyZFNob3J0Y3V0Um93X2tleUNvbnRhaW5lcl9fYmxvY2s6IHtcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgLy8gaXMgbm90IGhhbmRsZWQgYnkgaXNSVExcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUnXG4gICAgfSxcbiAgICBLZXlib2FyZFNob3J0Y3V0Um93X2tleToge1xuICAgICAgZm9udEZhbWlseTogJ21vbm9zcGFjZScsXG4gICAgICBmb250U2l6ZTogMTIsXG4gICAgICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmNvcmUuZ3JheUxpZ2h0ZXN0LFxuICAgICAgcGFkZGluZzogJzJweCA2cHgnXG4gICAgfSxcbiAgICBLZXlib2FyZFNob3J0Y3V0Um93X2FjdGlvbjoge1xuICAgICAgZGlzcGxheTogJ2lubGluZScsXG4gICAgICB3b3JkQnJlYWs6ICdicmVhay13b3JkJyxcbiAgICAgIG1hcmdpbkxlZnQ6IDggLy8gaXMgbm90IGhhbmRsZWQgYnkgaXNSVExcblxuICAgIH1cbiAgfTtcbn0sIHtcbiAgcHVyZUNvbXBvbmVudDogdHlwZW9mIF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAhPT0gJ3VuZGVmaW5lZCdcbn0pKEtleWJvYXJkU2hvcnRjdXRSb3cpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZ2V0TnVtYmVyT2ZDYWxlbmRhck1vbnRoV2Vla3M7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxuZnVuY3Rpb24gZ2V0QmxhbmtEYXlzQmVmb3JlRmlyc3REYXkoZmlyc3REYXlPZk1vbnRoLCBmaXJzdERheU9mV2Vlaykge1xuICB2YXIgd2Vla0RheURpZmYgPSBmaXJzdERheU9mTW9udGguZGF5KCkgLSBmaXJzdERheU9mV2VlaztcbiAgcmV0dXJuICh3ZWVrRGF5RGlmZiArIDcpICUgNztcbn1cblxuZnVuY3Rpb24gZ2V0TnVtYmVyT2ZDYWxlbmRhck1vbnRoV2Vla3MobW9udGgpIHtcbiAgdmFyIGZpcnN0RGF5T2ZXZWVrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBfbW9tZW50W1wiZGVmYXVsdFwiXS5sb2NhbGVEYXRhKCkuZmlyc3REYXlPZldlZWsoKTtcbiAgdmFyIGZpcnN0RGF5T2ZNb250aCA9IG1vbnRoLmNsb25lKCkuc3RhcnRPZignbW9udGgnKTtcbiAgdmFyIG51bUJsYW5rRGF5cyA9IGdldEJsYW5rRGF5c0JlZm9yZUZpcnN0RGF5KGZpcnN0RGF5T2ZNb250aCwgZmlyc3REYXlPZldlZWspO1xuICByZXR1cm4gTWF0aC5jZWlsKChudW1CbGFua0RheXMgKyBtb250aC5kYXlzSW5Nb250aCgpKSAvIDcpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBnZXRBY3RpdmVFbGVtZW50O1xuXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KCkge1xuICByZXR1cm4gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZXhwb3J0cy5QdXJlU2luZ2xlRGF0ZVBpY2tlciA9IHZvaWQgMDtcblxudmFyIF9lbnp5bWVTaGFsbG93RXF1YWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJlbnp5bWUtc2hhbGxvdy1lcXVhbFwiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX29iamVjdFNwcmVhZDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF9yZWFjdFdpdGhTdHlsZXMgPSByZXF1aXJlKFwicmVhY3Qtd2l0aC1zdHlsZXNcIik7XG5cbnZhciBfcmVhY3RQb3J0YWwgPSByZXF1aXJlKFwicmVhY3QtcG9ydGFsXCIpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxudmFyIF9jb25zb2xpZGF0ZWRFdmVudHMgPSByZXF1aXJlKFwiY29uc29saWRhdGVkLWV2ZW50c1wiKTtcblxudmFyIF9pc1RvdWNoRGV2aWNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaXMtdG91Y2gtZGV2aWNlXCIpKTtcblxudmFyIF9yZWFjdE91dHNpZGVDbGlja0hhbmRsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1vdXRzaWRlLWNsaWNrLWhhbmRsZXJcIikpO1xuXG52YXIgX1NpbmdsZURhdGVQaWNrZXJTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9TaW5nbGVEYXRlUGlja2VyU2hhcGVcIikpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG52YXIgX2dldFJlc3BvbnNpdmVDb250YWluZXJTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRSZXNwb25zaXZlQ29udGFpbmVyU3R5bGVzXCIpKTtcblxudmFyIF9nZXREZXRhY2hlZENvbnRhaW5lclN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldERldGFjaGVkQ29udGFpbmVyU3R5bGVzXCIpKTtcblxudmFyIF9nZXRJbnB1dEhlaWdodCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldElucHV0SGVpZ2h0XCIpKTtcblxudmFyIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXlcIikpO1xuXG52YXIgX2Rpc2FibGVTY3JvbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZGlzYWJsZVNjcm9sbFwiKSk7XG5cbnZhciBfbm9mbGlwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvbm9mbGlwXCIpKTtcblxudmFyIF9TaW5nbGVEYXRlUGlja2VySW5wdXRDb250cm9sbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TaW5nbGVEYXRlUGlja2VySW5wdXRDb250cm9sbGVyXCIpKTtcblxudmFyIF9EYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXJcIikpO1xuXG52YXIgX0Nsb3NlQnV0dG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DbG9zZUJ1dHRvblwiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxudmFyIHByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKCgwLCBfb2JqZWN0U3ByZWFkNFtcImRlZmF1bHRcIl0pKHt9LCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXNQcm9wVHlwZXMsIHt9LCBfU2luZ2xlRGF0ZVBpY2tlclNoYXBlW1wiZGVmYXVsdFwiXSkpIDoge307XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICAvLyByZXF1aXJlZCBwcm9wcyBmb3IgYSBmdW5jdGlvbmFsIGludGVyYWN0aXZlIFNpbmdsZURhdGVQaWNrZXJcbiAgZGF0ZTogbnVsbCxcbiAgZm9jdXNlZDogZmFsc2UsXG4gIC8vIGlucHV0IHJlbGF0ZWQgcHJvcHNcbiAgaWQ6ICdkYXRlJyxcbiAgcGxhY2Vob2xkZXI6ICdEYXRlJyxcbiAgYXJpYUxhYmVsOiB1bmRlZmluZWQsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgcmVxdWlyZWQ6IGZhbHNlLFxuICByZWFkT25seTogZmFsc2UsXG4gIHNjcmVlblJlYWRlcklucHV0TWVzc2FnZTogJycsXG4gIHNob3dDbGVhckRhdGU6IGZhbHNlLFxuICBzaG93RGVmYXVsdElucHV0SWNvbjogZmFsc2UsXG4gIGlucHV0SWNvblBvc2l0aW9uOiBfY29uc3RhbnRzLklDT05fQkVGT1JFX1BPU0lUSU9OLFxuICBjdXN0b21JbnB1dEljb246IG51bGwsXG4gIGN1c3RvbUNsb3NlSWNvbjogbnVsbCxcbiAgbm9Cb3JkZXI6IGZhbHNlLFxuICBibG9jazogZmFsc2UsXG4gIHNtYWxsOiBmYWxzZSxcbiAgcmVndWxhcjogZmFsc2UsXG4gIHZlcnRpY2FsU3BhY2luZzogX2NvbnN0YW50cy5ERUZBVUxUX1ZFUlRJQ0FMX1NQQUNJTkcsXG4gIGtlZXBGb2N1c09uSW5wdXQ6IGZhbHNlLFxuICAvLyBjYWxlbmRhciBwcmVzZW50YXRpb24gYW5kIGludGVyYWN0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgb3JpZW50YXRpb246IF9jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTixcbiAgYW5jaG9yRGlyZWN0aW9uOiBfY29uc3RhbnRzLkFOQ0hPUl9MRUZULFxuICBvcGVuRGlyZWN0aW9uOiBfY29uc3RhbnRzLk9QRU5fRE9XTixcbiAgaG9yaXpvbnRhbE1hcmdpbjogMCxcbiAgd2l0aFBvcnRhbDogZmFsc2UsXG4gIHdpdGhGdWxsU2NyZWVuUG9ydGFsOiBmYWxzZSxcbiAgYXBwZW5kVG9Cb2R5OiBmYWxzZSxcbiAgZGlzYWJsZVNjcm9sbDogZmFsc2UsXG4gIGluaXRpYWxWaXNpYmxlTW9udGg6IG51bGwsXG4gIGZpcnN0RGF5T2ZXZWVrOiBudWxsLFxuICBudW1iZXJPZk1vbnRoczogMixcbiAga2VlcE9wZW5PbkRhdGVTZWxlY3Q6IGZhbHNlLFxuICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZTogZmFsc2UsXG4gIHJlbmRlckNhbGVuZGFySW5mbzogbnVsbCxcbiAgY2FsZW5kYXJJbmZvUG9zaXRpb246IF9jb25zdGFudHMuSU5GT19QT1NJVElPTl9CT1RUT00sXG4gIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBmYWxzZSxcbiAgZGF5U2l6ZTogX2NvbnN0YW50cy5EQVlfU0laRSxcbiAgaXNSVEw6IGZhbHNlLFxuICB2ZXJ0aWNhbEhlaWdodDogbnVsbCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiB1bmRlZmluZWQsXG4gIGhvcml6b250YWxNb250aFBhZGRpbmc6IDEzLFxuICAvLyBuYXZpZ2F0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgbmF2UHJldjogbnVsbCxcbiAgbmF2TmV4dDogbnVsbCxcbiAgb25QcmV2TW9udGhDbGljazogZnVuY3Rpb24gb25QcmV2TW9udGhDbGljaygpIHt9LFxuICBvbk5leHRNb250aENsaWNrOiBmdW5jdGlvbiBvbk5leHRNb250aENsaWNrKCkge30sXG4gIG9uQ2xvc2U6IGZ1bmN0aW9uIG9uQ2xvc2UoKSB7fSxcbiAgLy8gbW9udGggcHJlc2VudGF0aW9uIGFuZCBpbnRlcmFjdGlvbiByZWxhdGVkIHByb3BzXG4gIHJlbmRlck1vbnRoVGV4dDogbnVsbCxcbiAgLy8gZGF5IHByZXNlbnRhdGlvbiBhbmQgaW50ZXJhY3Rpb24gcmVsYXRlZCBwcm9wc1xuICByZW5kZXJDYWxlbmRhckRheTogdW5kZWZpbmVkLFxuICByZW5kZXJEYXlDb250ZW50czogbnVsbCxcbiAgcmVuZGVyTW9udGhFbGVtZW50OiBudWxsLFxuICBlbmFibGVPdXRzaWRlRGF5czogZmFsc2UsXG4gIGlzRGF5QmxvY2tlZDogZnVuY3Rpb24gaXNEYXlCbG9ja2VkKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgaXNPdXRzaWRlUmFuZ2U6IGZ1bmN0aW9uIGlzT3V0c2lkZVJhbmdlKGRheSkge1xuICAgIHJldHVybiAhKDAsIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXlbXCJkZWZhdWx0XCJdKShkYXksICgwLCBfbW9tZW50W1wiZGVmYXVsdFwiXSkoKSk7XG4gIH0sXG4gIGlzRGF5SGlnaGxpZ2h0ZWQ6IGZ1bmN0aW9uIGlzRGF5SGlnaGxpZ2h0ZWQoKSB7fSxcbiAgLy8gaW50ZXJuYXRpb25hbGl6YXRpb24gcHJvcHNcbiAgZGlzcGxheUZvcm1hdDogZnVuY3Rpb24gZGlzcGxheUZvcm1hdCgpIHtcbiAgICByZXR1cm4gX21vbWVudFtcImRlZmF1bHRcIl0ubG9jYWxlRGF0YSgpLmxvbmdEYXRlRm9ybWF0KCdMJyk7XG4gIH0sXG4gIG1vbnRoRm9ybWF0OiAnTU1NTSBZWVlZJyxcbiAgd2Vla0RheUZvcm1hdDogJ2RkJyxcbiAgcGhyYXNlczogX2RlZmF1bHRQaHJhc2VzLlNpbmdsZURhdGVQaWNrZXJQaHJhc2VzLFxuICBkYXlBcmlhTGFiZWxGb3JtYXQ6IHVuZGVmaW5lZFxufTtcblxudmFyIFNpbmdsZURhdGVQaWNrZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9yZWYpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMltcImRlZmF1bHRcIl0pKFNpbmdsZURhdGVQaWNrZXIsIF9yZWYpO1xuICB2YXIgX3Byb3RvID0gU2luZ2xlRGF0ZVBpY2tlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvWyFfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgJiYgXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIl0gPSBmdW5jdGlvbiAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFNpbmdsZURhdGVQaWNrZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9yZWYuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5pc1RvdWNoRGV2aWNlID0gZmFsc2U7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBkYXlQaWNrZXJDb250YWluZXJTdHlsZXM6IHt9LFxuICAgICAgaXNEYXlQaWNrZXJGb2N1c2VkOiBmYWxzZSxcbiAgICAgIGlzSW5wdXRGb2N1c2VkOiBmYWxzZSxcbiAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogZmFsc2VcbiAgICB9O1xuICAgIF90aGlzLm9uRm9jdXNPdXQgPSBfdGhpcy5vbkZvY3VzT3V0LmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbk91dHNpZGVDbGljayA9IF90aGlzLm9uT3V0c2lkZUNsaWNrLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbklucHV0Rm9jdXMgPSBfdGhpcy5vbklucHV0Rm9jdXMuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uRGF5UGlja2VyRm9jdXMgPSBfdGhpcy5vbkRheVBpY2tlckZvY3VzLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbkRheVBpY2tlckJsdXIgPSBfdGhpcy5vbkRheVBpY2tlckJsdXIuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLnNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsID0gX3RoaXMuc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWwuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLnJlc3BvbnNpdml6ZVBpY2tlclBvc2l0aW9uID0gX3RoaXMucmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb24uYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLmRpc2FibGVTY3JvbGwgPSBfdGhpcy5kaXNhYmxlU2Nyb2xsLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5zZXREYXlQaWNrZXJDb250YWluZXJSZWYgPSBfdGhpcy5zZXREYXlQaWNrZXJDb250YWluZXJSZWYuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLnNldENvbnRhaW5lclJlZiA9IF90aGlzLnNldENvbnRhaW5lclJlZi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnJlbW92ZVJlc2l6ZUV2ZW50TGlzdGVuZXIgPSAoMCwgX2NvbnNvbGlkYXRlZEV2ZW50cy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csICdyZXNpemUnLCB0aGlzLnJlc3BvbnNpdml6ZVBpY2tlclBvc2l0aW9uLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5yZXNwb25zaXZpemVQaWNrZXJQb3NpdGlvbigpO1xuICAgIHRoaXMuZGlzYWJsZVNjcm9sbCgpO1xuICAgIHZhciBmb2N1c2VkID0gdGhpcy5wcm9wcy5mb2N1c2VkO1xuXG4gICAgaWYgKGZvY3VzZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc0lucHV0Rm9jdXNlZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5pc1RvdWNoRGV2aWNlID0gKDAsIF9pc1RvdWNoRGV2aWNlW1wiZGVmYXVsdFwiXSkoKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBmb2N1c2VkID0gdGhpcy5wcm9wcy5mb2N1c2VkO1xuXG4gICAgaWYgKCFwcmV2UHJvcHMuZm9jdXNlZCAmJiBmb2N1c2VkKSB7XG4gICAgICB0aGlzLnJlc3BvbnNpdml6ZVBpY2tlclBvc2l0aW9uKCk7XG4gICAgICB0aGlzLmRpc2FibGVTY3JvbGwoKTtcbiAgICB9IGVsc2UgaWYgKHByZXZQcm9wcy5mb2N1c2VkICYmICFmb2N1c2VkKSB7XG4gICAgICBpZiAodGhpcy5lbmFibGVTY3JvbGwpIHRoaXMuZW5hYmxlU2Nyb2xsKCk7XG4gICAgfVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIDtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5yZW1vdmVSZXNpemVFdmVudExpc3RlbmVyKSB0aGlzLnJlbW92ZVJlc2l6ZUV2ZW50TGlzdGVuZXIoKTtcbiAgICBpZiAodGhpcy5yZW1vdmVGb2N1c091dEV2ZW50TGlzdGVuZXIpIHRoaXMucmVtb3ZlRm9jdXNPdXRFdmVudExpc3RlbmVyKCk7XG4gICAgaWYgKHRoaXMuZW5hYmxlU2Nyb2xsKSB0aGlzLmVuYWJsZVNjcm9sbCgpO1xuICB9O1xuXG4gIF9wcm90by5vbk91dHNpZGVDbGljayA9IGZ1bmN0aW9uIG9uT3V0c2lkZUNsaWNrKGV2ZW50KSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZm9jdXNlZCA9IF90aGlzJHByb3BzLmZvY3VzZWQsXG4gICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfdGhpcyRwcm9wcy5vbkZvY3VzQ2hhbmdlLFxuICAgICAgICBvbkNsb3NlID0gX3RoaXMkcHJvcHMub25DbG9zZSxcbiAgICAgICAgZGF0ZSA9IF90aGlzJHByb3BzLmRhdGUsXG4gICAgICAgIGFwcGVuZFRvQm9keSA9IF90aGlzJHByb3BzLmFwcGVuZFRvQm9keTtcbiAgICBpZiAoIWZvY3VzZWQpIHJldHVybjtcbiAgICBpZiAoYXBwZW5kVG9Cb2R5ICYmIHRoaXMuZGF5UGlja2VyQ29udGFpbmVyLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHJldHVybjtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzSW5wdXRGb2N1c2VkOiBmYWxzZSxcbiAgICAgIGlzRGF5UGlja2VyRm9jdXNlZDogZmFsc2UsXG4gICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IGZhbHNlXG4gICAgfSk7XG4gICAgb25Gb2N1c0NoYW5nZSh7XG4gICAgICBmb2N1c2VkOiBmYWxzZVxuICAgIH0pO1xuICAgIG9uQ2xvc2Uoe1xuICAgICAgZGF0ZTogZGF0ZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vbklucHV0Rm9jdXMgPSBmdW5jdGlvbiBvbklucHV0Rm9jdXMoX3JlZjIpIHtcbiAgICB2YXIgZm9jdXNlZCA9IF9yZWYyLmZvY3VzZWQ7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfdGhpcyRwcm9wczIub25Gb2N1c0NoYW5nZSxcbiAgICAgICAgcmVhZE9ubHkgPSBfdGhpcyRwcm9wczIucmVhZE9ubHksXG4gICAgICAgIHdpdGhQb3J0YWwgPSBfdGhpcyRwcm9wczIud2l0aFBvcnRhbCxcbiAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfdGhpcyRwcm9wczIud2l0aEZ1bGxTY3JlZW5Qb3J0YWwsXG4gICAgICAgIGtlZXBGb2N1c09uSW5wdXQgPSBfdGhpcyRwcm9wczIua2VlcEZvY3VzT25JbnB1dDtcblxuICAgIGlmIChmb2N1c2VkKSB7XG4gICAgICB2YXIgd2l0aEFueVBvcnRhbCA9IHdpdGhQb3J0YWwgfHwgd2l0aEZ1bGxTY3JlZW5Qb3J0YWw7XG4gICAgICB2YXIgbW92ZUZvY3VzVG9EYXlQaWNrZXIgPSB3aXRoQW55UG9ydGFsIHx8IHJlYWRPbmx5ICYmICFrZWVwRm9jdXNPbklucHV0IHx8IHRoaXMuaXNUb3VjaERldmljZSAmJiAha2VlcEZvY3VzT25JbnB1dDtcblxuICAgICAgaWYgKG1vdmVGb2N1c1RvRGF5UGlja2VyKSB7XG4gICAgICAgIHRoaXMub25EYXlQaWNrZXJGb2N1cygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbkRheVBpY2tlckJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBvbkZvY3VzQ2hhbmdlKHtcbiAgICAgIGZvY3VzZWQ6IGZvY3VzZWRcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25EYXlQaWNrZXJGb2N1cyA9IGZ1bmN0aW9uIG9uRGF5UGlja2VyRm9jdXMoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc0lucHV0Rm9jdXNlZDogZmFsc2UsXG4gICAgICBpc0RheVBpY2tlckZvY3VzZWQ6IHRydWUsXG4gICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IGZhbHNlXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uRGF5UGlja2VyQmx1ciA9IGZ1bmN0aW9uIG9uRGF5UGlja2VyQmx1cigpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzSW5wdXRGb2N1c2VkOiB0cnVlLFxuICAgICAgaXNEYXlQaWNrZXJGb2N1c2VkOiBmYWxzZSxcbiAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogZmFsc2VcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25Gb2N1c091dCA9IGZ1bmN0aW9uIG9uRm9jdXNPdXQoZSkge1xuICAgIHZhciBvbkZvY3VzQ2hhbmdlID0gdGhpcy5wcm9wcy5vbkZvY3VzQ2hhbmdlOyAvLyBJbiBjYXNlcyB3aGVyZSAqKnJlbGF0ZWRUYXJnZXQqKiBpcyBub3QgbnVsbCwgaXQgcG9pbnRzIHRvIHRoZSByaWdodFxuICAgIC8vIGVsZW1lbnQgaGVyZS4gSG93ZXZlciwgaW4gY2FzZXMgd2hlcmUgaXQgaXMgbnVsbCAoc3VjaCBhcyBjbGlja2luZyBvbiBhXG4gICAgLy8gc3BlY2lmaWMgZGF5KSBvciBpdCBpcyAqKmRvY3VtZW50LmJvZHkqKiAoSUUxMSksIHRoZSBhcHByb3ByaWF0ZSB2YWx1ZSBpcyAqKmV2ZW50LnRhcmdldCoqLlxuICAgIC8vXG4gICAgLy8gV2UgaGFuZGxlIGJvdGggc2l0dWF0aW9ucyBoZXJlIGJ5IHVzaW5nIHRoZSBgIHx8IGAgb3BlcmF0b3IgdG8gZmFsbGJhY2tcbiAgICAvLyB0byAqZXZlbnQudGFyZ2V0Kiogd2hlbiAqKnJlbGF0ZWRUYXJnZXQqKiBpcyBub3QgcHJvdmlkZWQuXG5cbiAgICB2YXIgcmVsYXRlZFRhcmdldCA9IGUucmVsYXRlZFRhcmdldCA9PT0gZG9jdW1lbnQuYm9keSA/IGUudGFyZ2V0IDogZS5yZWxhdGVkVGFyZ2V0IHx8IGUudGFyZ2V0O1xuICAgIGlmICh0aGlzLmRheVBpY2tlckNvbnRhaW5lci5jb250YWlucyhyZWxhdGVkVGFyZ2V0KSkgcmV0dXJuO1xuICAgIG9uRm9jdXNDaGFuZ2Uoe1xuICAgICAgZm9jdXNlZDogZmFsc2VcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uc2V0RGF5UGlja2VyQ29udGFpbmVyUmVmID0gZnVuY3Rpb24gc2V0RGF5UGlja2VyQ29udGFpbmVyUmVmKHJlZikge1xuICAgIGlmIChyZWYgPT09IHRoaXMuZGF5UGlja2VyQ29udGFpbmVyKSByZXR1cm47XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuZGF5UGlja2VyQ29udGFpbmVyID0gcmVmO1xuICAgIGlmICghcmVmKSByZXR1cm47XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICB9O1xuXG4gIF9wcm90by5zZXRDb250YWluZXJSZWYgPSBmdW5jdGlvbiBzZXRDb250YWluZXJSZWYocmVmKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSByZWY7XG4gIH07XG5cbiAgX3Byb3RvLmFkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgLy8gV2UgbWFudWFsbHkgc2V0IGV2ZW50IGJlY2F1c2UgUmVhY3QgaGFzIG5vdCBpbXBsZW1lbnRlZCBvbkZvY3VzSW4vb25Gb2N1c091dC5cbiAgICAvLyBLZWVwIGFuIGV5ZSBvbiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzY0MTAgZm9yIHVwZGF0ZXNcbiAgICAvLyBXZSB1c2UgXCJibHVyIHcvIHVzZUNhcHR1cmUgcGFyYW1cIiB2cyBcIm9uZm9jdXNvdXRcIiBmb3IgRkYgYnJvd3NlciBzdXBwb3J0XG4gICAgdGhpcy5yZW1vdmVGb2N1c091dEV2ZW50TGlzdGVuZXIgPSAoMCwgX2NvbnNvbGlkYXRlZEV2ZW50cy5hZGRFdmVudExpc3RlbmVyKSh0aGlzLmRheVBpY2tlckNvbnRhaW5lciwgJ2ZvY3Vzb3V0JywgdGhpcy5vbkZvY3VzT3V0KTtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycygpIHtcbiAgICBpZiAodGhpcy5yZW1vdmVGb2N1c091dEV2ZW50TGlzdGVuZXIpIHRoaXMucmVtb3ZlRm9jdXNPdXRFdmVudExpc3RlbmVyKCk7XG4gIH07XG5cbiAgX3Byb3RvLmRpc2FibGVTY3JvbGwgPSBmdW5jdGlvbiBkaXNhYmxlU2Nyb2xsKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBhcHBlbmRUb0JvZHkgPSBfdGhpcyRwcm9wczMuYXBwZW5kVG9Cb2R5LFxuICAgICAgICBwcm9wRGlzYWJsZVNjcm9sbCA9IF90aGlzJHByb3BzMy5kaXNhYmxlU2Nyb2xsLFxuICAgICAgICBmb2N1c2VkID0gX3RoaXMkcHJvcHMzLmZvY3VzZWQ7XG4gICAgaWYgKCFhcHBlbmRUb0JvZHkgJiYgIXByb3BEaXNhYmxlU2Nyb2xsKSByZXR1cm47XG4gICAgaWYgKCFmb2N1c2VkKSByZXR1cm47IC8vIERpc2FibGUgc2Nyb2xsIGZvciBldmVyeSBhbmNlc3RvciBvZiB0aGlzIDxTaW5nbGVEYXRlUGlja2VyPiB1cCB0byB0aGVcbiAgICAvLyBkb2N1bWVudCBsZXZlbC4gVGhpcyBlbnN1cmVzIHRoZSBpbnB1dCBhbmQgdGhlIHBpY2tlciBuZXZlciBtb3ZlLiBPdGhlclxuICAgIC8vIHNpYmxpbmcgZWxlbWVudHMgb3IgdGhlIHBpY2tlciBpdHNlbGYgY2FuIHNjcm9sbC5cblxuICAgIHRoaXMuZW5hYmxlU2Nyb2xsID0gKDAsIF9kaXNhYmxlU2Nyb2xsMltcImRlZmF1bHRcIl0pKHRoaXMuY29udGFpbmVyKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICA7XG5cbiAgX3Byb3RvLnJlc3BvbnNpdml6ZVBpY2tlclBvc2l0aW9uID0gZnVuY3Rpb24gcmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb24oKSB7XG4gICAgLy8gSXQncyBwb3NzaWJsZSB0aGUgcG9ydGFsIHByb3BzIGhhdmUgYmVlbiBjaGFuZ2VkIGluIHJlc3BvbnNlIHRvIHdpbmRvdyByZXNpemVzXG4gICAgLy8gU28gbGV0J3MgZW5zdXJlIHdlIHJlc2V0IHRoaXMgYmFjayB0byB0aGUgYmFzZSBzdGF0ZSBlYWNoIHRpbWVcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRheVBpY2tlckNvbnRhaW5lclN0eWxlczoge31cbiAgICB9KTtcbiAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb3BlbkRpcmVjdGlvbiA9IF90aGlzJHByb3BzNC5vcGVuRGlyZWN0aW9uLFxuICAgICAgICBhbmNob3JEaXJlY3Rpb24gPSBfdGhpcyRwcm9wczQuYW5jaG9yRGlyZWN0aW9uLFxuICAgICAgICBob3Jpem9udGFsTWFyZ2luID0gX3RoaXMkcHJvcHM0Lmhvcml6b250YWxNYXJnaW4sXG4gICAgICAgIHdpdGhQb3J0YWwgPSBfdGhpcyRwcm9wczQud2l0aFBvcnRhbCxcbiAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfdGhpcyRwcm9wczQud2l0aEZ1bGxTY3JlZW5Qb3J0YWwsXG4gICAgICAgIGFwcGVuZFRvQm9keSA9IF90aGlzJHByb3BzNC5hcHBlbmRUb0JvZHksXG4gICAgICAgIGZvY3VzZWQgPSBfdGhpcyRwcm9wczQuZm9jdXNlZDtcbiAgICB2YXIgZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzID0gdGhpcy5zdGF0ZS5kYXlQaWNrZXJDb250YWluZXJTdHlsZXM7XG5cbiAgICBpZiAoIWZvY3VzZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaXNBbmNob3JlZExlZnQgPSBhbmNob3JEaXJlY3Rpb24gPT09IF9jb25zdGFudHMuQU5DSE9SX0xFRlQ7XG5cbiAgICBpZiAoIXdpdGhQb3J0YWwgJiYgIXdpdGhGdWxsU2NyZWVuUG9ydGFsKSB7XG4gICAgICB2YXIgY29udGFpbmVyUmVjdCA9IHRoaXMuZGF5UGlja2VyQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSBkYXlQaWNrZXJDb250YWluZXJTdHlsZXNbYW5jaG9yRGlyZWN0aW9uXSB8fCAwO1xuICAgICAgdmFyIGNvbnRhaW5lckVkZ2UgPSBpc0FuY2hvcmVkTGVmdCA/IGNvbnRhaW5lclJlY3RbX2NvbnN0YW50cy5BTkNIT1JfUklHSFRdIDogY29udGFpbmVyUmVjdFtfY29uc3RhbnRzLkFOQ0hPUl9MRUZUXTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBkYXlQaWNrZXJDb250YWluZXJTdHlsZXM6ICgwLCBfb2JqZWN0U3ByZWFkNFtcImRlZmF1bHRcIl0pKHt9LCAoMCwgX2dldFJlc3BvbnNpdmVDb250YWluZXJTdHlsZXNbXCJkZWZhdWx0XCJdKShhbmNob3JEaXJlY3Rpb24sIGN1cnJlbnRPZmZzZXQsIGNvbnRhaW5lckVkZ2UsIGhvcml6b250YWxNYXJnaW4pLCB7fSwgYXBwZW5kVG9Cb2R5ICYmICgwLCBfZ2V0RGV0YWNoZWRDb250YWluZXJTdHlsZXNbXCJkZWZhdWx0XCJdKShvcGVuRGlyZWN0aW9uLCBhbmNob3JEaXJlY3Rpb24sIHRoaXMuY29udGFpbmVyKSlcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBmdW5jdGlvbiBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzSW5wdXRGb2N1c2VkOiBmYWxzZSxcbiAgICAgIGlzRGF5UGlja2VyRm9jdXNlZDogdHJ1ZSxcbiAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogdHJ1ZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5tYXliZVJlbmRlckRheVBpY2tlcldpdGhQb3J0YWwgPSBmdW5jdGlvbiBtYXliZVJlbmRlckRheVBpY2tlcldpdGhQb3J0YWwoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgIGZvY3VzZWQgPSBfdGhpcyRwcm9wczUuZm9jdXNlZCxcbiAgICAgICAgd2l0aFBvcnRhbCA9IF90aGlzJHByb3BzNS53aXRoUG9ydGFsLFxuICAgICAgICB3aXRoRnVsbFNjcmVlblBvcnRhbCA9IF90aGlzJHByb3BzNS53aXRoRnVsbFNjcmVlblBvcnRhbCxcbiAgICAgICAgYXBwZW5kVG9Cb2R5ID0gX3RoaXMkcHJvcHM1LmFwcGVuZFRvQm9keTtcblxuICAgIGlmICghZm9jdXNlZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHdpdGhQb3J0YWwgfHwgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgfHwgYXBwZW5kVG9Cb2R5KSB7XG4gICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9yZWFjdFBvcnRhbC5Qb3J0YWwsIG51bGwsIHRoaXMucmVuZGVyRGF5UGlja2VyKCkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlbmRlckRheVBpY2tlcigpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXJEYXlQaWNrZXIgPSBmdW5jdGlvbiByZW5kZXJEYXlQaWNrZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFuY2hvckRpcmVjdGlvbiA9IF90aGlzJHByb3BzNi5hbmNob3JEaXJlY3Rpb24sXG4gICAgICAgIG9wZW5EaXJlY3Rpb24gPSBfdGhpcyRwcm9wczYub3BlbkRpcmVjdGlvbixcbiAgICAgICAgb25EYXRlQ2hhbmdlID0gX3RoaXMkcHJvcHM2Lm9uRGF0ZUNoYW5nZSxcbiAgICAgICAgZGF0ZSA9IF90aGlzJHByb3BzNi5kYXRlLFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHM2Lm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgIGZvY3VzZWQgPSBfdGhpcyRwcm9wczYuZm9jdXNlZCxcbiAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfdGhpcyRwcm9wczYuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHM2Lm51bWJlck9mTW9udGhzLFxuICAgICAgICBvcmllbnRhdGlvbiA9IF90aGlzJHByb3BzNi5vcmllbnRhdGlvbixcbiAgICAgICAgbW9udGhGb3JtYXQgPSBfdGhpcyRwcm9wczYubW9udGhGb3JtYXQsXG4gICAgICAgIG5hdlByZXYgPSBfdGhpcyRwcm9wczYubmF2UHJldixcbiAgICAgICAgbmF2TmV4dCA9IF90aGlzJHByb3BzNi5uYXZOZXh0LFxuICAgICAgICBvblByZXZNb250aENsaWNrID0gX3RoaXMkcHJvcHM2Lm9uUHJldk1vbnRoQ2xpY2ssXG4gICAgICAgIG9uTmV4dE1vbnRoQ2xpY2sgPSBfdGhpcyRwcm9wczYub25OZXh0TW9udGhDbGljayxcbiAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzNi5vbkNsb3NlLFxuICAgICAgICB3aXRoUG9ydGFsID0gX3RoaXMkcHJvcHM2LndpdGhQb3J0YWwsXG4gICAgICAgIHdpdGhGdWxsU2NyZWVuUG9ydGFsID0gX3RoaXMkcHJvcHM2LndpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgICBrZWVwT3Blbk9uRGF0ZVNlbGVjdCA9IF90aGlzJHByb3BzNi5rZWVwT3Blbk9uRGF0ZVNlbGVjdCxcbiAgICAgICAgaW5pdGlhbFZpc2libGVNb250aCA9IF90aGlzJHByb3BzNi5pbml0aWFsVmlzaWJsZU1vbnRoLFxuICAgICAgICByZW5kZXJNb250aFRleHQgPSBfdGhpcyRwcm9wczYucmVuZGVyTW9udGhUZXh0LFxuICAgICAgICByZW5kZXJDYWxlbmRhckRheSA9IF90aGlzJHByb3BzNi5yZW5kZXJDYWxlbmRhckRheSxcbiAgICAgICAgcmVuZGVyRGF5Q29udGVudHMgPSBfdGhpcyRwcm9wczYucmVuZGVyRGF5Q29udGVudHMsXG4gICAgICAgIHJlbmRlckNhbGVuZGFySW5mbyA9IF90aGlzJHByb3BzNi5yZW5kZXJDYWxlbmRhckluZm8sXG4gICAgICAgIHJlbmRlck1vbnRoRWxlbWVudCA9IF90aGlzJHByb3BzNi5yZW5kZXJNb250aEVsZW1lbnQsXG4gICAgICAgIGNhbGVuZGFySW5mb1Bvc2l0aW9uID0gX3RoaXMkcHJvcHM2LmNhbGVuZGFySW5mb1Bvc2l0aW9uLFxuICAgICAgICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9IF90aGlzJHByb3BzNi5oaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgICAgZmlyc3REYXlPZldlZWsgPSBfdGhpcyRwcm9wczYuZmlyc3REYXlPZldlZWssXG4gICAgICAgIGN1c3RvbUNsb3NlSWNvbiA9IF90aGlzJHByb3BzNi5jdXN0b21DbG9zZUljb24sXG4gICAgICAgIHBocmFzZXMgPSBfdGhpcyRwcm9wczYucGhyYXNlcyxcbiAgICAgICAgZGF5QXJpYUxhYmVsRm9ybWF0ID0gX3RoaXMkcHJvcHM2LmRheUFyaWFMYWJlbEZvcm1hdCxcbiAgICAgICAgZGF5U2l6ZSA9IF90aGlzJHByb3BzNi5kYXlTaXplLFxuICAgICAgICBpc1JUTCA9IF90aGlzJHByb3BzNi5pc1JUTCxcbiAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBfdGhpcyRwcm9wczYuaXNPdXRzaWRlUmFuZ2UsXG4gICAgICAgIGlzRGF5QmxvY2tlZCA9IF90aGlzJHByb3BzNi5pc0RheUJsb2NrZWQsXG4gICAgICAgIGlzRGF5SGlnaGxpZ2h0ZWQgPSBfdGhpcyRwcm9wczYuaXNEYXlIaWdobGlnaHRlZCxcbiAgICAgICAgd2Vla0RheUZvcm1hdCA9IF90aGlzJHByb3BzNi53ZWVrRGF5Rm9ybWF0LFxuICAgICAgICBzdHlsZXMgPSBfdGhpcyRwcm9wczYuc3R5bGVzLFxuICAgICAgICB2ZXJ0aWNhbEhlaWdodCA9IF90aGlzJHByb3BzNi52ZXJ0aWNhbEhlaWdodCxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX3RoaXMkcHJvcHM2LnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgICAgdmVydGljYWxTcGFjaW5nID0gX3RoaXMkcHJvcHM2LnZlcnRpY2FsU3BhY2luZyxcbiAgICAgICAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZyA9IF90aGlzJHByb3BzNi5ob3Jpem9udGFsTW9udGhQYWRkaW5nLFxuICAgICAgICBzbWFsbCA9IF90aGlzJHByb3BzNi5zbWFsbCxcbiAgICAgICAgcmVhY3REYXRlcyA9IF90aGlzJHByb3BzNi50aGVtZS5yZWFjdERhdGVzO1xuICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGRheVBpY2tlckNvbnRhaW5lclN0eWxlcyA9IF90aGlzJHN0YXRlLmRheVBpY2tlckNvbnRhaW5lclN0eWxlcyxcbiAgICAgICAgaXNEYXlQaWNrZXJGb2N1c2VkID0gX3RoaXMkc3RhdGUuaXNEYXlQaWNrZXJGb2N1c2VkLFxuICAgICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHMgPSBfdGhpcyRzdGF0ZS5zaG93S2V5Ym9hcmRTaG9ydGN1dHM7XG4gICAgdmFyIG9uT3V0c2lkZUNsaWNrID0gIXdpdGhGdWxsU2NyZWVuUG9ydGFsICYmIHdpdGhQb3J0YWwgPyB0aGlzLm9uT3V0c2lkZUNsaWNrIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGNsb3NlSWNvbiA9IGN1c3RvbUNsb3NlSWNvbiB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0Nsb3NlQnV0dG9uW1wiZGVmYXVsdFwiXSwgbnVsbCk7XG5cbiAgICB2YXIgaW5wdXRIZWlnaHQgPSAoMCwgX2dldElucHV0SGVpZ2h0W1wiZGVmYXVsdFwiXSkocmVhY3REYXRlcywgc21hbGwpO1xuICAgIHZhciB3aXRoQW55UG9ydGFsID0gd2l0aFBvcnRhbCB8fCB3aXRoRnVsbFNjcmVlblBvcnRhbDtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGpzeC1hMTF5L25vLXN0YXRpYy1lbGVtZW50LWludGVyYWN0aW9uc1xuICAgICAgcmVmOiB0aGlzLnNldERheVBpY2tlckNvbnRhaW5lclJlZlxuICAgIH0sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLlNpbmdsZURhdGVQaWNrZXJfcGlja2VyLCBhbmNob3JEaXJlY3Rpb24gPT09IF9jb25zdGFudHMuQU5DSE9SX0xFRlQgJiYgc3R5bGVzLlNpbmdsZURhdGVQaWNrZXJfcGlja2VyX19kaXJlY3Rpb25MZWZ0LCBhbmNob3JEaXJlY3Rpb24gPT09IF9jb25zdGFudHMuQU5DSE9SX1JJR0hUICYmIHN0eWxlcy5TaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fZGlyZWN0aW9uUmlnaHQsIG9wZW5EaXJlY3Rpb24gPT09IF9jb25zdGFudHMuT1BFTl9ET1dOICYmIHN0eWxlcy5TaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fb3BlbkRvd24sIG9wZW5EaXJlY3Rpb24gPT09IF9jb25zdGFudHMuT1BFTl9VUCAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX29wZW5VcCwgIXdpdGhBbnlQb3J0YWwgJiYgb3BlbkRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5PUEVOX0RPV04gJiYge1xuICAgICAgdG9wOiBpbnB1dEhlaWdodCArIHZlcnRpY2FsU3BhY2luZ1xuICAgIH0sICF3aXRoQW55UG9ydGFsICYmIG9wZW5EaXJlY3Rpb24gPT09IF9jb25zdGFudHMuT1BFTl9VUCAmJiB7XG4gICAgICBib3R0b206IGlucHV0SGVpZ2h0ICsgdmVydGljYWxTcGFjaW5nXG4gICAgfSwgb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTiAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX2hvcml6b250YWwsIG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX09SSUVOVEFUSU9OICYmIHN0eWxlcy5TaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fdmVydGljYWwsIHdpdGhBbnlQb3J0YWwgJiYgc3R5bGVzLlNpbmdsZURhdGVQaWNrZXJfcGlja2VyX19wb3J0YWwsIHdpdGhGdWxsU2NyZWVuUG9ydGFsICYmIHN0eWxlcy5TaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fZnVsbFNjcmVlblBvcnRhbCwgaXNSVEwgJiYgc3R5bGVzLlNpbmdsZURhdGVQaWNrZXJfcGlja2VyX19ydGwsIGRheVBpY2tlckNvbnRhaW5lclN0eWxlcyksIHtcbiAgICAgIG9uQ2xpY2s6IG9uT3V0c2lkZUNsaWNrXG4gICAgfSksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXJbXCJkZWZhdWx0XCJdLCB7XG4gICAgICBkYXRlOiBkYXRlLFxuICAgICAgb25EYXRlQ2hhbmdlOiBvbkRhdGVDaGFuZ2UsXG4gICAgICBvbkZvY3VzQ2hhbmdlOiBvbkZvY3VzQ2hhbmdlLFxuICAgICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uLFxuICAgICAgZW5hYmxlT3V0c2lkZURheXM6IGVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgbnVtYmVyT2ZNb250aHM6IG51bWJlck9mTW9udGhzLFxuICAgICAgbW9udGhGb3JtYXQ6IG1vbnRoRm9ybWF0LFxuICAgICAgd2l0aFBvcnRhbDogd2l0aEFueVBvcnRhbCxcbiAgICAgIGZvY3VzZWQ6IGZvY3VzZWQsXG4gICAgICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDoga2VlcE9wZW5PbkRhdGVTZWxlY3QsXG4gICAgICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICBpbml0aWFsVmlzaWJsZU1vbnRoOiBpbml0aWFsVmlzaWJsZU1vbnRoLFxuICAgICAgbmF2UHJldjogbmF2UHJldixcbiAgICAgIG5hdk5leHQ6IG5hdk5leHQsXG4gICAgICBvblByZXZNb250aENsaWNrOiBvblByZXZNb250aENsaWNrLFxuICAgICAgb25OZXh0TW9udGhDbGljazogb25OZXh0TW9udGhDbGljayxcbiAgICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgICByZW5kZXJNb250aFRleHQ6IHJlbmRlck1vbnRoVGV4dCxcbiAgICAgIHJlbmRlckNhbGVuZGFyRGF5OiByZW5kZXJDYWxlbmRhckRheSxcbiAgICAgIHJlbmRlckRheUNvbnRlbnRzOiByZW5kZXJEYXlDb250ZW50cyxcbiAgICAgIHJlbmRlckNhbGVuZGFySW5mbzogcmVuZGVyQ2FsZW5kYXJJbmZvLFxuICAgICAgcmVuZGVyTW9udGhFbGVtZW50OiByZW5kZXJNb250aEVsZW1lbnQsXG4gICAgICBjYWxlbmRhckluZm9Qb3NpdGlvbjogY2FsZW5kYXJJbmZvUG9zaXRpb24sXG4gICAgICBpc0ZvY3VzZWQ6IGlzRGF5UGlja2VyRm9jdXNlZCxcbiAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogc2hvd0tleWJvYXJkU2hvcnRjdXRzLFxuICAgICAgb25CbHVyOiB0aGlzLm9uRGF5UGlja2VyQmx1cixcbiAgICAgIHBocmFzZXM6IHBocmFzZXMsXG4gICAgICBkYXlBcmlhTGFiZWxGb3JtYXQ6IGRheUFyaWFMYWJlbEZvcm1hdCxcbiAgICAgIGRheVNpemU6IGRheVNpemUsXG4gICAgICBpc1JUTDogaXNSVEwsXG4gICAgICBpc091dHNpZGVSYW5nZTogaXNPdXRzaWRlUmFuZ2UsXG4gICAgICBpc0RheUJsb2NrZWQ6IGlzRGF5QmxvY2tlZCxcbiAgICAgIGlzRGF5SGlnaGxpZ2h0ZWQ6IGlzRGF5SGlnaGxpZ2h0ZWQsXG4gICAgICBmaXJzdERheU9mV2VlazogZmlyc3REYXlPZldlZWssXG4gICAgICB3ZWVrRGF5Rm9ybWF0OiB3ZWVrRGF5Rm9ybWF0LFxuICAgICAgdmVydGljYWxIZWlnaHQ6IHZlcnRpY2FsSGVpZ2h0LFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiBob3Jpem9udGFsTW9udGhQYWRkaW5nXG4gICAgfSksIHdpdGhGdWxsU2NyZWVuUG9ydGFsICYmIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLlNpbmdsZURhdGVQaWNrZXJfY2xvc2VCdXR0b24pLCB7XG4gICAgICBcImFyaWEtbGFiZWxcIjogcGhyYXNlcy5jbG9zZURhdGVQaWNrZXIsXG4gICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgb25DbGljazogdGhpcy5vbk91dHNpZGVDbGlja1xuICAgIH0pLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcl9jbG9zZUJ1dHRvbl9zdmcpLCBjbG9zZUljb24pKSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM3ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaWQgPSBfdGhpcyRwcm9wczcuaWQsXG4gICAgICAgIHBsYWNlaG9sZGVyID0gX3RoaXMkcHJvcHM3LnBsYWNlaG9sZGVyLFxuICAgICAgICBhcmlhTGFiZWwgPSBfdGhpcyRwcm9wczcuYXJpYUxhYmVsLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzNy5kaXNhYmxlZCxcbiAgICAgICAgZm9jdXNlZCA9IF90aGlzJHByb3BzNy5mb2N1c2VkLFxuICAgICAgICByZXF1aXJlZCA9IF90aGlzJHByb3BzNy5yZXF1aXJlZCxcbiAgICAgICAgcmVhZE9ubHkgPSBfdGhpcyRwcm9wczcucmVhZE9ubHksXG4gICAgICAgIG9wZW5EaXJlY3Rpb24gPSBfdGhpcyRwcm9wczcub3BlbkRpcmVjdGlvbixcbiAgICAgICAgc2hvd0NsZWFyRGF0ZSA9IF90aGlzJHByb3BzNy5zaG93Q2xlYXJEYXRlLFxuICAgICAgICBzaG93RGVmYXVsdElucHV0SWNvbiA9IF90aGlzJHByb3BzNy5zaG93RGVmYXVsdElucHV0SWNvbixcbiAgICAgICAgaW5wdXRJY29uUG9zaXRpb24gPSBfdGhpcyRwcm9wczcuaW5wdXRJY29uUG9zaXRpb24sXG4gICAgICAgIGN1c3RvbUNsb3NlSWNvbiA9IF90aGlzJHByb3BzNy5jdXN0b21DbG9zZUljb24sXG4gICAgICAgIGN1c3RvbUlucHV0SWNvbiA9IF90aGlzJHByb3BzNy5jdXN0b21JbnB1dEljb24sXG4gICAgICAgIGRhdGUgPSBfdGhpcyRwcm9wczcuZGF0ZSxcbiAgICAgICAgb25EYXRlQ2hhbmdlID0gX3RoaXMkcHJvcHM3Lm9uRGF0ZUNoYW5nZSxcbiAgICAgICAgZGlzcGxheUZvcm1hdCA9IF90aGlzJHByb3BzNy5kaXNwbGF5Rm9ybWF0LFxuICAgICAgICBwaHJhc2VzID0gX3RoaXMkcHJvcHM3LnBocmFzZXMsXG4gICAgICAgIHdpdGhQb3J0YWwgPSBfdGhpcyRwcm9wczcud2l0aFBvcnRhbCxcbiAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfdGhpcyRwcm9wczcud2l0aEZ1bGxTY3JlZW5Qb3J0YWwsXG4gICAgICAgIHNjcmVlblJlYWRlcklucHV0TWVzc2FnZSA9IF90aGlzJHByb3BzNy5zY3JlZW5SZWFkZXJJbnB1dE1lc3NhZ2UsXG4gICAgICAgIGlzUlRMID0gX3RoaXMkcHJvcHM3LmlzUlRMLFxuICAgICAgICBub0JvcmRlciA9IF90aGlzJHByb3BzNy5ub0JvcmRlcixcbiAgICAgICAgYmxvY2sgPSBfdGhpcyRwcm9wczcuYmxvY2ssXG4gICAgICAgIHNtYWxsID0gX3RoaXMkcHJvcHM3LnNtYWxsLFxuICAgICAgICByZWd1bGFyID0gX3RoaXMkcHJvcHM3LnJlZ3VsYXIsXG4gICAgICAgIHZlcnRpY2FsU3BhY2luZyA9IF90aGlzJHByb3BzNy52ZXJ0aWNhbFNwYWNpbmcsXG4gICAgICAgIHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlID0gX3RoaXMkcHJvcHM3LnJlb3BlblBpY2tlck9uQ2xlYXJEYXRlLFxuICAgICAgICBrZWVwT3Blbk9uRGF0ZVNlbGVjdCA9IF90aGlzJHByb3BzNy5rZWVwT3Blbk9uRGF0ZVNlbGVjdCxcbiAgICAgICAgc3R5bGVzID0gX3RoaXMkcHJvcHM3LnN0eWxlcyxcbiAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBfdGhpcyRwcm9wczcuaXNPdXRzaWRlUmFuZ2U7XG4gICAgdmFyIGlzSW5wdXRGb2N1c2VkID0gdGhpcy5zdGF0ZS5pc0lucHV0Rm9jdXNlZDtcbiAgICB2YXIgZW5hYmxlT3V0c2lkZUNsaWNrID0gIXdpdGhQb3J0YWwgJiYgIXdpdGhGdWxsU2NyZWVuUG9ydGFsO1xuICAgIHZhciBoaWRlRmFuZyA9IHZlcnRpY2FsU3BhY2luZyA8IF9jb25zdGFudHMuRkFOR19IRUlHSFRfUFg7XG5cbiAgICB2YXIgaW5wdXQgPSBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX1NpbmdsZURhdGVQaWNrZXJJbnB1dENvbnRyb2xsZXJbXCJkZWZhdWx0XCJdLCB7XG4gICAgICBpZDogaWQsXG4gICAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsXG4gICAgICBhcmlhTGFiZWw6IGFyaWFMYWJlbCxcbiAgICAgIGZvY3VzZWQ6IGZvY3VzZWQsXG4gICAgICBpc0ZvY3VzZWQ6IGlzSW5wdXRGb2N1c2VkLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgICAgb3BlbkRpcmVjdGlvbjogb3BlbkRpcmVjdGlvbixcbiAgICAgIHNob3dDYXJldDogIXdpdGhQb3J0YWwgJiYgIXdpdGhGdWxsU2NyZWVuUG9ydGFsICYmICFoaWRlRmFuZyxcbiAgICAgIHNob3dDbGVhckRhdGU6IHNob3dDbGVhckRhdGUsXG4gICAgICBzaG93RGVmYXVsdElucHV0SWNvbjogc2hvd0RlZmF1bHRJbnB1dEljb24sXG4gICAgICBpbnB1dEljb25Qb3NpdGlvbjogaW5wdXRJY29uUG9zaXRpb24sXG4gICAgICBpc091dHNpZGVSYW5nZTogaXNPdXRzaWRlUmFuZ2UsXG4gICAgICBjdXN0b21DbG9zZUljb246IGN1c3RvbUNsb3NlSWNvbixcbiAgICAgIGN1c3RvbUlucHV0SWNvbjogY3VzdG9tSW5wdXRJY29uLFxuICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgIG9uRGF0ZUNoYW5nZTogb25EYXRlQ2hhbmdlLFxuICAgICAgZGlzcGxheUZvcm1hdDogZGlzcGxheUZvcm1hdCxcbiAgICAgIG9uRm9jdXNDaGFuZ2U6IHRoaXMub25JbnB1dEZvY3VzLFxuICAgICAgb25LZXlEb3duQXJyb3dEb3duOiB0aGlzLm9uRGF5UGlja2VyRm9jdXMsXG4gICAgICBvbktleURvd25RdWVzdGlvbk1hcms6IHRoaXMuc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICBzY3JlZW5SZWFkZXJNZXNzYWdlOiBzY3JlZW5SZWFkZXJJbnB1dE1lc3NhZ2UsXG4gICAgICBwaHJhc2VzOiBwaHJhc2VzLFxuICAgICAgaXNSVEw6IGlzUlRMLFxuICAgICAgbm9Cb3JkZXI6IG5vQm9yZGVyLFxuICAgICAgYmxvY2s6IGJsb2NrLFxuICAgICAgc21hbGw6IHNtYWxsLFxuICAgICAgcmVndWxhcjogcmVndWxhcixcbiAgICAgIHZlcnRpY2FsU3BhY2luZzogdmVydGljYWxTcGFjaW5nLFxuICAgICAgcmVvcGVuUGlja2VyT25DbGVhckRhdGU6IHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlLFxuICAgICAga2VlcE9wZW5PbkRhdGVTZWxlY3Q6IGtlZXBPcGVuT25EYXRlU2VsZWN0XG4gICAgfSwgdGhpcy5tYXliZVJlbmRlckRheVBpY2tlcldpdGhQb3J0YWwoKSk7XG5cbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgICByZWY6IHRoaXMuc2V0Q29udGFpbmVyUmVmXG4gICAgfSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlciwgYmxvY2sgJiYgc3R5bGVzLlNpbmdsZURhdGVQaWNrZXJfX2Jsb2NrKSksIGVuYWJsZU91dHNpZGVDbGljayAmJiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX3JlYWN0T3V0c2lkZUNsaWNrSGFuZGxlcltcImRlZmF1bHRcIl0sIHtcbiAgICAgIG9uT3V0c2lkZUNsaWNrOiB0aGlzLm9uT3V0c2lkZUNsaWNrXG4gICAgfSwgaW5wdXQpLCBlbmFibGVPdXRzaWRlQ2xpY2sgfHwgaW5wdXQpO1xuICB9O1xuXG4gIHJldHVybiBTaW5nbGVEYXRlUGlja2VyO1xufShfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgfHwgX3JlYWN0W1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXG5leHBvcnRzLlB1cmVTaW5nbGVEYXRlUGlja2VyID0gU2luZ2xlRGF0ZVBpY2tlcjtcblNpbmdsZURhdGVQaWNrZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5TaW5nbGVEYXRlUGlja2VyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlcykoZnVuY3Rpb24gKF9yZWYzKSB7XG4gIHZhciBfcmVmMyRyZWFjdERhdGVzID0gX3JlZjMucmVhY3REYXRlcyxcbiAgICAgIGNvbG9yID0gX3JlZjMkcmVhY3REYXRlcy5jb2xvcixcbiAgICAgIHpJbmRleCA9IF9yZWYzJHJlYWN0RGF0ZXMuekluZGV4O1xuICByZXR1cm4ge1xuICAgIFNpbmdsZURhdGVQaWNrZXI6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaydcbiAgICB9LFxuICAgIFNpbmdsZURhdGVQaWNrZXJfX2Jsb2NrOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfSxcbiAgICBTaW5nbGVEYXRlUGlja2VyX3BpY2tlcjoge1xuICAgICAgekluZGV4OiB6SW5kZXggKyAxLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvci5iYWNrZ3JvdW5kLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuICAgIFNpbmdsZURhdGVQaWNrZXJfcGlja2VyX19ydGw6IHtcbiAgICAgIGRpcmVjdGlvbjogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgncnRsJylcbiAgICB9LFxuICAgIFNpbmdsZURhdGVQaWNrZXJfcGlja2VyX19kaXJlY3Rpb25MZWZ0OiB7XG4gICAgICBsZWZ0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKDApXG4gICAgfSxcbiAgICBTaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fZGlyZWN0aW9uUmlnaHQ6IHtcbiAgICAgIHJpZ2h0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKDApXG4gICAgfSxcbiAgICBTaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fcG9ydGFsOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuMyknLFxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKDApLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcbiAgICBTaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fZnVsbFNjcmVlblBvcnRhbDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvci5iYWNrZ3JvdW5kXG4gICAgfSxcbiAgICBTaW5nbGVEYXRlUGlja2VyX2Nsb3NlQnV0dG9uOiB7XG4gICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgICBib3JkZXI6IDAsXG4gICAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICAgZm9udDogJ2luaGVyaXQnLFxuICAgICAgbGluZUhlaWdodDogJ25vcm1hbCcsXG4gICAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKDApLFxuICAgICAgcGFkZGluZzogMTUsXG4gICAgICB6SW5kZXg6IHpJbmRleCArIDIsXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBjb2xvcjogXCJkYXJrZW4oXCIuY29uY2F0KGNvbG9yLmNvcmUuZ3JheUxpZ2h0ZXIsIFwiLCAxMCUpXCIpLFxuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJzpmb2N1cyc6IHtcbiAgICAgICAgY29sb3I6IFwiZGFya2VuKFwiLmNvbmNhdChjb2xvci5jb3JlLmdyYXlMaWdodGVyLCBcIiwgMTAlKVwiKSxcbiAgICAgICAgdGV4dERlY29yYXRpb246ICdub25lJ1xuICAgICAgfVxuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcl9jbG9zZUJ1dHRvbl9zdmc6IHtcbiAgICAgIGhlaWdodDogMTUsXG4gICAgICB3aWR0aDogMTUsXG4gICAgICBmaWxsOiBjb2xvci5jb3JlLmdyYXlMaWdodGVyXG4gICAgfVxuICB9O1xufSwge1xuICBwdXJlQ29tcG9uZW50OiB0eXBlb2YgX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICE9PSAndW5kZWZpbmVkJ1xufSkoU2luZ2xlRGF0ZVBpY2tlcik7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfZW56eW1lU2hhbGxvd0VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZW56eW1lLXNoYWxsb3ctZXF1YWxcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfcmVhY3RNb21lbnRQcm9wdHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1tb21lbnQtcHJvcHR5cGVzXCIpKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbnZhciBfT3BlbkRpcmVjdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL09wZW5EaXJlY3Rpb25TaGFwZVwiKSk7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0UGhyYXNlUHJvcFR5cGVzXCIpKTtcblxudmFyIF9TaW5nbGVEYXRlUGlja2VySW5wdXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1NpbmdsZURhdGVQaWNrZXJJbnB1dFwiKSk7XG5cbnZhciBfSWNvblBvc2l0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvSWNvblBvc2l0aW9uU2hhcGVcIikpO1xuXG52YXIgX0Rpc2FibGVkU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvRGlzYWJsZWRTaGFwZVwiKSk7XG5cbnZhciBfdG9Nb21lbnRPYmplY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy90b01vbWVudE9iamVjdFwiKSk7XG5cbnZhciBfdG9Mb2NhbGl6ZWREYXRlU3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvdG9Mb2NhbGl6ZWREYXRlU3RyaW5nXCIpKTtcblxudmFyIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXlcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbnZhciBwcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKSh7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBkYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXNbXCJkZWZhdWx0XCJdLm1vbWVudE9iaixcbiAgb25EYXRlQ2hhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG9uRm9jdXNDaGFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZy5pc1JlcXVpcmVkLFxuICBwbGFjZWhvbGRlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBhcmlhTGFiZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgc2NyZWVuUmVhZGVyTWVzc2FnZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBzaG93Q2xlYXJEYXRlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzaG93Q2FyZXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHNob3dEZWZhdWx0SW5wdXRJY29uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBpbnB1dEljb25Qb3NpdGlvbjogX0ljb25Qb3NpdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgZGlzYWJsZWQ6IF9EaXNhYmxlZFNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlYWRPbmx5OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBvcGVuRGlyZWN0aW9uOiBfT3BlbkRpcmVjdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgbm9Cb3JkZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGJsb2NrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzbWFsbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVndWxhcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgdmVydGljYWxTcGFjaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAga2VlcE9wZW5PbkRhdGVTZWxlY3Q6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBpc091dHNpZGVSYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgZGlzcGxheUZvcm1hdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2ZUeXBlKFtfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsIF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmNdKSxcbiAgb25DbG9zZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25LZXlEb3duQXJyb3dEb3duOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbktleURvd25RdWVzdGlvbk1hcms6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGN1c3RvbUlucHV0SWNvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZSxcbiAgY3VzdG9tQ2xvc2VJY29uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICAvLyBhY2Nlc3NpYmlsaXR5XG4gIGlzRm9jdXNlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgLy8gaTE4blxuICBwaHJhc2VzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zaGFwZSgoMCwgX2dldFBocmFzZVByb3BUeXBlc1tcImRlZmF1bHRcIl0pKF9kZWZhdWx0UGhyYXNlcy5TaW5nbGVEYXRlUGlja2VySW5wdXRQaHJhc2VzKSksXG4gIGlzUlRMOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sXG59KSA6IHt9O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY2hpbGRyZW46IG51bGwsXG4gIGRhdGU6IG51bGwsXG4gIGZvY3VzZWQ6IGZhbHNlLFxuICBwbGFjZWhvbGRlcjogJycsXG4gIGFyaWFMYWJlbDogdW5kZWZpbmVkLFxuICBzY3JlZW5SZWFkZXJNZXNzYWdlOiAnRGF0ZScsXG4gIHNob3dDbGVhckRhdGU6IGZhbHNlLFxuICBzaG93Q2FyZXQ6IGZhbHNlLFxuICBzaG93RGVmYXVsdElucHV0SWNvbjogZmFsc2UsXG4gIGlucHV0SWNvblBvc2l0aW9uOiBfY29uc3RhbnRzLklDT05fQkVGT1JFX1BPU0lUSU9OLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHJlcXVpcmVkOiBmYWxzZSxcbiAgcmVhZE9ubHk6IGZhbHNlLFxuICBvcGVuRGlyZWN0aW9uOiBfY29uc3RhbnRzLk9QRU5fRE9XTixcbiAgbm9Cb3JkZXI6IGZhbHNlLFxuICBibG9jazogZmFsc2UsXG4gIHNtYWxsOiBmYWxzZSxcbiAgcmVndWxhcjogZmFsc2UsXG4gIHZlcnRpY2FsU3BhY2luZzogdW5kZWZpbmVkLFxuICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDogZmFsc2UsXG4gIHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlOiBmYWxzZSxcbiAgaXNPdXRzaWRlUmFuZ2U6IGZ1bmN0aW9uIGlzT3V0c2lkZVJhbmdlKGRheSkge1xuICAgIHJldHVybiAhKDAsIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXlbXCJkZWZhdWx0XCJdKShkYXksICgwLCBfbW9tZW50W1wiZGVmYXVsdFwiXSkoKSk7XG4gIH0sXG4gIGRpc3BsYXlGb3JtYXQ6IGZ1bmN0aW9uIGRpc3BsYXlGb3JtYXQoKSB7XG4gICAgcmV0dXJuIF9tb21lbnRbXCJkZWZhdWx0XCJdLmxvY2FsZURhdGEoKS5sb25nRGF0ZUZvcm1hdCgnTCcpO1xuICB9LFxuICBvbkNsb3NlOiBmdW5jdGlvbiBvbkNsb3NlKCkge30sXG4gIG9uS2V5RG93bkFycm93RG93bjogZnVuY3Rpb24gb25LZXlEb3duQXJyb3dEb3duKCkge30sXG4gIG9uS2V5RG93blF1ZXN0aW9uTWFyazogZnVuY3Rpb24gb25LZXlEb3duUXVlc3Rpb25NYXJrKCkge30sXG4gIGN1c3RvbUlucHV0SWNvbjogbnVsbCxcbiAgY3VzdG9tQ2xvc2VJY29uOiBudWxsLFxuICAvLyBhY2Nlc3NpYmlsaXR5XG4gIGlzRm9jdXNlZDogZmFsc2UsXG4gIC8vIGkxOG5cbiAgcGhyYXNlczogX2RlZmF1bHRQaHJhc2VzLlNpbmdsZURhdGVQaWNrZXJJbnB1dFBocmFzZXMsXG4gIGlzUlRMOiBmYWxzZVxufTtcblxudmFyIFNpbmdsZURhdGVQaWNrZXJJbnB1dENvbnRyb2xsZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9yZWYpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMltcImRlZmF1bHRcIl0pKFNpbmdsZURhdGVQaWNrZXJJbnB1dENvbnRyb2xsZXIsIF9yZWYpO1xuICB2YXIgX3Byb3RvID0gU2luZ2xlRGF0ZVBpY2tlcklucHV0Q29udHJvbGxlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvWyFfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgJiYgXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIl0gPSBmdW5jdGlvbiAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFNpbmdsZURhdGVQaWNrZXJJbnB1dENvbnRyb2xsZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9yZWYuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5vbkNoYW5nZSA9IF90aGlzLm9uQ2hhbmdlLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbkZvY3VzID0gX3RoaXMub25Gb2N1cy5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25DbGVhckZvY3VzID0gX3RoaXMub25DbGVhckZvY3VzLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5jbGVhckRhdGUgPSBfdGhpcy5jbGVhckRhdGUuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9wcm90by5vbkNoYW5nZSA9IGZ1bmN0aW9uIG9uQ2hhbmdlKGRhdGVTdHJpbmcpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBpc091dHNpZGVSYW5nZSA9IF90aGlzJHByb3BzLmlzT3V0c2lkZVJhbmdlLFxuICAgICAgICBrZWVwT3Blbk9uRGF0ZVNlbGVjdCA9IF90aGlzJHByb3BzLmtlZXBPcGVuT25EYXRlU2VsZWN0LFxuICAgICAgICBvbkRhdGVDaGFuZ2UgPSBfdGhpcyRwcm9wcy5vbkRhdGVDaGFuZ2UsXG4gICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfdGhpcyRwcm9wcy5vbkZvY3VzQ2hhbmdlLFxuICAgICAgICBvbkNsb3NlID0gX3RoaXMkcHJvcHMub25DbG9zZTtcbiAgICB2YXIgbmV3RGF0ZSA9ICgwLCBfdG9Nb21lbnRPYmplY3RbXCJkZWZhdWx0XCJdKShkYXRlU3RyaW5nLCB0aGlzLmdldERpc3BsYXlGb3JtYXQoKSk7XG4gICAgdmFyIGlzVmFsaWQgPSBuZXdEYXRlICYmICFpc091dHNpZGVSYW5nZShuZXdEYXRlKTtcblxuICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICBvbkRhdGVDaGFuZ2UobmV3RGF0ZSk7XG5cbiAgICAgIGlmICgha2VlcE9wZW5PbkRhdGVTZWxlY3QpIHtcbiAgICAgICAgb25Gb2N1c0NoYW5nZSh7XG4gICAgICAgICAgZm9jdXNlZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIG9uQ2xvc2Uoe1xuICAgICAgICAgIGRhdGU6IG5ld0RhdGVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uRGF0ZUNoYW5nZShudWxsKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uRm9jdXMgPSBmdW5jdGlvbiBvbkZvY3VzKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHMyLm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMyLmRpc2FibGVkO1xuXG4gICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgb25Gb2N1c0NoYW5nZSh7XG4gICAgICAgIGZvY3VzZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25DbGVhckZvY3VzID0gZnVuY3Rpb24gb25DbGVhckZvY3VzKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBmb2N1c2VkID0gX3RoaXMkcHJvcHMzLmZvY3VzZWQsXG4gICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfdGhpcyRwcm9wczMub25Gb2N1c0NoYW5nZSxcbiAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzMy5vbkNsb3NlLFxuICAgICAgICBkYXRlID0gX3RoaXMkcHJvcHMzLmRhdGU7XG4gICAgaWYgKCFmb2N1c2VkKSByZXR1cm47XG4gICAgb25Gb2N1c0NoYW5nZSh7XG4gICAgICBmb2N1c2VkOiBmYWxzZVxuICAgIH0pO1xuICAgIG9uQ2xvc2Uoe1xuICAgICAgZGF0ZTogZGF0ZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5nZXREaXNwbGF5Rm9ybWF0ID0gZnVuY3Rpb24gZ2V0RGlzcGxheUZvcm1hdCgpIHtcbiAgICB2YXIgZGlzcGxheUZvcm1hdCA9IHRoaXMucHJvcHMuZGlzcGxheUZvcm1hdDtcbiAgICByZXR1cm4gdHlwZW9mIGRpc3BsYXlGb3JtYXQgPT09ICdzdHJpbmcnID8gZGlzcGxheUZvcm1hdCA6IGRpc3BsYXlGb3JtYXQoKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0RGF0ZVN0cmluZyA9IGZ1bmN0aW9uIGdldERhdGVTdHJpbmcoZGF0ZSkge1xuICAgIHZhciBkaXNwbGF5Rm9ybWF0ID0gdGhpcy5nZXREaXNwbGF5Rm9ybWF0KCk7XG5cbiAgICBpZiAoZGF0ZSAmJiBkaXNwbGF5Rm9ybWF0KSB7XG4gICAgICByZXR1cm4gZGF0ZSAmJiBkYXRlLmZvcm1hdChkaXNwbGF5Rm9ybWF0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF90b0xvY2FsaXplZERhdGVTdHJpbmdbXCJkZWZhdWx0XCJdKShkYXRlKTtcbiAgfTtcblxuICBfcHJvdG8uY2xlYXJEYXRlID0gZnVuY3Rpb24gY2xlYXJEYXRlKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICBvbkRhdGVDaGFuZ2UgPSBfdGhpcyRwcm9wczQub25EYXRlQ2hhbmdlLFxuICAgICAgICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZSA9IF90aGlzJHByb3BzNC5yZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZSxcbiAgICAgICAgb25Gb2N1c0NoYW5nZSA9IF90aGlzJHByb3BzNC5vbkZvY3VzQ2hhbmdlO1xuICAgIG9uRGF0ZUNoYW5nZShudWxsKTtcblxuICAgIGlmIChyZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZSkge1xuICAgICAgb25Gb2N1c0NoYW5nZSh7XG4gICAgICAgIGZvY3VzZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczUgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzNS5jaGlsZHJlbixcbiAgICAgICAgaWQgPSBfdGhpcyRwcm9wczUuaWQsXG4gICAgICAgIHBsYWNlaG9sZGVyID0gX3RoaXMkcHJvcHM1LnBsYWNlaG9sZGVyLFxuICAgICAgICBhcmlhTGFiZWwgPSBfdGhpcyRwcm9wczUuYXJpYUxhYmVsLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzNS5kaXNhYmxlZCxcbiAgICAgICAgZm9jdXNlZCA9IF90aGlzJHByb3BzNS5mb2N1c2VkLFxuICAgICAgICBpc0ZvY3VzZWQgPSBfdGhpcyRwcm9wczUuaXNGb2N1c2VkLFxuICAgICAgICByZXF1aXJlZCA9IF90aGlzJHByb3BzNS5yZXF1aXJlZCxcbiAgICAgICAgcmVhZE9ubHkgPSBfdGhpcyRwcm9wczUucmVhZE9ubHksXG4gICAgICAgIG9wZW5EaXJlY3Rpb24gPSBfdGhpcyRwcm9wczUub3BlbkRpcmVjdGlvbixcbiAgICAgICAgc2hvd0NsZWFyRGF0ZSA9IF90aGlzJHByb3BzNS5zaG93Q2xlYXJEYXRlLFxuICAgICAgICBzaG93Q2FyZXQgPSBfdGhpcyRwcm9wczUuc2hvd0NhcmV0LFxuICAgICAgICBzaG93RGVmYXVsdElucHV0SWNvbiA9IF90aGlzJHByb3BzNS5zaG93RGVmYXVsdElucHV0SWNvbixcbiAgICAgICAgaW5wdXRJY29uUG9zaXRpb24gPSBfdGhpcyRwcm9wczUuaW5wdXRJY29uUG9zaXRpb24sXG4gICAgICAgIGN1c3RvbUNsb3NlSWNvbiA9IF90aGlzJHByb3BzNS5jdXN0b21DbG9zZUljb24sXG4gICAgICAgIGN1c3RvbUlucHV0SWNvbiA9IF90aGlzJHByb3BzNS5jdXN0b21JbnB1dEljb24sXG4gICAgICAgIGRhdGUgPSBfdGhpcyRwcm9wczUuZGF0ZSxcbiAgICAgICAgcGhyYXNlcyA9IF90aGlzJHByb3BzNS5waHJhc2VzLFxuICAgICAgICBvbktleURvd25BcnJvd0Rvd24gPSBfdGhpcyRwcm9wczUub25LZXlEb3duQXJyb3dEb3duLFxuICAgICAgICBvbktleURvd25RdWVzdGlvbk1hcmsgPSBfdGhpcyRwcm9wczUub25LZXlEb3duUXVlc3Rpb25NYXJrLFxuICAgICAgICBzY3JlZW5SZWFkZXJNZXNzYWdlID0gX3RoaXMkcHJvcHM1LnNjcmVlblJlYWRlck1lc3NhZ2UsXG4gICAgICAgIGlzUlRMID0gX3RoaXMkcHJvcHM1LmlzUlRMLFxuICAgICAgICBub0JvcmRlciA9IF90aGlzJHByb3BzNS5ub0JvcmRlcixcbiAgICAgICAgYmxvY2sgPSBfdGhpcyRwcm9wczUuYmxvY2ssXG4gICAgICAgIHNtYWxsID0gX3RoaXMkcHJvcHM1LnNtYWxsLFxuICAgICAgICByZWd1bGFyID0gX3RoaXMkcHJvcHM1LnJlZ3VsYXIsXG4gICAgICAgIHZlcnRpY2FsU3BhY2luZyA9IF90aGlzJHByb3BzNS52ZXJ0aWNhbFNwYWNpbmc7XG4gICAgdmFyIGRpc3BsYXlWYWx1ZSA9IHRoaXMuZ2V0RGF0ZVN0cmluZyhkYXRlKTtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9TaW5nbGVEYXRlUGlja2VySW5wdXRbXCJkZWZhdWx0XCJdLCB7XG4gICAgICBpZDogaWQsXG4gICAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsXG4gICAgICBhcmlhTGFiZWw6IGFyaWFMYWJlbCxcbiAgICAgIGZvY3VzZWQ6IGZvY3VzZWQsXG4gICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZCxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICAgIG9wZW5EaXJlY3Rpb246IG9wZW5EaXJlY3Rpb24sXG4gICAgICBzaG93Q2FyZXQ6IHNob3dDYXJldCxcbiAgICAgIG9uQ2xlYXJEYXRlOiB0aGlzLmNsZWFyRGF0ZSxcbiAgICAgIHNob3dDbGVhckRhdGU6IHNob3dDbGVhckRhdGUsXG4gICAgICBzaG93RGVmYXVsdElucHV0SWNvbjogc2hvd0RlZmF1bHRJbnB1dEljb24sXG4gICAgICBpbnB1dEljb25Qb3NpdGlvbjogaW5wdXRJY29uUG9zaXRpb24sXG4gICAgICBjdXN0b21DbG9zZUljb246IGN1c3RvbUNsb3NlSWNvbixcbiAgICAgIGN1c3RvbUlucHV0SWNvbjogY3VzdG9tSW5wdXRJY29uLFxuICAgICAgZGlzcGxheVZhbHVlOiBkaXNwbGF5VmFsdWUsXG4gICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZSxcbiAgICAgIG9uRm9jdXM6IHRoaXMub25Gb2N1cyxcbiAgICAgIG9uS2V5RG93blNoaWZ0VGFiOiB0aGlzLm9uQ2xlYXJGb2N1cyxcbiAgICAgIG9uS2V5RG93bkFycm93RG93bjogb25LZXlEb3duQXJyb3dEb3duLFxuICAgICAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiBvbktleURvd25RdWVzdGlvbk1hcmssXG4gICAgICBzY3JlZW5SZWFkZXJNZXNzYWdlOiBzY3JlZW5SZWFkZXJNZXNzYWdlLFxuICAgICAgcGhyYXNlczogcGhyYXNlcyxcbiAgICAgIGlzUlRMOiBpc1JUTCxcbiAgICAgIG5vQm9yZGVyOiBub0JvcmRlcixcbiAgICAgIGJsb2NrOiBibG9jayxcbiAgICAgIHNtYWxsOiBzbWFsbCxcbiAgICAgIHJlZ3VsYXI6IHJlZ3VsYXIsXG4gICAgICB2ZXJ0aWNhbFNwYWNpbmc6IHZlcnRpY2FsU3BhY2luZ1xuICAgIH0sIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gU2luZ2xlRGF0ZVBpY2tlcklucHV0Q29udHJvbGxlcjtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBTaW5nbGVEYXRlUGlja2VySW5wdXRDb250cm9sbGVyO1xuU2luZ2xlRGF0ZVBpY2tlcklucHV0Q29udHJvbGxlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBwcm9wVHlwZXMgOiB7fTtcblNpbmdsZURhdGVQaWNrZXJJbnB1dENvbnRyb2xsZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gaXNJbmNsdXNpdmVseUJlZm9yZURheTtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX2lzQWZ0ZXJEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzQWZ0ZXJEYXlcIikpO1xuXG5mdW5jdGlvbiBpc0luY2x1c2l2ZWx5QmVmb3JlRGF5KGEsIGIpIHtcbiAgaWYgKCFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChhKSB8fCAhX21vbWVudFtcImRlZmF1bHRcIl0uaXNNb21lbnQoYikpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICEoMCwgX2lzQWZ0ZXJEYXlbXCJkZWZhdWx0XCJdKShhLCBiKTtcbn0iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVucmVzb2x2ZWRcbnJlcXVpcmUoJy4vbGliL2luaXRpYWxpemUnKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxudmFyIF9yZWdpc3RlckNTU0ludGVyZmFjZVdpdGhEZWZhdWx0VGhlbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL3JlZ2lzdGVyQ1NTSW50ZXJmYWNlV2l0aERlZmF1bHRUaGVtZVwiKSk7XG5cbigwLCBfcmVnaXN0ZXJDU1NJbnRlcmZhY2VXaXRoRGVmYXVsdFRoZW1lW1wiZGVmYXVsdFwiXSkoKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHJlZ2lzdGVyQ1NTSW50ZXJmYWNlV2l0aERlZmF1bHRUaGVtZTtcblxudmFyIF9yZWFjdFdpdGhTdHlsZXNJbnRlcmZhY2VDc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC13aXRoLXN0eWxlcy1pbnRlcmZhY2UtY3NzXCIpKTtcblxudmFyIF9yZWdpc3RlckludGVyZmFjZVdpdGhEZWZhdWx0VGhlbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JlZ2lzdGVySW50ZXJmYWNlV2l0aERlZmF1bHRUaGVtZVwiKSk7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyQ1NTSW50ZXJmYWNlV2l0aERlZmF1bHRUaGVtZSgpIHtcbiAgKDAsIF9yZWdpc3RlckludGVyZmFjZVdpdGhEZWZhdWx0VGhlbWVbXCJkZWZhdWx0XCJdKShfcmVhY3RXaXRoU3R5bGVzSW50ZXJmYWNlQ3NzW1wiZGVmYXVsdFwiXSk7XG59IiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnJlc29sdmVkXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9pbmRleC5qcycpLmRlZmF1bHQ7XG4iLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2FycmF5UHJvdG90eXBlID0gcmVxdWlyZSgnYXJyYXkucHJvdG90eXBlLmZsYXQnKTtcblxudmFyIF9hcnJheVByb3RvdHlwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hcnJheVByb3RvdHlwZSk7XG5cbnZhciBfZ2xvYmFsQ2FjaGUgPSByZXF1aXJlKCdnbG9iYWwtY2FjaGUnKTtcblxudmFyIF9nbG9iYWxDYWNoZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nbG9iYWxDYWNoZSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgnLi91dGlscy9jb25zdGFudHMnKTtcblxudmFyIF9nZXRDbGFzc05hbWUgPSByZXF1aXJlKCcuL3V0aWxzL2dldENsYXNzTmFtZScpO1xuXG52YXIgX2dldENsYXNzTmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRDbGFzc05hbWUpO1xuXG52YXIgX3NlcGFyYXRlU3R5bGVzMiA9IHJlcXVpcmUoJy4vdXRpbHMvc2VwYXJhdGVTdHlsZXMnKTtcblxudmFyIF9zZXBhcmF0ZVN0eWxlczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXBhcmF0ZVN0eWxlczIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbi8qKlxuICogRnVuY3Rpb24gcmVxdWlyZWQgYXMgcGFydCBvZiB0aGUgcmVhY3Qtd2l0aC1zdHlsZXMgaW50ZXJmYWNlLiBQYXJzZXMgdGhlIHN0eWxlcyBwcm92aWRlZCBieVxuICogcmVhY3Qtd2l0aC1zdHlsZXMgdG8gcHJvZHVjZSBjbGFzcyBuYW1lcyBiYXNlZCBvbiB0aGUgc3R5bGUgbmFtZSBhbmQgb3B0aW9uYWxseSB0aGUgbmFtZXNwYWNlIGlmXG4gKiBhdmFpbGFibGUuXG4gKlxuICogc3R5bGVzT2JqZWN0IHtPYmplY3R9IFRoZSBzdHlsZXMgb2JqZWN0IHBhc3NlZCB0byB3aXRoU3R5bGVzLlxuICpcbiAqIFJldHVybiBhbiBvYmplY3QgbWFwcGluZyBzdHlsZSBuYW1lcyB0byBjbGFzcyBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlKHN0eWxlc09iamVjdCkge1xuICB2YXIgc3R5bGVzVG9DbGFzc2VzID0ge307XG4gIHZhciBzdHlsZU5hbWVzID0gT2JqZWN0LmtleXMoc3R5bGVzT2JqZWN0KTtcbiAgdmFyIHNoYXJlZFN0YXRlID0gX2dsb2JhbENhY2hlMlsnZGVmYXVsdCddLmdldChfY29uc3RhbnRzLkdMT0JBTF9DQUNIRV9LRVkpIHx8IHt9O1xuICB2YXIgX3NoYXJlZFN0YXRlJG5hbWVzcGFjID0gc2hhcmVkU3RhdGUubmFtZXNwYWNlLFxuICAgICAgbmFtZXNwYWNlID0gX3NoYXJlZFN0YXRlJG5hbWVzcGFjID09PSB1bmRlZmluZWQgPyAnJyA6IF9zaGFyZWRTdGF0ZSRuYW1lc3BhYztcblxuICBzdHlsZU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlTmFtZSkge1xuICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2dldENsYXNzTmFtZTJbJ2RlZmF1bHQnXSkobmFtZXNwYWNlLCBzdHlsZU5hbWUpO1xuICAgIHN0eWxlc1RvQ2xhc3Nlc1tzdHlsZU5hbWVdID0gY2xhc3NOYW1lO1xuICB9KTtcbiAgcmV0dXJuIHN0eWxlc1RvQ2xhc3Nlcztcbn1cblxuLyoqXG4gKiBQcm9jZXNzIHN0eWxlcyB0byBiZSBjb25zdW1lZCBieSBhIGNvbXBvbmVudC5cbiAqXG4gKiBzdHlsZXNBcnJheSB7QXJyYXl9IEFycmF5IG9mIHRoZSBmb2xsb3dpbmc6IHZhbHVlcyByZXR1cm5lZCBieSBjcmVhdGUsIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0c1xuICogcmVwcmVzZW50aW5nIGlubGluZSBzdHlsZXMsIG9yIGFycmF5cyB0aGVyZW9mLlxuICpcbiAqIFJldHVybiBhbiBvYmplY3Qgd2l0aCBvcHRpb25hbCBjbGFzc05hbWUgYW5kIHN0eWxlIHByb3BlcnRpZXMgdG8gYmUgc3ByZWFkIG9uIGEgY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiByZXNvbHZlKHN0eWxlc0FycmF5KSB7XG4gIHZhciBmbGF0dGVuZWRTdHlsZXMgPSAoMCwgX2FycmF5UHJvdG90eXBlMlsnZGVmYXVsdCddKShzdHlsZXNBcnJheSwgSW5maW5pdHkpO1xuXG4gIHZhciBfc2VwYXJhdGVTdHlsZXMgPSAoMCwgX3NlcGFyYXRlU3R5bGVzM1snZGVmYXVsdCddKShmbGF0dGVuZWRTdHlsZXMpLFxuICAgICAgY2xhc3NOYW1lcyA9IF9zZXBhcmF0ZVN0eWxlcy5jbGFzc05hbWVzLFxuICAgICAgaGFzSW5saW5lU3R5bGVzID0gX3NlcGFyYXRlU3R5bGVzLmhhc0lubGluZVN0eWxlcyxcbiAgICAgIGlubGluZVN0eWxlcyA9IF9zZXBhcmF0ZVN0eWxlcy5pbmxpbmVTdHlsZXM7XG5cbiAgdmFyIHNwZWNpZmljQ2xhc3NOYW1lcyA9IGNsYXNzTmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lLCBpbmRleCkge1xuICAgIHJldHVybiBTdHJpbmcobmFtZSkgKyAnICcgKyBTdHJpbmcobmFtZSkgKyAnXycgKyBTdHJpbmcoaW5kZXggKyAxKTtcbiAgfSk7XG4gIHZhciBjbGFzc05hbWUgPSBzcGVjaWZpY0NsYXNzTmFtZXMuam9pbignICcpO1xuXG4gIHZhciByZXN1bHQgPSB7IGNsYXNzTmFtZTogY2xhc3NOYW1lIH07XG4gIGlmIChoYXNJbmxpbmVTdHlsZXMpIHJlc3VsdC5zdHlsZSA9IGlubGluZVN0eWxlcztcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0geyBjcmVhdGU6IGNyZWF0ZSwgcmVzb2x2ZTogcmVzb2x2ZSB9OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcbnZhciBzaGltID0gcmVxdWlyZSgnLi9zaGltJyk7XG5cbnZhciBib3VuZEZsYXQgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgcG9seWZpbGwpO1xuXG5kZWZpbmUoYm91bmRGbGF0LCB7XG5cdGdldFBvbHlmaWxsOiBnZXRQb2x5ZmlsbCxcblx0aW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uLFxuXHRzaGltOiBzaGltXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBib3VuZEZsYXQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xuXG52YXIgRVMyMDE2ID0gcmVxdWlyZSgnLi9lczIwMTYnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL2hlbHBlcnMvYXNzaWduJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4vaGVscGVycy9mb3JFYWNoJyk7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcbnZhciAkaXNFbnVtZXJhYmxlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIEdldEludHJpbnNpYygnJU9iamVjdFByb3RvdHlwZSUnKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSk7XG52YXIgJHB1c2hBcHBseSA9IGJpbmQuY2FsbChGdW5jdGlvbi5hcHBseSwgR2V0SW50cmluc2ljKCclQXJyYXlQcm90b3R5cGUlJykucHVzaCk7XG5cbnZhciBFUzIwMTcgPSBhc3NpZ24oYXNzaWduKHt9LCBFUzIwMTYpLCB7XG5cdFRvSW5kZXg6IGZ1bmN0aW9uIFRvSW5kZXgodmFsdWUpIHtcblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXHRcdHZhciBpbnRlZ2VySW5kZXggPSB0aGlzLlRvSW50ZWdlcih2YWx1ZSk7XG5cdFx0aWYgKGludGVnZXJJbmRleCA8IDApIHtcblx0XHRcdHRocm93IG5ldyBSYW5nZUVycm9yKCdpbmRleCBtdXN0IGJlID49IDAnKTtcblx0XHR9XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5Ub0xlbmd0aChpbnRlZ2VySW5kZXgpO1xuXHRcdGlmICghdGhpcy5TYW1lVmFsdWVaZXJvKGludGVnZXJJbmRleCwgaW5kZXgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcignaW5kZXggbXVzdCBiZSA+PSAwIGFuZCA8IDIgKiogNTMgLSAxJyk7XG5cdFx0fVxuXHRcdHJldHVybiBpbmRleDtcblx0fSxcblxuXHQvLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzguMC8jc2VjLWVudW1lcmFibGVvd25wcm9wZXJ0aWVzXG5cdEVudW1lcmFibGVPd25Qcm9wZXJ0aWVzOiBmdW5jdGlvbiBFbnVtZXJhYmxlT3duUHJvcGVydGllcyhPLCBraW5kKSB7XG5cdFx0dmFyIGtleXMgPSBFUzIwMTYuRW51bWVyYWJsZU93bk5hbWVzKE8pO1xuXHRcdGlmIChraW5kID09PSAna2V5Jykge1xuXHRcdFx0cmV0dXJuIGtleXM7XG5cdFx0fVxuXHRcdGlmIChraW5kID09PSAndmFsdWUnIHx8IGtpbmQgPT09ICdrZXkrdmFsdWUnKSB7XG5cdFx0XHR2YXIgcmVzdWx0cyA9IFtdO1xuXHRcdFx0Zm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdGlmICgkaXNFbnVtZXJhYmxlKE8sIGtleSkpIHtcblx0XHRcdFx0XHQkcHVzaEFwcGx5KHJlc3VsdHMsIFtcblx0XHRcdFx0XHRcdGtpbmQgPT09ICd2YWx1ZScgPyBPW2tleV0gOiBba2V5LCBPW2tleV1dXG5cdFx0XHRcdFx0XSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fVxuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBcImtpbmRcIiBpcyBub3QgXCJrZXlcIiwgXCJ2YWx1ZVwiLCBvciBcImtleSt2YWx1ZVwiOiAnICsga2luZCk7XG5cdH1cbn0pO1xuXG5kZWxldGUgRVMyMDE3LkVudW1lcmFibGVPd25OYW1lczsgLy8gcmVwbGFjZWQgd2l0aCBFbnVtZXJhYmxlT3duUHJvcGVydGllc1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVTMjAxNztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmb3JFYWNoKGFycmF5LCBjYWxsYmFjaykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0Y2FsbGJhY2soYXJyYXlbaV0sIGksIGFycmF5KTtcblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUZsYXQoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShcblx0XHRBcnJheS5wcm90b3R5cGUsXG5cdFx0eyBmbGF0OiBwb2x5ZmlsbCB9LFxuXHRcdHsgZmxhdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZsYXQgIT09IHBvbHlmaWxsOyB9IH1cblx0KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCdpcy1zeW1ib2wnKTtcblxudmFyIGdsb2JhbEtleSA9ICdfXyBnbG9iYWwgY2FjaGUga2V5IF9fJztcbi8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBpc1N5bWJvbChTeW1ib2woJ2ZvbycpKSAmJiB0eXBlb2YgU3ltYm9sWydmb3InXSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG5cdGdsb2JhbEtleSA9IFN5bWJvbFsnZm9yJ10oZ2xvYmFsS2V5KTtcbn1cblxudmFyIHRydWVUaHVuayA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHRydWU7XG59O1xuXG52YXIgZW5zdXJlQ2FjaGUgPSBmdW5jdGlvbiBlbnN1cmVDYWNoZSgpIHtcblx0aWYgKCFnbG9iYWxbZ2xvYmFsS2V5XSkge1xuXHRcdHZhciBwcm9wZXJ0aWVzID0ge307XG5cdFx0cHJvcGVydGllc1tnbG9iYWxLZXldID0ge307XG5cdFx0dmFyIHByZWRpY2F0ZXMgPSB7fTtcblx0XHRwcmVkaWNhdGVzW2dsb2JhbEtleV0gPSB0cnVlVGh1bms7XG5cdFx0ZGVmaW5lKGdsb2JhbCwgcHJvcGVydGllcywgcHJlZGljYXRlcyk7XG5cdH1cblx0cmV0dXJuIGdsb2JhbFtnbG9iYWxLZXldO1xufTtcblxudmFyIGNhY2hlID0gZW5zdXJlQ2FjaGUoKTtcblxudmFyIGlzUHJpbWl0aXZlID0gZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsKSB7XG5cdHJldHVybiB2YWwgPT09IG51bGwgfHwgKHR5cGVvZiB2YWwgIT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgIT09ICdmdW5jdGlvbicpO1xufTtcblxudmFyIGdldFByaW1pdGl2ZUtleSA9IGZ1bmN0aW9uIGdldFByaW1pdGl2ZUtleSh2YWwpIHtcblx0aWYgKGlzU3ltYm9sKHZhbCkpIHtcblx0XHRyZXR1cm4gU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsKTtcblx0fVxuXHRyZXR1cm4gdHlwZW9mIHZhbCArICcgfCAnICsgU3RyaW5nKHZhbCk7XG59O1xuXG52YXIgcmVxdWlyZVByaW1pdGl2ZUtleSA9IGZ1bmN0aW9uIHJlcXVpcmVQcmltaXRpdmVLZXkodmFsKSB7XG5cdGlmICghaXNQcmltaXRpdmUodmFsKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2tleSBtdXN0IG5vdCBiZSBhbiBvYmplY3QnKTtcblx0fVxufTtcblxudmFyIGdsb2JhbENhY2hlID0ge1xuXHRjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG5cdFx0ZGVsZXRlIGdsb2JhbFtnbG9iYWxLZXldO1xuXHRcdGNhY2hlID0gZW5zdXJlQ2FjaGUoKTtcblx0fSxcblxuXHQnZGVsZXRlJzogZnVuY3Rpb24gZGVsZXRlS2V5KGtleSkge1xuXHRcdHJlcXVpcmVQcmltaXRpdmVLZXkoa2V5KTtcblx0XHRkZWxldGUgY2FjaGVbZ2V0UHJpbWl0aXZlS2V5KGtleSldO1xuXHRcdHJldHVybiAhZ2xvYmFsQ2FjaGUuaGFzKGtleSk7XG5cdH0sXG5cblx0Z2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG5cdFx0cmVxdWlyZVByaW1pdGl2ZUtleShrZXkpO1xuXHRcdHJldHVybiBjYWNoZVtnZXRQcmltaXRpdmVLZXkoa2V5KV07XG5cdH0sXG5cblx0aGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG5cdFx0cmVxdWlyZVByaW1pdGl2ZUtleShrZXkpO1xuXHRcdHJldHVybiBnZXRQcmltaXRpdmVLZXkoa2V5KSBpbiBjYWNoZTtcblx0fSxcblxuXHRzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG5cdFx0cmVxdWlyZVByaW1pdGl2ZUtleShrZXkpO1xuXHRcdHZhciBwcmltaXRpdmVLZXkgPSBnZXRQcmltaXRpdmVLZXkoa2V5KTtcblx0XHR2YXIgcHJvcHMgPSB7fTtcblx0XHRwcm9wc1twcmltaXRpdmVLZXldID0gdmFsdWU7XG5cdFx0dmFyIHByZWRpY2F0ZXMgPSB7fTtcblx0XHRwcmVkaWNhdGVzW3ByaW1pdGl2ZUtleV0gPSB0cnVlVGh1bms7XG5cdFx0ZGVmaW5lKGNhY2hlLCBwcm9wcywgcHJlZGljYXRlcyk7XG5cdFx0cmV0dXJuIGdsb2JhbENhY2hlLmhhcyhrZXkpO1xuXHR9LFxuXG5cdHNldElmTWlzc2luZ1RoZW5HZXQ6IGZ1bmN0aW9uIHNldElmTWlzc2luZ1RoZW5HZXQoa2V5LCB2YWx1ZVRodW5rKSB7XG5cdFx0aWYgKGdsb2JhbENhY2hlLmhhcyhrZXkpKSB7XG5cdFx0XHRyZXR1cm4gZ2xvYmFsQ2FjaGUuZ2V0KGtleSk7XG5cdFx0fVxuXHRcdHZhciBpdGVtID0gdmFsdWVUaHVuaygpO1xuXHRcdGdsb2JhbENhY2hlLnNldChrZXksIGl0ZW0pO1xuXHRcdHJldHVybiBpdGVtO1xuXHR9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbENhY2hlO1xuIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBHTE9CQUxfQ0FDSEVfS0VZID0gJ3JlYWN0V2l0aFN0eWxlc0ludGVyZmFjZUNTUyc7XG52YXIgTUFYX1NQRUNJRklDSVRZID0gMjA7XG5cbmV4cG9ydHMuR0xPQkFMX0NBQ0hFX0tFWSA9IEdMT0JBTF9DQUNIRV9LRVk7XG5leHBvcnRzLk1BWF9TUEVDSUZJQ0lUWSA9IE1BWF9TUEVDSUZJQ0lUWTsiLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gZ2V0Q2xhc3NOYW1lO1xuLyoqXG4gKiBDb25zdHJ1Y3QgYSBjbGFzcyBuYW1lLlxuICpcbiAqIG5hbWVzcGFjZSB7U3RyaW5nfSBVc2VkIHRvIGNvbnN0cnVjdCB1bmlxdWUgY2xhc3MgbmFtZXMuXG4gKiBzdHlsZU5hbWUge1N0cmluZ30gTmFtZSBpZGVudGlmeWluZyB0aGUgc3BlY2lmaWMgc3R5bGUuXG4gKlxuICogUmV0dXJuIHRoZSBjbGFzcyBuYW1lLlxuICovXG5mdW5jdGlvbiBnZXRDbGFzc05hbWUobmFtZXNwYWNlLCBzdHlsZU5hbWUpIHtcbiAgdmFyIG5hbWVzcGFjZVNlZ21lbnQgPSBuYW1lc3BhY2UubGVuZ3RoID4gMCA/IFN0cmluZyhuYW1lc3BhY2UpICsgJ19fJyA6ICcnO1xuICByZXR1cm4gJycgKyBuYW1lc3BhY2VTZWdtZW50ICsgU3RyaW5nKHN0eWxlTmFtZSk7XG59IiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbi8vIFRoaXMgZnVuY3Rpb24gdGFrZXMgYW4gYXJyYXkgb2Ygc3R5bGVzIGFuZCBzZXBhcmF0ZXMgdGhlbSBpbnRvIHN0eWxlcyB0aGF0XG4vLyBhcmUgaGFuZGxlZCBieSBBcGhyb2RpdGUgYW5kIGlubGluZSBzdHlsZXMuXG5mdW5jdGlvbiBzZXBhcmF0ZVN0eWxlcyhzdHlsZXNBcnJheSkge1xuICB2YXIgY2xhc3NOYW1lcyA9IFtdO1xuXG4gIC8vIFNpbmNlIGRldGVybWluaW5nIGlmIGFuIE9iamVjdCBpcyBlbXB0eSByZXF1aXJlcyBjb2xsZWN0aW5nIGFsbCBvZiBpdHNcbiAgLy8ga2V5cywgYW5kIHdlIHdhbnQgdGhlIGJlc3QgcGVyZm9ybWFuY2UgaW4gdGhpcyBjb2RlIGJlY2F1c2Ugd2UgYXJlIGluIHRoZVxuICAvLyByZW5kZXIgcGF0aCwgd2UgYXJlIGdvaW5nIHRvIGRvIGEgbGl0dGxlIGJvb2trZWVwaW5nIG91cnNlbHZlcy5cbiAgdmFyIGhhc0lubGluZVN0eWxlcyA9IGZhbHNlO1xuICB2YXIgaW5saW5lU3R5bGVzID0ge307XG5cbiAgLy8gVGhpcyBpcyBydW4gb24gcG90ZW50aWFsbHkgZXZlcnkgbm9kZSBpbiB0aGUgdHJlZSB3aGVuIHJlbmRlcmluZywgd2hlcmVcbiAgLy8gcGVyZm9ybWFuY2UgaXMgY3JpdGljYWwuIE5vcm1hbGx5IHdlIHdvdWxkIHByZWZlciB1c2luZyBgZm9yRWFjaGAsIGJ1dFxuICAvLyBvbGQtZmFzaGlvbmVkIGZvciBsb29wcyBhcmUgZmFzdGVyIHNvIHRoYXQncyB3aGF0IHdlIGhhdmUgY2hvc2VuIGhlcmUuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBsdXNwbHVzXG4gICAgdmFyIHN0eWxlID0gc3R5bGVzQXJyYXlbaV07XG5cbiAgICAvLyBJZiB0aGlzICBzdHlsZSBpcyBmYWxzeSwgd2UganVzdCB3YW50IHRvIGRpc3JlZ2FyZCBpdC4gVGhpcyBhbGxvd3MgZm9yXG4gICAgLy8gc3ludGF4IGxpa2U6XG4gICAgLy9cbiAgICAvLyAgIGNzcyhpc0ZvbyAmJiBzdHlsZXMuZm9vKVxuICAgIGlmIChzdHlsZSkge1xuICAgICAgaWYgKHR5cGVvZiBzdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY2xhc3NOYW1lcy5wdXNoKHN0eWxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oaW5saW5lU3R5bGVzLCBzdHlsZSk7XG4gICAgICAgIGhhc0lubGluZVN0eWxlcyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjbGFzc05hbWVzOiBjbGFzc05hbWVzLFxuICAgIGhhc0lubGluZVN0eWxlczogaGFzSW5saW5lU3R5bGVzLFxuICAgIGlubGluZVN0eWxlczogaW5saW5lU3R5bGVzXG4gIH07XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHNlcGFyYXRlU3R5bGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gcmVnaXN0ZXJJbnRlcmZhY2VXaXRoRGVmYXVsdFRoZW1lO1xuXG52YXIgX1RoZW1lZFN0eWxlU2hlZXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC13aXRoLXN0eWxlcy9saWIvVGhlbWVkU3R5bGVTaGVldFwiKSk7XG5cbnZhciBfRGVmYXVsdFRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdGhlbWUvRGVmYXVsdFRoZW1lXCIpKTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJJbnRlcmZhY2VXaXRoRGVmYXVsdFRoZW1lKHJlYWN0V2l0aFN0eWxlc0ludGVyZmFjZSkge1xuICBfVGhlbWVkU3R5bGVTaGVldFtcImRlZmF1bHRcIl0ucmVnaXN0ZXJJbnRlcmZhY2UocmVhY3RXaXRoU3R5bGVzSW50ZXJmYWNlKTtcblxuICBfVGhlbWVkU3R5bGVTaGVldFtcImRlZmF1bHRcIl0ucmVnaXN0ZXJUaGVtZShfRGVmYXVsdFRoZW1lW1wiZGVmYXVsdFwiXSk7XG59IiwidmFyIHJuZyA9IHJlcXVpcmUoJy4vbGliL3JuZycpO1xudmFyIGJ5dGVzVG9VdWlkID0gcmVxdWlyZSgnLi9saWIvYnl0ZXNUb1V1aWQnKTtcblxuLy8gKipgdjEoKWAgLSBHZW5lcmF0ZSB0aW1lLWJhc2VkIFVVSUQqKlxuLy9cbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9MaW9zSy9VVUlELmpzXG4vLyBhbmQgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3V1aWQuaHRtbFxuXG52YXIgX25vZGVJZDtcbnZhciBfY2xvY2tzZXE7XG5cbi8vIFByZXZpb3VzIHV1aWQgY3JlYXRpb24gdGltZVxudmFyIF9sYXN0TVNlY3MgPSAwO1xudmFyIF9sYXN0TlNlY3MgPSAwO1xuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2Jyb29mYS9ub2RlLXV1aWQgZm9yIEFQSSBkZXRhaWxzXG5mdW5jdGlvbiB2MShvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICB2YXIgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcbiAgdmFyIGIgPSBidWYgfHwgW107XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBub2RlID0gb3B0aW9ucy5ub2RlIHx8IF9ub2RlSWQ7XG4gIHZhciBjbG9ja3NlcSA9IG9wdGlvbnMuY2xvY2tzZXEgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuY2xvY2tzZXEgOiBfY2xvY2tzZXE7XG5cbiAgLy8gbm9kZSBhbmQgY2xvY2tzZXEgbmVlZCB0byBiZSBpbml0aWFsaXplZCB0byByYW5kb20gdmFsdWVzIGlmIHRoZXkncmUgbm90XG4gIC8vIHNwZWNpZmllZC4gIFdlIGRvIHRoaXMgbGF6aWx5IHRvIG1pbmltaXplIGlzc3VlcyByZWxhdGVkIHRvIGluc3VmZmljaWVudFxuICAvLyBzeXN0ZW0gZW50cm9weS4gIFNlZSAjMTg5XG4gIGlmIChub2RlID09IG51bGwgfHwgY2xvY2tzZXEgPT0gbnVsbCkge1xuICAgIHZhciBzZWVkQnl0ZXMgPSBybmcoKTtcbiAgICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC41LCBjcmVhdGUgYW5kIDQ4LWJpdCBub2RlIGlkLCAoNDcgcmFuZG9tIGJpdHMgKyBtdWx0aWNhc3QgYml0ID0gMSlcbiAgICAgIG5vZGUgPSBfbm9kZUlkID0gW1xuICAgICAgICBzZWVkQnl0ZXNbMF0gfCAweDAxLFxuICAgICAgICBzZWVkQnl0ZXNbMV0sIHNlZWRCeXRlc1syXSwgc2VlZEJ5dGVzWzNdLCBzZWVkQnl0ZXNbNF0sIHNlZWRCeXRlc1s1XVxuICAgICAgXTtcbiAgICB9XG4gICAgaWYgKGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICAgIC8vIFBlciA0LjIuMiwgcmFuZG9taXplICgxNCBiaXQpIGNsb2Nrc2VxXG4gICAgICBjbG9ja3NlcSA9IF9jbG9ja3NlcSA9IChzZWVkQnl0ZXNbNl0gPDwgOCB8IHNlZWRCeXRlc1s3XSkgJiAweDNmZmY7XG4gICAgfVxuICB9XG5cbiAgLy8gVVVJRCB0aW1lc3RhbXBzIGFyZSAxMDAgbmFuby1zZWNvbmQgdW5pdHMgc2luY2UgdGhlIEdyZWdvcmlhbiBlcG9jaCxcbiAgLy8gKDE1ODItMTAtMTUgMDA6MDApLiAgSlNOdW1iZXJzIGFyZW4ndCBwcmVjaXNlIGVub3VnaCBmb3IgdGhpcywgc29cbiAgLy8gdGltZSBpcyBoYW5kbGVkIGludGVybmFsbHkgYXMgJ21zZWNzJyAoaW50ZWdlciBtaWxsaXNlY29uZHMpIGFuZCAnbnNlY3MnXG4gIC8vICgxMDAtbmFub3NlY29uZHMgb2Zmc2V0IGZyb20gbXNlY3MpIHNpbmNlIHVuaXggZXBvY2gsIDE5NzAtMDEtMDEgMDA6MDAuXG4gIHZhciBtc2VjcyA9IG9wdGlvbnMubXNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubXNlY3MgOiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAvLyBQZXIgNC4yLjEuMiwgdXNlIGNvdW50IG9mIHV1aWQncyBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBjdXJyZW50IGNsb2NrXG4gIC8vIGN5Y2xlIHRvIHNpbXVsYXRlIGhpZ2hlciByZXNvbHV0aW9uIGNsb2NrXG4gIHZhciBuc2VjcyA9IG9wdGlvbnMubnNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubnNlY3MgOiBfbGFzdE5TZWNzICsgMTtcblxuICAvLyBUaW1lIHNpbmNlIGxhc3QgdXVpZCBjcmVhdGlvbiAoaW4gbXNlY3MpXG4gIHZhciBkdCA9IChtc2VjcyAtIF9sYXN0TVNlY3MpICsgKG5zZWNzIC0gX2xhc3ROU2VjcykvMTAwMDA7XG5cbiAgLy8gUGVyIDQuMi4xLjIsIEJ1bXAgY2xvY2tzZXEgb24gY2xvY2sgcmVncmVzc2lvblxuICBpZiAoZHQgPCAwICYmIG9wdGlvbnMuY2xvY2tzZXEgPT09IHVuZGVmaW5lZCkge1xuICAgIGNsb2Nrc2VxID0gY2xvY2tzZXEgKyAxICYgMHgzZmZmO1xuICB9XG5cbiAgLy8gUmVzZXQgbnNlY3MgaWYgY2xvY2sgcmVncmVzc2VzIChuZXcgY2xvY2tzZXEpIG9yIHdlJ3ZlIG1vdmVkIG9udG8gYSBuZXdcbiAgLy8gdGltZSBpbnRlcnZhbFxuICBpZiAoKGR0IDwgMCB8fCBtc2VjcyA+IF9sYXN0TVNlY3MpICYmIG9wdGlvbnMubnNlY3MgPT09IHVuZGVmaW5lZCkge1xuICAgIG5zZWNzID0gMDtcbiAgfVxuXG4gIC8vIFBlciA0LjIuMS4yIFRocm93IGVycm9yIGlmIHRvbyBtYW55IHV1aWRzIGFyZSByZXF1ZXN0ZWRcbiAgaWYgKG5zZWNzID49IDEwMDAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1dWlkLnYxKCk6IENhblxcJ3QgY3JlYXRlIG1vcmUgdGhhbiAxME0gdXVpZHMvc2VjJyk7XG4gIH1cblxuICBfbGFzdE1TZWNzID0gbXNlY3M7XG4gIF9sYXN0TlNlY3MgPSBuc2VjcztcbiAgX2Nsb2Nrc2VxID0gY2xvY2tzZXE7XG5cbiAgLy8gUGVyIDQuMS40IC0gQ29udmVydCBmcm9tIHVuaXggZXBvY2ggdG8gR3JlZ29yaWFuIGVwb2NoXG4gIG1zZWNzICs9IDEyMjE5MjkyODAwMDAwO1xuXG4gIC8vIGB0aW1lX2xvd2BcbiAgdmFyIHRsID0gKChtc2VjcyAmIDB4ZmZmZmZmZikgKiAxMDAwMCArIG5zZWNzKSAlIDB4MTAwMDAwMDAwO1xuICBiW2krK10gPSB0bCA+Pj4gMjQgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gMTYgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsICYgMHhmZjtcblxuICAvLyBgdGltZV9taWRgXG4gIHZhciB0bWggPSAobXNlY3MgLyAweDEwMDAwMDAwMCAqIDEwMDAwKSAmIDB4ZmZmZmZmZjtcbiAgYltpKytdID0gdG1oID4+PiA4ICYgMHhmZjtcbiAgYltpKytdID0gdG1oICYgMHhmZjtcblxuICAvLyBgdGltZV9oaWdoX2FuZF92ZXJzaW9uYFxuICBiW2krK10gPSB0bWggPj4+IDI0ICYgMHhmIHwgMHgxMDsgLy8gaW5jbHVkZSB2ZXJzaW9uXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMTYgJiAweGZmO1xuXG4gIC8vIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYCAoUGVyIDQuMi4yIC0gaW5jbHVkZSB2YXJpYW50KVxuICBiW2krK10gPSBjbG9ja3NlcSA+Pj4gOCB8IDB4ODA7XG5cbiAgLy8gYGNsb2NrX3NlcV9sb3dgXG4gIGJbaSsrXSA9IGNsb2Nrc2VxICYgMHhmZjtcblxuICAvLyBgbm9kZWBcbiAgZm9yICh2YXIgbiA9IDA7IG4gPCA2OyArK24pIHtcbiAgICBiW2kgKyBuXSA9IG5vZGVbbl07XG4gIH1cblxuICByZXR1cm4gYnVmID8gYnVmIDogYnl0ZXNUb1V1aWQoYik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdjE7XG4iLCJ2YXIgcm5nID0gcmVxdWlyZSgnLi9saWIvcm5nJyk7XG52YXIgYnl0ZXNUb1V1aWQgPSByZXF1aXJlKCcuL2xpYi9ieXRlc1RvVXVpZCcpO1xuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICB2YXIgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcblxuICBpZiAodHlwZW9mKG9wdGlvbnMpID09ICdzdHJpbmcnKSB7XG4gICAgYnVmID0gb3B0aW9ucyA9PT0gJ2JpbmFyeScgPyBuZXcgQXJyYXkoMTYpIDogbnVsbDtcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG5cbiAgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuICBybmRzWzZdID0gKHJuZHNbNl0gJiAweDBmKSB8IDB4NDA7XG4gIHJuZHNbOF0gPSAocm5kc1s4XSAmIDB4M2YpIHwgMHg4MDtcblxuICAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcbiAgaWYgKGJ1Zikge1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCAxNjsgKytpaSkge1xuICAgICAgYnVmW2kgKyBpaV0gPSBybmRzW2lpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmIHx8IGJ5dGVzVG9VdWlkKHJuZHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHY0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCB2YXIgUmVhY3RSZWR1eENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuZXhwb3J0IGRlZmF1bHQgUmVhY3RSZWR1eENvbnRleHQ7IiwiLy8gRGVmYXVsdCB0byBhIGR1bW15IFwiYmF0Y2hcIiBpbXBsZW1lbnRhdGlvbiB0aGF0IGp1c3QgcnVucyB0aGUgY2FsbGJhY2tcbmZ1bmN0aW9uIGRlZmF1bHROb29wQmF0Y2goY2FsbGJhY2spIHtcbiAgY2FsbGJhY2soKTtcbn1cblxudmFyIGJhdGNoID0gZGVmYXVsdE5vb3BCYXRjaDsgLy8gQWxsb3cgaW5qZWN0aW5nIGFub3RoZXIgYmF0Y2hpbmcgZnVuY3Rpb24gbGF0ZXJcblxuZXhwb3J0IHZhciBzZXRCYXRjaCA9IGZ1bmN0aW9uIHNldEJhdGNoKG5ld0JhdGNoKSB7XG4gIHJldHVybiBiYXRjaCA9IG5ld0JhdGNoO1xufTsgLy8gU3VwcGx5IGEgZ2V0dGVyIGp1c3QgdG8gc2tpcCBkZWFsaW5nIHdpdGggRVNNIGJpbmRpbmdzXG5cbmV4cG9ydCB2YXIgZ2V0QmF0Y2ggPSBmdW5jdGlvbiBnZXRCYXRjaCgpIHtcbiAgcmV0dXJuIGJhdGNoO1xufTsiLCJpbXBvcnQgeyBnZXRCYXRjaCB9IGZyb20gJy4vYmF0Y2gnOyAvLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgQ0xFQVJFRCA9IG51bGw7XG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICB2YXIgYmF0Y2ggPSBnZXRCYXRjaCgpOyAvLyB0aGUgY3VycmVudC9uZXh0IHBhdHRlcm4gaXMgY29waWVkIGZyb20gcmVkdXgncyBjcmVhdGVTdG9yZSBjb2RlLlxuICAvLyBUT0RPOiByZWZhY3RvcitleHBvc2UgdGhhdCBjb2RlIHRvIGJlIHJldXNhYmxlIGhlcmU/XG5cbiAgdmFyIGN1cnJlbnQgPSBbXTtcbiAgdmFyIG5leHQgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBuZXh0ID0gQ0xFQVJFRDtcbiAgICAgIGN1cnJlbnQgPSBDTEVBUkVEO1xuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudCA9IG5leHQ7XG4gICAgICBiYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGlzdGVuZXJzW2ldKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgbmV4dC5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgY3VycmVudCA9PT0gQ0xFQVJFRCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKG5leHQgPT09IGN1cnJlbnQpIG5leHQgPSBjdXJyZW50LnNsaWNlKCk7XG4gICAgICAgIG5leHQuc3BsaWNlKG5leHQuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBTdWJzY3JpcHRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yikge1xuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyID0gdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3Vic2NyaXB0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmICh0aGlzLm9uU3RhdGVDaGFuZ2UpIHtcbiAgICAgIHRoaXMub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIF9wcm90by50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlcik7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8udHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuXG5mdW5jdGlvbiBQcm92aWRlcihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcblxuICAgIGlmIChwcmV2aW91c1N0YXRlICE9PSBzdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5Qcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gIHN0b3JlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICB9KSxcbiAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnlcbn07XG5leHBvcnQgZGVmYXVsdCBQcm92aWRlcjsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCwgdXNlUmVmLCB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlLCBpc0NvbnRleHRDb25zdW1lciB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JzsgLy8gRGVmaW5lIHNvbWUgY29uc3RhbnQgYXJyYXlzIGp1c3QgdG8gYXZvaWQgcmUtY3JlYXRpbmcgdGhlc2VcblxudmFyIEVNUFRZX0FSUkFZID0gW107XG52YXIgTk9fU1VCU0NSSVBUSU9OX0FSUkFZID0gW251bGwsIG51bGxdO1xuXG52YXIgc3RyaW5naWZ5Q29tcG9uZW50ID0gZnVuY3Rpb24gc3RyaW5naWZ5Q29tcG9uZW50KENvbXApIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQ29tcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcoQ29tcCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHZhciB1cGRhdGVDb3VudCA9IHN0YXRlWzFdO1xuICByZXR1cm4gW2FjdGlvbi5wYXlsb2FkLCB1cGRhdGVDb3VudCArIDFdO1xufVxuXG52YXIgaW5pdFN0YXRlVXBkYXRlcyA9IGZ1bmN0aW9uIGluaXRTdGF0ZVVwZGF0ZXMoKSB7XG4gIHJldHVybiBbbnVsbCwgMF07XG59OyAvLyBSZWFjdCBjdXJyZW50bHkgdGhyb3dzIGEgd2FybmluZyB3aGVuIHVzaW5nIHVzZUxheW91dEVmZmVjdCBvbiB0aGUgc2VydmVyLlxuLy8gVG8gZ2V0IGFyb3VuZCBpdCwgd2UgY2FuIGNvbmRpdGlvbmFsbHkgdXNlRWZmZWN0IG9uIHRoZSBzZXJ2ZXIgKG5vLW9wKSBhbmRcbi8vIHVzZUxheW91dEVmZmVjdCBpbiB0aGUgYnJvd3Nlci4gV2UgbmVlZCB1c2VMYXlvdXRFZmZlY3QgYmVjYXVzZSB3ZSB3YW50XG4vLyBgY29ubmVjdGAgdG8gcGVyZm9ybSBzeW5jIHVwZGF0ZXMgdG8gYSByZWYgdG8gc2F2ZSB0aGUgbGF0ZXN0IHByb3BzIGFmdGVyXG4vLyBhIHJlbmRlciBpcyBhY3R1YWxseSBjb21taXR0ZWQgdG8gdGhlIERPTS5cblxuXG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0QWR2YW5jZWQoXG4vKlxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcbiAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcbiAgICAgIHRoaW5nOiBzdGF0ZS50aGluZ3NbcHJvcHMudGhpbmdJZF0sXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXG4gICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcbiAgb3V0c2lkZSBvZiB0aGVpciBzZWxlY3RvciBhcyBhbiBvcHRpbWl6YXRpb24uIE9wdGlvbnMgcGFzc2VkIHRvIGNvbm5lY3RBZHZhbmNlZCBhcmUgcGFzc2VkIHRvXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcbiAgc2VsZWN0b3IsIG90aGVyd2lzZSB0aGUgQ29ubmVjdCBjb21wb25lbnQgd2lsbCByZS1yZW5kZXIgb24gZXZlcnkgc3RhdGUgb3IgcHJvcHMgY2hhbmdlLlxuKi9cbnNlbGVjdG9yRmFjdG9yeSwgLy8gb3B0aW9ucyBvYmplY3Q6XG5fcmVmKSB7XG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkZ2V0RGlzcGxheU5hbWUgPSBfcmVmMi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZjIkZ2V0RGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ29ubmVjdEFkdmFuY2VkKFwiICsgbmFtZSArIFwiKVwiO1xuICB9IDogX3JlZjIkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmMiRtZXRob2ROYW1lID0gX3JlZjIubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmMiRtZXRob2ROYW1lID09PSB2b2lkIDAgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYyJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmMiRyZW5kZXJDb3VudFByb3AgPSBfcmVmMi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmMiRyZW5kZXJDb3VudFByb3AgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9IF9yZWYyLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZEhhbmRsZVN0YSxcbiAgICAgIF9yZWYyJHN0b3JlS2V5ID0gX3JlZjIuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYyJHN0b3JlS2V5ID09PSB2b2lkIDAgPyAnc3RvcmUnIDogX3JlZjIkc3RvcmVLZXksXG4gICAgICBfcmVmMiR3aXRoUmVmID0gX3JlZjIud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmMiR3aXRoUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHdpdGhSZWYsXG4gICAgICBfcmVmMiRmb3J3YXJkUmVmID0gX3JlZjIuZm9yd2FyZFJlZixcbiAgICAgIGZvcndhcmRSZWYgPSBfcmVmMiRmb3J3YXJkUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGZvcndhcmRSZWYsXG4gICAgICBfcmVmMiRjb250ZXh0ID0gX3JlZjIuY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBfcmVmMiRjb250ZXh0ID09PSB2b2lkIDAgPyBSZWFjdFJlZHV4Q29udGV4dCA6IF9yZWYyJGNvbnRleHQsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSk7XG5cbiAgaW52YXJpYW50KHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkLCBcInJlbmRlckNvdW50UHJvcCBpcyByZW1vdmVkLiByZW5kZXIgY291bnRpbmcgaXMgYnVpbHQgaW50byB0aGUgbGF0ZXN0IFJlYWN0IERldiBUb29scyBwcm9maWxpbmcgZXh0ZW5zaW9uXCIpO1xuICBpbnZhcmlhbnQoIXdpdGhSZWYsICd3aXRoUmVmIGlzIHJlbW92ZWQuIFRvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgdXNlIGEgcmVmIG9uIHRoZSBjb25uZWN0ZWQgY29tcG9uZW50Jyk7XG4gIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgY3JlYXRlIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgd2l0aCAnICsgXCJSZWFjdC5jcmVhdGVDb250ZXh0KCksIGFuZCBwYXNzIHRoZSBjb250ZXh0IG9iamVjdCB0byBSZWFjdCBSZWR1eCdzIFByb3ZpZGVyIGFuZCBzcGVjaWZpYyBjb21wb25lbnRzXCIgKyAnIGxpa2U6IDxQcm92aWRlciBjb250ZXh0PXtNeUNvbnRleHR9PjxDb25uZWN0ZWRDb21wb25lbnQgY29udGV4dD17TXlDb250ZXh0fSAvPjwvUHJvdmlkZXI+LiAnICsgJ1lvdSBtYXkgYWxzbyBwYXNzIGEge2NvbnRleHQgOiBNeUNvbnRleHR9IG9wdGlvbiB0byBjb25uZWN0JztcbiAgaW52YXJpYW50KHN0b3JlS2V5ID09PSAnc3RvcmUnLCAnc3RvcmVLZXkgaGFzIGJlZW4gcmVtb3ZlZCBhbmQgZG9lcyBub3QgZG8gYW55dGhpbmcuICcgKyBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0O1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcFdpdGhDb25uZWN0KFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW52YXJpYW50KGlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSwgXCJZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSBcIiArIChtZXRob2ROYW1lICsgXCIuIEluc3RlYWQgcmVjZWl2ZWQgXCIgKyBzdHJpbmdpZnlDb21wb25lbnQoV3JhcHBlZENvbXBvbmVudCkpKTtcbiAgICB9XG5cbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZTogd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50OiBXcmFwcGVkQ29tcG9uZW50XG4gICAgfSk7XG5cbiAgICB2YXIgcHVyZSA9IGNvbm5lY3RPcHRpb25zLnB1cmU7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KHN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICB9IC8vIElmIHdlIGFyZW4ndCBydW5uaW5nIGluIFwicHVyZVwiIG1vZGUsIHdlIGRvbid0IHdhbnQgdG8gbWVtb2l6ZSB2YWx1ZXMuXG4gICAgLy8gVG8gYXZvaWQgY29uZGl0aW9uYWxseSBjYWxsaW5nIGhvb2tzLCB3ZSBmYWxsIGJhY2sgdG8gYSB0aW55IHdyYXBwZXJcbiAgICAvLyB0aGF0IGp1c3QgZXhlY3V0ZXMgdGhlIGdpdmVuIGNhbGxiYWNrIGltbWVkaWF0ZWx5LlxuXG5cbiAgICB2YXIgdXNlUHVyZU9ubHlNZW1vID0gcHVyZSA/IHVzZU1lbW8gOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBDb25uZWN0RnVuY3Rpb24ocHJvcHMpIHtcbiAgICAgIHZhciBfdXNlTWVtbyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBEaXN0aW5ndWlzaCBiZXR3ZWVuIGFjdHVhbCBcImRhdGFcIiBwcm9wcyB0aGF0IHdlcmUgcGFzc2VkIHRvIHRoZSB3cmFwcGVyIGNvbXBvbmVudCxcbiAgICAgICAgLy8gYW5kIHZhbHVlcyBuZWVkZWQgdG8gY29udHJvbCBiZWhhdmlvciAoZm9yd2FyZGVkIHJlZnMsIGFsdGVybmF0ZSBjb250ZXh0IGluc3RhbmNlcykuXG4gICAgICAgIC8vIFRvIG1haW50YWluIHRoZSB3cmFwcGVyUHJvcHMgb2JqZWN0IHJlZmVyZW5jZSwgbWVtb2l6ZSB0aGlzIGRlc3RydWN0dXJpbmcuXG4gICAgICAgIHZhciBmb3J3YXJkZWRSZWYgPSBwcm9wcy5mb3J3YXJkZWRSZWYsXG4gICAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wiZm9yd2FyZGVkUmVmXCJdKTtcblxuICAgICAgICByZXR1cm4gW3Byb3BzLmNvbnRleHQsIGZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pLFxuICAgICAgICAgIHByb3BzQ29udGV4dCA9IF91c2VNZW1vWzBdLFxuICAgICAgICAgIGZvcndhcmRlZFJlZiA9IF91c2VNZW1vWzFdLFxuICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF91c2VNZW1vWzJdO1xuXG4gICAgICB2YXIgQ29udGV4dFRvVXNlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIGlzQ29udGV4dENvbnN1bWVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQocHJvcHNDb250ZXh0LkNvbnN1bWVyLCBudWxsKSkgPyBwcm9wc0NvbnRleHQgOiBDb250ZXh0O1xuICAgICAgfSwgW3Byb3BzQ29udGV4dCwgQ29udGV4dF0pOyAvLyBSZXRyaWV2ZSB0aGUgc3RvcmUgYW5kIGFuY2VzdG9yIHN1YnNjcmlwdGlvbiB2aWEgY29udGV4dCwgaWYgYXZhaWxhYmxlXG5cbiAgICAgIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KENvbnRleHRUb1VzZSk7IC8vIFRoZSBzdG9yZSBfbXVzdF8gZXhpc3QgYXMgZWl0aGVyIGEgcHJvcCBvciBpbiBjb250ZXh0XG5cbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPSBCb29sZWFuKHByb3BzLnN0b3JlKTtcbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA9IEJvb2xlYW4oY29udGV4dFZhbHVlKSAmJiBCb29sZWFuKGNvbnRleHRWYWx1ZS5zdG9yZSk7XG4gICAgICBpbnZhcmlhbnQoZGlkU3RvcmVDb21lRnJvbVByb3BzIHx8IGRpZFN0b3JlQ29tZUZyb21Db250ZXh0LCBcIkNvdWxkIG5vdCBmaW5kIFxcXCJzdG9yZVxcXCIgaW4gdGhlIGNvbnRleHQgb2YgXCIgKyAoXCJcXFwiXCIgKyBkaXNwbGF5TmFtZSArIFwiXFxcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgXCIpICsgXCJvciBwYXNzIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgcHJvdmlkZXIgdG8gPFByb3ZpZGVyPiBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgXCIgKyAoXCJSZWFjdCBjb250ZXh0IGNvbnN1bWVyIHRvIFwiICsgZGlzcGxheU5hbWUgKyBcIiBpbiBjb25uZWN0IG9wdGlvbnMuXCIpKTtcbiAgICAgIHZhciBzdG9yZSA9IHByb3BzLnN0b3JlIHx8IGNvbnRleHRWYWx1ZS5zdG9yZTtcbiAgICAgIHZhciBjaGlsZFByb3BzU2VsZWN0b3IgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVGhlIGNoaWxkIHByb3BzIHNlbGVjdG9yIG5lZWRzIHRoZSBzdG9yZSByZWZlcmVuY2UgYXMgYW4gaW5wdXQuXG4gICAgICAgIC8vIFJlLWNyZWF0ZSB0aGlzIHNlbGVjdG9yIHdoZW5ldmVyIHRoZSBzdG9yZSBjaGFuZ2VzLlxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSk7XG4gICAgICB9LCBbc3RvcmVdKTtcblxuICAgICAgdmFyIF91c2VNZW1vMiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuIE5PX1NVQlNDUklQVElPTl9BUlJBWTsgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gbnVsbCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIHZhciBub3RpZnlOZXN0ZWRTdWJzID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZChzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic107XG4gICAgICB9LCBbc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlXSksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3VzZU1lbW8yWzBdLFxuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMgPSBfdXNlTWVtbzJbMV07IC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuXG5cbiAgICAgIHZhciBvdmVycmlkZGVuQ29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRTdG9yZUNvbWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBkaXJlY3RseSBzdWJzY3JpYmVkIHRvIGEgc3RvcmUgZnJvbSBwcm9wcy5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IGRlc2NlbmRhbnRzIHJlYWRpbmcgZnJvbSB0aGlzIHN0b3JlIC0gcGFzcyBkb3duIHdoYXRldmVyXG4gICAgICAgICAgLy8gdGhlIGV4aXN0aW5nIGNvbnRleHQgdmFsdWUgaXMgZnJvbSB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IuXG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG5cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gV2UgbmVlZCB0byBmb3JjZSB0aGlzIHdyYXBwZXIgY29tcG9uZW50IHRvIHJlLXJlbmRlciB3aGVuZXZlciBhIFJlZHV4IHN0b3JlIHVwZGF0ZVxuICAgICAgLy8gY2F1c2VzIGEgY2hhbmdlIHRvIHRoZSBjYWxjdWxhdGVkIGNoaWxkIGNvbXBvbmVudCBwcm9wcyAob3Igd2UgY2F1Z2h0IGFuIGVycm9yIGluIG1hcFN0YXRlKVxuXG4gICAgICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciwgRU1QVFlfQVJSQVksIGluaXRTdGF0ZVVwZGF0ZXMpLFxuICAgICAgICAgIF91c2VSZWR1Y2VyJCA9IF91c2VSZWR1Y2VyWzBdLFxuICAgICAgICAgIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgPSBfdXNlUmVkdWNlciRbMF0sXG4gICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCA9IF91c2VSZWR1Y2VyWzFdOyAvLyBQcm9wYWdhdGUgYW55IG1hcFN0YXRlL21hcERpc3BhdGNoIGVycm9ycyB1cHdhcmRzXG5cblxuICAgICAgaWYgKHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgJiYgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcikge1xuICAgICAgICB0aHJvdyBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yO1xuICAgICAgfSAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cblxuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICB2YXIgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgdmFyIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSB1c2VSZWYoKTtcbiAgICAgIHZhciByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICB2YXIgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVB1cmVPbmx5TWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgfSwgW3N0b3JlLCBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBXZSB3YW50IHRvIGNhcHR1cmUgdGhlIHdyYXBwZXIgcHJvcHMgYW5kIGNoaWxkIHByb3BzIHdlIHVzZWQgZm9yIGxhdGVyIGNvbXBhcmlzb25zXG4gICAgICAgIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCA9IHdyYXBwZXJQcm9wcztcbiAgICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gICAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gICAgICAgIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICAgICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIE91ciByZS1zdWJzY3JpYmUgbG9naWMgb25seSBydW5zIHdoZW4gdGhlIHN0b3JlL3N1YnNjcmlwdGlvbiBzZXR1cCBjaGFuZ2VzXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBJZiB3ZSdyZSBub3Qgc3Vic2NyaWJlZCB0byB0aGUgc3RvcmUsIG5vdGhpbmcgdG8gZG8gaGVyZVxuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuOyAvLyBDYXB0dXJlIHZhbHVlcyBmb3IgY2hlY2tpbmcgaWYgYW5kIHdoZW4gdGhpcyBjb21wb25lbnQgdW5tb3VudHNcblxuICAgICAgICB2YXIgZGlkVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGxhc3RUaHJvd25FcnJvciA9IG51bGw7IC8vIFdlJ2xsIHJ1biB0aGlzIGNhbGxiYWNrIGV2ZXJ5IHRpbWUgYSBzdG9yZSBzdWJzY3JpcHRpb24gdXBkYXRlIHByb3BhZ2F0ZXMgdG8gdGhpcyBjb21wb25lbnRcblxuICAgICAgICB2YXIgY2hlY2tGb3JVcGRhdGVzID0gZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgICAgIGlmIChkaWRVbnN1YnNjcmliZSkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgcnVuIHN0YWxlIGxpc3RlbmVycy5cbiAgICAgICAgICAgIC8vIFJlZHV4IGRvZXNuJ3QgZ3VhcmFudGVlIHVuc3Vic2NyaXB0aW9ucyBoYXBwZW4gdW50aWwgbmV4dCBkaXNwYXRjaC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgICAgdmFyIG5ld0NoaWxkUHJvcHMsIGVycm9yO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEFjdHVhbGx5IHJ1biB0aGUgc2VsZWN0b3Igd2l0aCB0aGUgbW9zdCByZWNlbnQgc3RvcmUgc3RhdGUgYW5kIHdyYXBwZXIgcHJvcHNcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmVcbiAgICAgICAgICAgIG5ld0NoaWxkUHJvcHMgPSBjaGlsZFByb3BzU2VsZWN0b3IobGF0ZXN0U3RvcmVTdGF0ZSwgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvciA9IGU7XG4gICAgICAgICAgICBsYXN0VGhyb3duRXJyb3IgPSBlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGxhc3RUaHJvd25FcnJvciA9IG51bGw7XG4gICAgICAgICAgfSAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgaGF2ZW4ndCBjaGFuZ2VkLCBub3RoaW5nIHRvIGRvIGhlcmUgLSBjYXNjYWRlIHRoZSBzdWJzY3JpcHRpb24gdXBkYXRlXG5cblxuICAgICAgICAgIGlmIChuZXdDaGlsZFByb3BzID09PSBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAoIXJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTYXZlIHJlZmVyZW5jZXMgdG8gdGhlIG5ldyBjaGlsZCBwcm9wcy4gIE5vdGUgdGhhdCB3ZSB0cmFjayB0aGUgXCJjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZVwiXG4gICAgICAgICAgICAvLyBhcyBhIHJlZiBpbnN0ZWFkIG9mIGEgdXNlU3RhdGUvdXNlUmVkdWNlciBiZWNhdXNlIHdlIG5lZWQgYSB3YXkgdG8gZGV0ZXJtaW5lIGlmIHRoYXQgdmFsdWUgaGFzXG4gICAgICAgICAgICAvLyBiZWVuIHByb2Nlc3NlZC4gIElmIHRoaXMgd2VudCBpbnRvIHVzZVN0YXRlL3VzZVJlZHVjZXIsIHdlIGNvdWxkbid0IGNsZWFyIG91dCB0aGUgdmFsdWUgd2l0aG91dFxuICAgICAgICAgICAgLy8gZm9yY2luZyBhbm90aGVyIHJlLXJlbmRlciwgd2hpY2ggd2UgZG9uJ3Qgd2FudC5cbiAgICAgICAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgICAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSB0cnVlOyAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgX2RpZF8gY2hhbmdlIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IpLCB0aGlzIHdyYXBwZXIgY29tcG9uZW50IG5lZWRzIHRvIHJlLXJlbmRlclxuXG4gICAgICAgICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ1NUT1JFX1VQREFURUQnLFxuICAgICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgbGF0ZXN0U3RvcmVTdGF0ZTogbGF0ZXN0U3RvcmVTdGF0ZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9OyAvLyBBY3R1YWxseSBzdWJzY3JpYmUgdG8gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yIChvciBzdG9yZSlcblxuXG4gICAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICAgICAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7IC8vIFB1bGwgZGF0YSBmcm9tIHRoZSBzdG9yZSBhZnRlciBmaXJzdCByZW5kZXIgaW4gY2FzZSB0aGUgc3RvcmUgaGFzXG4gICAgICAgIC8vIGNoYW5nZWQgc2luY2Ugd2UgYmVnYW4uXG5cbiAgICAgICAgY2hlY2tGb3JVcGRhdGVzKCk7XG5cbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlV3JhcHBlciA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlV3JhcHBlcigpIHtcbiAgICAgICAgICBkaWRVbnN1YnNjcmliZSA9IHRydWU7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKGxhc3RUaHJvd25FcnJvcikge1xuICAgICAgICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdlIGNhdWdodCBhbiBlcnJvciBkdWUgdG8gYSBiYWQgbWFwU3RhdGUgZnVuY3Rpb24sIGJ1dCB0aGVcbiAgICAgICAgICAgIC8vIHBhcmVudCByZS1yZW5kZXJlZCB3aXRob3V0IHRoaXMgY29tcG9uZW50IGFuZCB3ZSdyZSBhYm91dCB0byB1bm1vdW50LlxuICAgICAgICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuIGFzIGxvbmcgYXMgd2UgZG8gdG9wLWRvd24gc3Vic2NyaXB0aW9ucyBjb3JyZWN0bHksIGJ1dFxuICAgICAgICAgICAgLy8gaWYgd2UgZXZlciBkbyB0aG9zZSB3cm9uZywgdGhpcyB0aHJvdyB3aWxsIHN1cmZhY2UgdGhlIGVycm9yIGluIG91ciB0ZXN0cy5cbiAgICAgICAgICAgIC8vIEluIHRoYXQgY2FzZSwgdGhyb3cgdGhlIGVycm9yIGZyb20gaGVyZSBzbyBpdCBkb2Vzbid0IGdldCBsb3N0LlxuICAgICAgICAgICAgdGhyb3cgbGFzdFRocm93bkVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdW5zdWJzY3JpYmVXcmFwcGVyO1xuICAgICAgfSwgW3N0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3Rvcl0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgdmFyIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgYWN0dWFsQ2hpbGRQcm9wcywge1xuICAgICAgICAgIHJlZjogZm9yd2FyZGVkUmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0sIFtmb3J3YXJkZWRSZWYsIFdyYXBwZWRDb21wb25lbnQsIGFjdHVhbENoaWxkUHJvcHNdKTsgLy8gSWYgUmVhY3Qgc2VlcyB0aGUgZXhhY3Qgc2FtZSBlbGVtZW50IHJlZmVyZW5jZSBhcyBsYXN0IHRpbWUsIGl0IGJhaWxzIG91dCBvZiByZS1yZW5kZXJpbmdcbiAgICAgIC8vIHRoYXQgY2hpbGQsIHNhbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gUmVhY3QubWVtbygpIG9yIHJldHVybmVkIGZhbHNlIGZyb20gc2hvdWxkQ29tcG9uZW50VXBkYXRlLlxuXG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHRUb1VzZS5Qcm92aWRlciwge1xuICAgICAgICAgICAgdmFsdWU6IG92ZXJyaWRkZW5Db250ZXh0VmFsdWVcbiAgICAgICAgICB9LCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIH0sIFtDb250ZXh0VG9Vc2UsIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCwgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZV0pO1xuICAgICAgcmV0dXJuIHJlbmRlcmVkQ2hpbGQ7XG4gICAgfSAvLyBJZiB3ZSdyZSBpbiBcInB1cmVcIiBtb2RlLCBlbnN1cmUgb3VyIHdyYXBwZXIgY29tcG9uZW50IG9ubHkgcmUtcmVuZGVycyB3aGVuIGluY29taW5nIHByb3BzIGhhdmUgY2hhbmdlZC5cblxuXG4gICAgdmFyIENvbm5lY3QgPSBwdXJlID8gUmVhY3QubWVtbyhDb25uZWN0RnVuY3Rpb24pIDogQ29ubmVjdEZ1bmN0aW9uO1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIHZhciBmb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgZm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiBob2lzdFN0YXRpY3MoZm9yd2FyZGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsInZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHJldHVybiB0cnVlO1xuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duLmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIGlmIChlbnVtZXJhYmxlT25seSkga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSB9O1xuIiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9OyAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuXG5cbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHt9LCBzdGF0ZVByb3BzLCB7fSwgZGlzcGF0Y2hQcm9wcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzO1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIHZhciBvd25Qcm9wcztcbiAgdmFyIHN0YXRlUHJvcHM7XG4gIHZhciBkaXNwYXRjaFByb3BzO1xuICB2YXIgbWVyZ2VkUHJvcHM7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn0gLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiaW5pdE1hcFN0YXRlVG9Qcm9wc1wiLCBcImluaXRNYXBEaXNwYXRjaFRvUHJvcHNcIiwgXCJpbml0TWVyZ2VQcm9wc1wiXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXG4gIHNlbGVjdG9yRmFjdG9yeSwgd2hpY2ggaGFzIHRoZSBzaWduYXR1cmU6XG5cbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcbiAgXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxuXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxuICBtZXJnZVByb3BzRmFjdG9yaWVzLCBhbmQgcHVyZSBhcmdzLlxuXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxuICBpdCByZWNlaXZlcyBuZXcgcHJvcHMgb3Igc3RvcmUgc3RhdGUuXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBbXCJwdXJlXCIsIFwiYXJlU3RhdGVzRXF1YWxcIiwgXCJhcmVPd25Qcm9wc0VxdWFsXCIsIFwiYXJlU3RhdGVQcm9wc0VxdWFsXCIsIFwiYXJlTWVyZ2VkUHJvcHNFcXVhbFwiXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gXCJDb25uZWN0KFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgfSxcbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0KCk7IiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0Jztcbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGAuIFRoaXMgaXMgYSBsb3ctbGV2ZWxcbiAqIGhvb2sgdGhhdCB5b3Ugc2hvdWxkIHVzdWFsbHkgbm90IG5lZWQgdG8gY2FsbCBkaXJlY3RseS5cbiAqXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGBcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKHsgdmFsdWUgfSkgPT4ge1xuICogICBjb25zdCB7IHN0b3JlIH0gPSB1c2VSZWR1eENvbnRleHQoKVxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cbiAqIH1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVkdXhDb250ZXh0KCkge1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChSZWFjdFJlZHV4Q29udGV4dCk7XG4gIGludmFyaWFudChjb250ZXh0VmFsdWUsICdjb3VsZCBub3QgZmluZCByZWFjdC1yZWR1eCBjb250ZXh0IHZhbHVlOyBwbGVhc2UgZW5zdXJlIHRoZSBjb21wb25lbnQgaXMgd3JhcHBlZCBpbiBhIDxQcm92aWRlcj4nKTtcbiAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbn0iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG4vKipcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU3RvcmUoKSB7XG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlO1xuXG4gICAgcmV0dXJuIHN0b3JlO1xuICB9O1xufVxuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgcmVkdXggc3RvcmVcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAncmVhY3QtcmVkdXgnXG4gKlxuICogZXhwb3J0IGNvbnN0IEV4YW1wbGVDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoKVxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cbiAqIH1cbiAqL1xuXG5leHBvcnQgdmFyIHVzZVN0b3JlID0gY3JlYXRlU3RvcmVIb29rKCk7IiwiaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlU3RvcmUgYXMgdXNlRGVmYXVsdFN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL3VzZVN0b3JlJztcbi8qKlxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGlzcGF0Y2hIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VTdG9yZSA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFN0b3JlIDogY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlRGlzcGF0Y2goKSB7XG4gICAgdmFyIHN0b3JlID0gdXNlU3RvcmUoKTtcbiAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2g7XG4gIH07XG59XG4vKipcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IGBkaXNwYXRjaGAgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge2FueXxmdW5jdGlvbn0gcmVkdXggc3RvcmUncyBgZGlzcGF0Y2hgIGZ1bmN0aW9uXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXG4gKlxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XG4gKiAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICogICBjb25zdCBpbmNyZWFzZUNvdW50ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdpbmNyZWFzZS1jb3VudGVyJyB9KSwgW10pXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2luY3JlYXNlQ291bnRlcn0+SW5jcmVhc2UgY291bnRlcjwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApXG4gKiB9XG4gKi9cblxuZXhwb3J0IHZhciB1c2VEaXNwYXRjaCA9IGNyZWF0ZURpc3BhdGNoSG9vaygpOyIsImltcG9ydCB7IHVzZVJlZHVjZXIsIHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VMYXlvdXRFZmZlY3QsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JzsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IHRvIGVuc3VyZSB0aGUgc3RvcmVcbi8vIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBhbHdheXMgaGFzIHRoZSBzZWxlY3RvciBmcm9tIHRoZSBsYXRlc3QgcmVuZGVyIGNvbW1pdFxuLy8gYXZhaWxhYmxlLCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IGhhcHBlbiBiZXR3ZWVuIHJlbmRlciBhbmQgdGhlIGVmZmVjdCxcbi8vIHdoaWNoIG1heSBjYXVzZSBtaXNzZWQgdXBkYXRlczsgd2UgYWxzbyBtdXN0IGVuc3VyZSB0aGUgc3RvcmUgc3Vic2NyaXB0aW9uXG4vLyBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHksIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgb2NjdXIgYmVmb3JlIHRoZVxuLy8gc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYW5kIGFuIGluY29uc2lzdGVudCBzdGF0ZSBtYXkgYmUgb2JzZXJ2ZWRcblxudmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcblxudmFyIHJlZkVxdWFsaXR5ID0gZnVuY3Rpb24gcmVmRXF1YWxpdHkoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG5cbmZ1bmN0aW9uIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yikge1xuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMgKyAxO1xuICB9LCAwKSxcbiAgICAgIGZvcmNlUmVuZGVyID0gX3VzZVJlZHVjZXJbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfSwgW3N0b3JlLCBjb250ZXh0U3ViXSk7XG4gIHZhciBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0ZWRTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgc2VsZWN0ZWRTdGF0ZTtcblxuICB0cnkge1xuICAgIGlmIChzZWxlY3RvciAhPT0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudCB8fCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBzZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHZhciBlcnJvck1lc3NhZ2UgPSBcIkFuIGVycm9yIG9jY3VyZWQgd2hpbGUgc2VsZWN0aW5nIHRoZSBzdG9yZSBzdGF0ZTogXCIgKyBlcnIubWVzc2FnZSArIFwiLlwiO1xuXG4gICAgaWYgKGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgZXJyb3JNZXNzYWdlICs9IFwiXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG5cIiArIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFjayArIFwiXFxuXFxuT3JpZ2luYWwgc3RhY2sgdHJhY2U6XCI7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gIH1cblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBsYXRlc3RTZWxlY3Rvci5jdXJyZW50ID0gc2VsZWN0b3I7XG4gICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gc2VsZWN0ZWRTdGF0ZTtcbiAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gIH0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV3U2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQoc3RvcmUuZ2V0U3RhdGUoKSk7XG5cbiAgICAgICAgaWYgKGVxdWFsaXR5Rm4obmV3U2VsZWN0ZWRTdGF0ZSwgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IG5ld1NlbGVjdGVkU3RhdGU7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gd2UgaWdub3JlIGFsbCBlcnJvcnMgaGVyZSwgc2luY2Ugd2hlbiB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGlzIHJlLXJlbmRlcmVkLCB0aGUgc2VsZWN0b3JzIGFyZSBjYWxsZWQgYWdhaW4sIGFuZFxuICAgICAgICAvLyB3aWxsIHRocm93IGFnYWluLCBpZiBuZWl0aGVyIHByb3BzIG5vciBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VkXG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IGVycjtcbiAgICAgIH1cblxuICAgICAgZm9yY2VSZW5kZXIoe30pO1xuICAgIH1cblxuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICBjaGVja0ZvclVwZGF0ZXMoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uXSk7XG4gIHJldHVybiBzZWxlY3RlZFN0YXRlO1xufVxuLyoqXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ySG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4pIHtcbiAgICBpZiAoZXF1YWxpdHlGbiA9PT0gdm9pZCAwKSB7XG4gICAgICBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHk7XG4gICAgfVxuXG4gICAgaW52YXJpYW50KHNlbGVjdG9yLCBcIllvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvcnNcIik7XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHJldHVybiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9O1xufVxuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZSdzIHN0YXRlLiBUaGlzIGhvb2sgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvblxuICogYXMgYW4gYXJndW1lbnQuIFRoZSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgc3RvcmUgc3RhdGUuXG4gKlxuICogVGhpcyBob29rIHRha2VzIGFuIG9wdGlvbmFsIGVxdWFsaXR5IGNvbXBhcmlzb24gZnVuY3Rpb24gYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXJcbiAqIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHdheSB0aGUgc2VsZWN0ZWQgc3RhdGUgaXMgY29tcGFyZWQgdG8gZGV0ZXJtaW5lXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHNlbGVjdGVkIHN0YXRlXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBjb3VudGVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY291bnRlcilcbiAqICAgcmV0dXJuIDxkaXY+e2NvdW50ZXJ9PC9kaXY+XG4gKiB9XG4gKi9cblxuZXhwb3J0IHZhciB1c2VTZWxlY3RvciA9IGNyZWF0ZVNlbGVjdG9ySG9vaygpOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCJpbXBvcnQgUHJvdmlkZXIgZnJvbSAnLi9jb21wb25lbnRzL1Byb3ZpZGVyJztcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVNlbGVjdG9yJztcbmltcG9ydCB7IHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVN0b3JlJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0LCBiYXRjaCwgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vaywgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vaywgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vaywgc2hhbGxvd0VxdWFsIH07IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBndWQgZnJvbSAnZ3VkJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xuXG5mdW5jdGlvbiBvYmplY3RJcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbWl0dGVyKHZhbHVlKSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiBvbihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIGggIT09IGhhbmRsZXI7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcih2YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVhY3RDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlO1xuXG4gIHZhciBjb250ZXh0UHJvcCA9ICdfX2NyZWF0ZS1yZWFjdC1jb250ZXh0LScgKyBndWQoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICAgIF9pbmhlcml0c0xvb3NlKENvbnN1bWVyLCBfQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHZhciBfdGhpczI7XG5cbiAgICAgIF90aGlzMiA9IF9Db21wb25lbnQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9O1xuXG4gICAgICBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcblxuICAgICAgICBpZiAoKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvMiA9IENvbnN1bWVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV4dFByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9uKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gdGhpcy5wcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vZmYodGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLmdldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29uc3VtZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBDb25zdW1lci5jb250ZXh0VHlwZXMgPSAoX0NvbnN1bWVyJGNvbnRleHRUeXBlID0ge30sIF9Db25zdW1lciRjb250ZXh0VHlwZVtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LCBfQ29uc3VtZXIkY29udGV4dFR5cGUpO1xuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBQcm92aWRlcixcbiAgICBDb25zdW1lcjogQ29uc3VtZXJcbiAgfTtcbn1cblxudmFyIGluZGV4ID0gUmVhY3QuY3JlYXRlQ29udGV4dCB8fCBjcmVhdGVSZWFjdENvbnRleHQ7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bykge1xuICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG5cbiAgdmFyIHRvUGFydHMgPSB0byAmJiB0by5zcGxpdCgnLycpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IHZvaWQgMDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gIH1pZiAobXVzdEVuZEFicyAmJiBmcm9tUGFydHNbMF0gIT09ICcnICYmICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpKSBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiB2YWx1ZUVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShiKSAmJiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBhVHlwZSA9IHR5cGVvZiBhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhKTtcbiAgdmFyIGJUeXBlID0gdHlwZW9mIGIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGIpO1xuXG4gIGlmIChhVHlwZSAhPT0gYlR5cGUpIHJldHVybiBmYWxzZTtcblxuICBpZiAoYVR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IGEudmFsdWVPZigpO1xuICAgIHZhciBiVmFsdWUgPSBiLnZhbHVlT2YoKTtcblxuICAgIGlmIChhVmFsdWUgIT09IGEgfHwgYlZhbHVlICE9PSBiKSByZXR1cm4gdmFsdWVFcXVhbChhVmFsdWUsIGJWYWx1ZSk7XG5cbiAgICB2YXIgYUtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICB2YXIgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcblxuICAgIGlmIChhS2V5cy5sZW5ndGggIT09IGJLZXlzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIGFLZXlzLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDsiLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmIChjb25kaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaW52YXJpYW50O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcHJlZml4ICsgJyhcXFxcL3xcXFxcP3wjfCQpJywgJ2knKS50ZXN0KHBhdGgpO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZm9yY2VSZWZyZXNoID0gX3Byb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBjb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlclwiKTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIFJvdXRlci5jb21wdXRlUm9vdE1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZVJvb3RNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBSb3V0ZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5oaXN0b3J5LmxvY2F0aW9uXG4gICAgfTsgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cblxuICAgIF90aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcblxuICAgIGlmICghcHJvcHMuc3RhdGljQ29udGV4dCkge1xuICAgICAgX3RoaXMudW5saXN0ZW4gPSBwcm9wcy5oaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc01vdW50ZWQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbG9jYXRpb246IHRoaXMuX3BlbmRpbmdMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVubGlzdGVuKSB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsLFxuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5zdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLnN0YXRpY0NvbnRleHRcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcmV2UHJvcHMuaGlzdG9yeSA9PT0gdGhpcy5wcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZU1lbW9yeUhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNZW1vcnlSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgTGlmZWN5Y2xlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExpZmVjeWNsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlmZWN5Y2xlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMaWZlY3ljbGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91bnQpIHRoaXMucHJvcHMub25Nb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHRoaXMucHJvcHMub25VcGRhdGUuY2FsbCh0aGlzLCB0aGlzLCBwcmV2UHJvcHMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVW5tb3VudCkgdGhpcy5wcm9wcy5vblVubW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBMaWZlY3ljbGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5IGZyb20gYSBzY3JlZW4uXG4gKi9cblxuZnVuY3Rpb24gUHJvbXB0KF9yZWYpIHtcbiAgdmFyIG1lc3NhZ2UgPSBfcmVmLm1lc3NhZ2UsXG4gICAgICBfcmVmJHdoZW4gPSBfcmVmLndoZW4sXG4gICAgICB3aGVuID0gX3JlZiR3aGVuID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiR3aGVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQkMSkge1xuICAgICFjb250ZXh0JCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmICghd2hlbiB8fCBjb250ZXh0JCQxLnN0YXRpY0NvbnRleHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtZXRob2QgPSBjb250ZXh0JCQxLmhpc3RvcnkuYmxvY2s7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHByZXZQcm9wcy5tZXNzYWdlICE9PSBtZXNzYWdlKSB7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Vbm1vdW50OiBmdW5jdGlvbiBvblVubW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciBtZXNzYWdlVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSk7XG4gIFByb21wdC5wcm9wVHlwZXMgPSB7XG4gICAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWVzc2FnZTogbWVzc2FnZVR5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgpIHtcbiAgaWYgKGNhY2hlW3BhdGhdKSByZXR1cm4gY2FjaGVbcGF0aF07XG4gIHZhciBnZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXRoKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXRoXSA9IGdlbmVyYXRvcjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gZ2VuZXJhdG9yO1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXRoIGFuZCBwYXJhbWV0ZXJzLlxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKHBhdGgsIHBhcmFtcykge1xuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFwiL1wiO1xuICB9XG5cbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cblxuICByZXR1cm4gcGF0aCA9PT0gXCIvXCIgPyBwYXRoIDogY29tcGlsZVBhdGgocGF0aCkocGFyYW1zLCB7XG4gICAgcHJldHR5OiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBuYXZpZ2F0aW5nIHByb2dyYW1tYXRpY2FsbHkgd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBSZWRpcmVjdChfcmVmKSB7XG4gIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgX3JlZiRwdXNoID0gX3JlZi5wdXNoLFxuICAgICAgcHVzaCA9IF9yZWYkcHVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHB1c2g7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JCQxKSB7XG4gICAgIWNvbnRleHQkJDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQkJDEuaGlzdG9yeSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IGNvbnRleHQkJDEuc3RhdGljQ29udGV4dDtcbiAgICB2YXIgbWV0aG9kID0gcHVzaCA/IGhpc3RvcnkucHVzaCA6IGhpc3RvcnkucmVwbGFjZTtcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihjb21wdXRlZE1hdGNoID8gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcykgOiBfZXh0ZW5kcyh7fSwgdG8sIHtcbiAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgIH0pIDogdG8pOyAvLyBXaGVuIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBjb250ZXh0LFxuICAgIC8vIHNldCB0aGUgbmV3IGxvY2F0aW9uIGltbWVkaWF0ZWx5LlxuXG4gICAgaWYgKHN0YXRpY0NvbnRleHQpIHtcbiAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICB2YXIgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcblxuICAgICAgICBpZiAoIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgIH0pKSkge1xuICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0bzogdG9cbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICAgIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgY2FjaGVMaW1pdCQxID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCQxID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgkMShwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBwYXRoQ2FjaGUgPSBjYWNoZSQxW2NhY2hlS2V5XSB8fCAoY2FjaGUkMVtjYWNoZUtleV0gPSB7fSk7XG4gIGlmIChwYXRoQ2FjaGVbcGF0aF0pIHJldHVybiBwYXRoQ2FjaGVbcGF0aF07XG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZWdleHAgPSBwYXRoVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAga2V5czoga2V5c1xuICB9O1xuXG4gIGlmIChjYWNoZUNvdW50JDEgPCBjYWNoZUxpbWl0JDEpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCQxKys7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cblxuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikgb3B0aW9ucyA9IHtcbiAgICBwYXRoOiBvcHRpb25zXG4gIH07XG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG4gIHZhciBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcbiAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgcGF0aCkge1xuICAgIGlmICghcGF0aCkgcmV0dXJuIG51bGw7XG4gICAgaWYgKG1hdGNoZWQpIHJldHVybiBtYXRjaGVkO1xuXG4gICAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoJDEocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmVcbiAgICB9KSxcbiAgICAgICAgcmVnZXhwID0gX2NvbXBpbGVQYXRoLnJlZ2V4cCxcbiAgICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gICAgdmFyIG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG4gICAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuICAgIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAvLyB0aGUgcGF0aCB1c2VkIHRvIG1hdGNoXG4gICAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLFxuICAgICAgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgICBpc0V4YWN0OiBpc0V4YWN0LFxuICAgICAgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxuXG52YXIgUm91dGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkJDEpIHtcbiAgICAgICFjb250ZXh0JCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0JCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkJDEubWF0Y2g7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBjb250ZXh0JCQxLCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IG1hdGNoXG4gICAgICB9KTtcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgcmVuZGVyID0gX3RoaXMkcHJvcHMucmVuZGVyOyAvLyBQcmVhY3QgdXNlcyBhbiBlbXB0eSBhcnJheSBhcyBjaGlsZHJlbiBieVxuICAgICAgLy8gZGVmYXVsdCwgc28gdXNlIG51bGwgaWYgdGhhdCdzIHRoZSBjYXNlLlxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4ocHJvcHMpO1xuXG4gICAgICAgIGlmIChjaGlsZHJlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgdmFyIHBhdGggPSBfdGhpcy5wcm9wcy5wYXRoO1xuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArIChcIjxSb3V0ZVwiICsgKHBhdGggPyBcIiBwYXRoPVxcXCJcIiArIHBhdGggKyBcIlxcXCJcIiA6IFwiXCIpICsgXCI+LCBidXQgeW91IFwiKSArIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKSA6IHZvaWQgMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHNcbiAgICAgIH0sIGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pID8gY2hpbGRyZW4gOiBwcm9wcy5tYXRjaCA/IGNvbXBvbmVudCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiByZW5kZXIgPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpIDogaW52YXJpYW50KGZhbHNlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxuXG52YXIgU3RhdGljUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUFVTSFwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUkVQTEFDRVwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdGF0aWNSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5uYXZpZ2F0ZVRvID0gZnVuY3Rpb24gbmF2aWdhdGVUbyhsb2NhdGlvbiwgYWN0aW9uKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMkYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wcyRjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMkY29udGV4dDtcbiAgICBjb250ZXh0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMiRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzMiRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMiRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzMiRjb250ZXh0LFxuICAgICAgICBfdGhpcyRwcm9wczIkbG9jYXRpb24gPSBfdGhpcyRwcm9wczIubG9jYXRpb24sXG4gICAgICAgIGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyJGxvY2F0aW9uID09PSB2b2lkIDAgPyBcIi9cIiA6IF90aGlzJHByb3BzMiRsb2NhdGlvbixcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYmFzZW5hbWVcIiwgXCJjb250ZXh0XCIsIFwibG9jYXRpb25cIl0pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiBmdW5jdGlvbiBjcmVhdGVIcmVmKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgICB9LFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkJDEpIHtcbiAgICAgICFjb250ZXh0JCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQkMS5sb2NhdGlvbjtcbiAgICAgIHZhciBlbGVtZW50LCBtYXRjaDsgLy8gV2UgdXNlIFJlYWN0LkNoaWxkcmVuLmZvckVhY2ggaW5zdGVhZCBvZiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KCkuZmluZCgpXG4gICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgLy8gdG8gdHJpZ2dlciBhbiB1bm1vdW50L3JlbW91bnQgZm9yIHR3byA8Um91dGU+cyB0aGF0IHJlbmRlciB0aGUgc2FtZVxuICAgICAgLy8gY29tcG9uZW50IGF0IGRpZmZlcmVudCBVUkxzLlxuXG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKF90aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuICAgICAgICAgIHZhciBwYXRoID0gY2hpbGQucHJvcHMucGF0aCB8fCBjaGlsZC5wcm9wcy5mcm9tO1xuICAgICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLCB7XG4gICAgICAgICAgICBwYXRoOiBwYXRoXG4gICAgICAgICAgfSkpIDogY29udGV4dCQkMS5tYXRjaDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQkMSkge1xuICAgICAgIWNvbnRleHQkJDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxcIiArIGRpc3BsYXlOYW1lICsgXCIgLz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCBjb250ZXh0JCQxLCB7XG4gICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBDLnByb3BUeXBlcyA9IHtcbiAgICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIGdsb2JhbCA9IHdpbmRvdztcbiAgICB2YXIga2V5ID0gXCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7XG4gICAgdmFyIGJ1aWxkTmFtZXMgPSB7XG4gICAgICBjanM6IFwiQ29tbW9uSlNcIixcbiAgICAgIGVzbTogXCJFUyBtb2R1bGVzXCIsXG4gICAgICB1bWQ6IFwiVU1EXCJcbiAgICB9O1xuXG4gICAgaWYgKGdsb2JhbFtrZXldICYmIGdsb2JhbFtrZXldICE9PSBcImVzbVwiKSB7XG4gICAgICB2YXIgaW5pdGlhbEJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbZ2xvYmFsW2tleV1dO1xuICAgICAgdmFyIHNlY29uZGFyeUJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbXCJlc21cIl07IC8vIFRPRE86IEFkZCBsaW5rIHRvIGFydGljbGUgdGhhdCBleHBsYWlucyBpbiBkZXRhaWwgaG93IHRvIGF2b2lkXG4gICAgICAvLyBsb2FkaW5nIDIgZGlmZmVyZW50IGJ1aWxkcy5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBsb2FkaW5nIHRoZSBcIiArIHNlY29uZGFyeUJ1aWxkTmFtZSArIFwiIGJ1aWxkIG9mIFJlYWN0IFJvdXRlciBcIiArIChcIm9uIGEgcGFnZSB0aGF0IGlzIGFscmVhZHkgcnVubmluZyB0aGUgXCIgKyBpbml0aWFsQnVpbGROYW1lICsgXCIgXCIpICsgXCJidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuXCIpO1xuICAgIH1cblxuICAgIGdsb2JhbFtrZXldID0gXCJlc21cIjtcbiAgfVxufVxuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgd2l0aFJvdXRlciwgY29udGV4dCBhcyBfX1JvdXRlckNvbnRleHQgfTtcbiIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCAqIGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKVxuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGluaywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGluaygpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGluay5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQsIGhpc3RvcnkpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMucHJvcHMub25DbGljaykgdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRocm93IGV4O1xuICAgIH1cblxuICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgIXRoaXMucHJvcHMudGFyZ2V0IHx8IHRoaXMucHJvcHMudGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICApIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHRoaXMucHJvcHMucmVwbGFjZSA/IGhpc3RvcnkucmVwbGFjZSA6IGhpc3RvcnkucHVzaDtcbiAgICAgICAgbWV0aG9kKHRoaXMucHJvcHMudG8pO1xuICAgICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlubmVyUmVmID0gX3RoaXMkcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgIHJlcGxhY2UgPSBfdGhpcyRwcm9wcy5yZXBsYWNlLFxuICAgICAgICB0byA9IF90aGlzJHByb3BzLnRvLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImlubmVyUmVmXCIsIFwicmVwbGFjZVwiLCBcInRvXCJdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgY29udGV4dC5sb2NhdGlvbikgOiB0bztcbiAgICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBjb250ZXh0Lmhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuaGFuZGxlQ2xpY2soZXZlbnQsIGNvbnRleHQuaGlzdG9yeSk7XG4gICAgICAgIH0sXG4gICAgICAgIGhyZWY6IGhyZWYsXG4gICAgICAgIHJlZjogaW5uZXJSZWZcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTGluaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgdG9UeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pO1xuICB2YXIgaW5uZXJSZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLmFueVxuICB9KV0pO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogaW5uZXJSZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxuZnVuY3Rpb24gam9pbkNsYXNzbmFtZXMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc25hbWVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGNsYXNzbmFtZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gY2xhc3NuYW1lcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaTtcbiAgfSkuam9pbihcIiBcIik7XG59XG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5cblxuZnVuY3Rpb24gTmF2TGluayhfcmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgc3R5bGVQcm9wID0gX3JlZi5zdHlsZSxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhcmlhLWN1cnJlbnRcIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcImV4YWN0XCIsIFwiaXNBY3RpdmVcIiwgXCJsb2NhdGlvblwiLCBcInN0cmljdFwiLCBcInN0eWxlXCIsIFwidG9cIl0pO1xuXG4gIHZhciBwYXRoID0gdHlwZW9mIHRvID09PSBcIm9iamVjdFwiID8gdG8ucGF0aG5hbWUgOiB0bzsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxOYXZMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBwYXRoVG9NYXRjaCA9IGxvY2F0aW9uUHJvcCA/IGxvY2F0aW9uUHJvcC5wYXRobmFtZSA6IGNvbnRleHQubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgocGF0aFRvTWF0Y2gsIHtcbiAgICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgICAgZXhhY3Q6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjb250ZXh0LmxvY2F0aW9uKSA6IG1hdGNoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpIDogY2xhc3NOYW1lUHJvcDtcbiAgICB2YXIgc3R5bGUgPSBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZVByb3AsIGFjdGl2ZVN0eWxlKSA6IHN0eWxlUHJvcDtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9cbiAgICB9LCByZXN0KSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7TGlua30gZnJvbSAncmVhY3Qtcm91dGVyLWRvbScgXG5cblxuXG5jb25zdCBFeHBlbnNlTGlzdEl0ZW0gPSAoe2hpc3RvcnkscHVzaCwgZGlzcGF0Y2gsIGlkLCBkZXNjcmlwdGlvbiwgbm90ZSwgYW1vdW50LCBjcmVhdGVkQXR9KSA9PntcbiAgICByZXR1cm4oICAgXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgPGxpPkRlc2NyaXB0aW9uOiB7ZGVzY3JpcHRpb259PC9saT5cbiAgICAgICAgICAgICAgICA8bGk+Tm90ZToge25vdGV9PC9saT5cbiAgICAgICAgICAgICAgICA8bGk+QW1vdW50OiB7YW1vdW50fTwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPkRhdGU6IHtjcmVhdGVkQXR9PC9saT5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8TGluayB0bz17YGVkaXQvJHtpZH1gfT48YnV0dG9uPkVkaXQ8L2J1dHRvbj48L0xpbms+XG4gICAgICAgICAgICBcbiBcbiAgICAgICAgPC9kaXY+XG4gICAgKVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IEV4cGVuc2VMaXN0SXRlbSIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JyBcblxuLy9HZXQgVmlzaWJsZSBFeHBlbnNlc1xuY29uc3QgZ2V0VmlzaWJsZUV4cGVuc2VzID0gKGV4cGVuc2VzLCB7dGV4dCwgc29ydEJ5LCBzdGFydERhdGUsIGVuZERhdGV9KSA9PntcbiAgICByZXR1cm4gZXhwZW5zZXMuZmlsdGVyKChleHBlbnNlKT0+e1xuICAgICAgICBjb25zdCBjcmVhdGVkQXRNb21lbnQgPSBtb21lbnQoZXhwZW5zZS5jcmVhdGVkQXQpXG4gICAgICAgIGNvbnN0IHN0YXJ0RGF0ZU1hdGNoID0gc3RhcnREYXRlID8gc3RhcnREYXRlLmlzU2FtZU9yQmVmb3JlKGNyZWF0ZWRBdE1vbWVudCwnZGF5JykgOiB0cnVlXG4gICAgICAgIGNvbnN0IGVuZERhdGVNYXRjaCA9IGVuZERhdGUgPyBlbmREYXRlLmlzU2FtZU9yQmVmb3JlKGNyZWF0ZWRBdE1vbWVudCwnZGF5JykgOiB0cnVlXG4gICBcbiAgICAgICAgY29uc3QgdGV4dE1hdGNoID0gZXhwZW5zZS5kZXNjcmlwdGlvbi50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHRleHQudG9Mb3dlckNhc2UoKSkgfHwgZXhwZW5zZS5ub3RlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModGV4dC50b0xvd2VyQ2FzZSgpKVxuXG4gICAgICAgIHJldHVybiBzdGFydERhdGVNYXRjaCAmJiBlbmREYXRlTWF0Y2ggJiYgdGV4dE1hdGNoXG4gICAgfSkuc29ydCgoYSwgYik9PntcbiAgICAgICAgaWYoc29ydEJ5ID09PSAnZGF0ZScpe1xuICAgICAgICAgICAgcmV0dXJuIGEuY3JlYXRlZEF0IDwgYi5jcmVhdGVkQXQgPyAxIDogLTFcbiAgICAgICAgfWVsc2UgaWYoc29ydEJ5ID09PSAnYW1vdW50Jyl7XG4gICAgICAgICAgICByZXR1cm4gYS5hbW91bnQgPCBiLmFtb3VudCA/IDEgOiAtMVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0VmlzaWJsZUV4cGVuc2VzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JyBcbmltcG9ydCBFeHBlbnNlTGlzdEl0ZW0gZnJvbSAnLi9FeHBlbnNlTGlzdEl0ZW0nXG5pbXBvcnQgZ2V0VmlzaWJsZUV4cGVuc2VzIGZyb20gJy4uL3NlbGVjdG9ycy9leHBlbnNlcydcblxuZXhwb3J0IGNvbnN0IEV4cGVuc2VMaXN0ID0gKHByb3BzKSA9PiB7XG4gICAgcmV0dXJuKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHByb3BzLmV4cGVuc2VzLmxlbmd0aCA9PT0gMCA/KFxuICAgICAgICAgICAgICAgICAgICA8cD5ObyBleHBlbnNlczwvcD5cbiAgICAgICAgICAgICAgICApIDooXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLmV4cGVuc2VzLm1hcCgob2JqLCBpZHgpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEV4cGVuc2VMaXN0SXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4ub2JqfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e29iai5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgXG5cbiAgICAgICAgICAgIFxuICAgICAgICAgXG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKT0+e1xuICAgIHJldHVybntcbiAgICAgICAgZXhwZW5zZXM6IGdldFZpc2libGVFeHBlbnNlcyhzdGF0ZS5leHBlbnNlcywgc3RhdGUuZmlsdGVycylcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShFeHBlbnNlTGlzdClcblxuIiwiXG4vL1NFVF9URVhUX0ZJTFRFUlxuZXhwb3J0IGNvbnN0IHNldFRleHRGaWx0ZXIgPSAodGV4dCA9ICcnKT0+KHtcbiAgICB0eXBlOiAnU0VUX1RFWFRfRklMVEVSJyxcbiAgICB0ZXh0XG59KVxuXG4vL1NPUlRfQllfREFURVxuZXhwb3J0IGNvbnN0IHNvcnRCeURhdGUgPSAoKSA9PiAoe1xuICAgIHR5cGU6ICdTT1JUX0JZX0RBVEUnXG4gICAgXG59KVxuXG4vL1NPUlRfQllfQU1PVU5UXG5leHBvcnQgY29uc3Qgc29ydEJ5QW1vdW50ID0gKCkgPT4gKHtcbiAgICB0eXBlOiAnU09SVF9CWV9BTU9VTlQnXG4gICAgXG59KVxuXG4vL1NFVF9TVEFSVF9EQVRFXG5leHBvcnQgY29uc3Qgc2V0U3RhcnREYXRlID0gKGRhdGUpID0+KHtcbiAgICB0eXBlOiAnU0VUX1NUQVJUX0RBVEUnLFxuICAgIHN0YXJ0RGF0ZTogZGF0ZVxufSlcblxuLy9TRVRfRU5EX0RBVEVcbmV4cG9ydCBjb25zdCBzZXRFbmREYXRlID0gKGRhdGUpID0+KHtcbiAgICB0eXBlOiAnU0VUX0VORF9EQVRFJyxcbiAgICBlbmREYXRlOiBkYXRlXG59KSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQge3NldFRleHRGaWx0ZXIsIHNvcnRCeURhdGUsIHNvcnRCeUFtb3VudCwgc2V0U3RhcnREYXRlLCBzZXRFbmREYXRlfSBmcm9tICcuLi9hY3Rpb25zL2ZpbHRlcnMnIFxuaW1wb3J0IHtEYXRlUmFuZ2VQaWNrZXJ9IGZyb20gJ3JlYWN0LWRhdGVzJyBcblxuXG5leHBvcnQgY2xhc3MgRXhwZW5zZUxpc3RGaWx0ZXJzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50e1xuICAgIHN0YXRlID17XG4gICAgICAgIGZvY3VzZWQ6IG51bGxcbiAgICB9XG4gICAgb25EYXRlc0NoYW5nZSA9ICh7IHN0YXJ0RGF0ZSwgZW5kRGF0ZSB9KSA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMuc2V0U3RhcnREYXRlKHN0YXJ0RGF0ZSlcbiAgICAgICAgdGhpcy5wcm9wcy5zZXRFbmREYXRlKGVuZERhdGUpXG4gICAgICB9XG4gICAgb25Gb2N1c0NoYW5nZSA9IChmb2N1c2VkKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoKCk9Pih7Zm9jdXNlZH0pKVxuICAgIH1cbiAgICBvblRleHRDaGFuZ2UgPSAoZSk9PntcbiAgICAgICAgdGhpcy5wcm9wcy5zZXRUZXh0RmlsdGVyKGUudGFyZ2V0LnZhbHVlKVxuICAgIH1cbiAgICBvblNvcnRDaGFuZ2UgPSAoZSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBjb25zdCB2YWwgPSBlLnRhcmdldC52YWx1ZVxuICAgICAgICBpZih2YWwgPT09ICdkYXRlJyl7XG4gICAgICAgICAgICB0aGlzLnByb3BzLnNvcnRCeURhdGUoKVxuICAgICAgICB9ZWxzZSBpZih2YWwgPT09ICdhbW91bnQnKXtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuc29ydEJ5QW1vdW50KClcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIHJlbmRlcigpe1xuICAgICAgICByZXR1cm4oXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxpbnB1dCAgXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCIgXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmZpbHRlcnMudGV4dH0gXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uVGV4dENoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMuZmlsdGVycy5zb3J0Qnl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uU29ydENoYW5nZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZGF0ZVwiPkRhdGU8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJhbW91bnRcIj5BbW91bnQ8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgICAgIDxEYXRlUmFuZ2VQaWNrZXJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJkYXRlUGlja2VyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZT17dGhpcy5wcm9wcy5maWx0ZXJzLnN0YXJ0RGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZUlkPVwibGJzZmJsc2RrZm5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kRGF0ZT17dGhpcy5wcm9wcy5maWx0ZXJzLmVuZERhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmREYXRlSWQ9XCJmc2RubG5mZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkRhdGVzQ2hhbmdlPXt0aGlzLm9uRGF0ZXNDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1c2VkSW5wdXQ9e3RoaXMuc3RhdGUuZm9jdXNlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRm9jdXNDaGFuZ2U9e3RoaXMub25Gb2N1c0NoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlck9mTW9udGhzPXsxfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NsZWFyRGF0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzT3V0c2lkZVJhbmdlPXsoKT0+ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgIH1cbiAgXG59XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSkgPT4ge1xuICAgIHJldHVybntcbiAgICAgICAgZmlsdGVyczogc3RhdGUuZmlsdGVyc1xuICAgIH1cbn1cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCkgPT57XG4gICAgcmV0dXJue1xuICAgICAgICBzZXRTdGFydERhdGU6IChzdGFydERhdGUpID0+IGRpc3BhdGNoKHNldFN0YXJ0RGF0ZShzdGFydERhdGUpKSxcbiAgICAgICAgc2V0RW5kRGF0ZTogKGVuZERhdGUpID0+IGRpc3BhdGNoKHNldEVuZERhdGUoZW5kRGF0ZSkpLFxuICAgICAgICBzZXRUZXh0RmlsdGVyOiAodGV4dCkgPT4gZGlzcGF0Y2goc2V0VGV4dEZpbHRlcih0ZXh0KSksXG4gICAgICAgIHNvcnRCeURhdGU6ICgpID0+IGRpc3BhdGNoKHNvcnRCeURhdGUpLFxuICAgICAgICBzb3J0QnlBbW91bnQ6ICgpID0+IGRpc3BhdGNoKHNvcnRCeUFtb3VudClcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShFeHBlbnNlTGlzdEZpbHRlcnMpIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IEV4cGVuc2VMaXN0IGZyb20gJy4vRXhwZW5zZUxpc3QnXG5pbXBvcnQgRXhwZW5zZUxpc3RGaWx0ZXJzIGZyb20gJy4vRXhwZW5zZUxpc3RGaWx0ZXJzJyBcblxuXG5jb25zdCBFeHBlbnNlRGFzaGJvYXJkUGFnZSA9ICgpPT57XG4gICAgcmV0dXJuKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPEV4cGVuc2VMaXN0RmlsdGVycyAvPlxuICAgICAgICAgICAgPEV4cGVuc2VMaXN0IC8+XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cbmV4cG9ydCBkZWZhdWx0IEV4cGVuc2VEYXNoYm9hcmRQYWdlIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnXG5pbXBvcnQgJ3JlYWN0LWRhdGVzL2luaXRpYWxpemUnXG5pbXBvcnQgeyBTaW5nbGVEYXRlUGlja2VyIH0gZnJvbSAncmVhY3QtZGF0ZXMnXG5cblxuY2xhc3MgRXhwZW5zZUZvcm0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XG4gICAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgICAgICBzdXBlcihwcm9wcylcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5leHBlbnNlID8gcHJvcHMuZXhwZW5zZS5kZXNjcmlwdGlvbiA6ICcnLFxuICAgICAgICAgICAgbm90ZTogcHJvcHMuZXhwZW5zZSA/IHByb3BzLmV4cGVuc2Uubm90ZSA6ICcnLFxuICAgICAgICAgICAgYW1vdW50OiBwcm9wcy5leHBlbnNlID8gKHByb3BzLmV4cGVuc2UuYW1vdW50LzEwMCkudG9TdHJpbmcoKSA6ICcnLFxuICAgICAgICAgICAgY3JlYXRlZEF0OiBwcm9wcy5leHBlbnNlID8gIG1vbWVudChwcm9wcy5leHBlbnNlLmNyZWF0ZWRBdCkgOiBtb21lbnQoKSxcbiAgICAgICAgICAgIGZvY3VzZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6ICcnXG4gICAgICAgIH1cbiAgICB9XG4gICBcbiAgICBvbkRlc2NyaXB0aW9uQ2hhbmdlID0gKGUpPT57XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZS50YXJnZXQudmFsdWVcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgoKT0+KHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uXG4gICAgICAgIH0pKVxuICAgIH1cbiAgICBvbk5vdGVDaGFuZ2UgPSAoZSkgPT4ge1xuICAgICAgICBjb25zdCBub3RlID0gZS50YXJnZXQudmFsdWVcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgoKT0+KHtcbiAgICAgICAgICAgIG5vdGVcbiAgICAgICAgfSkpXG4gICAgfVxuICAgIG9uQW1vdW50Q2hhbmdlID0gKGUpPT4ge1xuICAgICAgICBjb25zdCBhbW91bnQgPSBlLnRhcmdldC52YWx1ZVxuICAgICAgICBpZighYW1vdW50IHx8IGFtb3VudC5tYXRjaCgvXlxcZHsxLH0oXFwuXFxkezAsMn0pPyQvKSl7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKCgpPT4oe2Ftb3VudH0pKVxuICAgICAgICB9XG4gICAgfVxuICAgIG9uRGF0ZUNoYW5nZSA9IChjcmVhdGVkQXQpID0+IHtcbiAgICAgICAgaWYoY3JlYXRlZEF0KXtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKCgpPT4oe2NyZWF0ZWRBdH0pKSAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIG9uRm9jdXNDaGFuZ2UgPSAoe2ZvY3VzZWR9KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoKCk9Pih7Zm9jdXNlZH0pKVxuICAgIH1cblxuICAgIG9uU3VibWl0ID0gKGUpPT57XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICBpZighdGhpcy5zdGF0ZS5kZXNjcmlwdGlvbiB8fCAhdGhpcy5zdGF0ZS5hbW91bnQpe1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSgoKT0+KHtlcnJvcjoneW91IG11c3QgYWRkIGRlc2NyaXB0aW9uIGFuZCBhbW91bnQnfSkpXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSgoKT0+KHtlcnJvcjonJ30pKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uU3VibWl0KHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5zdGF0ZS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICBhbW91bnQ6IHBhcnNlRmxvYXQodGhpcy5zdGF0ZS5hbW91bnQsMTApICogMTAwLFxuICAgICAgICAgICAgICAgIGNyZWF0ZWRBdDogdGhpcy5zdGF0ZS5jcmVhdGVkQXQudmFsdWVPZigpLFxuICAgICAgICAgICAgICAgIG5vdGU6IHRoaXMuc3RhdGUubm90ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXIoKXtcbiAgICAgICByZXR1cm4oIFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmVycm9yICYmIDxwPnt0aGlzLnN0YXRlLmVycm9yfTwvcD59XG4gICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5vblN1Ym1pdH0+XG4gICAgICAgICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkRlc2NyaXB0aW9uXCJcbiAgICAgICAgICAgICAgICAgICBhdXRvRm9jdXNcbiAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5kZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkRlc2NyaXB0aW9uQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkFtb3VudFwiIFxuICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmFtb3VudH1cbiAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkFtb3VudENoYW5nZX1cblxuICAgICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICAgICA8U2luZ2xlRGF0ZVBpY2tlclxuICAgICAgICAgICAgICAgICAgICBkYXRlPXt0aGlzLnN0YXRlLmNyZWF0ZWRBdH1cbiAgICAgICAgICAgICAgICAgICAgb25EYXRlQ2hhbmdlPXt0aGlzLm9uRGF0ZUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgZm9jdXNlZD17dGhpcy5zdGF0ZS5mb2N1c2VkfVxuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzQ2hhbmdlPXt0aGlzLm9uRm9jdXNDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgIG51bWJlck9mTW9udGhzPXsxfVxuICAgICAgICAgICAgICAgICAgICBpc091dHNpZGVSYW5nZT17KCk9PmZhbHNlfVxuICAgICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQWRkIGEgbm90ZSBmb3IgeW91ciBleHBlbnNlXCJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUubm90ZX1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25Ob3RlQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICA+PC90ZXh0YXJlYT5cbiAgICAgICAgICAgICAgICAgICA8YnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICBBZGQgRXhwZW5zZVxuICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEV4cGVuc2VGb3JtIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtjb25uZWN0fSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCBFeHBlbnNlRm9ybSBmcm9tICcuL0V4cGVuc2VGb3JtJyBcbmltcG9ydCB7YWRkRXhwZW5zZX0gZnJvbSAnLi4vYWN0aW9ucy9leHBlbnNlcycgXG5cbmV4cG9ydCBjbGFzcyBBZGRFeHBlbnNlUGFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudHtcbiAgICBvblN1Ym1pdCA9IChleHBlbnNlKT0+e1xuICAgICAgICB0aGlzLnByb3BzLmFkZEV4cGVuc2UoZXhwZW5zZSlcbiAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goJy8nKVxuICAgIH1cbiAgICByZW5kZXIoKXtcbiAgICAgICAgcmV0dXJuKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8aDE+QWRkIEV4cGVuc2U8L2gxPlxuICAgICAgICAgICAgICAgIDxFeHBlbnNlRm9ybSBcbiAgICAgICAgICAgICAgICBvblN1Ym1pdD17dGhpcy5vblN1Ym1pdH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICB9XG59XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCkgPT4geyBcbiAgICByZXR1cm57XG4gICAgICAgIGFkZEV4cGVuc2U6IChleHBlbnNlKSA9PiBkaXNwYXRjaChhZGRFeHBlbnNlKGV4cGVuc2UpKVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdCh1bmRlZmluZWQsIG1hcERpc3BhdGNoVG9Qcm9wcykoQWRkRXhwZW5zZVBhZ2UpIiwiaW1wb3J0IHV1aWQgZnJvbSAndXVpZCdcblxuLy9BRERfRVhQRU5TRVxuZXhwb3J0IGNvbnN0IGFkZEV4cGVuc2UgPSAoXG4gICAgeyAvLyBkZWZhdWx0cyBhcmdzXG4gICAgICAgIGRlc2NyaXB0aW9uID0gJycsIG5vdGUgPSAnJywgYW1vdW50ID0gMCwgY3JlYXRlZEF0ID0gMFxuICAgIH0gPSB7fVxuICAgICkgPT4oe1xuICAgIHR5cGU6ICdBRERfRVhQRU5TRScsXG4gICAgZXhwZW5zZTp7XG4gICAgICAgIGlkOiB1dWlkKCksXG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICBub3RlLFxuICAgICAgICBhbW91bnQsXG4gICAgICAgIGNyZWF0ZWRBdFxuXG4gICAgfVxufSlcblxuLy9SRU1PVkVfRVhQRU5TRVxuZXhwb3J0IGNvbnN0IHJlbW92ZUV4cGVuc2UgPSAoe2lkfSA9IHt9KSA9Pih7XG4gICAgdHlwZTogJ1JFTU9WRV9FWFBFTlNFJyxcbiAgICBpZCAgXG59KVxuXG4vL0VESVRfRVhQRU5TRSAgXG5leHBvcnQgY29uc3QgZWRpdEV4cGVuc2UgPSAoaWQsIHVwZGF0ZXMpID0+KCB7XG4gICAgdHlwZTogJ0VESVRfRVhQRU5TRScsXG4gICAgaWQsXG4gICAgdXBkYXRlc1xufSkiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JyBcbmltcG9ydCBFeHBlbnNlRm9ybSBmcm9tICcuL0V4cGVuc2VGb3JtJyBcbmltcG9ydCB7ZWRpdEV4cGVuc2UsIHJlbW92ZUV4cGVuc2V9IGZyb20gJy4uL2FjdGlvbnMvZXhwZW5zZXMnXG5cbmV4cG9ydCBjbGFzcyBFZGl0RXhwZW5zZVBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnR7XG4gICAgb25TdWJtaXQgPSAoZXhwZW5zZSk9PntcbiAgICB0aGlzLnByb3BzLmVkaXRFeHBlbnNlKHRoaXMucHJvcHMuZXhwZW5zZS5pZCwgZXhwZW5zZSlcbiAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCgnLycpXG4gICAgfVxuICAgIG9uUmVtb3ZlID0gKCk9PntcbiAgICB0aGlzLnByb3BzLnJlbW92ZUV4cGVuc2Uoe2lkOnRoaXMucHJvcHMuZXhwZW5zZS5pZH0pXG4gICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goJy8nKVxuICAgIH1cbiAgICByZW5kZXIoKXtcbiAgICAgICAgcmV0dXJuKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgIDxFeHBlbnNlRm9ybSBcbiAgICAgICAgICAgICAgIGV4cGVuc2U9e3RoaXMucHJvcHMuZXhwZW5zZX1cbiAgICAgICAgICAgICAgIG9uU3VibWl0PXt0aGlzLm9uU3VibWl0fVxuICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5vblJlbW92ZX0+UmVtb3ZlPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIClcbiAgICB9XG59XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgcHJvcHMpID0+IHtcbiAgICByZXR1cm57XG4gICAgICAgIGV4cGVuc2U6IHN0YXRlLmV4cGVuc2VzLmZpbmQoKGV4cGVuc2UpPT57XG4gICAgICAgICAgICByZXR1cm4gZXhwZW5zZS5pZCA9PT0gcHJvcHMubWF0Y2gucGFyYW1zLmlkXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKT0+e1xuICAgIHJldHVybntcbiAgICAgICAgZWRpdEV4cGVuc2U6IChpZCwgZXhwZW5zZSkgPT4gZGlzcGF0Y2goZWRpdEV4cGVuc2UoaWQsIGV4cGVuc2UpKSxcbiAgICAgICAgcmVtb3ZlRXhwZW5zZTogKGRhdGEpID0+IGRpc3BhdGNoKHJlbW92ZUV4cGVuc2UoZGF0YSkpXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShFZGl0RXhwZW5zZVBhZ2UpIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5jb25zdCBIZWxwUGFnZSA9ICgpID0+e1xuICAgIHJldHVybihcbiAgICAgICAgPHA+SGVscDwvcD5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEhlbHBQYWdlIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtMaW5rfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuXG5jb25zdCBOb3RGb3VuZCA9ICgpID0+e1xuICAgIHJldHVybihcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxwPjQwNCBQYWdlIE5vdCBGb3VuZDwvcD5cbiAgICAgICAgICAgIDxMaW5rIHRvPVwiL1wiPkdvIEhvbWU8L0xpbms+XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgTm90Rm91bmQiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQge05hdkxpbmt9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5cbmNvbnN0IEhlYWRlciA9ICgpPT57XG4gICAgcmV0dXJuKFxuICAgICAgICA8aGVhZGVyPlxuICAgICAgICAgICAgPGgxPkV4cGVuc2lmeTwvaDE+XG4gICAgICAgICAgICA8TmF2TGluayBhY3RpdmVDbGFzc05hbWU9XCJpcy1hY3RpdmVcIiB0bz1cIi9cIiBleGFjdD17dHJ1ZX0+SG9tZSA8L05hdkxpbms+XG4gICAgICAgICAgICA8TmF2TGluayBhY3RpdmVDbGFzc05hbWU9XCJpcy1hY3RpdmVcIiB0bz1cIi9jcmVhdGVcIj5DcmVhdGUgPC9OYXZMaW5rPlxuICAgICAgICAgICBcbiAgICAgICAgPC9oZWFkZXI+XG4gICAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBIZWFkZXIiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQge0Jyb3dzZXJSb3V0ZXIsIFJvdXRlLCBTd2l0Y2gsIExpbmssIE5hdkxpbmt9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQgRXhwZW5zZURhc2hib2FyZFBhZ2UgZnJvbSAnLi4vY29tcG9uZW50cy9FeHBlbnNlRGFzaGJvYXJkUGFnZSdcbmltcG9ydCBBZGRFeHBlbnNlUGFnZSBmcm9tICcuLi9jb21wb25lbnRzL0FkZEV4cGVuc2VQYWdlJ1xuaW1wb3J0IEVkaXRFeHBlbnNlUGFnZSBmcm9tICcuLi9jb21wb25lbnRzL0VkaXRFeHBlbnNlUGFnZSdcbmltcG9ydCBIZWxwUGFnZSBmcm9tICcuLi9jb21wb25lbnRzL0hlbHBQYWdlJ1xuaW1wb3J0IE5vdEZvdW5kIGZyb20gJy4uL2NvbXBvbmVudHMvTm90Rm91bmQnXG5pbXBvcnQgSGVhZGVyIGZyb20gJy4uL2NvbXBvbmVudHMvSGVhZGVyJ1xuXG5cbmNvbnN0IEFwcFJvdXRlciA9ICgpID0+IHtcbiAgICByZXR1cm4oXG4gICAgICAgIDxCcm93c2VyUm91dGVyPlxuICAgIFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8SGVhZGVyIC8+XG4gICAgICAgICAgICAgICAgPFN3aXRjaD4gXG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgY29tcG9uZW50PXtFeHBlbnNlRGFzaGJvYXJkUGFnZX0gZXhhY3Q9e3RydWV9Lz5cbiAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9jcmVhdGVcIiBjb21wb25lbnQ9e0FkZEV4cGVuc2VQYWdlfSAvPlxuICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2VkaXQvOmlkXCIgY29tcG9uZW50PXtFZGl0RXhwZW5zZVBhZ2V9IC8+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvaGVscFwiIGNvbXBvbmVudD17SGVscFBhZ2V9IC8+XG4gICAgICAgICAgICAgICAgPFJvdXRlIGNvbXBvbmVudD17Tm90Rm91bmR9Lz5cbiAgICAgICAgICAgICAgICA8L1N3aXRjaD4gICBcbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICAgPC9Ccm93c2VyUm91dGVyPlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwUm91dGVyIiwiY29uc3QgZXhwZW5zZXNSZWR1Y2VyRGVmYXVsdFN0YXRlID0gW11cblxuY29uc3QgZXhwZW5zZXNSZWR1Y2VyID0gKHN0YXRlID0gZXhwZW5zZXNSZWR1Y2VyRGVmYXVsdFN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBzd2l0Y2goYWN0aW9uLnR5cGUpe1xuICAgICAgICBjYXNlICdBRERfRVhQRU5TRSc6XG4gICAgICAgICAgIHJldHVybiBbLi4uc3RhdGUsIGFjdGlvbi5leHBlbnNlXVxuICAgICAgICBjYXNlICdSRU1PVkVfRVhQRU5TRSc6XG4gICAgICAgICAgICByZXR1cm4gIHN0YXRlLmZpbHRlcigob2JqKT0+KGFjdGlvbi5pZCAhPT0gb2JqLmlkKSlcbiAgICAgICAgY2FzZSAnRURJVF9FWFBFTlNFJzpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5tYXAoKGV4cCk9PntcbiAgICAgICAgICAgICAgICBpZihleHAuaWQgPT09IGFjdGlvbi5pZCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybntcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmV4cCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmFjdGlvbi51cGRhdGVzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBleHBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZVxuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGV4cGVuc2VzUmVkdWNlciIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JyBcblxuXG5jb25zdCBmaWx0ZXJzUmVkdWNlckRlZmF1bHRTdGF0ZSA9IHtcbiAgICB0ZXh0OiAnJyxcbiAgICBzb3J0Qnk6ICdkYXRlJyxcbiAgICBzdGFydERhdGU6IG1vbWVudCgpLnN0YXJ0T2YoJ21vbnRoJyksXG4gICAgZW5kRGF0ZTogbW9tZW50KCkuZW5kT2YoJ21vbnRoJylcbn1cblxuY29uc3QgZmlsdGVyc1JlZHVjZXIgPSAoc3RhdGUgPSBmaWx0ZXJzUmVkdWNlckRlZmF1bHRTdGF0ZSwgYWN0aW9uKSA9PntcbiAgICBzd2l0Y2goYWN0aW9uLnR5cGUpe1xuICAgICAgICBjYXNlICdTRVRfVEVYVF9GSUxURVInOlxuICAgICAgICAgICAgcmV0dXJue1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHRleHQ6IGFjdGlvbi50ZXh0XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1NPUlRfQllfREFURSc6XG4gICAgICAgICAgICByZXR1cm57XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgc29ydEJ5OiAnZGF0ZSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnU09SVF9CWV9BTU9VTlQnOlxuICAgICAgICAgICAgcmV0dXJue1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHNvcnRCeTogJ2Ftb3VudCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnU0VUX1NUQVJUX0RBVEUnOlxuICAgICAgICAgICAgcmV0dXJue1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZTogYWN0aW9uLnN0YXJ0RGF0ZVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1NFVF9FTkRfREFURSc6XG4gICAgICAgICAgICByZXR1cm57XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgZW5kRGF0ZTogYWN0aW9uLmVuZERhdGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogXG4gICAgICAgIHJldHVybiBzdGF0ZVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZmlsdGVyc1JlZHVjZXIiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJ1xuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgQXBwUm91dGVyIGZyb20gJy4vcm91dGVycy9BcHBSb3V0ZXInXG5pbXBvcnQgY29uZmlndXJlU3RvcmUgZnJvbSAnLi9zdG9yZS9jb25maWd1cmVTdG9yZSdcbmltcG9ydCB7YWRkRXhwZW5zZX0gZnJvbSAnLi9hY3Rpb25zL2V4cGVuc2VzJ1xuaW1wb3J0IHtzZXRUZXh0RmlsdGVyfSBmcm9tICcuL2FjdGlvbnMvZmlsdGVycydcbmltcG9ydCBnZXRWaXNpYmxlRXhwZW5zZXMgZnJvbSAnLi9zZWxlY3RvcnMvZXhwZW5zZXMnXG5cbmltcG9ydCAnbm9ybWFsaXplLmNzcy9ub3JtYWxpemUuY3NzJ1xuaW1wb3J0ICcuL3N0eWxlcy9zdHlsZXMuc2NzcydcbmltcG9ydCAncmVhY3QtZGF0ZXMvbGliL2Nzcy9fZGF0ZXBpY2tlci5jc3MnXG5jb25zb2xlLmxvZygndGVzdCcpXG5cbmNvbnN0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoKVxuXG5jb25zdCBqc3ggPSAoXG4gICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICAgIDxBcHBSb3V0ZXIgLz5cbiAgICA8L1Byb3ZpZGVyPlxuICBcbilcblxuUmVhY3RET00ucmVuZGVyKGpzeCwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpKSIsImltcG9ydCB7Y3JlYXRlU3RvcmUsIGNvbWJpbmVSZWR1Y2Vyc30gZnJvbSAncmVkdXgnXG5pbXBvcnQgZXhwZW5zZXNSZWR1Y2VyIGZyb20gJy4uL3JlZHVjZXJzL2V4cGVuc2VzJ1xuaW1wb3J0IGZpbHRlcnNSZWR1Y2VyIGZyb20gJy4uL3JlZHVjZXJzL2ZpbHRlcnMnIFxuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gICAgY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcbiAgICAgICAgY29tYmluZVJlZHVjZXJzKHtcbiAgICAgICAgICAgIGV4cGVuc2VzOiBleHBlbnNlc1JlZHVjZXIsXG4gICAgICAgICAgICBmaWx0ZXJzOiBmaWx0ZXJzUmVkdWNlclxuICAgICAgICB9KSxcbiAgICAgICAgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18oKVxuICAgIClcblxuICAgIHJldHVybiBzdG9yZVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==